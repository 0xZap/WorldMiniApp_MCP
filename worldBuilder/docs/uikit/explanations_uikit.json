[
  {
    "file_path": "UI_KIT_OVERVIEW",
    "code_snippet": "UI Kit Overview",
    "explanation": "Below is a comprehensive overview of the WorldCoin Mini Apps UI Kit designed to help you understand its value, available components, and how to get started quickly.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. General Introduction & Design Philosophy\n\nThe WorldCoin Mini Apps UI Kit is built to streamline the development of secure, efficient, and visually appealing mini applications. It emphasizes consistency, modularity, and ease of use. With a clear design language and thoughtfully crafted components, this kit allows developers to build robust interfaces that align with WorldCoin\u2019s trusted brand while dramatically reducing development overhead. The kit is especially suited for rapid prototyping or production-grade applications where performance and user experience are critical.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. Available Components\n\nThe UI Kit comes with a wide range of components designed to meet most UI requirements. While the complete list may evolve with updates, key components include:\n\n\u2022 Button elements \u2013 Primary, secondary, and icon-based buttons  \n\u2022 Form inputs \u2013 Text fields, checkboxes, radio buttons, and select controls  \n\u2022 Navigation components \u2013 Menus, tabs, and breadcrumb navigation  \n\u2022 Alerts and notifications \u2013 Informational, warning, error, and success messages  \n\u2022 Modals and dialogs \u2013 Configurable popup components  \n\u2022 Typography components \u2013 Heading styles, paragraphs, and text formatting utilities  \n\u2022 Icons \u2013 A collection of scalable vector icons curated for consistency  \n\u2022 Layout containers \u2013 Grid systems, cards, and panels for content grouping  \n\u2022 Utility components \u2013 Loading spinners, progress bars, tooltips, etc.\n\n(This list represents the core components, and additional specialized components may be available in documentation or future releases.)\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n3. Basic Usage Information & Installation Instructions\n\nTo integrate the WorldCoin Mini Apps UI Kit into your project, follow these steps:\n\nA. Installation Command  \nOpen your terminal and install the kit using npm with the following command:\n  npm i @worldcoin/mini-apps-ui-kit-react@1.0.0-canary.4\n\nB. Importing Critical CSS  \nOnce installed, it is imperative to import the CSS file for proper styling. Ensure that you include the following import statement in your layout.tsx or main component file:\n  import \"@worldcoin/mini-apps-ui-kit-react/styles.css\";\n\nThis CSS import is critical for the components to display correctly, as it contains all necessary style rules, layouts, and responsive design settings used by the kit.\n\nC. Basic Component Usage  \nAfter installation and CSS inclusion, you can start using the UI components. For example, to use a button component, import it into your file and include it in your JSX:\n  import { Button } from \"@worldcoin/mini-apps-ui-kit-react\";\n  // Usage within a React component:\n  function MyComponent() {\n    return <Button variant=\"primary\">Click Me</Button>;\n  }\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n4. Best Practices for Using the UI Kit\n\n\u2022 Always import the CSS file first in your layout or root component to avoid styling issues.  \n\u2022 Stick to the standard component APIs provided in the kit to ensure consistency.  \n\u2022 Use the provided design tokens and theme settings for customization, if available, to maintain visual consistency with WorldCoin\u2019s brand.  \n\u2022 Regularly update the kit to keep up with latest improvements and bug fixes.  \n\u2022 Validate responsiveness by testing components across various devices and screen sizes.  \n\u2022 Refer to the official documentation for advanced usage tips and configuration options.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nIn Summary\n\nThe WorldCoin Mini Apps UI Kit is a comprehensive toolset aimed at simplifying UI development within mini apps, assuring both great performance and consistent design. By installing the kit using the specified npm command and ensuring the mandatory inclusion of the CSS file, you\u2019ll be well on your way to creating outstanding user interfaces. Enjoy building with confidence knowing that all primary components and best practices have been considered for an optimal development experience."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BulletListItem/BulletListItem.tsx",
    "code_snippet": "export interface BulletListItemProps extends ComponentProps<\"div\"> {\n  children?: ReactNode;\n  bulletPoint: ReactNode;\n}",
    "explanation": "This code defines a TypeScript interface (BulletListItemProps) intended for a bullet list item component. Here\u2019s a breakdown:\n\n1. What It Represents:\n\u2003\u2022 BulletListItemProps extends the default props for a div (ComponentProps<\"div\">), so any standard div property (like className, id, etc.) is available.\n\u2003\u2022 It requires a bulletPoint prop (of type ReactNode) that represents the bullet (or icon) for the list item.\n\u2003\u2022 It also supports optional children (ReactNode) which would typically be the content accompanying the bullet.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 You would build a BulletListItem component that uses this interface for its props.\n\u2003\u2022 The component will render a container (div) that displays the provided bulletPoint and the children.\n\u2003\u2022 Example usage in your application might look like this:\n\n-------------------------------------------------------\nimport React from 'react';\nimport { BulletListItem } from '@worldcoin/mini-apps-ui-kit-react';\n\ninterface BulletListItemProps extends React.ComponentProps<'div'> {\n  children?: React.ReactNode;\n  bulletPoint: React.ReactNode;\n}\n\nexport const BulletListItem: React.FC<BulletListItemProps> = ({ bulletPoint, children, ...rest }) => (\n  <div {...rest} style={{ display: 'flex', alignItems: 'flex-start' }}>\n    <span style={{ marginRight: 8 }}>{bulletPoint}</span>\n    <div>{children}</div>\n  </div>\n);\n\n// Usage in a larger component:\nconst App = () => (\n  <div>\n    <BulletListItem bulletPoint={<span>\u2022</span>} className=\"my-bullet-item\">\n      First item content\n    </BulletListItem>\n    <BulletListItem bulletPoint={<span>\u2022</span>}>\n      Second item content\n    </BulletListItem>\n  </div>\n);\n\nexport default App;\n-------------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 By extending ComponentProps<\"div\">, the BulletListItem component is more flexible and can accept native HTML attributes like id, style, or className.\n\u2003\u2022 Use semantic HTML if possible; if you\u2019re creating a list, consider wrapping these items in an unordered list (<ul>) and using dedicated list items (<li>) for better accessibility. If a div is preferred for styling or flexibility, ensure proper ARIA roles are provided.\n\u2003\u2022 Validate prop types and document usage so that team members know the bulletPoint is required.\n\u2003\u2022 Remember that because bulletPoint accepts any ReactNode, you have freedom to customize its appearance, but ensure consistency in your UI.\n\nThis concise explanation and example should help you integrate and extend the BulletListItem in your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BulletListItem/BulletListItem.tsx",
    "code_snippet": "export const BulletListItem = forwardRef<HTMLDivElement, BulletListItemProps>(\n  ({ children, className, bulletPoint, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={cn(\"grid grid-cols-[auto_1fr] gap-x-3 items-center\", className)}\n        {...props}\n      >\n        {bulletPoint}\n        <Typography className=\"text-gray-500\">{children}</Typography>\n      </div>\n    );\n  },\n);\n\nBulletListItem.displayName = \"BulletListItem\";",
    "explanation": "This component is a custom list item designed to display a bullet (or icon) alongside text. Here\u2019s a concise breakdown:\n\n1. What it does or represents:\n   \u2022 The BulletListItem component is a React functional component that uses forwardRef to pass a ref through to the underlying div.\n   \u2022 It creates a grid layout with two columns: one for the bullet point and one for the text.\n   \u2022 The component accepts children (typically text or other elements) rendered inside a Typography component (styled with a gray color), a bulletPoint prop (which can be any valid React node like an icon or custom element), and an optional className for additional styling.\n   \u2022 The cn helper (commonly a classnames utility) is used to merge the default grid-related classes with any additional classes provided via the className prop.\n\n2. How to use it in a larger application:\n   \u2022 Import the component and any others (like Typography or Button) from '@worldcoin/mini-apps-ui-kit-react'.\n   \u2022 Provide the bulletPoint and text content as children. You might also pass custom classes if needed.\n   \u2022 For example, if you have a list of items and want to embed icons as the bullet:\n   \n     Example usage:\n     -----------------------------------------------------\n     import React from 'react';\n     import { BulletListItem, Typography, Button } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     const MyList = () => {\n       return (\n         <div>\n           <BulletListItem bulletPoint={<span>\u2022</span>}>\n             This is the first bullet list item.\n           </BulletListItem>\n           <BulletListItem bulletPoint={<span>\u2022</span>}>\n             This is the second bullet list item.\n           </BulletListItem>\n           \n           {/* Typical usage within a larger component */}\n           <Button onClick={() => alert('Button clicked!')}>\n             Click Me\n           </Button>\n         </div>\n       );\n     };\n     \n     export default MyList;\n     -----------------------------------------------------\n   \u2022 In the example above, each BulletListItem is given a simple bullet (a span containing a bullet character) and some text content, making up a list.\n\n3. Best practices or limitations:\n   \u2022 Using forwardRef is a best practice for library components as it allows parent components to access the underlying DOM node if needed.\n   \u2022 The component is designed for flexibility. However, ensure that the bulletPoint prop clearly defines a valid React node; otherwise, the bullet space might be empty.\n   \u2022 Using utility-first CSS (like Tailwind CSS, indicated by the class names) makes it easy to extend or override styles. Just be cautious when merging additional classes via the className prop.\n   \u2022 The displayName assignment helps with debugging and developer tools, making it clear what component is being rendered.\n\nOverall, BulletListItem is ideal for creating lists with custom bullet or icon elements, and it integrates neatly into larger apps using the '@worldcoin/mini-apps-ui-kit-react' import convention."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroupItem.tsx",
    "code_snippet": "export interface RadioGroupItemProps extends Omit<RadixRadioGroupItemProps, \"className\"> {\n  /**\n   * The value of the radio group item.\n   */\n  value: string;\n  /**\n   * When true, prevents the user from interacting with the radio item.\n   */\n  disabled?: boolean;\n}",
    "explanation": "1. Overview  \nThis code defines a TypeScript interface named RadioGroupItemProps used for a radio button within a radio group. It extends the properties provided by the underlying Radix UI component (RadixRadioGroupItemProps) while omitting the \"className\" property so that styling is likely handled internally or via a predefined style system. The interface specifies two main properties:  \n\u2003\u2022 value (string): Represents the unique value associated with the radio item.  \n\u2003\u2022 disabled (optional boolean): Determines whether the radio item is non-interactive.\n\n2. How to Use It in a Larger Application  \nThe RadioGroupItemProps interface is usually implemented in a radio button component. In a larger application, you would create a radio group using related components such as RadioGroup and RadioGroupItem. When using these from the '@worldcoin/mini-apps-ui-kit-react' package, your code might look like this:\n\n-------------------------------------------------------\nimport React, { useState } from \"react\";\nimport { RadioGroup, RadioGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyRadioGroupComponent = () => {\n  const [selectedValue, setSelectedValue] = useState(\"\");\n\n  return (\n    <RadioGroup value={selectedValue} onChange={setSelectedValue}>\n      <RadioGroupItem value=\"option1\">\n        Option 1\n      </RadioGroupItem>\n      <RadioGroupItem value=\"option2\" disabled>\n        Option 2\n      </RadioGroupItem>\n      <RadioGroupItem value=\"option3\">\n        Option 3\n      </RadioGroupItem>\n    </RadioGroup>\n  );\n};\n\nexport default MyRadioGroupComponent;\n-------------------------------------------------------\n\nIn this example:  \n\u2003\u2022 We imported RadioGroup and RadioGroupItem from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 The RadioGroup manages the selected value and handles changes.  \n\u2003\u2022 Each RadioGroupItem uses the defined props (value and, optionally, disabled) and is rendered as part of the group.\n\n3. Best Practices and Limitations  \n\u2003\u2022 Ensure that each RadioGroupItem has a unique value for correct identification within the group.  \n\u2003\u2022 Use disabled sparingly to avoid confusing users; indicate clearly why an option might be disabled.  \n\u2003\u2022 Keep styling concerns separated if className is omitted intentionally; rely on the UI kit\u2019s default styling or additional components for custom styles.  \n\u2003\u2022 When extending components from third-party libraries (such as Radix UI), be cautious with property conflicts. Omitting properties like className is one way to avoid unintended style overrides.  \n\nOverall, this interface enables the creation of standardized, accessible radio buttons that integrate well with larger React applications using the Worldcoin mini-apps UI kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroupItem.tsx",
    "code_snippet": "export const RadioGroupItem = forwardRef<HTMLButtonElement, RadioGroupItemProps>(\n  ({ value, disabled, ...rest }, ref) => {\n    return (\n      <RadioGroupPrimitive.Item\n        ref={ref}\n        value={value}\n        className=\"size-6 rounded-full border-[0.09375rem] transition-all data-[state=checked]:border-gray-900 data-[state=unchecked]:border-gray-200 data-[state=checked]:bg-gray-900 data-[state=unchecked]:bg-transparent disabled:cursor-not-allowed disabled:opacity-50\"\n        disabled={disabled}\n        {...rest}\n      >\n        <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n          <Tick className=\"text-gray-0\" />\n        </RadioGroupPrimitive.Indicator>\n      </RadioGroupPrimitive.Item>\n    );\n  },\n);\n\nRadioGroupItem.displayName = \"RadioGroupItem\";",
    "explanation": "1. What It Does:\n\u2022 The RadioGroupItem component represents a single selectable item within a radio group.  \n\u2022 It renders an interactive button based on a RadioGroup primitive item and uses customizable styling classes (using Tailwind CSS) to indicate whether the item is checked, unchecked, or disabled.  \n\u2022 An indicator (a Tick icon) is displayed when the item is selected.  \n\u2022 The component uses React\u2019s forwardRef to allow parent components to access the underlying HTMLButtonElement.\n\n2. How to Use It in a Larger Application:\n\u2022 Import the component from the UI kit:  \n\u2003\u2003import { RadioGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\u2022 When using RadioGroupItem, you typically include it as a child within a RadioGroup (or similar container) that handles the state and selection logic.  \n\u2022 Examples of props include:\n\u2003\u2003\u2013 value: the unique value for the radio item.\n\u2003\u2003\u2013 disabled: a boolean to disable user interaction.\n\u2022 Example usage in a parent component:\n\u2003\u2003------------------------------------------------\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { RadioGroup, RadioGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const PaymentMethodSelector = () => {\n\u2003\u2003  const [selected, setSelected] = useState('credit-card');\n\n\u2003\u2003  return (\n\u2003\u2003    <RadioGroup value={selected} onValueChange={setSelected}>\n\u2003\u2003      <RadioGroupItem value=\"credit-card\" />\n\u2003\u2003      <RadioGroupItem value=\"paypal\" disabled />\n\u2003\u2003      <RadioGroupItem value=\"bank-transfer\" />\n\u2003\u2003    </RadioGroup>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default PaymentMethodSelector;\n\u2003\u2003------------------------------------------------\n\u2022 In this setup, RadioGroup supplies the context while each RadioGroupItem handles its own interaction and styling.\n\n3. Best Practices and Limitations:\n\u2022 Best Practices:\n\u2003\u2003\u2013 Use forwardRef to maintain proper ref forwarding for integration with other libraries or focus management.\n\u2003\u2003\u2013 Ensure that the styling classes (e.g., Tailwind CSS classes) are consistent with your project's design system.\n\u2003\u2003\u2013 Provide accessible labels and manage keyboard interactions if extending the component.\n\u2003\u2003\u2013 Use the component within a corresponding RadioGroup container to manage group state effectively.\n\u2022 Limitations:\n\u2003\u2003\u2013 The component\u2019s styles are hardcoded with specific CSS classes (using Tailwind) that might require customization if your project\u2019s design differs.\n\u2003\u2003\u2013 It depends on the availability of the RadioGroupPrimitive and Tick components from the UI kit, so ensure these are properly set up in your project.\n\u2003\u2003\u2013 Handling complex radio group states may require additional logic outside the scope of this single component.\n\nThis concise explanation should help you understand where and how to implement RadioGroupItem in your application using the '@worldcoin/mini-apps-ui-kit-react' library."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroup.tsx",
    "code_snippet": "export interface RadioGroupProps\n  extends Omit<RadixRadioGroupProps, \"onValueChange\" | \"onChange\" | \"className\"> {\n  /**\n   * The value of the radio item that should be checked when initially rendered.\n   * Use when you do not need to control the state of the radio items.\n   */\n  defaultValue?: string;\n  /**\n   * The controlled value of the radio item to check.\n   * Should be used in conjunction with onChange.\n   */\n  value?: string;\n  /**\n   * Callback function that is triggered when the value of the radio group changes.\n   * @param value - The new value of the selected radio group item.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * When true, prevents the user from interacting with radio items.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The orientation of the radio group.\n   * @default \"vertical\"\n   */\n  orientation?: \"horizontal\" | \"vertical\";\n  /**\n   * The name of the group. Submitted with its owning form as part of a name/value pair.\n   */\n  name?: string;\n}\n\nconst radioGroupVariants = cva(`flex disabled:cursor-not-allowed disabled:opacity-20`, {\n  variants: {\n    orientation: {\n      vertical: \"flex-col\",\n      horizontal: \"flex-row\",\n    },\n  },\n  defaultVariants: {\n    orientation: \"vertical\",\n  },\n});",
    "explanation": "Below is a concise explanation of the provided RadioGroup component code:\n\n1. What it does or represents:\n\u2003\u2022 This code defines a RadioGroupProps interface that extends a Radix UI radio group component\u2019s props while omitting some properties (specifically onValueChange, onChange, and className) to provide a simpler or customized API.\n\u2003\u2022 It lets you render a group of radio buttons with configurable default and controlled values, an onChange callback, disability settings, orientation (horizontal or vertical), and a group name for form submissions.\n\u2003\u2022 The radioGroupVariants function utilizes a utility (likely class-variance-authority) to conditionally apply CSS classes based on the orientation variant.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the RadioGroup (and likely its child Radio items) from '@worldcoin/mini-apps-ui-kit-react'.\n\u2003\u2022 Use the component to wrap a list of radio items. You can declare whether a group is uncontrolled (using defaultValue) or controlled (using value with an onChange callback).\n\u2003\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003---------------------------------------------------\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { RadioGroup, RadioItem } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const MyForm = () => {\n\u2003\u2003  const [selectedValue, setSelectedValue] = useState('option1');\n\u2003\u2003\n\u2003\u2003  const handleChange = (value: string) => {\n\u2003\u2003    // update state with the new value\n\u2003\u2003    setSelectedValue(value);\n\u2003\u2003  };\n\u2003\u2003\n\u2003\u2003  return (\n\u2003\u2003    <form>\n\u2003\u2003      <RadioGroup\n\u2003\u2003        name=\"myOptions\"\n\u2003\u2003        value={selectedValue}\n\u2003\u2003        onChange={handleChange}\n\u2003\u2003        orientation=\"horizontal\" // or \"vertical\"\n\u2003\u2003      >\n\u2003\u2003        <RadioItem value=\"option1\">Option 1</RadioItem>\n\u2003\u2003        <RadioItem value=\"option2\">Option 2</RadioItem>\n\u2003\u2003        <RadioItem value=\"option3\">Option 3</RadioItem>\n\u2003\u2003      </RadioGroup>\n\u2003\u2003    </form>\n\u2003\u2003  );\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default MyForm;\n\u2003\u2003---------------------------------------------------\n\u2003\u2003\n\u2003\u2022 In the example above, the state is managed externally and passed into the controlled radio group.\n\n3. Best practices or limitations:\n\u2003\u2022 Use controlled components (value with onChange) when you need to immediately react to changes or perform validations. Use defaultValue when you need a starting value without external management.\n\u2003\u2022 Ensure that radioGroupVariants\u2019 styling fits within your design system. The disabled state styling (cursor-not-allowed, opacity-20) is applied by default when disabled is true.\n\u2003\u2022 Remember to forward other props if you create a customized RadioGroup component that wraps this code.\n\u2003\u2022 Use the standardized import path ('@worldcoin/mini-apps-ui-kit-react') in all your project files for consistency.\n\nThis explanation and example should help you integrate the RadioGroup into your larger application effectively."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroup.tsx",
    "code_snippet": "export const RadioGroup = forwardRef<HTMLDivElement, RadioGroupProps>(\n  (\n    {\n      defaultValue,\n      onChange: onValueChange,\n      orientation = \"vertical\",\n      disabled = false,\n      name,\n      ...rest\n    },\n    ref,\n  ) => {\n    return (\n      <RadioGroupPrimitive.Root\n        ref={ref}\n        defaultValue={defaultValue}\n        onValueChange={onValueChange}\n        className={radioGroupVariants({ orientation })}\n        disabled={disabled}\n        orientation={orientation}\n        name={name}\n        {...rest}\n      />\n    );\n  },\n);\n\nRadioGroup.displayName = \"RadioGroup\";",
    "explanation": "1. Overview  \n\u2022 The RadioGroup component is a React functional component that renders a customizable group of radio buttons. It wraps a lower-level primitive (RadioGroupPrimitive.Root) to provide additional styling and behavior based on the received props. This component supports forwarding refs, accepts a default value for an uncontrolled component, and allows you to control its value via an onChange handler. The orientation (vertical or horizontal), disabled state, and name attributes can also be specified, while additional props are passed along via the spread operator.\n\n2. How to Use It in a Larger Application  \n\u2022 Import the component directly from the UI kit package as shown below:  \n\u2003\u2003\n\u2003\u2003import { RadioGroup, Radio } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2022 Use the RadioGroup as a container for individual Radio items. Provide a defaultValue to set the initially selected radio button and an onChange handler to update your state. The orientation prop can be set to \"vertical\" or \"horizontal\" according to your design. For example:\n\n\u2003\u2003--------------------------------------------------------------\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { RadioGroup, Radio } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function Example() {\n\u2003\u2003  const [selectedOption, setSelectedOption] = useState('option1');\n    \n\u2003\u2003  return (\n\u2003\u2003    <RadioGroup\n\u2003\u2003      name=\"exampleRadios\"\n\u2003\u2003      defaultValue=\"option1\"\n\u2003\u2003      onChange={(value) => setSelectedOption(value)}\n\u2003\u2003      orientation=\"vertical\"\n\u2003\u2003    >\n\u2003\u2003      <Radio value=\"option1\">Option 1</Radio>\n\u2003\u2003      <Radio value=\"option2\">Option 2</Radio>\n\u2003\u2003      <Radio value=\"option3\">Option 3</Radio>\n\u2003\u2003    </RadioGroup>\n\u2003\u2003  );\n\u2003\u2003}\n\n\u2003\u2003export default Example;\n\u2003\u2003--------------------------------------------------------------\n\n3. Best Practices and Limitations  \n\u2022 Best Practices:  \n\u2003\u2003- Use ref forwarding to access the underlying DOM element if needed, which is already enabled in this component.  \n\u2003\u2003- Utilize the displayName (\"RadioGroup\") for easier debugging in React DevTools.  \n\u2003\u2003- When styling, note that the className is generated based on the orientation prop using radioGroupVariants. Ensure your custom styles don\u2019t conflict with these generated classes.  \n\u2003\u2003- Decide between using defaultValue for uncontrolled behavior or managing component state externally for controlled behavior\u2014this component is designed with defaultValue and onChange for flexibility.\n\n\u2022 Limitations:  \n\u2003\u2003- If you need more advanced control or customization (for example, custom animations or error states), you might need to extend this component further.  \n\u2003\u2003- The component relies on RadioGroupPrimitive.Root, so any limitations or behaviors of that primitive will affect this component as well.  \n\u2003\u2003- Ensure consistency in prop names and types especially when integrating with form libraries, as the abstraction expects a specific structure for radio groups.\n\nThis explanation outlines what the RadioGroup component is, how to implement it within a larger application, and highlights practical considerations when integrating and extending its functionality."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Token/Token.tsx",
    "code_snippet": "export const Token: React.FC<TokenProps> = ({\n  value,\n  size = 40,\n  variant = \"color\",\n  disabled = false,\n}) => {\n  const Icon = tokens[value];\n  return <Icon width={size} height={size} disabled={disabled} variant={variant} />;\n};",
    "explanation": "This component, Token, is a UI element designed to display a specific token icon. It does so by selecting an appropriate icon component from a tokens lookup (likely a dictionary or an object mapping token names/values to icon components) based on the provided \"value\" prop. It then renders that icon with configurable properties like size, variant styling, and a disabled state.\n\n1. What this component does or represents:\n\u2022 Token takes in a token identifier (the value prop) and looks up the corresponding icon component from a tokens registry.\n\u2022 It supports customization through props such as size (defaulting to 40 pixels), variant (a styling option with a default of \"color\"), and disabled (a boolean flag to alter display state).\n\u2022 The identified icon component is rendered with the provided width, height, disabled state, and style variant.\n\n2. How to use it in a larger application:\nTo use the Token component, import it from '@worldcoin/mini-apps-ui-kit-react'. Then, you can render it anywhere in your application, passing the required token identifier along with any optional props for customization.\n\nTypical usage example:\n------------------------------------------------------------\nimport React from 'react';\nimport { Token } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyApp = () => {\n  return (\n    <div>\n      {/* Render a token icon with default size and variant */}\n      <Token value=\"bitcoin\" />\n\n      {/* Render a larger, monochrome version of a token icon */}\n      <Token value=\"ethereum\" size={60} variant=\"monochrome\" />\n\n      {/* Render a disabled state icon */}\n      <Token value=\"litecoin\" disabled={true} />\n    </div>\n  );\n};\n\nexport default MyApp;\n------------------------------------------------------------\n\nProps explanation:\n\u2022 value: (required) Identifier for the token. It must match one of the keys in the tokens lookup.\n\u2022 size: (optional) Number representing the icon's width and height in pixels (default is 40).\n\u2022 variant: (optional) Controls the visual style of the icon (default is \"color\").\n\u2022 disabled: (optional) Boolean to indicate if the icon should appear in a disabled state (default is false).\n\n3. Best practices or limitations:\n\u2022 Ensure that the value prop corresponds to a valid key in the tokens registry. Otherwise, the component may either render nothing or cause an error.\n\u2022 Providing default values for optional props (size, variant, and disabled) makes the component more robust and easier to use without requiring all props on every instance.\n\u2022 When expanding the tokens registry, consider additional validations or fallback behaviors if an unknown token value is provided.\n\u2022 Keep your token icons consistent in design, so the variant prop works well across different tokens and meets the design requirements.\n\u2022 For scalability and maintainability, consider using TypeScript interfaces for props (TokenProps) to clearly document and enforce the types of each prop.\n\nBy following these guidelines, you can seamlessly integrate the Token component into your application for consistent, customizable token iconography, using imports from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Token/icons/utils.ts",
    "code_snippet": "export const getBackgroundClass = ({\n  disabled,\n  variant,\n}: {\n  disabled?: boolean;\n  variant?: TokenVariant;\n}) => (disabled ? \"fill-gray-350\" : variant === \"color\" ? \"fill-current\" : \"fill-gray-100\");",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What it does or represents:\n   \u2022 The function getBackgroundClass is a helper that returns a CSS class based on two input properties: disabled and variant.\n   \u2022 If disabled is true, it always returns \"fill-gray-350\" to presumably indicate a disabled or inactive style.\n   \u2022 If not disabled, then if variant equals \"color\", the helper returns \"fill-current\" (using the current color), otherwise, for any other variant it returns \"fill-gray-100\".\n\n2. How to use it in a larger application:\n   \u2022 The function can be used within other React components to dynamically assign CSS classes based on props.\n   \u2022 It is useful for styling SVG icons or other elements needing different fill colors depending on the state.\n   \u2022 Example usage in a component:\n   \n   Example Component Code:\n   -------------------------------------------------\n   import React from 'react';\n   // Even though getBackgroundClass is defined somewhere,\n   // When importing other UI components, follow the kit's import style:\n   import { Button } from '@worldcoin/mini-apps-ui-kit-react';  // example usage from our UI kit\n   \n   // Suppose getBackgroundClass is exported from our module; you can import it as:\n   import { getBackgroundClass } from '@worldcoin/mini-apps-ui-kit-react';\n   \n   type IconProps = {\n     disabled?: boolean;\n     variant?: 'color' | 'other';\n   };\n   \n   export const Icon: React.FC<IconProps> = ({ disabled, variant }) => {\n     // Retrieve the class based on props.\n     const backgroundClass = getBackgroundClass({ disabled, variant });\n     \n     return (\n       <svg className={backgroundClass} width=\"24\" height=\"24\">\n         <circle cx=\"12\" cy=\"12\" r=\"10\" />\n       </svg>\n     );\n   };\n   \n   // Typical usage within a larger app:\n   export const App: React.FC = () => {\n     return (\n       <div>\n         <h1>Example usage of Icon with different states</h1>\n         <Icon disabled variant=\"color\" />\n         <Icon variant=\"other\" />\n         <Button onClick={() => console.log('Button clicked!')}>Click me</Button>\n       </div>\n     );\n   };\n   -------------------------------------------------\n\n3. Best practices or limitations:\n   \u2022 Best Practices:\n     - Ensure prop types for disabled and variant are correctly validated (TypeScript helps with this).\n     - Use the helper function to avoid repeating conditional logic, making your components cleaner and more maintainable.\n     - Stick to clearly named CSS utility classes to ensure design consistency.\n   \u2022 Limitations:\n     - The function is relatively simple and only covers a specific set of classes; if additional styles or states are required, you\u2019ll need to extend or refactor the logic.\n     - It presumes that the CSS classes (e.g., \"fill-gray-350\", \"fill-current\", \"fill-gray-100\") are defined and available in your stylesheet. If using a CSS-in-JS solution, ensure these class names are managed appropriately.\n\nRemember: In all your files and examples, when importing any UI components (like Button, etc.), always use the package name (e.g., '@worldcoin/mini-apps-ui-kit-react') instead of relative paths."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Token/icons/utils.ts",
    "code_snippet": "export const getIconFillClass = ({\n  disabled,\n  variant,\n}: {\n  disabled?: boolean;\n  variant?: TokenVariant;\n}) => (disabled || variant === \"color\" ? \"fill-gray-0\" : \"fill-gray-900\");",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What the component (function) does or represents:\n\u2003\u2022 The snippet exports a function named getIconFillClass.\n\u2003\u2022 It computes and returns a CSS class string that determines an icon\u2019s fill color.\n\u2003\u2022 It takes an object with two optional properties: disabled (a boolean) and variant (of a TokenVariant type).\n\u2003\u2022 The logic is simple: if either the component is disabled or variant equals \"color\", it returns \"fill-gray-0\" (presumably a lighter or disabled fill). Otherwise, it returns \"fill-gray-900\" (a darker or enabled fill).\n\n2. How to use it in a larger application:\n\u2003\u2022 You would typically use this helper function inside your icon component or within any UI component that needs to dynamically set its color based on state or style variant.\n\u2003\u2022 In a component, you can import and call getIconFillClass to determine the correct CSS class for an icon before rendering.\n\u2003\u2022 Example usage in a React component:\n\n------------------------------------------------------------\nimport React from 'react';\nimport { getIconFillClass } from '@worldcoin/mini-apps-ui-kit-react';\nimport { Icon } from '@worldcoin/mini-apps-ui-kit-react';\n\ntype MyIconProps = {\n  disabled?: boolean;\n  variant?: 'color' | 'default';\n};\n\nexport const MyIcon: React.FC<MyIconProps> = ({ disabled, variant }) => {\n  const fillClass = getIconFillClass({ disabled, variant });\n  \n  return (\n    // Assuming Icon is a component that accepts a className prop for its styling.\n    <Icon className={fillClass} />\n  );\n};\n\n------------------------------------------------------------\n\u2003\u2022 In the example, MyIcon uses the getIconFillClass helper to conditionally set the icon fill color based on the passing props \"disabled\" and \"variant\".\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Make sure the TokenVariant (or accepted variant values) are well defined; using TypeScript to narrow possible options helps prevent runtime errors.\n\u2003\u2003\u2013 Use descriptive names for CSS classes so their purpose is immediately clear.\n\u2003\u2003\u2013 Ensure that any component using getIconFillClass is consistent with your design system so changes in one place propagate correctly.\n\u2003\u2003\u2013 Keep such helper functions separate so you can unit-test them independently.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The logic is very static; if requirements change (for example, more variants or different states), you will need to update the function.\n\u2003\u2003\u2013 The function assumes that only two states are important (disabled or having \"color\" variant) \u2014 if more conditional styling is needed, consider refactoring or generalizing the helper.\n\u2003\u2003\u2013 CSS class names like \"fill-gray-0\" and \"fill-gray-900\" are specific to your design tokens. Ensure that these classes exist in your stylesheet.\n\nBy following these guidelines, you can integrate getIconFillClass into your larger application effectively, ensuring consistent icon styling throughout your UI."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Token/icons/types.ts",
    "code_snippet": "export type TokenVariant = \"color\" | \"monochrome\";",
    "explanation": "This code defines a TypeScript type alias named TokenVariant. It restricts the allowed values to the literal strings \"color\" or \"monochrome\". This kind of type is typically used to ensure that any property or variable referring to the TokenVariant type only accepts one of these two specific values, offering type safety and clear expectations in the UI.\n\n1. What it represents:\n\u2003\u2022 TokenVariant represents a style or display variant, likely for a UI element that can appear in either a colorized or a monochrome format.\n\u2003\u2022 The two allowed values (\"color\" and \"monochrome\") might indicate different ways to render tokens, icons, or similar UI elements, ensuring consistency across your application.\n\n2. How to use it in a larger application:\n\u2003\u2022 You can use TokenVariant as a prop type for your custom UI components to control their appearance.\n\u2003\u2022 For example, imagine a Token component that accepts tokenVariant as a property. When using it, you would import other components from '@worldcoin/mini-apps-ui-kit-react' as needed.\n\u2003\u2022 Example usage:\n\n------------------------------------------------\nimport React from 'react';\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react';\n\ntype TokenProps = {\n  tokenVariant: \"color\" | \"monochrome\"; // or use TokenVariant if imported from a shared types file.\n};\n\n// A simple example component that uses the tokenVariant prop\nconst Token: React.FC<TokenProps> = ({ tokenVariant }) => {\n  return (\n    <div>\n      <p>The token is displayed in {tokenVariant} style.</p>\n      <Button>Click me</Button>\n    </div>\n  );\n};\n\n// Example of using the Token component in a larger application:\nconst App: React.FC = () => {\n  return (\n    <div>\n      <Token tokenVariant=\"color\" />\n      <Token tokenVariant=\"monochrome\" />\n    </div>\n  );\n};\n\nexport default App;\n------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 When defining union types like TokenVariant, use string literals to strictly constrain the prop values and reduce errors.\n\u2003\u2022 Document the expected behavior for each variant (what \"color\" vs \"monochrome\" should do) so that other developers understand how to use it effectively.\n\u2003\u2022 Limitations include that only \"color\" or \"monochrome\" can be used; if the design later requires additional variants, you'll need to update this type and adjust all relevant cases accordingly.\n\u2003\u2022 Always import related UI components from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and reduce path errors in your project structure.\n\nThis concise explanation helps integrate the TokenVariant type safely into a larger UI component ecosystem while adhering to proper component importing practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Token/icons/types.ts",
    "code_snippet": "export interface IconProps extends React.SVGProps<SVGSVGElement> {\n  /** Variant of the token icon (default: \"default\") */\n  variant?: TokenVariant;\n  /** Whether the token is disabled */\n  disabled?: boolean;\n}",
    "explanation": "1. What it does:\n\u2022 This code defines an interface called IconProps that extends the standard React properties for SVG elements (React.SVGProps<SVGSVGElement>).\n\u2022 It adds two additional optional properties:\n\u2003\u2013 variant?: A property that allows you to specify the visual style (or \u201ctoken\u201d style) of the icon. A default variant (\"default\") is implied.\n\u2003\u2013 disabled?: A boolean that indicates whether the icon should appear in a disabled state.\n\u2022 Essentially, it\u2019s used to type the props for an SVG-based icon component, ensuring that the icon can be rendered with built\u2010in support for standard SVG props as well as custom styling variations and state.\n\n2. How to use it in a larger application:\n\u2022 In a larger application, you\u2019d typically create or import an Icon component that utilizes this IconProps interface to ensure type safety and a consistent API.\n\u2022 Use the component by importing it from the UI kit package and passing the desired props. For example:\n\n----------------------------------------------------------\nimport React from 'react';\nimport { Icon } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      {/* Default variant icon */}\n      <Icon variant=\"default\" />\n\n      {/* Disabled icon example */}\n      <Icon variant=\"alternative\" disabled />\n    </div>\n  );\n};\n\nexport default MyComponent;\n----------------------------------------------------------\n\u2022 Here, the Icon component accepts standard SVG attributes (such as width, height, fill, etc.) along with the custom variant and disabled props defined in IconProps.\n\n3. Best practices or limitations:\n\u2022 Best Practices:\n\u2003\u2013 Extend from React.SVGProps to allow flexibility by supporting all inherent SVG properties.\n\u2003\u2013 Use clear, descriptive prop names and provide default behavior (e.g., default variant) to minimize errors.\n\u2003\u2013 When designing components that use IconProps, handle the disabled state properly (e.g., applying a grayed-out style or ignoring pointer events).\n\u2003\u2013 Document the available TokenVariant options somewhere accessible, so developers know which variants are accepted.\n\u2022 Limitations:\n\u2003\u2013 The interface assumes that variants follow a specific set of values (TokenVariant), so developers must ensure TokenVariant is well defined elsewhere.\n\u2003\u2013 Without additional context in this snippet, you need to ensure that the Icon component properly maps these props to UI behavior. Misalignment between expected SVG props and internal handling might lead to unexpected results.\n\u2003\u2013 The interface does not enforce a specific size or accessibility attributes (like aria-label), so additional care is needed to guarantee accessibility.\n\nBy following these guidelines, you can integrate SVG icons seamlessly into your larger application while leveraging the type safety and customizability provided by IconProps."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Tabs/types.ts",
    "code_snippet": "export interface TabsProps extends Omit<BaseToggleGroupProps, \"type\" | \"size\" | \"orientation\"> {\n  /**\n   * Whether the toggle group is disabled\n   */\n  disabled?: boolean;\n  /**\n   * Whether the toggle group should loop when navigating through items\n   */\n  loop?: boolean;\n  /**\n   * The default selected tab value\n   */\n  defaultValue?: string;\n  /**\n   * The selected tab value\n   */\n  value?: string;\n  /**\n   * Callback when tab selection changes\n   */\n  onValueChange?: (value: string) => void;\n  /**\n   * The tab items\n   */\n  children?: ReactNode;\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What It Represents:\n\u2003\u2022 The snippet defines an interface called TabsProps, which is used for a Tabs component.  \n\u2003\u2022 It extends a BaseToggleGroupProps interface (excluding the properties \"type\", \"size\", and \"orientation\") to inherit toggle group functionality.  \n\u2003\u2022 The interface includes additional properties such as:\n\u2003\u2003\u2013 disabled: to disable the entire tab group.  \n\u2003\u2003\u2013 loop: to enable looping navigation between tabs.  \n\u2003\u2003\u2013 defaultValue: for uncontrolled mode (initially selected tab).  \n\u2003\u2003\u2013 value: for controlled mode (the selected tab value).  \n\u2003\u2003\u2013 onValueChange: a callback which fires when the selected tab changes.  \n\u2003\u2003\u2013 children: the tab items (each potentially representing an individual tab).\n\u2003\u2022 Essentially, this interface shapes how a Tabs component should behave, supporting both controlled and uncontrolled patterns.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 First, import the Tabs component from the '@worldcoin/mini-apps-ui-kit-react' package:\n\u2003\u2003import { Tabs } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 You can use the Tabs component by providing the appropriate props. For example, you can choose to use it in controlled mode by managing the selected tab via state, or in uncontrolled mode by providing a defaultValue.\n\u2003\u2022 Example usage in controlled mode:\n\u2003\u2003------------------------------------------------------------\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { Tabs } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const App = () => {\n\u2003\u2003\u2003 const [activeTab, setActiveTab] = useState('tab1');\n\n\u2003\u2003\u2003 return (\n\u2003\u2003\u2003\u2003 <Tabs\n\u2003\u2003\u2003\u2003\u2003 value={activeTab}\n\u2003\u2003\u2003\u2003\u2003 onValueChange={(newValue) => setActiveTab(newValue)}\n\u2003\u2003\u2003\u2003\u2003 disabled={false}\n\u2003\u2003\u2003\u2003\u2003 loop={true}\n\u2003\u2003\u2003\u2003 >\n\u2003\u2003\u2003\u2003\u2003 {/* In a real implementation, each child could be a TabItem component */}\n\u2003\u2003\u2003\u2003\u2003 <div value=\"tab1\">Tab 1 Content</div>\n\u2003\u2003\u2003\u2003\u2003 <div value=\"tab2\">Tab 2 Content</div>\n\u2003\u2003\u2003\u2003 </Tabs>\n\u2003\u2003\u2003 );\n\u2003\u2003};\n\n\u2003\u2003export default App;\n\u2003\u2003------------------------------------------------------------\n\u2003\u2022 If not controlling the tab selection externally, you can use defaultValue:\n\u2003\u2003------------------------------------------------------------\n\u2003\u2003<Tabs defaultValue=\"tab1\" loop={true}>\n\u2003\u2003\u2003 {/* children representing tab items */}\n\u2003\u2003</Tabs>\n\u2003\u2003------------------------------------------------------------\n\u2003\u2022 This component is part of a UI kit that allows for consistent styling and behavior across your application.\n\n3. Best Practices and Limitations:\n\u2003\u2022 When using the Tabs component, clearly decide if you need controlled or uncontrolled behavior:\n\u2003\u2003\u2013 For controlled behavior, always pass both the value and the onValueChange handler.  \n\u2003\u2003\u2013 For uncontrolled usage, use defaultValue.\n\u2003\u2022 Make sure the children (tab items) uniquely identify each tab (using values) so that the selection logic works as expected.  \n\u2003\u2022 Ensure accessibility by providing proper roles and labels within the tab items \u2013 check if the underlying component handles ARIA attributes or if you need to add them.  \n\u2003\u2022 Be mindful that certain properties from BaseToggleGroupProps (like type, size, and orientation) are intentionally omitted, so if you need that functionality, you may have to implement or extend it separately.  \n\u2003\u2022 Follow consistent UI patterns as provided by the '@worldcoin/mini-apps-ui-kit-react' package to guarantee style and behavioral coherency across different components.\n\nThis explanation should help you understand the purpose of the Tabs component, how to integrate it into a broader application, and what to consider while using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Tabs/types.ts",
    "code_snippet": "export interface TabItemProps extends Omit<BaseToggleGroupItemProps, \"className\" | \"children\"> {\n  /**\n   * The icon to display\n   */\n  icon: ReactNode;\n  /**\n   * The icon to display when the tab item is active\n   */\n  altIcon?: ReactNode;\n  /**\n   * The label text\n   */\n  label?: string;\n  /**\n   * Whether the tab item is disabled\n   */\n  disabled?: boolean;\n  /**\n   * The value of the tab item\n   */\n  value: string;\n}",
    "explanation": "Below is a concise explanation covering what the component represents, how to use it, and some best practices:\n\n1. What This Component Does or Represents:\n\u2003\u2022 The code defines an interface named TabItemProps that specifies the properties for a tab item component. This component is intended to serve as an individual tab within a toggle-like group (likely within a tabbed interface).  \n\u2003\u2022 It extends BaseToggleGroupItemProps (excluding \"className\" and \"children\"), ensuring it inherits essential toggle group functionality while enforcing a standardized interface for each tab item.  \n\u2003\u2022 Key properties include:\n\u2003\u2003\u2013 icon: The primary icon shown for the tab.\n\u2003\u2003\u2013 altIcon: An alternative icon shown when the tab is active.\n\u2003\u2003\u2013 label: An optional text label displayed with the icon.\n\u2003\u2003\u2013 disabled: A boolean to control whether the tab item is interactable.\n\u2003\u2003\u2013 value: A unique string identifier for the tab, used to manage selection.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 In a larger application, this TabItem can be used as part of a tabbed navigation or toggle group component. Typically, you\u2019ll have a parent component (like TabGroup or ToggleGroup) that renders multiple TabItems based on the TabItemProps interface.  \n\u2003\u2022 Usage Example:\n\u2003\u2003\u2013 Import the necessary components from the official UI kit package:\n\u2003\u2003\u2003import { TabGroup, TabItem } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\u2013 Then, use the TabItem inside a TabGroup to construct your tab interface.\n\nExample Code:\n------------------------------------------------------------\nimport React from 'react';\nimport { TabGroup, TabItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyTabs = () => {\n  return (\n    <TabGroup defaultValue=\"tab1\">\n      <TabItem \n        value=\"tab1\"\n        icon={<span>\ud83c\udfe0</span>}\n        altIcon={<span style={{ color: 'blue' }}>\ud83c\udfe0</span>}\n        label=\"Home\"\n      />\n      <TabItem \n        value=\"tab2\"\n        icon={<span>\ud83d\udd0d</span>}\n        altIcon={<span style={{ color: 'blue' }}>\ud83d\udd0d</span>}\n        label=\"Search\"\n      />\n      <TabItem \n        value=\"tab3\"\n        icon={<span>\u2699\ufe0f</span>}\n        altIcon={<span style={{ color: 'blue' }}>\u2699\ufe0f</span>}\n        label=\"Settings\"\n        disabled={true}\n      />\n    </TabGroup>\n  );\n};\n\nexport default MyTabs;\n------------------------------------------------------------\n\u2003\u2022 This example demonstrates how you create a tabbed interface by defining multiple TabItem components with unique values and icons.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Ensure each TabItem\u2019s value is unique so that the TabGroup can correctly manage state and active tab selection.  \n\u2003\u2022 Provide accessible labels (label property) for each tab item to improve usability for screen readers.  \n\u2003\u2022 Use the disabled prop to effectively manage when user interaction should be prevented.  \n\u2003\u2022 Keep your icons and altIcons consistent to avoid visual confusion when toggling between inactive and active states.  \n\u2003\u2022 Since the component extends BaseToggleGroupItemProps (omitting className and children), be mindful that custom styling might need to be applied at the parent level or via alternative mechanisms provided by the UI kit.\n\u2003\u2022 The interface design assumes that the parent component handles layout and state management (e.g. active tab selection), so ensure your TabGroup component is implemented accordingly.\n\nUsing these guidelines, you can effectively integrate and extend the TabItem component within your larger application while following UI consistency and accessibility best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/WalletAddressField/WalletAddressField.tsx",
    "code_snippet": "export interface WalletAddressFieldProps\n  extends Omit<\n    InputProps,\n    \"startAdornment\" | \"startAdornmentWidth\" | \"endAdornment\" | \"endAdornmentWidth\"\n  > {\n  /**\n   * If true, the input will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the input will display in a valid state with success styling\n   */\n  isValid?: boolean;\n  /**\n   * Label for the input\n   * @default \"Enter wallet address\"\n   */\n  label?: string;\n  /**\n   * Label for the paste button\n   * @default \"Paste\"\n   */\n  pasteButtonLabel?: string;\n}",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What this component does or represents:\n\u2003\u2022 The code defines a TypeScript interface named WalletAddressFieldProps meant to be used with a wallet address input field component.  \n\u2003\u2022 It extends a base set of input properties (InputProps) but purposely removes any properties related to adornments (start/end adornment and their widths) so that these aspects are controlled internally by the component.  \n\u2003\u2022 Additional optional properties include:\n\u2003\u2003\u2013 error: To indicate when the input should show error styling.\n\u2003\u2003\u2013 isValid: To indicate when the input should present success styling.\n\u2003\u2003\u2013 label: A customizable label for the input (defaults to \"Enter wallet address\").\n\u2003\u2003\u2013 pasteButtonLabel: A customizable label for a paste button (defaults to \"Paste\").\n\u2003\u2022 In essence, it represents a specialized input field designed for wallet addresses with built-in support for validation and a paste functionality.\n\n2. How to use it in a larger application:\n\u2003\u2022 To use this component, you\u2019d typically import the WalletAddressField component (assuming it\u2019s exported alongside its props) from the '@worldcoin/mini-apps-ui-kit-react' package.\n\u2003\u2022 You would pass in props to customize its behavior\u2014for example, setting error states, adjusting label text, or handling change events.\n\u2003\u2022 Here\u2019s an example usage:\n\n\u2003\u2003-----------------------------------------------------------\n\u2003\u2003import React, { useState, ChangeEvent } from 'react';\n\u2003\u2003import { WalletAddressField } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyWalletComponent = () => {\n\u2003\u2003\u2003 const [address, setAddress] = useState('');\n\n\u2003\u2003\u2003 const handleChange = (e: ChangeEvent<HTMLInputElement>) => {\n\u2003\u2003\u2003\u2003 setAddress(e.target.value);\n\u2003\u2003\u2003 };\n\n\u2003\u2003\u2003 return (\n\u2003\u2003\u2003\u2003 <WalletAddressField\n\u2003\u2003\u2003\u2003\u2003 value={address}\n\u2003\u2003\u2003\u2003\u2003 onChange={handleChange}\n\u2003\u2003\u2003\u2003\u2003 label=\"Your wallet address\"\n\u2003\u2003\u2003\u2003\u2003 pasteButtonLabel=\"Quick Paste\"\n\u2003\u2003\u2003\u2003\u2003 error={!address} // Example: show error state if empty\n\u2003\u2003\u2003\u2003 />\n\u2003\u2003\u2003 );\n\u2003\u2003};\n\n\u2003\u2003export default MyWalletComponent;\n\u2003\u2003-----------------------------------------------------------\n\u2003\u2003\n\u2003\u2022 In this example, WalletAddressField is part of a form where the wallet address can be entered manually or pasted using the provided button.\n\u2003\u2022 The component receives the current address value, a change handler, and various labels for customization.\n\n3. Best practices or limitations:\n\u2003\u2022 Ensure that the component is used in controlled form fields; the value should be maintained in the state along with onChange handling.\n\u2003\u2022 Leverage the error and isValid states to communicate the correct validation status to the user.\n\u2003\u2022 Customize labels only if necessary\u2014using the default labels (\"Enter wallet address\" and \"Paste\") helps maintain consistency across your application.\n\u2003\u2022 Since the interface omits adornment-related props, any changes or customization to the input\u2019s adornments must be handled by the component itself and not overridden via props. This might limit customization if you need to change adornment behavior.\n\u2003\u2022 Always import the component from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and maintainability in large applications.\n\nThis explanation should help you understand what the WalletAddressFieldProps interface describes, how its corresponding component can be integrated into your application, and some important considerations when using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/WalletAddressField/WalletAddressField.tsx",
    "code_snippet": "export const WalletAddressField = forwardRef<HTMLInputElement, WalletAddressFieldProps>(\n  (\n    {\n      isValid,\n      disabled,\n      type = \"text\",\n      autoComplete = \"off\",\n      spellCheck = \"false\",\n      label = \"Wallet address\",\n      pasteButtonLabel = \"Paste\",\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isPasted, setIsPasted] = useState(false);\n    const [value, setValue] = useState(\"\");\n    const [isFocused, setIsFocused] = useState(false);\n    useImperativeHandle(forwardedRef, () => inputRef.current!);\n\n    let endAdornment;\n    let endAdornmentWidth;\n    if (!disabled && !isPasted && !value) {\n      endAdornment = (\n        <PasteButton\n          inputRef={inputRef}\n          label={pasteButtonLabel}\n          onPaste={() => {\n            if (inputRef.current) {\n              const event = createChangeEvent(inputRef.current);\n              props.onChange?.(event);\n              setIsPasted(true);\n            }\n          }}\n        />\n      );\n      endAdornmentWidth = PASTE_BUTTON_WIDTH;\n    } else if (isFocused && !disabled) {\n      endAdornment = (\n        <ClearButton\n          inputRef={inputRef}\n          onClear={() => {\n            if (inputRef.current) {\n              const event = createChangeEvent(inputRef.current);\n              props.onChange?.(event);\n              setValue(\"\");\n            }\n          }}\n        />\n      );\n      endAdornmentWidth = 2.3;\n    }\n\n    return (\n      <Input\n        {...props}\n        ref={inputRef}\n        isValid={isValid}\n        disabled={disabled}\n        startAdornmentWidth={2.3}\n        endAdornmentWidth={endAdornmentWidth}\n        endAdornment={endAdornment}\n        type={type}\n        autoComplete={autoComplete}\n        spellCheck={spellCheck}\n        label={label}\n        onFocus={(e) => {\n          setIsFocused(true);\n          props.onFocus?.(e);\n        }}\n        onBlur={(e) => {\n          setIsFocused(false);\n          props.onBlur?.(e);\n        }}\n        onChange={(e) => {\n          props.onChange?.(e);\n          setValue(e.target.value);\n        }}\n      />\n    );\n  },\n);\n\nWalletAddressField.displayName = \"WalletAddressField\";",
    "explanation": "Below is a concise explanation of the WalletAddressField component:\n\n1. What it does or represents:\n\u2003\u2022 WalletAddressField is a custom input field designed for entering a wallet address.  \n\u2003\u2022 It uses React\u2019s forwardRef to expose its internal HTMLInputElement to parent components.  \n\u2003\u2022 The component manages its own state for the input\u2019s value, focus status, and whether a paste event has occurred.  \n\u2003\u2022 Depending on the state (input empty and not yet pasted, or focused with content), it conditionally displays either a PasteButton (to paste a wallet address) or a ClearButton (to clear the input).  \n\u2003\u2022 It wraps a base Input component and forwards additional props and event callbacks (like onChange, onFocus, onBlur) so that parent components can integrate further behavior.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the component along with other UI kit components from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 Pass in any standard input props such as onChange, onFocus, onBlur, and additional custom props (e.g., disabled, isValid).  \n\u2003\u2022 The component can be used as part of a form where wallet addresses need to be entered and managed.\n\u2003\nExample usage:\n-----------------------------------------------------\nimport React, { useState } from \"react\";\nimport { WalletAddressField } from \"@worldcoin/mini-apps-ui-kit-react\";\n\nfunction WalletForm() {\n  const [walletAddress, setWalletAddress] = useState(\"\");\n  const handleAddressChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setWalletAddress(e.target.value);\n  };\n\n  return (\n    <form>\n      <WalletAddressField\n        value={walletAddress}\n        onChange={handleAddressChange}\n        isValid={!!walletAddress} // Example validation: non-empty value is valid\n        label=\"Enter your wallet address\"\n      />\n      {/* Additional form elements */}\n    </form>\n  );\n}\n\nexport default WalletForm;\n-----------------------------------------------------\n3. Best practices and limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Ensure you manage the input state in tandem with the component\u2019s internal state, especially if you need to synchronize validation logic.\n\u2003\u2003\u2013 Utilize the forwarded ref where necessary, for example, when you need to focus the input programmatically.\n\u2003\u2003\u2013 Provide clear and descriptive labels and event handlers to enhance accessibility.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component\u2019s behavior (editing state, paste/clear functionality) is prescriptive; if your application requires a different UX or additional customization, you may need to extend or wrap this component.\n\u2003\u2003\u2013 The conditional UI (PasteButton versus ClearButton) depends on internal state; ensure that any prop-driven external validations or state changes do not conflict with this built-in logic.\n\nThis design follows common React best practices by leveraging hooks, state management, and ref forwarding while abstracting specific UX logic related to wallet address handling in a reusable component."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/WalletAddressField/WalletAddressField.tsx",
    "code_snippet": "export default WalletAddressField;",
    "explanation": "Below is a concise explanation of the WalletAddressField component based on the given snippet:\n\n1. What it represents:\n\u2003\u2022 WalletAddressField is a UI component designed to display or input a cryptocurrency wallet address. It likely supports features like formatting the address, handling copy-to-clipboard actions, or validating the wallet address format.  \n\u2003\u2022 Since it\u2019s exported as the default export from its module, you can import it directly and use it wherever you need to show or let the user manage a wallet address.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import it from the '@worldcoin/mini-apps-ui-kit-react' package:\n\u2003\u2003\n\u2003\u2003import WalletAddressField from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2022 The component might expect props such as:\n\u2003\u2003\u2022 value: a string containing the wallet address.\n\u2003\u2003\u2022 onChange: a callback function if the field is editable.\n\u2003\u2003\u2022 placeholder: a string to show when no address is provided.\n\u2003\u2003\u2022 disabled: a boolean to indicate if the field is read-only.\n\u2003\u2003(The exact props depend on the component\u2019s implementation and documentation.)\n\n\u2003\u2022 A typical usage example might look like this:\n\u2003\u2003\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import WalletAddressField from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const WalletComponent = () => {\n\u2003\u2003  const [walletAddress, setWalletAddress] = useState('');\n\u2003\u2003\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <h3>Enter your wallet address</h3>\n\u2003\u2003      <WalletAddressField\n\u2003\u2003        value={walletAddress}\n\u2003\u2003        onChange={(e) => setWalletAddress(e.target.value)}\n\u2003\u2003        placeholder=\"0x...\"\n\u2003\u2003      />\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default WalletComponent;\n\u2003\u2003\n\u2003\u2003In this example, the field is used to both display and let the user update their wallet address.\n\n3. Best practices and limitations:\n\u2003\u2022 Always refer to the component\u2019s documentation for the full list of accepted props and any default behaviors.  \n\u2003\u2022 Ensure that input validation (like checking for proper wallet address format) is handled either within the component (if supported) or on your side before passing the value.  \n\u2003\u2022 Use clear, accessible labels and error messages to improve usability, especially because wallet addresses can be long and complex.  \n\u2003\u2022 If the component is designed to be read-only or has copy-to-clipboard functionality, ensure consistency in user experience by styling or informing users appropriately.  \n\u2003\u2022 Watch out for mobile responsiveness and accessibility standards to ensure the component works well across devices.\n\nBy following these guidelines and importing WalletAddressField from '@worldcoin/mini-apps-ui-kit-react', you can integrate this component seamlessly into your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/use-drawer.ts",
    "code_snippet": "export { DrawerContext, useDrawer };",
    "explanation": "Below is an explanation of the snippet:\n\n1. What it does or represents:\n\u2003\u2022 The exported items, DrawerContext and useDrawer, are part of a UI module that enables drawer functionality. DrawerContext is a React context that holds state and functions for managing a drawer (e.g., whether it\u2019s open or closed), while useDrawer is a custom hook designed to let any functional component easily access that context.\n\n2. How to use it in a larger application:\n\u2003\u2022 To integrate drawer functionality, you would wrap part (or all) of your component tree inside a provider that supplies the drawer state via DrawerContext.Provider.\n\u2003\u2022 Within any child component, you can call the useDrawer hook to access methods (like open and close) and state (like whether the drawer is open) to interact with the drawer.\n\u2003\u2022 Example usage:\n\n\u2003\u2003a. In your main application, wrap your content:\n\u2003\u2003\u2003-------------------------------------------\n\u2003\u2003\u2003import React from 'react';\n\u2003\u2003\u2003import { DrawerContext } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003\u2003const drawerValue = {\n\u2003\u2003\u2003\u2003isOpen: false,\n\u2003\u2003\u2003\u2003open: () => { console.log('Drawer opened'); },\n\u2003\u2003\u2003\u2003close: () => { console.log('Drawer closed'); }\n\u2003\u2003\u2003};\n\n\u2003\u2003\u2003function App() {\n\u2003\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003\u2003<DrawerContext.Provider value={drawerValue}>\n\u2003\u2003\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<h1>Main Application</h1>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003{/* Other components here */}\n\u2003\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003\u2003);\n\u2003\u2003\u2003}\n\n\u2003\u2003\u2003export default App;\n\u2003\u2003\u2003-------------------------------------------\n\n\u2003\u2003b. In a component that uses the drawer:\n\u2003\u2003\u2003-------------------------------------------\n\u2003\u2003\u2003import React from 'react';\n\u2003\u2003\u2003import { useDrawer } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003\u2003function DrawerToggleButton() {\n\u2003\u2003\u2003\u2003const { isOpen, open, close } = useDrawer();\n\n\u2003\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003\u2003<button onClick={isOpen ? close : open}>\n\u2003\u2003\u2003\u2003\u2003\u2003{isOpen ? 'Close Drawer' : 'Open Drawer'}\n\u2003\u2003\u2003\u2003\u2003</button>\n\u2003\u2003\u2003\u2003);\n\u2003\u2003\u2003}\n\n\u2003\u2003\u2003export default DrawerToggleButton;\n\u2003\u2003\u2003-------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Always ensure that any component calling useDrawer is rendered within a DrawerContext.Provider. Otherwise, the hook might return undefined or throw an error if no provider exists.\n\u2003\u2022 Use TypeScript\u2019s typing features to enforce the correct shape of the drawer state and behaviors.\n\u2003\u2022 Avoid deeply nesting providers unnecessarily, and consider performance and state management if many components depend on the same context.\n\u2003\u2022 Ensure that the context value is memoized (using useMemo, for example) if it involves complex objects or functions to avoid unnecessary re-renders.\n\nThis concise explanation should help you integrate the drawer functionality into your larger application while following best practices, all while keeping the imports consistent from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/Drawer.tsx",
    "code_snippet": "export { Drawer, DrawerTrigger, DrawerClose, DrawerContent, DrawerHeader, DrawerTitle };",
    "explanation": "This code exports a set of related React components used to construct a Drawer\u2014a panel that slides in (typically from the side) to display additional content. The exported components break the Drawer into modular parts:\n\n\u2022 Drawer \u2013 The container component that wraps the entire drawer structure.\n\u2022 DrawerTrigger \u2013 A component that, when interacted with (e.g., clicked), toggles the opening/closing of the Drawer.\n\u2022 DrawerClose \u2013 A control to explicitly close the Drawer.\n\u2022 DrawerContent \u2013 The main area where the drawer\u2019s content is rendered.\n\u2022 DrawerHeader and DrawerTitle \u2013 Components that help structure the top part of the drawer, useful for displaying titles or headers consistently.\n\nHow to Use in a Larger Application:\n1. Import the components from the package (note the use of '@worldcoin/mini-apps-ui-kit-react' as the import source):\n\u2003\u2003\n\u2003\u2003import {\n\u2003\u2003\u2003Drawer,\n\u2003\u2003\u2003DrawerTrigger,\n\u2003\u2003\u2003DrawerClose,\n\u2003\u2003\u2003DrawerContent,\n\u2003\u2003\u2003DrawerHeader,\n\u2003\u2003\u2003DrawerTitle\n\u2003\u2003} from '@worldcoin/mini-apps-ui-kit-react';\n\n2. Compose them together to create a functioning drawer. For example:\n\n\u2003\u2003import React from 'react';\n\u2003\u2003import {\n\u2003\u2003\u2003Drawer,\n\u2003\u2003\u2003DrawerTrigger,\n\u2003\u2003\u2003DrawerClose,\n\u2003\u2003\u2003DrawerContent,\n\u2003\u2003\u2003DrawerHeader,\n\u2003\u2003\u2003DrawerTitle\n\u2003\u2003} from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyDrawerExample: React.FC = () => {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<Drawer>\n\u2003\u2003\u2003\u2003\u2003<DrawerTrigger>\n\u2003\u2003\u2003\u2003\u2003\u2003<button type=\"button\">Open Drawer</button>\n\u2003\u2003\u2003\u2003\u2003</DrawerTrigger>\n\u2003\u2003\u2003\u2003\u2003<DrawerContent>\n\u2003\u2003\u2003\u2003\u2003\u2003<DrawerHeader>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<DrawerTitle>Menu</DrawerTitle>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<DrawerClose>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003\u2003<button type=\"button\">Close</button>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003</DrawerClose>\n\u2003\u2003\u2003\u2003\u2003\u2003</DrawerHeader>\n\u2003\u2003\u2003\u2003\u2003\u2003<p>This is the content inside the drawer.</p>\n\u2003\u2003\u2003\u2003\u2003</DrawerContent>\n\u2003\u2003\u2003\u2003</Drawer>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2003export default MyDrawerExample;\n\n3. Integrate this component into your application wherever a slide-in menu or additional contextual panel is needed.\n\nBest Practices & Limitations:\n\u2022 Structure and Accessibility: Ensure that the DrawerTrigger and DrawerClose elements are accessible (focusable, keyboard navigable, etc.). These components are designed to help maintain a consistent structure, making it easier to adhere to accessibility standards.\n\u2022 Controlled vs. Uncontrolled: Depending on the implementation, you might need to control the open/close state from a parent component. Consult the documentation to determine if additional state management or callbacks are required.\n\u2022 Customization: While these modular components give flexibility, extensive customization might require overriding default styles or behaviors. It\u2019s best to follow your design system and minimize direct style modifications where possible.\n\u2022 Import Paths: Always import the components from '@worldcoin/mini-apps-ui-kit-react' instead of using relative paths, ensuring consistency across your project and making future updates easier.\n\nThis pattern allows developers to build complex, responsive drawers that cleanly separate concerns and promote reuse across the application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface WithFadeFromProps {\n  /**\n   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.\n   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.\n   * You can also use px values, which doesn't take screen height into account.\n   */\n  snapPoints: (number | string)[];\n  /**\n   * Index of a `snapPoint` from which the overlay fade should be applied. Defaults to the last snap point.\n   */\n  fadeFromIndex: number;\n}",
    "explanation": "Below is a concise explanation for the provided code snippet:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. Overview\n\nThe code defines a TypeScript interface (WithFadeFromProps) for props that configure an overlay or slide component with snap points and a fade effect. The snapPoints property is an array of numbers or strings that specify positions on the screen (either as percentages or fixed pixel values). The fadeFromIndex prop indicates at which snap point index the fading effect should begin. For example, if you pass fadeFromIndex as 0, the fade effect is applied from the first snap point; if you pass a higher number it starts later in the snap points order. This design is common in UI components such as bottom sheets or modal drawers where different vertical positions have different visibility or opacity.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to Use in a Larger Application\n\nAssume you are building a larger application and want to incorporate this \u201cfade effect\u201d overlay. You will create a component that uses WithFadeFromProps as its props definition. When building your application, import the component from the UI kit package. Here\u2019s an example of how you might integrate it:\n\n----------------------------------------------------------------------\nExample: FadeOverlay.tsx\n----------------------------------------------------------------------\n\nimport React from 'react';\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react'; // Using example import pattern\n// Suppose YourFadeOverlay is a component that utilizes WithFadeFromProps for its props\ninterface WithFadeFromProps {\n  snapPoints: (number | string)[];\n  fadeFromIndex: number;\n}\n\nconst FadeOverlay: React.FC<WithFadeFromProps> = ({ snapPoints, fadeFromIndex, children }) => {\n  // Here we would calculate the fade intensity based on snapPoints and fadeFromIndex,\n  // then apply styles or effects on the overlay.\n  // For simplicity, assume that the effect is represented as a background style change.\n  const overlayStyle = {\n    // Example: opacity could change based on the snap point index (this is just a placeholder)\n    opacity: 1 - fadeFromIndex / snapPoints.length,\n    transition: 'opacity 0.3s',\n  };\n\n  return (\n    <div style={overlayStyle}>\n      {children}\n      <Button onClick={() => console.log('Overlay button clicked')}>Click Me</Button>\n    </div>\n  );\n};\n\nexport default FadeOverlay;\n\n----------------------------------------------------------------------\nExample: App.tsx\n----------------------------------------------------------------------\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport FadeOverlay from '@worldcoin/mini-apps-ui-kit-react/FadeOverlay'; // Importing from the UI kit package\n// Alternatively, if the FadeOverlay component is part of the same package, it would be exported directly\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Main Application</h1>\n      <FadeOverlay snapPoints={[0.2, 0.5, 0.8]} fadeFromIndex={2}>\n        <p>This overlay fades from the last snap point.</p>\n      </FadeOverlay>\n    </div>\n  );\n};\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices and Limitations\n\n\u2022 Prop validation:  \n  \u2013 Ensure that the snapPoints array is passed in the correct order (from the least visible to the most visible) and that the numbers or string values make sense in your layout context.  \n  \u2013 When using fadeFromIndex, make sure it is within bounds (i.e., you don\u2019t reference an index that does not exist in snapPoints).\n\n\u2022 Consistent UI imports:  \n  \u2013 As per guidelines, always import UI components such as Button directly from '@worldcoin/mini-apps-ui-kit-react' to keep consistency across your app.\n\n\u2022 Flexibility:  \n  \u2013 The component is designed to be flexible by allowing both percentage values and pixel values. Keep in mind that mixing them might require extra calculations if you need consistent scaling across different screen sizes.\n\n\u2022 Limitations:  \n  \u2013 The example provided is simplistic; in a real-world scenario, you'll need to add logic that dynamically calculates the appropriate styling based on the user\u2019s interaction with the overlay.  \n  \u2013 Ensure that additional props (like children or event handlers) are correctly typed and forwarded if you enhance the component.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThis explanation provides an understanding of what the component represents, how to integrate it within your app by importing from '@worldcoin/mini-apps-ui-kit-react', and key practices when using it in a production environment."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface WithoutFadeFromProps {\n  /**\n   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.\n   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.\n   * You can also use px values, which doesn't take screen height into account.\n   */\n  snapPoints?: (number | string)[];\n  fadeFromIndex?: never;\n}\ntype BaseDrawerProps = {\n  /** Whether the drawer should take up the full page */\n  height?: \"full\" | \"fit\";\n  /** The active snap point */\n  activeSnapPoint?: number | string | null;\n  /** Callback when the active snap point changes */\n  setActiveSnapPoint?: (snapPoint: number | string | null) => void;\n  /** The content of the drawer */\n  children?: React.ReactNode;\n  /** Whether the drawer is open */\n  open?: boolean;\n  /**\n   * Number between 0 and 1 that determines when the drawer should be closed.\n   * Example: threshold of 0.5 would close the drawer if the user swiped for 50% of the height of the drawer or more.\n   * @default 0.25\n   */\n  closeThreshold?: number;\n  /**\n   * Duration for which the drawer is not draggable after scrolling content inside of the drawer.\n   * @default 500ms\n   */\n  scrollLockTimeout?: number;\n  /**\n   * When `true`, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n   */\n  fixed?: boolean;\n  /**\n   * When `false` dragging, clicking outside, pressing esc, etc. will not close the drawer.\n   * Use this in comination with the `open` prop, otherwise you won't be able to open/close the drawer.\n   * @default true\n   */\n  dismissible?: boolean;\n  /**\n   * When `false` it allows to interact with elements outside of the drawer without closing it.\n   * @default true\n   */\n  modal?: boolean;\n  /**\n   * Direction of the drawer. Can be `top` or `bottom`, `left`, `right`.\n   * @default 'bottom'\n   */\n  direction?: \"top\" | \"bottom\" | \"left\" | \"right\";\n  /**\n   * Opened by default, skips initial enter animation. Still reacts to `open` state changes\n   * @default false\n   */\n  defaultOpen?: boolean;\n  /**\n   * When set to `true` prevents scrolling on the document body on mount, and restores it on unmount.\n   * @default false\n   */\n  disablePreventScroll?: boolean;\n  /**\n   * When `true` Vaul will reposition inputs rather than scroll then into view if the keyboard is in the way.\n   * Setting it to `false` will fall back to the default browser behavior.\n   * @default true when {@link snapPoints} is defined\n   */\n  repositionInputs?: boolean;\n  /**\n   * Disabled velocity based swiping for snap points.\n   * This means that a snap point won't be skipped even if the velocity is high enough.\n   * Useful if each snap point in a drawer is equally important.\n   * @default false\n   */\n  snapToSequentialPoint?: boolean;\n  /** The container element to render the drawer into */\n  container?: HTMLElement | null;\n  /** Whether to prevent scroll restoration */\n  preventScrollRestoration?: boolean;\n  /** Whether to auto focus the drawer when opened */\n  autoFocus?: boolean;\n  /** Callback when the open state changes */\n  onOpenChange?: (open: boolean) => void;\n  /** Callback when dragging */\n  onDrag?: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;\n  /** Callback when releasing */\n  onRelease?: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;\n  /** Callback when closing */\n  onClose?: () => void;\n  /**\n   * Gets triggered after the open or close animation ends, it receives an `open` argument with the `open` state of the drawer by the time the function was triggered.\n   * Useful to revert any state changes for example.\n   */\n  onAnimationEnd?: (open: boolean) => void;\n};\n\n/**\n * Props for the main Drawer component\n */",
    "explanation": "1. What It Does:\n\u2022 This component represents a configurable drawer\u2014a sliding container that pops in from one of the screen\u2019s edges (top, bottom, left, or right).  \n\u2022 It supports complex behaviors such as snapping to specific positions (using an array of snap points), swipe/drag gestures, controlled open/close state, keyboard adjustments, and scrolling behavior.  \n\u2022 The props enable you to customize aspects like the drawer's height, dismissibility, modal behavior, animation timing, and drag events.\n\n2. How to Use It:\n\u2022 Import the component (or a component that wraps these props) from the kit:\n\u2003\u2003import { Drawer } from '@worldcoin/mini-apps-ui-kit-react';\n\u2022 In your larger application, include the Drawer and pass the desired props. Typically, you\u2019d control its open/close state via a state variable, manage its snap points, and handle callbacks for things like dragging or animation events.  \n\u2022 Example usage:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { Drawer } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyApp = () => {\n  const [open, setOpen] = useState(false);\n  const [activeSnapPoint, setActiveSnapPoint] = useState(null);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>Open Drawer</button>\n      <Drawer\n        open={open}\n        activeSnapPoint={activeSnapPoint}\n        setActiveSnapPoint={setActiveSnapPoint}\n        snapPoints={[0.2, 0.5, 0.8]}  // The values here represent portions of the screen height\n        closeThreshold={0.25}\n        scrollLockTimeout={500}\n        direction=\"bottom\"\n        dismissible={true}\n        modal={true}\n        onOpenChange={(openState) => setOpen(openState)}\n        onDrag={(event, percentage) => console.log('Dragging:', percentage)}\n        onRelease={(event, openState) => console.log('Released, open:', openState)}\n      >\n        <div>\n          <h2>Drawer Content</h2>\n          <p>Your content goes here.</p>\n          <button onClick={() => setOpen(false)}>Close Drawer</button>\n        </div>\n      </Drawer>\n    </div>\n  );\n};\n\nexport default MyApp;\n--------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2022 Best Practices:\n\u2003\u2003- Always control the drawer state (open/close) in your higher-level component to keep UI predictable.  \n\u2003\u2003- Use descriptive snap point values and ensure they match the intended behavior (percentages vs. pixel values).  \n\u2003\u2003- Leverage callback props like onOpenChange, onAnimationEnd, and onClose to synchronize the drawer state with your application logic.  \n\u2003\u2003- Import components directly from '@worldcoin/mini-apps-ui-kit-react' as outlined to ensure consistency and version control.\n\u2022 Limitations:\n\u2003\u2003- Ensure that the provided snap point values are valid (only numbers from 0 to 100 or valid pixel strings).  \n\u2003\u2003- The component\u2019s design assumes a certain structure for snap points and may not be ideal for all UI/UX scenarios, so testing on various devices is recommended.  \n\u2003\u2003- Be mindful of overlapping touch events between the drawer and nested interactive elements; proper event handling in callbacks is key.\n\nThis concise explanation should help integrate the drawer component smoothly into your application while adhering to best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export type DrawerProps = BaseDrawerProps & (WithFadeFromProps | WithoutFadeFromProps);\n\n/**\n * Props for the DrawerContent component\n */",
    "explanation": "Below is an explanation for the provided code snippet:\n\n1. What it Represents:\n\u2003\u2022 The code defines a TypeScript type named DrawerProps. This type is used as the props interface for a component (likely named DrawerContent) that represents a UI drawer. A drawer is a panel that typically slides in from the side of the screen to display additional options or content.\n\u2003\u2022 DrawerProps is built on top of some base properties (BaseDrawerProps) and requires that you pass either a set of properties related to a fade animation (WithFadeFromProps) or an alternative set that omits it (WithoutFadeFromProps). This design allows the DrawerContent component to optionally support a fade-in effect from a specified side (like left or right).\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the DrawerContent (or Drawer component that uses DrawerProps) from the UI kit using the package name. For example:\n\u2003\u2003import { DrawerContent } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 When using the component, supply the required drawer-open state and optionally the fade animation props if you want the drawer to animate from a specific direction.\n\u2003\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003// Example: A drawer with fade animation from the left\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { DrawerContent, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyApp = () => {\n\u2003\u2003\u2003const [isOpen, setIsOpen] = useState(false);\n\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003<Button onClick={() => setIsOpen(true)}>Open Drawer</Button>\n\u2003\u2003\u2003\u2003\u2003<DrawerContent\n\u2003\u2003\u2003\u2003\u2003\u2003open={isOpen}           // From BaseDrawerProps\n\u2003\u2003\u2003\u2003\u2003\u2003fadeFrom=\"left\"         // Example property from WithFadeFromProps (if applicable)\n\u2003\u2003\u2003\u2003\u2003\u2003onClose={() => setIsOpen(false)}\n\u2003\u2003\u2003\u2003\u2003>\n\u2003\u2003\u2003\u2003\u2003\u2003<p>This is the content inside the drawer.</p>\n\u2003\u2003\u2003\u2003\u2003</DrawerContent>\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2003export default MyApp;\n\n\u2003\u2022 This example shows that you toggle the open state (probably one of the BaseDrawerProps) and optionally pass a fadeFrom prop to control how the drawer appears.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Use the provided props interfaces correctly: only include fade animation props (e.g., fadeFrom) when you want the fade-in effect. Don\u2019t combine fade and non-fade prop sets accidentally because the type ensures only one set is provided.\n\u2003\u2022 Always import components from the package '@worldcoin/mini-apps-ui-kit-react' to maintain consistency and avoid potential module resolution issues.\n\u2003\u2022 Ensure that the state and handlers (such as onClose) are managed from a parent component, keeping the DrawerContent component as a pure UI component.\n\u2003\u2022 Check that any required accessibility attributes (such as ARIA labels) are added, either through props or by wrapping the content in accessible container elements.\n\u2003\u2022 Remember that this Drawer pattern might need adjustment for responsiveness and mobile usability; test the component on multiple screen sizes.\n\nThis explanation should help in understanding the purpose of the DrawerContent component and how to integrate it into a larger React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerContentProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> {\n  /** The content of the drawer */\n  children?: React.ReactNode;\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n  /** Whether to close the drawer when clicking outside */\n  onCloseAutoFocus?: (event: Event) => void;\n  /** Called when the escape key is pressed */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /** Called when pointer down occurs outside drawer */\n  onPointerDownOutside?: (event: Event) => void;\n  /** Called when drawer starts to close */\n  onInteractOutside?: (event: Event) => void;\n}\n\n/**\n * Props for the DrawerHeader component\n */",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What This Component Represents:\n\u2003\u2022 The code defines a TypeScript interface named DrawerContentProps. This interface extends the props of an underlying DrawerPrimitive.Content component.  \n\u2003\u2022 It serves as the contract for the properties accepted by a DrawerContent component, which is typically part of a UI drawer (a panel that slides in/out).  \n\u2003\u2022 In addition to the standard props from DrawerPrimitive.Content, it accepts several event callbacks (onCloseAutoFocus, onEscapeKeyDown, onPointerDownOutside, onInteractOutside) and a boolean flag (asChild) that lets you control whether default styling is applied.  \n\u2003\u2022 Essentially, the DrawerContent component acts as the container for the drawer\u2019s content and manages user interactions (e.g., closing when clicking outside or hitting the escape key).\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 To use this component in your application, import it (and any related components) from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 You can pass children as the drawer\u2019s content, and provide custom event handlers to control behavior when users interact with areas outside the drawer or press escape, among other interactions.\n\u2003\u2022 Example usage:\n\u2003\u2003-------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { DrawerContent, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function App() {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003{/* Other components or layout */}\n\u2003\u2003\u2003\u2003\u2003<DrawerContent\n\u2003\u2003\u2003\u2003\u2003\u2003asChild={false}\n\u2003\u2003\u2003\u2003\u2003\u2003onEscapeKeyDown={(event: KeyboardEvent) => {\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003console.log('Escape key pressed!', event);\n\u2003\u2003\u2003\u2003\u2003\u2003}}\n\u2003\u2003\u2003\u2003\u2003\u2003onPointerDownOutside={(event: Event) => {\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003console.log('Clicked outside the drawer', event);\n\u2003\u2003\u2003\u2003\u2003\u2003}}\n\u2003\u2003\u2003\u2003\u2003>\n\u2003\u2003\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<h2>My Drawer Header</h2>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<p>This is the content of my drawer.</p>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003<Button onClick={() => console.log('Button in drawer clicked')}>Click Me</Button>\n\u2003\u2003\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003\u2003\u2003</DrawerContent>\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003}\n\n\u2003\u2003export default App;\n\u2003\u2003-------------------------------------------------\n\u2003\u2003In this example, the DrawerContent wraps a simple layout that includes a header, text, and a Button (also imported from '@worldcoin/mini-apps-ui-kit-react'). Event handlers are provided for escape key and pointer down interactions.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Always import related components (such as DrawerContent, Button, etc.) directly from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and proper dependency management.\n\u2003\u2003- Leverage TypeScript\u2019s type safety by providing correct props, especially for event handlers and children.\n\u2003\u2003- Use the asChild prop when you need to wrap the drawer trigger or content in a custom element that should inherit the drawer\u2019s behavior without default styling.\n\u2003\u2003- Keep event handler logic concise and consider performance implications if doing heavy processing on these events.\n\u2003\u2022 Limitations:\n\u2003\u2003- The interface relies on an underlying DrawerPrimitive.Content; any limitations or bugs in that component could affect behavior.\n\u2003\u2003- Customizing styles might require a deeper understanding of how asChild works to avoid style conflicts.\n\u2003\u2003- Extensive event handling may require careful testing to ensure that interactions (e.g., closing on outside click) behave as expected across all devices and browsers.\n\nThis explanation should help you integrate and use the DrawerContent component effectively within your React applications, ensuring best practices are followed with imports from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerHeaderProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"className\"> {\n  /** Optional icon to display in the header */\n  icon?: React.ReactNode;\n  children?: React.ReactNode;\n}\n\n/**\n * Props for the DrawerTitle component\n */",
    "explanation": "Below is an explanation of the provided code snippet:\n\n1. What this component does or represents:\n\u2003\u2022 The code defines an interface named DrawerHeaderProps that represents the props accepted by a DrawerHeader component.  \n\u2003\u2022 This interface extends the standard HTML attributes for a div element (React.HTMLAttributes<HTMLDivElement>), except for the className attribute which is omitted.  \n\u2003\u2022 It includes an optional icon prop (of type React.ReactNode) that allows you to render an icon within the header and a children prop for any nested elements or text.\n\n2. How to use it in a larger application:\n\u2003\u2022 In your application, you would import the DrawerHeader (or the component that uses these props) from the UI Kit package.  \n\u2003\u2022 Pass any additional HTML attributes to customize the rendered div along with the optional icon and children that you\u2019d like to render in the header.  \n\u2003\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { DrawerHeader } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyDrawer = () => {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003<DrawerHeader\n\u2003\u2003\u2003\u2003\u2003\u2003icon={<i className=\"my-icon-class\" />}\n\u2003\u2003\u2003\u2003\u2003\u2003id=\"drawer-header\"\n\u2003\u2003\u2003\u2003\u2003>\n\u2003\u2003\u2003\u2003\u2003\u2003<h1>Drawer Title</h1>\n\u2003\u2003\u2003\u2003\u2003</DrawerHeader>\n\u2003\u2003\u2003\u2003\u2003{/* Drawer content goes here */}\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2003export default MyDrawer;\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 By extending React.HTMLAttributes, the component is flexible and allows you to pass any standard HTML attributes (like id, style, etc.) without rediscovering them.  \n\u2003\u2003\u2013 Omitting the className prop may be an intentional decision to enforce a consistent styling pattern defined internally or via the theme \u2013 if you need to manage custom styles, check if the component offers alternative props for customization.  \n\u2003\u2003\u2013 Using TypeScript helps with type-safety and ensures that the props provided are according to the expected interface.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The deliberate omission of className means that you cannot directly override the header\u2019s CSS class through props. If you need to customize styling further, verify if the UI kit provides additional props or a theming/styling solution.\n\u2003\u2003\u2013 Since the interface only exposes an icon and children (besides HTML attributes), any extended functionality might require a custom wrapper or additional props if needed.\n\nThis approach ensures that components stay consistent across your application and that you follow the design system provided by the UI kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerTitleProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title> {\n  children?: React.ReactNode;\n  /** Whether to render the title without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the DrawerDescription component\n */",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What this component does or represents:\n\u2003\u2022 The code defines an interface (DrawerTitleProps) for a DrawerTitle component. The interface extends the props of DrawerPrimitive.Title (likely a lower-level component used internally, for example, from Radix UI or another primitive library) and adds optional React children.  \n\u2003\u2022 The asChild prop is included to let developers decide whether the title should be rendered with its default styling or if another element should take over its styling and behavior. Essentially, it specifies if the component should use its built-in styles or simply be a passthrough for a child component that dictates its look.\n\n2. How to use it in a larger application:\n\u2003\u2022 In a larger application, the DrawerTitle component would be used as part of a composite Drawer UI (for example, a side panel or modal drawer).  \n\u2003\u2022 You typically wrap some text or elements in DrawerTitle to display a header for the drawer.  \n\u2003\u2022 The asChild prop is useful when you want to override the default styling. For instance, you might pass a different HTML element or another component that applies your own styles.\n\nHere\u2019s an example of usage within a Drawer component in your application:\n\n-------------------------------------------------\nExample Usage:\n\n// Import the DrawerTitle (and optionally the Drawer component) from the package:\nimport { Drawer, DrawerTitle, DrawerContent } from '@worldcoin/mini-apps-ui-kit-react';\nimport React from 'react';\n\nfunction MyDrawerExample() {\n  return (\n    <Drawer open={true}>\n      {/* Default usage with built-in styling */}\n      <DrawerTitle>My Drawer Header</DrawerTitle>\n      <DrawerContent>\n        <p>This is the content of the drawer.</p>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default MyDrawerExample;\n-------------------------------------------------\n\nAlternatively, if you want to render the title using a custom element with your own styles, use the asChild prop:\n\n-------------------------------------------------\nCustom Element Example:\n\nimport { Drawer, DrawerTitle, DrawerContent } from '@worldcoin/mini-apps-ui-kit-react';\nimport React from 'react';\n\nfunction MyCustomDrawer() {\n  return (\n    <Drawer open={true}>\n      {/* Use asChild to render an h2 element instead of the default */}\n      <DrawerTitle asChild>\n        <h2 style={{ fontSize: '2rem', color: '#333' }}>Custom Drawer Header</h2>\n      </DrawerTitle>\n      <DrawerContent>\n        <p>This drawer has a custom styled header.</p>\n      </DrawerContent>\n    </Drawer>\n  );\n}\n\nexport default MyCustomDrawer;\n-------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 When using this interface, ensure that the children passed in are valid React nodes since they represent the content to be displayed as the title.\n\u2003\u2022 The asChild prop allows for flexibility and should be used thoughtfully\u2014only when you need to override default styling with a completely custom element.\n\u2003\u2022 Since DrawerTitleProps extends the underlying component\u2019s props, always refer to the documentation of DrawerPrimitive.Title (or the library\u2019s docs) to understand all the available props.\n\u2003\u2022 Remember to import components from '@worldcoin/mini-apps-ui-kit-react' as shown, ensuring consistency within your project\u2019s module resolution.\n\u2003\u2022 Keep in mind that there may be limitations regarding styling conflicts if custom elements are used without careful management of CSS inheritance or specificity.\n\nThis concise explanation should help you understand the purpose of DrawerTitleProps, how to integrate its associated component into a larger drawer UI, and what to keep in mind regarding customization and best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerDescriptionProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description> {\n  children?: React.ReactNode;\n  /** Whether to render the description without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the DrawerTrigger component\n */",
    "explanation": "1. Overview\n\nThe provided code defines a TypeScript interface named DrawerDescriptionProps. This interface extends all properties from a lower-level DrawerPrimitive.Description component (using React.ComponentPropsWithoutRef) and adds two optional props:\n\u2003\u2022 children: React.ReactNode \u2013 for nested content.\n\u2003\u2022 asChild?: boolean \u2013 a flag that determines whether to render the description without the default styling, giving you full control over the rendered element by \u201cpassing through\u201d the child.\n\nEssentially, this interface is used to type the props for a Drawer description component within a drawer UI element.\n\n2. How to Use It in a Larger Application\n\nIn a larger UI, the DrawerDescription component (which uses the DrawerDescriptionProps) would likely be combined with other drawer-related components (like DrawerTrigger, DrawerContent, etc.). Here\u2019s an example of how you might import and use it from '@worldcoin/mini-apps-ui-kit-react':\n\nExample:\n--------------------------------------------------\nimport React from 'react';\nimport {\n  Drawer,\n  DrawerContent,\n  DrawerDescription,\n  DrawerTrigger,\n} from '@worldcoin/mini-apps-ui-kit-react';\n\nexport const MyDrawerExample = () => {\n  return (\n    <Drawer>\n      <DrawerTrigger>Open Drawer</DrawerTrigger>\n      <DrawerContent>\n        {/* Using default styling */}\n        <DrawerDescription>\n          This is the default styled description of the Drawer.\n        </DrawerDescription>\n\n        {/* Overriding default styling with custom element */}\n        <DrawerDescription asChild>\n          <p style={{ color: 'tomato', fontStyle: 'italic' }}>\n            Customized Drawer Description.\n          </p>\n        </DrawerDescription>\n      </DrawerContent>\n    </Drawer>\n  );\n};\n--------------------------------------------------\n\nIn this example:\n\u2003\u2022 The Drawer component sets up the UI for a sliding panel.\n\u2003\u2022 DrawerTrigger is the button that opens the drawer.\n\u2003\u2022 DrawerContent wraps the content displayed in the drawer.\n\u2003\u2022 DrawerDescription displays explanatory text. When asChild is true, the description is rendered as the child element (<p> in this case) without the default styling applied.\n\n3. Best Practices and Limitations\n\n\u2022 Best Practices:\n\u2003\u2013 Leverage the asChild prop for better composition. It allows you to pass any element you desire, enabling more flexible rendering and custom styling.\n\u2003\u2013 Always adhere to the provided props interface when building or consuming the component to avoid unexpected behavior.\n\u2003\u2013 Use clear and semantic children to improve accessibility and maintainability.\n\n\u2022 Limitations:\n\u2003\u2013 When using asChild, you must ensure that the custom element you provide is styled appropriately, as the default styling is bypassed.\n\u2003\u2013 This interface only provides basic properties (children and asChild) in addition to what the primitive component requires; any additional customization might need extra props or styles layered outside the component API.\n\nThis concise explanation should give you a solid understanding of what DrawerDescriptionProps represents, how to integrate it into your application, and how to follow best practices when using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Trigger> {\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the DrawerTrigger component\n */",
    "explanation": "1. What this component does or represents:\n\u2003\u2022 The DrawerTrigger component is designed to act as a clickable element (trigger) to open or control a Drawer (a sidebar, overlay, or modal that slides in).  \n\u2003\u2022 It extends the properties of an underlying primitive component (DrawerPrimitive.Trigger) from, likely, a lower-level or third-party API.  \n\u2003\u2022 An additional property, asChild, is available to allow rendering the trigger element without any default styling, meaning you can pass a custom child component or element that will adopt the trigger behavior.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the DrawerTrigger component from the package:\n\u2003\u2003import { DrawerTrigger } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 When using it, pass any properties that the underlying DrawerPrimitive.Trigger accepts, and optionally override its default styling using asChild.\n\u2003\u2022 Example usage in a React component that controls a Drawer:\n\n\u2003\u2003---------------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { DrawerTrigger, DrawerContent, Drawer } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyDrawerExample = () => {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<Drawer>\n\u2003\u2003\u2003\u2003\u2003<DrawerTrigger asChild>\n\u2003\u2003\u2003\u2003\u2003\u2003{/* Custom element could be a button or any interactive element */}\n\u2003\u2003\u2003\u2003\u2003\u2003<button style={{ padding: '8px 16px', background: '#0070f3', color: '#fff' }}>\n\u2003\u2003\u2003\u2003\u2003\u2003\u2003Open Drawer\n\u2003\u2003\u2003\u2003\u2003\u2003</button>\n\u2003\u2003\u2003\u2003\u2003</DrawerTrigger>\n\u2003\u2003\u2003\u2003\u2003<DrawerContent>\n\u2003\u2003\u2003\u2003\u2003\u2003{/* The content inside your drawer */}\n\u2003\u2003\u2003\u2003\u2003\u2003<p>This is the drawer content.</p>\n\u2003\u2003\u2003\u2003\u2003</DrawerContent>\n\u2003\u2003\u2003\u2003</Drawer>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2003export default MyDrawerExample;\n\u2003\u2003---------------------------------------------------------------\n\u2003\u2022 In this example, the DrawerTrigger wraps a custom-styled button because asChild is true. If asChild were false or omitted, the trigger would use a default styled element provided by the UI kit.\n\n3. Best practices or limitations:\n\u2003\u2022 Always import components directly from '@worldcoin/mini-apps-ui-kit-react' rather than using relative paths for consistency and to ensure you\u2019re using the correct, up-to-date version.\n\u2003\u2022 When using the asChild prop, ensure that the child element you provide has the necessary interactive semantics (for example, a button or link) since the default styling and behavior might be omitted.\n\u2003\u2022 Be cautious when spreading props from DrawerPrimitive.Trigger; verify that you understand all the inherited behaviors and how they might interact with your custom styling or additional props.\n\u2003\u2022 This component\u2019s flexibility (via asChild) means you have full control over styling, but with control comes the responsibility to ensure accessibility and consistency across your application.\n\u2003\u2022 Always review the documentation of DrawerPrimitive.Trigger (or the underlying Drawer component library) to understand any additional requirements or constraints that might apply to the trigger behavior.\n\nThis concise explanation should help you understand, integrate, and use the DrawerTrigger component effectively within your React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts",
    "code_snippet": "export interface DrawerCloseProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Close> {\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What this component does or represents:\n\u2003\u2022 The code defines a TypeScript interface named DrawerCloseProps that extends the properties of an underlying primitive Close component (DrawerPrimitive.Close).  \n\u2003\u2022 It is designed to be used as the property type for a DrawerClose component\u2014typically a button or clickable element that, when activated, closes a Drawer (a sidebar or modal).  \n\u2003\u2022 The additional optional asChild prop allows consumers to render the trigger without the default styling, which means you can pass in a custom element to be rendered in place of the default one. This is useful when integrating with custom designs or when further composition is required.\n\n2. How to use it in a larger application:\n\u2003\u2022 You would wrap or use the DrawerClose component within a Drawer component. When using it, you import it from the module '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 The component can accept all the props that the underlying DrawerPrimitive.Close component supports. You can also set asChild to true if you want to supply a custom child element for the close trigger.  \n\u2003\u2022 Example usage in a larger application is shown below:\n\n--------------------------------------------------\nExample Usage:\n\nimport React from 'react';\nimport { Drawer, DrawerClose, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction MyAppDrawer() {\n  return (\n    <Drawer open={true}>\n      <Drawer.Content>\n        <h1>Drawer Content</h1>\n        {/* Default usage: this renders the close trigger with default styling */}\n        <DrawerClose aria-label=\"Close drawer\" />\n        \n        {/* Or render a custom close trigger using the asChild prop */}\n        <DrawerClose asChild aria-label=\"Close drawer\">\n          <Button variant=\"secondary\">Close</Button>\n        </DrawerClose>\n      </Drawer.Content>\n    </Drawer>\n  );\n}\n\nexport default MyAppDrawer;\n--------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Always provide accessible properties such as aria-label to the DrawerClose element to ensure the close button is accessible for screen readers.\n\u2003\u2022 When using the asChild prop, ensure that the custom child component supports forwarding refs if needed by the underlying DrawerPrimitive.Close (this is usually required for integrations with libraries that rely on ref management).\n\u2003\u2022 Maintain consistency with your app\u2019s styling conventions. If you\u2019re overriding the default styles using asChild, be sure that the new element integrates seamlessly with the overall UI.\n\u2003\u2022 Limitations: Since DrawerCloseProps extends a primitive component\u2019s props, any limitation inherent in the DrawerPrimitive.Close (such as event handling or styling constraints) may also affect the DrawerClose component.\n\nThis approach ensures that the DrawerClose component is flexible, accessible, and easy to integrate into your application using the '@worldcoin/mini-apps-ui-kit-react' package."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Flag/Flag.tsx",
    "code_snippet": "export type CountryCode = keyof typeof FlagComponents;\ninterface FlagProps {\n  /**\n   * ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')\n   */\n  countryCode: CountryCode;\n  /**\n   * Width and height in pixels for the flag SVG. Defaults to 40px if not specified.\n   */\n  size?: number;\n}",
    "explanation": "1. Purpose and Representation:\n\u2022 This code defines a type and interface for a Flag component, which is likely used to render country flag icons.\n\u2022 The CountryCode type is dynamically derived from the keys of an object named FlagComponents, ensuring that only valid, supported ISO 3166-1 alpha-2 country codes (like 'US', 'GB', 'FR', etc.) can be used.\n\u2022 The FlagProps interface defines the required and optional properties for the component:\n\u2003 \u2013 countryCode: A string representing the country's ISO code.\n\u2003 \u2013 size: An optional number specifying the width and height (in pixels) of the SVG flag. If not provided, the component defaults to 40px.\n\n2. How to Use in a Larger Application:\n\u2022 Import the Flag component (or a similar component built using these types) from the '@worldcoin/mini-apps-ui-kit-react' package. For example:\n\u2003\n\u2003 import { Flag } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\n\u2022 Pass the required countryCode prop and optionally the size prop when using the component:\n\u2003\n\u2003 <Flag countryCode=\"US\" size={50} />\n\u2003\n\u2022 In a larger application, the component can be used anywhere a visual representation of a country's flag is required, such as in user profiles, internationalization selectors, or dashboards.\n\n3. Best Practices and Limitations:\n\u2022 Always ensure that the countryCode provided is one of the keys defined in FlagComponents. This prevents runtime errors and ensures that the component renders the expected flag.\n\u2022 Use the optional size prop to maintain consistency in flag dimensions across your UI. If not using a custom size, rely on the default of 40px for a consistent look.\n\u2022 Validate props where necessary, especially when dealing with dynamic user inputs or data from APIs.\n\u2022 Limitation: The component\u2019s flexibility is dependent on the FlagComponents object. Any flag not included in FlagComponents will not be rendered, so the available flags might be limited to a predefined list.\n\u2022 Follow the standard React best practices like keeping components stateless if they only render based on properties and modularizing UI elements for reuse.\n\nBy following these practices and understanding the code snippet, you can seamlessly integrate and use a Flag component within your React applications using the '@worldcoin/mini-apps-ui-kit-react' package."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Flag/Flag.tsx",
    "code_snippet": "export const Flag = forwardRef<SVGSVGElement, FlagProps>(({ countryCode, size = 40 }, ref) => {\n  const Component = FlagComponents[countryCode];\n\n  return <Component ref={ref} width={size} height={size} />;\n});\n\nFlag.displayName = \"Flag\";",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What this component does or represents:\n\u2003\u2022 The component named Flag is a React functional component that renders an SVG flag icon.\n\u2003\u2022 It uses the forwardRef API, which allows parent components to get a direct reference to the actual SVG element.\n\u2003\u2022 The component receives a countryCode prop, which is used to select the appropriate flag from a FlagComponents object lookup.\n\u2003\u2022 It also accepts an optional size prop, which defines both the width and height of the rendered SVG (defaulting to 40).\n\n2. How to use it in a larger application (props, typical usage, example):\n\u2003\u2022 Props include:\n\u2003\u2003\u2013 countryCode (required): A string that corresponds to a key in the FlagComponents object.\n\u2003\u2003\u2013 size (optional): A number defining the dimensions of the flag icon (default is 40).\n\u2003\u2022 Since it forwards refs, you can attach a ref to the component to interact with the underlying SVG element.\n\u2003\u2022 Example usage:\n\n--------------------------------------------------\nimport React, { useRef, useEffect } from 'react';\nimport { Flag } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst App = () => {\n  const flagRef = useRef<SVGSVGElement>(null);\n\n  useEffect(() => {\n    if (flagRef.current) {\n      // Example: Log the SVG element to the console.\n      console.log(flagRef.current);\n    }\n  }, []);\n\n  return (\n    <div>\n      {/* Render a flag for a given country code with default size */}\n      <Flag countryCode=\"us\" ref={flagRef} />\n      {/* Render another flag with a custom size */}\n      <Flag countryCode=\"ca\" size={60} />\n    </div>\n  );\n};\n\nexport default App;\n--------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best practices:\n\u2003\u2003\u2013 Using forwardRef enhances the component's reusability in cases where DOM access is needed.\n\u2003\u2003\u2013 Setting a displayName (i.e., Flag.displayName = \"Flag\") is helpful for debugging, especially when using higher-order components or React DevTools.\n\u2003\u2003\u2013 Prop validation or TypeScript interfaces (i.e., FlagProps) help ensure that only valid props are passed.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The rendering relies on the existence of a matching component in the FlagComponents lookup for the provided countryCode; if a country code is invalid or missing, it might throw an error or render nothing.\n\u2003\u2003\u2013 The component assumes the flag components accept ref, width, and height props and render correctly as SVG elements.\n\u2003\u2003\u2013 Ensure that the FlagComponents object and the corresponding components are loaded/imported correctly elsewhere in the codebase.\n\nThis explanation outlines what the Flag component does, how to use it, and some practical considerations for its use in a larger React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Flag/utils.ts",
    "code_snippet": "export const isSupportedCountryCode = (code: string): code is CountryCode => {\n  return Object.prototype.hasOwnProperty.call(FlagComponents, code.toUpperCase());\n};",
    "explanation": "Below is a concise explanation of what the provided code does, how you might use it, and some best practices:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. What This Component Does or Represents\n\n\u2022 The snippet defines a utility function named isSupportedCountryCode.  \n\u2022 It acts as a type guard, meaning, when you call it with a string, it checks if that string (after converting to uppercase) exists as a property on the FlagComponents object.  \n\u2022 If the property exists, it confirms that the string is a valid CountryCode. Thus, it \u201cnarrows\u201d the type from string to CountryCode.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to Use It in a Larger Application\n\n\u2022 You might use this type guard in components that handle user input or data fetched from an API to ensure that you only process or render supported country codes.  \n\u2022 This function is particularly useful in rendering flag icons or performing country-specific logic where only a predefined set of country codes is allowed.\n  \nFor instance, consider a component that shows a flag icon only if the country code is supported:\n\n----------------------------------------------------\nimport React from 'react';\nimport { isSupportedCountryCode, FlagComponents } from '@worldcoin/mini-apps-ui-kit-react';\n\ninterface FlagDisplayProps {\n  countryCode: string;\n}\n\nexport const FlagDisplay: React.FC<FlagDisplayProps> = ({ countryCode }) => {\n  // Validate the country code using the type guard\n  if (!isSupportedCountryCode(countryCode)) {\n    return <div>Country code not supported.</div>;\n  }\n\n  // If the code is valid, dynamically pick the correct flag component.\n  // Assume FlagComponents is a mapping like { US: USFlagComponent, CA: CAFlagComponent, ... }\n  const FlagIcon = FlagComponents[countryCode.toUpperCase()];\n\n  return <FlagIcon />;\n};\n\n----------------------------------------------------\n\n\u2022 In the above usage:\n  - The FlagDisplay component receives a countryCode prop.\n  - It uses isSupportedCountryCode to verify the validity.\n  - If valid, it retrieves and renders the corresponding flag component from FlagComponents.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices or Limitations\n\n\u2022 Best Practices:\n  - Use a type guard like this to enforce type safety, ensuring that only valid country codes are processed.\n  - Convert the country code to uppercase consistently to avoid case-sensitivity issues.\n  - Import your utilities and components from the public package (e.g., '@worldcoin/mini-apps-ui-kit-react') to maintain consistency and avoid issues related to module resolution.\n\n\u2022 Limitations:\n  - This function depends on the existence and structure of FlagComponents. If FlagComponents does not have the desired mapping or gets updated, the function may need adjustments.\n  - The function assumes that supported country codes are stored as keys in FlagComponents. If the data source changes, you may need to update the validation logic.\n  - It only checks for the existence of a key and not the validity of the value (e.g., whether it actually is a valid React component).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nIn summary, isSupportedCountryCode is a utility function that helps ensure only valid country codes (from a predefined set) are used within your application. By using this function alongside explicit type definitions, you can build more robust and maintainable country-specific features, such as rendering flag icons conditionally, and ensure you are importing components in a standardized way from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Flag/constants.ts",
    "code_snippet": "export const countryCodes = Object.keys(FlagComponents).map((code) =>\n  code.toUpperCase(),\n) as CountryCode[];",
    "explanation": "Below is an explanation of the provided code snippet:\n\n1. What this component does or represents:\n\u2003\u2022 The code creates and exports a constant named countryCodes.  \n\u2003\u2022 It extracts the keys from the FlagComponents object, converts each key to uppercase, and then asserts that the resulting array is of type CountryCode[].  \n\u2003\u2022 This export can be used elsewhere as a standardized list of country codes (in uppercase) that correspond to the available flag components.\n\n2. How to use it in a larger application:\n\u2003\u2022 Imagine you have a component (like a country selector) that needs to display a list of country codes. You could import countryCodes from this module to populate options.\n\u2003\u2022 For instance, if you're displaying a dropdown list, you would import countryCodes (and any other related UI components from '@worldcoin/mini-apps-ui-kit-react') and then use them in your render function.\n\nExample usage:\n\n-------------------------------------------------\nimport React from 'react';\nimport { Select } from '@worldcoin/mini-apps-ui-kit-react';\nimport { countryCodes } from '@worldcoin/mini-apps-ui-kit-react'; // assuming the export is from the package\n\ntype CountrySelectorProps = {\n  onSelect: (code: string) => void;\n};\n\nexport const CountrySelector: React.FC<CountrySelectorProps> = ({ onSelect }) => {\n  return (\n    <Select onChange={(event) => onSelect(event.target.value)}>\n      {countryCodes.map((code) => (\n        <option key={code} value={code}>\n          {code}\n        </option>\n      ))}\n    </Select>\n  );\n};\n\n-------------------------------------------------\n\u2003\u2022 In this example, the first step is importing the countryCodes array, and also a Select component from '@worldcoin/mini-apps-ui-kit-react'. You then loop over the countryCodes to create the dropdown options.  \n\u2003\u2022 The onSelect callback receives the selected country code whenever a user makes a selection.\n\n3. Best practices or limitations:\n\u2003\u2022 Ensure that FlagComponents is properly defined and imported in the module where countryCodes is created. The validity of countryCodes depends on the keys available in FlagComponents.  \n\u2003\u2022 The use of type assertion (as CountryCode[]) indicates that you\u2019re confident in the types derived from FlagComponents. Maintain consistency in your types to avoid runtime errors.  \n\u2003\u2022 Keeping the code modular allows for easy updates; for example, if FlagComponents changes, countryCodes will update automatically.\n\u2003\u2022 When using this snippet in a larger application, remember to import from '@worldcoin/mini-apps-ui-kit-react' rather than relative paths, which helps standardize module resolution and improves maintainability.\n\nThis explanation should help in understanding the snippet and how to reuse it effectively in your projects."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Flag/LazyFlag.tsx",
    "code_snippet": "export const LazyFlag = forwardRef<SVGSVGElement, FlagProps>(\n  ({ countryCode, size = 40 }, ref) => {\n    const FlagComponent = lazy(() =>\n      import(`./flag-components/${countryCode.toLowerCase()}.tsx`).catch(() => ({\n        default: () => <Placeholder size={size} className=\"animate-none bg-gray-200\" />,\n      })),\n    );\n\n    return (\n      <Suspense fallback={<Placeholder size={size} />}>\n        <FlagComponent ref={ref} width={size} height={size} />\n      </Suspense>\n    );\n  },\n);\n\nLazyFlag.displayName = \"LazyFlag\";",
    "explanation": "This component, LazyFlag, is a React component that displays a country flag icon by dynamically importing (i.e., lazy loading) a flag component file for the given country code. It uses React\u2019s forwardRef to allow parent components to obtain a reference to the SVG element. Here\u2019s a breakdown:\n\n1. What It Does:\n   \u2022 LazyFlag accepts a countryCode prop (e.g., \"us\" for the United States) and an optional size prop (default 40).\n   \u2022 It attempts to import a corresponding flag component from a folder based on the lowercased country code.\n   \u2022 If the import fails (for example, if there is no matching file), it falls back to rendering a Placeholder component styled with a gray background.\n   \u2022 The lazy-loaded component is rendered within React\u2019s Suspense component with a fallback that shows the Placeholder until the flag component is ready.\n\n2. How to Use It in a Larger Application:\n   \u2022 Import LazyFlag from the UI kit.\n   \u2022 Use it by specifying at least a countryCode, and optionally adjust the size.\n   \u2022 If you need to access the underlying SVG element, you can pass a ref.\n   \u2022 Example usage:\n\n--------------------------------------------------\nimport React from 'react';\nimport { LazyFlag } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction Example() {\n  return (\n    <div>\n      <h2>User Country</h2>\n      <LazyFlag countryCode=\"us\" size={50} />\n    </div>\n  );\n}\n\nexport default Example;\n--------------------------------------------------\n\n3. Best Practices and Limitations:\n   \u2022 Using dynamic imports (lazy loading) helps reduce the initial bundle size, loading flag components only when needed.\n   \u2022 Always provide a fallback (here, the Placeholder) for the Suspense so the UI doesn\u2019t appear empty during the load.\n   \u2022 Ensure your file structure matches the dynamic import path (i.e., flag-components folder with files named after the lowercased country codes, such as us.tsx).\n   \u2022 The component assumes that each flag file default exports a valid React component that accepts width and height props.\n   \u2022 The ref forwarding allows integration with other components, but make sure to correctly handle refs in your parent components.\n   \u2022 Since the dynamic import is based on a string template, any mis-typed countryCode may lead to the fallback being rendered. Validate inputs if necessary.\n\nOverall, LazyFlag is a convenient, performance-conscious component for rendering country flags in larger applications."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Marble/Marble.tsx",
    "code_snippet": "export const Marble = forwardRef<HTMLImageElement, ComponentProps<\"img\">>((props, ref) => {\n  const { className, ...rest } = props;\n\n  return (\n    <img\n      ref={ref}\n      alt=\"Marble\"\n      className={cn(\n        \"rounded-full border-2 border-gray-100 p-[3px] aspect-square w-[7.5rem] object-cover\",\n        className,\n      )}\n      {...rest}\n    />\n  );\n});\n\nMarble.displayName = \"Marble\";",
    "explanation": "This component, Marble, is a styled image element built using React and TypeScript. Here\u2019s a concise breakdown:\n\n1. What it does:\n\u2003\u2022 Marble is a functional component that renders an <img> element with a preset style.  \n\u2003\u2022 It leverages React\u2019s forwardRef to forward a ref to the underlying HTML image element, allowing parent components to access the DOM node directly.  \n\u2003\u2022 The styling (using a utility function cn for combining classes) gives the image a circular appearance with a border, padding, fixed aspect ratio and width, ensuring a consistent \u201cmarble-like\u201d look.\n\n2. How to use it in a larger application:\n\u2003\u2022 Marble accepts all standard props applicable to an HTML <img> element (like src, alt\u2014although alt is overridden to a default of \u201cMarble\u201d in this example unless you change it via spreading props, and any additional styling or event handlers).\n\u2003\u2022 To use Marble, import it from '@worldcoin/mini-apps-ui-kit-react' instead of a local relative path.  \n\u2003\u2022 Example usage in a larger component might look like this:\n\n--------------------------------------------------\n/* Example Usage */\nimport React from 'react';\nimport { Marble } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst UserProfile = () => {\n  return (\n    <div>\n      <h2>User Profile</h2>\n      <Marble \n        src=\"https://example.com/path-to-image.jpg\" \n        className=\"custom-class\" \n        ref={/* optional ref if needed */}\n      />\n    </div>\n  );\n};\n\nexport default UserProfile;\n--------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 The component uses forwardRef which is recommended for components that need to expose their internal DOM elements to parent components.  \n\u2003\u2022 The displayName is set explicitly (\u201cMarble\u201d) to facilitate easier debugging in React Developer Tools.  \n\u2003\u2022 The styling is hardcoded using specific utility classes (likely from a framework like Tailwind CSS). If your project\u2019s design system differs, you may need to override or extend these classes via the className prop.  \n\u2003\u2022 Ensure that you respect the default alt text when using this component; if you require a descriptive alt, you might consider modifying the component or passing the appropriate props.  \n\u2003\u2022 The component assumes the presence of a utility function (cn) for combining class names. Make sure that this utility is available or imported where required in your project.\n\nIn summary, Marble is a reusable, forwardRef-enabled image component with pre-defined styling suitable for rendering circular images. It is designed to be easily integrated into larger applications via standardized props and export conventions from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export type FormProps = RadixFormProps;",
    "explanation": "This snippet creates a type alias:\n\n\u2003\u2003export type FormProps = RadixFormProps;\n\nHere\u2019s what this means and how you might use it:\n\n1. What It Represents\n\u2003\u2003\u2022 The code defines FormProps as an alias for RadixFormProps. Essentially, this means that any component or function using FormProps will have the same properties/structure as defined in RadixFormProps (likely imported from the Radix UI library or internally defined elsewhere).\n\u2003\u2003\u2022 This alias is useful to ensure type consistency and clarity when building form components that leverage Radix UI\u2019s form implementation. It lets you refer to your form properties as \u201cFormProps\u201d, which may be clearer within your component library's context.\n\n2. How to Use It in a Larger Application\n\u2003\u2003\u2022 Suppose you have a Form component that depends on these props. You can use FormProps to type-check the props for that component.\n\u2003\u2003\u2022 When using this component within your application, import the Form (or any sibling/related component) directly from the kit. For example:\n\n\u2003\u2003\u2003import { Form } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003\u2022 Then, you could use the Form component in your app like this:\n\n\u2003\u2003\u2003import React from 'react';\n\u2003\u2003\u2003import { Form, Button, Input } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003\u2003interface MyFormData {\n\u2003\u2003\u2003\u2003name: string;\n\u2003\u2003\u2003\u2003email: string;\n\u2003\u2003\u2003}\n\n\u2003\u2003\u2003const MyForm: React.FC = () => {\n\u2003\u2003\u2003\u2003const handleSubmit = (data: MyFormData) => {\n\u2003\u2003\u2003\u2003\u2003console.log('Submitted form data:', data);\n\u2003\u2003\u2003\u2003};\n\n\u2003\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003\u2003<Form onSubmit={handleSubmit}>\n\u2003\u2003\u2003\u2003\u2003\u2003<Input name=\"name\" placeholder=\"Enter your name\" />\n\u2003\u2003\u2003\u2003\u2003\u2003<Input name=\"email\" placeholder=\"Enter your email\" />\n\u2003\u2003\u2003\u2003\u2003\u2003<Button type=\"submit\">Submit</Button>\n\u2003\u2003\u2003\u2003\u2003</Form>\n\u2003\u2003\u2003\u2003);\n\u2003\u2003\u2003};\n\n\u2003\u2003\u2022 In this example, Form, Button, and Input are imported from '@worldcoin/mini-apps-ui-kit-react', ensuring consistency in usage across your project. The Form component expects props conforming to FormProps (which in turn conform to RadixFormProps).\n\n3. Best Practices and Limitations\n\u2003\u2003\u2022 Best Practices:\n\u2003\u2003\u2003- Use type aliases like this to encapsulate external type definitions so that you can easily swap implementations if needed.\n\u2003\u2003\u2003- Always import your UI components from the library package (in this case, '@worldcoin/mini-apps-ui-kit-react') instead of relative paths. This ensures consistency and easier maintenance.\n\u2003\u2003\u2003- Document the purpose of these aliases so that other developers understand that FormProps mirrors RadixFormProps.\n\u2003\u2003\u2022 Limitations:\n\u2003\u2003\u2003- The snippet does not show the actual implementation details of the Form component or RadixFormProps. Ensure that any changes in RadixFormProps are tracked and reflected appropriately.\n\u2003\u2003\u2003- If RadixFormProps evolves (e.g., changes in API or additional required properties), you must update your alias and inform the team to ensure that components using FormProps still function as expected.\n\nIn summary, this type alias helps maintain clear and consistent typing for form components, facilitating better development practices while integrating external UI libraries such as Radix UI within your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const Root = RadixForm.Root;",
    "explanation": "Below is an explanation of the provided snippet:\n\n1. What this component does or represents:\n\u2003\u2022 The code is re-exporting a component named Root from an existing RadixForm library. This means that within your UI kit, Root acts as a form container or entry point that wraps around form elements and handles form-related behavior. It is essentially a pass-through for the underlying RadixForm.Root component.\n\n2. How to use it in a larger application:\n\u2003\u2022 Since Root is the top-level component to set up the form context, you would typically wrap your form fields and buttons with it.\n\u2003\u2022 It may accept props such as onSubmit, defaultValues, and any custom props supported by RadixForm.\n\u2003\u2022 To integrate it into your application, import it from the UI kit package rather than using a relative path.\n\u2003\nExample usage:\n----------------------------------------------------\nimport React from 'react';\nimport { Root, Button, TextInput } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyForm = () => {\n  const handleSubmit = (data: any) => {\n    console.log('Submitted data:', data);\n  };\n\n  return (\n    <Root onSubmit={handleSubmit}>\n      <TextInput name=\"email\" placeholder=\"Enter your email\" />\n      <TextInput name=\"password\" type=\"password\" placeholder=\"Enter your password\" />\n      <Button type=\"submit\">Submit</Button>\n    </Root>\n  );\n};\n\nexport default MyForm;\n----------------------------------------------------\n\u2003\u2022 In this example, the Root component is used as a container for the form. It handles the submission logic and organizes nested form items (TextInput and Button) accordingly.\n\n3. Best practices and limitations:\n\u2003\u2022 When using a re-exported component, always refer to the official documentation of the original library (here, RadixForm) for full details on accepted props and behavior.\n\u2003\u2022 Keep props and events consistent with the Radix implementation, as any mismatch or misuse might lead to unexpected behavior.\n\u2003\u2022 Ensure that the Root component is wrapped properly and that all nested form elements are placed inside it to take advantage of the context it provides.\n\u2003\u2022 Although re-exporting simplifies consumption, remember that updates or changes in the original RadixForm component may affect your component without explicit changes in your code.\n\u2003\u2022 Always import the component from '@worldcoin/mini-apps-ui-kit-react' as recommended, to ensure consistency and ease of maintenance across your project.\n\nThis approach helps in creating a modular and maintainable form component that integrates seamlessly into your larger React/TypeScript application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const Field = RadixForm.Field;",
    "explanation": "1. Description:\n\u2003The Field component is essentially a re-export of the Field component from the RadixForm library. It represents a form field that can encapsulate various input elements along with built-in label, error handling, and validation mechanisms provided by RadixForm. In other words, it\u2019s a building block within a form for collecting user input with structured properties and behaviors.\n\n2. How to Use It in a Larger Application:\n\u2003Since Field is re-exported via the UI kit package, you import it from '@worldcoin/mini-apps-ui-kit-react'. You can then use it in your forms by specifying key props such as name, label, and any validation rules.\n\u2003Example usage:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Field, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003function MyForm() {\n\u2003\u2003  return (\n\u2003\u2003    <form onSubmit={handleSubmit}>\n\u2003\u2003      <Field name=\"email\" label=\"Email\">\n\u2003\u2003        <input type=\"email\" placeholder=\"Enter your email\" />\n\u2003\u2003      </Field>\n\u2003\u2003      <Field name=\"password\" label=\"Password\">\n\u2003\u2003        <input type=\"password\" placeholder=\"Enter your password\" />\n\u2003\u2003      </Field>\n\u2003\u2003      <Button type=\"submit\">Submit</Button>\n\u2003\u2003    </form>\n\u2003\u2003  );\n\u2003\u2003\n\u2003\u2003  function handleSubmit(event: React.FormEvent) {\n\u2003\u2003    event.preventDefault();\n\u2003\u2003    // Form submission logic here\n\u2003\u2003  }\n\u2003\u2003}\n\u2003\u2003\n\u2003This example demonstrates importing Field (and an additional Button component) from the UI kit and using them within a form to capture input values.\n\n3. Best Practices & Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Import the component directly from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and avoid issues with relative path imports.\n\u2003\u2003\u2013 Leverage the component\u2019s built-in validation and error display features to reduce boilerplate in form management.\n\u2003\u2003\u2013 Ensure that required props like name and label are provided for accessibility and form management.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component\u2019s behavior, styling, and validation rules depend on the underlying RadixForm implementation; any limitations in RadixForm will reflect here.\n\u2003\u2003\u2013 Customization beyond the provided props might require additional wrappers or overriding default styles, so ensure you consult the documentation of the UI kit for advanced usage scenarios.\n\nThis re-export and usage pattern simplifies your application by centralizing UI components, improving maintainability and ensuring consistent behavior across your forms."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const Control = RadixForm.Control;",
    "explanation": "Below is a concise explanation of the code snippet:\n\n1. What the Component Represents:\n\u2003\u2022 The code re-exports the Control component from the RadixForm library. This means that Control is essentially a building block for constructing form controls (like input groups, labels, error messages, etc.) and can be used as part of a form.\n\u2003\u2022 It encapsulates some lower-level form behaviors, likely providing consistency in terms of styling, layout, and accessibility as established by the RadixForm package.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 You can import the Control component from the UI kit (as shown below), and then use it to wrap or structure other form elements in your form components.\n\u2003\u2022 For example, you might use it inside a more comprehensive form component where you need to display labeled inputs, error messages, etc. The props expected on Control are defined by RadixForm, so you need to refer to its documentation for details. Common props might include identifiers, styling overrides, and event handlers.\n\nExample usage in a larger component:\n\n-------------------------------------------------------\nimport React from 'react';\nimport { Control, Button, Input } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst SignupForm = () => {\n  return (\n    <form>\n      {/* Typically, the Control component would be used for grouping/structuring a form element */}\n      <Control>\n        <label htmlFor=\"email\">Email</label>\n        <Input id=\"email\" type=\"email\" placeholder=\"Enter your email\" />\n      </Control>\n      <Control>\n        <label htmlFor=\"password\">Password</label>\n        <Input id=\"password\" type=\"password\" placeholder=\"Enter your password\" />\n      </Control>\n      <Button type=\"submit\">Sign Up</Button>\n    </form>\n  );\n};\n\nexport default SignupForm;\n-------------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Use the Control component along with related form components from the same UI kit to ensure consistent styling and behavior.\n\u2003\u2003- Consult the underlying RadixForm documentation to understand all available props and proper usage, which can help in maintaining accessibility and expected form behavior.\n\u2003\u2003- Keep component re-exports organized so that consumers of the UI kit have a clear, centralized way to import all needed form components.\n\u2003\u2022 Limitations:\n\u2003\u2003- Since Control is simply re-exported from RadixForm, its behavior, API, and limitations are tied directly to that underlying implementation.\n\u2003\u2003- Changes or updates in RadixForm might affect the Control component behavior; ensure compatibility when updating dependencies.\n\u2003\u2003- If additional customization is needed beyond what RadixForm provides, you might have to extend or wrap the Control component further.\n\nUsing the Control component in the context of other components from the UI kit (imported from '@worldcoin/mini-apps-ui-kit-react') keeps your application code clean, consistent, and aligned with best practices for building forms in a React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const Message = forwardRef<\n  React.ElementRef<typeof RadixForm.Message>,\n  React.ComponentPropsWithoutRef<typeof RadixForm.Message> & {\n    error?: boolean;\n    textAlign?: \"left\" | \"center\" | \"right\";\n  }\n>(({ className, error, textAlign = \"left\", ...props }, ref) => (\n  <div\n    className={cn(\n      \" px-2 flex items-center justify-center\",\n      textAlign === \"left\" && \"justify-start\",\n      textAlign === \"center\" && \"justify-center\",\n      textAlign === \"right\" && \"justify-end\",\n    )}\n  >\n    <RadixForm.Message\n      ref={ref}\n      className={cn(\n        \"h-[1.625rem] mt-1 flex items-center\",\n        typographyVariants({\n          variant: \"body\",\n          level: 4,\n        }),\n        error ? \"text-error-600\" : \"text-gray-500\",\n      )}\n      {...props}\n    />\n  </div>\n));",
    "explanation": "Below is a concise explanation of the provided Message component:\n\n1. What It Does or Represents:\n   \u2022 The component is a custom Message component built on top of RadixForm.Message. It uses React\u2019s forwardRef API to pass refs to the inner RadixForm.Message.\n   \u2022 It accepts additional props: an optional error flag to toggle error styling, and a textAlign prop (\"left\", \"center\", or \"right\") to control horizontal alignment of the message.\n   \u2022 It wraps the inner message in a div that uses utility classes (via a helper called cn) to apply padding, flexbox layout, and conditional justification based on the textAlign value.\n   \u2022 Based on the error prop, it applies different text colors (error color when true, muted color when false) using typography variant styling.\n\n2. How to Use It in a Larger Application:\n   \u2022 To use this Message component within a broader application, import it from the kit package (as required, from '@worldcoin/mini-apps-ui-kit-react').\n   \u2022 The component inherits all the props from RadixForm.Message (minus ref forwarding considerations) and accepts additional props error and textAlign.\n   \u2022 Example usage:\n\n   Example:\n   ------------------------------------------------\n   // Importing the component from the UI kit\n   import { Message } from '@worldcoin/mini-apps-ui-kit-react';\n\n   const LoginForm = () => {\n     // Simulate a form error condition\n     const isError = true;\n     return (\n       <form>\n         {/* Other form fields ... */}\n         <Message error={isError} textAlign=\"center\">\n           Please enter a valid email address.\n         </Message>\n       </form>\n     );\n   };\n\n   export default LoginForm;\n   ------------------------------------------------\n   \u2022 This shows that Message can be easily included in a form to deliver contextual messages with appropriate styling based on the error state and alignment.\n\n3. Best Practices or Limitations:\n   \u2022 Use forwardRef properly when you need to get direct ref access to the inner RadixForm.Message, which is a common pattern for integrating with form libraries or advanced focus management.\n   \u2022 Note that all styling here is applied using a utility function (cn) along with predefined typographyVariants. Ensure these helper functions and style defaults are available in your project.\n   \u2022 The textAlign prop only supports \"left\", \"center\", or \"right\". If additional alignment options are required later, the component may need to be updated.\n   \u2022 Ensure consistent import paths from '@worldcoin/mini-apps-ui-kit-react' to maintain modularity and avoid issues from using relative paths.\n   \u2022 Finally, always validate that the properties passed to the component are of the expected types, which TypeScript helps to enforce for robust UI development.\n\nThis explanation, along with the usage example and best practice guidelines, should give you a clear picture of how to integrate and leverage the Message component in your projects."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const ValidityState: typeof RadixForm.ValidityState = RadixForm.ValidityState;",
    "explanation": "1. Overview:\n\u2003\u2022 This code re-exports the ValidityState from an underlying RadixForm module. Essentially, it creates an alias so that consumers of the UI kit can access RadixForm.ValidityState via the UI kit package. It preserves the same type (and runtime value) as RadixForm.ValidityState, which likely contains enumerated values or state indicators for form validation (e.g., valid, invalid, etc.).\n\n2. Usage in a Larger Application:\n\u2003\u2022 Import the ValidityState component (or constant) from the UI kit package when you need to check or utilize form validation states.\n\u2003\u2022 Typical usage is in form components where you want to conditionally render UI based on whether form controls are valid or invalid.\n\u2003\u2022 Example:\n\u2003\u2003ExampleForm.tsx:\n\u2003\u2003--------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { ValidityState, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const ExampleForm = () => {\n\u2003\u2003\u2002\u2002// Use ValidityState to check the form state; for example:\n\u2003\u2003\u2002\u2002const currentValidity = ValidityState.INVALID; // or similar value provided by RadixForm.ValidityState\n\u2003\u2003\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<form>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002{/* Your form fields here */}\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002<div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002{currentValidity === ValidityState.INVALID && <span>Please fix the errors above.</span>}\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002</div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002<Button type=\"submit\">Submit</Button>\n\u2003\u2003\u2002\u2002\u2002\u2002</form>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default ExampleForm;\n\u2003\u2003--------------------------------------------------\n\u2003\u2022 In this example, the ValidityState constant is used to compare the current state of form validity and conditionally display a message.\n\n3. Best Practices & Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Re-exporting modules like this helps centralize your UI components, making it easier to change underlying dependencies later.\n\u2003\u2003\u2013 Use explicit typing to make the API contract clear for consumers.\n\u2003\u2003\u2013 Import components from the library package (e.g., '@worldcoin/mini-apps-ui-kit-react') rather than using relative paths for consistency and easier maintenance.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 Since this is simply an alias to RadixForm.ValidityState, any changes in the underlying RadixForm API or its types will directly affect consumers.\n\u2003\u2003\u2013 It does not add any extra functionality; it merely passes through what RadixForm provides, so additional validation or contextual logic must be implemented elsewhere if needed.\n\nThis design ensures type safety and a clean, centralized set of UI utilities for use throughout your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx",
    "code_snippet": "export const Submit: typeof RadixForm.Submit = RadixForm.Submit;",
    "explanation": "1. What it does:\n\u2022 The code defines a Submit component by re-exporting the Submit subcomponent from RadixForm. This means the Submit component behaves exactly as RadixForm.Submit, typically used as a form-submit button.\n\u2022 By declaring its type as typeof RadixForm.Submit, it ensures that Submit carries the same type information and props as the original RadixForm.Submit.\n\n2. How to use it in a larger application:\n\u2022 First, ensure you have the source from RadixForm correctly imported. In your project, import the Submit component from '@worldcoin/mini-apps-ui-kit-react'.\n\u2022 Then, use Submit as a form submission button, typically inside a form component.\n\u2022 Here\u2019s an example usage in a React component:\n\n-------------------------------------------------\nimport React from 'react';\nimport { Submit } from '@worldcoin/mini-apps-ui-kit-react';\nimport { Form } from '@worldcoin/mini-apps-ui-kit-react'; // if the Form component is also provided by the kit\n\nconst MyForm = () => {\n  const handleSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    // Process form submission here\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      {/* Other form controls go here */}\n      <Submit>Submit Form</Submit>\n    </Form>\n  );\n};\n\nexport default MyForm;\n-------------------------------------------------\n\n\u2022 In this example, the Submit component is imported from the UI kit, placed at the end of the form, and automatically handles the submission when clicked.\n\n3. Best practices or limitations:\n\u2022 Keep components decoupled: Re-exporting components like Submit can simplify your imports and keep your code consistent across your application.\n\u2022 Type safety: Declaring the type as typeof RadixForm.Submit ensures that changes to the underlying component are correctly reflected in your Submit component.\n\u2022 Documentation: Ensure that consumers of your UI kit are aware that Submit is a re-export of RadixForm.Submit, so they can pass the correct props as documented by the RadixForm library.\n\u2022 Limitation: If the underlying RadixForm is updated or contains breaking changes, then Submit may also require an update to maintain compatibility.\n\u2022 Modular imports: Always import from '@worldcoin/mini-apps-ui-kit-react' as shown to avoid coupling directly to relative paths and facilitate correct version management in larger projects."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Progress/Progress.tsx",
    "code_snippet": "export const Progress = ({ value, asChild, max, getValueLabel, className }: ProgressProps) => {\n  return (\n    <RadixProgress.Root\n      className={cn(\n        \"relative h-1.5 w-full overflow-hidden rounded-full bg-gray-100\",\n        className,\n      )}\n      style={{\n        // Fix overflow clipping in Safari\n        // https://gist.github.com/domske/b66047671c780a238b51c51ffde8d3a0\n        transform: \"translateZ(0)\",\n      }}\n      value={value}\n      max={max}\n      asChild={asChild}\n      getValueLabel={getValueLabel}\n    >\n      <RadixProgress.Indicator\n        className=\"ease-[cubic-bezier(0.65, 0, 0.35, 1)] size-full bg-current transition-transform duration-[660ms]\"\n        style={{ transform: `translateX(-${100 - Math.min(value, 100)}%)` }}\n      />\n    </RadixProgress.Root>\n  );\n};",
    "explanation": "Below is a concise explanation of the provided Progress component:\n\n1. What It Does  \n\u2022 The component renders a progress bar that visually displays progress based on a numeric value.  \n\u2022 It wraps Radix UI\u2019s progress primitives (<RadixProgress.Root> and <RadixProgress.Indicator>) to create a styled progress bar that has a background and a moving indicator.  \n\u2022 The progress indicator\u2019s width is calculated by applying a CSS transform that translates based on the current progress (computed as 100 minus the provided value), ensuring smooth animated transitions.\n\n2. How to Use It in a Larger Application  \n\u2022 Props:  \n\u2003\u2013 value (number): The current progress value.  \n\u2003\u2013 max (number): The maximum progress value that defines the full bar.  \n\u2003\u2013 asChild (optional): When true or provided, allows the indicator to render its children instead of the default element.  \n\u2003\u2013 getValueLabel (optional): A function to provide an accessible value label.  \n\u2003\u2013 className (optional): Additional classes for custom styling.  \n\n\u2022 Typical usage involves importing the component from the UI kit and passing the necessary props. For example:\n\n--------------------------------------------------\nimport React from 'react';\nimport { Progress } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst App = () => {\n  return (\n    <div>\n      <h1>Progress Example</h1>\n      <Progress\n        value={60}\n        max={100}\n        getValueLabel={(value, max) => `Progress: ${value} of ${max}`}\n        className=\"my-custom-progress\"\n      />\n    </div>\n  );\n};\n\nexport default App;\n--------------------------------------------------\n\n\u2022 In the example above, the Progress component is included with a value of 60 (out of 100), a function to set an accessible label, and additional custom styling through className.\n\n3. Best Practices and Limitations  \n\u2022 Best Practices:  \n\u2003\u2013 Ensure that the value prop does not exceed max or drop below zero to avoid unexpected UI behavior.  \n\u2003\u2013 Use the getValueLabel function to provide descriptive labels for screen readers, enhancing accessibility.  \n\u2003\u2013 Maintain consistency in styling by leveraging the className prop for customization rather than modifying the core RadixProgress classes directly.  \n\u2003\u2013 The inline style transform (\"translateZ(0)\") is used to fix overflow clipping on Safari; be mindful of browser support when overriding or removing such fixes.\n\n\u2022 Limitations:  \n\u2003\u2013 The component restricts customizability to some extent since it relies on pre-defined classes for transitions and animations.  \n\u2003\u2013 If further customization is required beyond the provided props (for example, different animations or structure), you might need to extend or wrap the component further.  \n\nThis explanation covers what the Progress component represents, how to integrate it into your app using imports from '@worldcoin/mini-apps-ui-kit-react', and highlights the best practices and potential limitations while using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Input/Input.tsx",
    "code_snippet": "export const inputVariants = cva(\n  cn(\n    \"peer h-[3.5rem] w-full rounded-[0.625rem] border border-gray-100 bg-gray-100 px-4 outline-none transition duration-300\",\n    \"file:hidden\",\n    \"invalid:border-error-600 invalid:focus:border-error-600 invalid:bg-gray-0\",\n    \"placeholder:text-gray-500\",\n    \"focus:border-gray-300 focus:bg-gray-0 focus-visible:outline-none\",\n    \"disabled:cursor-not-allowed disabled:opacity-50\",\n  ),\n  {\n    variants: {\n      error: {\n        true: \"border-error-600 focus:border-error-600 bg-gray-0\",\n      },\n      isLabel: {\n        true: \"pt-6 pb-2 placeholder:text-transparent\",\n        false: \"\",\n      },\n      isFocused: {\n        true: \"focus:border-gray-300 focus:bg-gray-0 focus-visible:outline-none\",\n        false: \"\",\n      },\n      variant: {\n        \"floating-label\": \"pt-6 pb-2 placeholder:text-transparent\",\n        default: \"\",\n      },\n    },\n    defaultVariants: {\n      error: false,\n      isFocused: false,\n      variant: \"default\",\n    },\n  },\n);",
    "explanation": "This snippet defines a set of dynamic CSS class variants for an input element using the cva (Class Variance Authority) function. Essentially, it creates a style configuration for an input (or similar form element) that changes its appearance based on several boolean and enumerated props.\n\n1. What It Represents:\n\u2003\u2022 It exports a constant called inputVariants, which is a function that generates a string of Tailwind CSS classes.\n\u2003\u2022 It starts with a set of base styles (e.g., dimensions, borders, background, transitions).\n\u2003\u2022 It also supports variants such as:\n\u2003\u2003\u2013 error: When true, it uses error classes that adjust colors and borders.\n\u2003\u2003\u2013 isLabel and variant (with \"floating-label\" specifically available): which adjust padding and placeholder behavior to support a floating label UI pattern.\n\u2003\u2003\u2013 isFocused: Which applies focus styles when the input is focused.\n\u2003\u2022 Default variants are set so that if none of these props is provided, a standard \u201cdefault\u201d style is applied.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the utility from the UI kit:\n\u2003\u2003import { inputVariants } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 Use it in your React component when rendering an input element. Pass variant props to control its appearance. For example:\n\n\u2003\u2003Example:\n\u2003\u2003-------------------------------------------------\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { inputVariants } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003export const MyTextInput = () => {\n\u2003\u2003\u2003 const [value, setValue] = useState('');\n\u2003\u2003\u2003 const hasError = value.length < 5; // for example\n\n\u2003\u2003\u2003 return (\n\u2003\u2003\u2003\u2003 <input\n\u2003\u2003\u2003\u2003\u2003 type=\"text\"\n\u2003\u2003\u2003\u2003\u2003 value={value}\n\u2003\u2003\u2003\u2003\u2003 onChange={(e) => setValue(e.target.value)}\n\u2003\u2003\u2003\u2003\u2003 className={inputVariants({\n\u2003\u2003\u2003\u2003\u2003\u2003 error: hasError,\n\u2003\u2003\u2003\u2003\u2003\u2003 isFocused: false, // Could be managed with additional state or focus handlers\n\u2003\u2003\u2003\u2003\u2003\u2003 variant: value ? \"floating-label\" : \"default\",\n\u2003\u2003\u2003\u2003\u2003 })}\n\u2003\u2003\u2003\u2003 />\n\u2003\u2003\u2003 );\n\u2003\u2003};\n\n\u2003\u2003// Then include <MyTextInput /> wherever needed in your app.\n\u2003\u2003-------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Leverage utility functions like cva to keep your styling consistent and declarative across the app.\n\u2003\u2003\u2013 Always use proper variant names and default values to ensure consistent behavior.\n\u2003\u2003\u2013 Encapsulate visual behavior (like error states or floating labels) inside such style utilities so your main components can remain focused on logic and structure.\n\u2003\u2003\u2013 Use clear and meaningful variant prop names to improve code readability.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 This styling approach relies on Tailwind CSS and a specific configuration. Any changes to the Tailwind framework or project configuration might require adjustments.\n\u2003\u2003\u2013 Variants are predefined; any new UI requirement means you\u2019ll need to extend the inputVariants configuration.\n\u2003\u2003\u2013 Overuse of conditional classes might complicate debugging; therefore, maintaining clear documentation is beneficial.\n\nOverall, inputVariants is a powerful pattern for managing complex styling variations in a reusable and maintainable manner within a React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Input/Input.tsx",
    "code_snippet": "export const iconVariants = cva(\n  \"absolute top-1 bottom-1 flex items-center justify-center overflow-hidden text-gray-400\",\n  {\n    variants: {\n      disabled: {\n        true: \"text-gray-300 cursor-not-allowed\",\n      },\n      position: {\n        start: \"left-0\",\n        end: \"right-0\",\n      },\n    },\n  },\n);\n\nconst dividerVariants = cva(\"border-r  h-[1.625rem] absolute\", {\n  variants: {\n    position: {\n      start: \"left-0\",\n      end: \"right-0\",\n    },\n    error: {\n      true: \"border-error-600\",\n      false: \"border-gray-300\",\n    },\n  },\n  defaultVariants: {\n    error: false,\n  },\n});",
    "explanation": "The code defines two functions\u2014iconVariants and dividerVariants\u2014that use a utility (commonly using a library like class-variance-authority) to generate Tailwind CSS class strings based on variant props. They help you easily manage conditional styling in UI components.\n\n1. What It Represents:\n\u2003\u2022 iconVariants: Generates a set of classes for an icon element positioned absolutely. It can conditionally change its color and pointer behavior when disabled and position itself either at the left (start) or right (end) of its container.\n\u2003\u2022 dividerVariants: Generates classes for a vertical divider with a set height. Its style can change based on the position (left or right) and if there is an error state. By default, it shows a gray border unless an error flag is set to true.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 To use these variant generators, you would typically call them within a component to determine the className for an element. For example, when rendering a button with an optional icon and divider, you might use these functions to calculate the correct classes based on the component\u2019s props.\n\u2003\u2022 Example:\n\n----------------------------------\nimport React from \"react\";\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react';\nimport { iconVariants, dividerVariants } from '@worldcoin/mini-apps-ui-kit-react';\n\ninterface IconProps {\n  disabled?: boolean;\n  position: \"start\" | \"end\";\n}\n\nexport const Icon = ({ disabled, position }: IconProps) => {\n  const classes = iconVariants({ disabled, position });\n  return <span className={classes}>\u2605</span>;\n};\n\ninterface DividerProps {\n  position: \"start\" | \"end\";\n  error?: boolean;\n}\n\nexport const Divider = ({ position, error = false }: DividerProps) => {\n  const classes = dividerVariants({ position, error });\n  return <div className={classes} />;\n};\n\nexport const ExampleComponent = () => (\n  <div className=\"relative flex items-center\">\n    <Icon disabled={false} position=\"start\" />\n    <Button>Click Me</Button>\n    <Divider position=\"end\" error={false} />\n    <Icon disabled={true} position=\"end\" />\n  </div>\n);\n\n----------------------------------\n\u2003\u2022 In this example, components Icon and Divider use the variant functions and are integrated with a Button imported from '@worldcoin/mini-apps-ui-kit-react'.\n\n3. Best Practices or Limitations:\n\u2003\u2022 Keep your styling consistent by centralizing variant definitions so that any changes reflect across all usages.\n\u2003\u2022 Use TypeScript interfaces to enforce allowed variant values and avoid typos in class names.\n\u2003\u2022 When using utility-first CSS libraries (like Tailwind), ensure that your build process respects dynamic class generation\u2014sometimes purge settings need adjustments.\n\u2003\u2022 These variant functions only generate class strings, so they should be combined with actual UI components to render meaningful content.\n\u2003\u2022 Be mindful that too many conditional classes can quickly become complex; consider refactoring if multiple complex variants accumulate.\n\nThis approach fosters reusable, maintainable, and consistent styling for your UI components."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Input/Input.tsx",
    "code_snippet": "export interface InputProps\n  extends Omit<\n      React.InputHTMLAttributes<HTMLInputElement>,\n      \"className\" | \"style\" | \"placeholder\"\n    >,\n    VariantProps<typeof inputVariants> {\n  /**\n   * If true, the input will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the input will display in a valid state with success styling\n   */\n  isValid?: boolean;\n  /**\n   * Element to be rendered at the start (left side) of the input.\n   * The component passed to this prop must accept a `style` prop.\n   * The component should use currentColor to match the Input's styling.\n   * To change styles based on input focus, use Tailwind's `group-*` modifiers\n   * since the input is wrapped in a group class.\n   */\n  startAdornment?: React.ReactNode;\n  /**\n   * Element to be rendered at the end (right side) of the input.\n   * The component passed to this prop must accept a `style` prop.\n   * The component should use currentColor to match the Input's styling.\n   * To change styles based on input focus, use Tailwind's `group-*` modifiers\n   * since the input is wrapped in a group class.\n   */\n  endAdornment?: React.ReactNode;\n  /**\n   * Width of the start adornment in rem\n   * @default 1.25\n   */\n  startAdornmentWidth?: number;\n  /**\n   * Width of the end adornment in rem\n   * @default 1.25\n   */\n  endAdornmentWidth?: number;\n  /**\n   * If true, the input will display in a focused state with focus styling\n   * @default false\n   */\n  isFocused?: boolean;\n  /**\n   * Additional class name for the input\n   */\n  className?: string;\n  /**\n   * Label text to be displayed above the input\n   */\n  label?: string;\n  /**\n   * Variant of the input\n   * @default \"default\"\n   */\n  variant?: \"default\" | \"floating-label\";\n  /**\n   * If true, the dividers will be shown\n   * @default true\n   */\n  showStartDivider?: boolean;\n  /**\n   * If true, the end divider will be shown\n   * @default true\n   */\n  showEndDivider?: boolean;\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What This Component Represents:\n\u2003\u2022 The code defines an interface (InputProps) for an Input component using TypeScript.  \n\u2003\u2022 The props include standard HTML input attributes (with some omitted ones like \"className\", \"style\", and \"placeholder\") and additional custom properties such as error and valid states, adornments (elements rendered at the start or end of the input), and styling options like focus state, label, and variants.  \n\u2003\u2022 It is designed to create a highly customizable input field capable of displaying additional UI elements (like icons) at its sides and adapting its visual state based on error, validity, and focus.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the Input component from the UI kit package as follows:\n\u2003\u2003import { Input } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 You use the Input component like any other React component, by passing in props. For example, you can pass:\n\u2003\u2003\u2013 Standard attributes for an input (e.g., type, name, placeholder).  \n\u2003\u2003\u2013 Custom properties such as:\n\u2003\u2003\u2003* error: to display error styling,\n\u2003\u2003\u2003* isValid: for success styling,\n\u2003\u2003\u2003* label: to show a label above the input,\n\u2003\u2003\u2003* startAdornment/endAdornment: to render icons or other components on either side.\n\u2003\u2022 Example usage:\n\u2003\u2003-------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Input } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const UsernameInput = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <Input\n\u2003\u2003        type=\"text\"\n\u2003\u2003        label=\"Username\"\n\u2003\u2003        placeholder=\"Enter your username\"\n\u2003\u2003        error={false}\n\u2003\u2003        isValid={true}\n\u2003\u2003        isFocused={true}\n\u2003\u2003        startAdornment={<YourIconComponent style={{ color: 'currentColor' }} />}\n\u2003\u2003        endAdornment={<AnotherIconComponent style={{ color: 'currentColor' }} />}\n\u2003\u2003        variant=\"floating-label\"\n\u2003\u2003      />\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default UsernameInput;\n\u2003\u2003-------------------------------------------------\n\u2003\u2022 This example demonstrates how to render the Input with a floating label, adornments on both sides, and specific states for error and focus.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always pass adornment components that accept a style prop and utilize currentColor for proper styling.  \n\u2003\u2003\u2013 Utilize Tailwind CSS group modifiers if you need to change adornment styles based on input focus.  \n\u2003\u2003\u2013 Respect the prop defaults (e.g., startAdornmentWidth, endAdornmentWidth) unless you have a design reason to change them.\n\u2003\u2003\u2013 Ensure accessibility by providing appropriate labels and: placeholder texts when necessary.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component strictly controls internal styling via variants and Tailwind classes; altering these outside the provided props may lead to inconsistent UI behavior.\n\u2003\u2003\u2013 The interface omits some standard HTML input props (e.g., className, style, and placeholder from the inherited HTMLInputAttributes), so if you need to override those, ensure alternative CSS or logic is provided elsewhere.\n\u2003\u2003\u2013 Custom adornments must follow the specified contract (i.e., implement a style prop), so components that don\u2019t meet this criteria may not render correctly.\n\nIn summary, the Input component is a versatile building block for forms in your application, supporting enhanced visuals through error indicators, success states, adornments, and variant styling, imported directly from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Input/Input.tsx",
    "code_snippet": "export const Input = React.forwardRef<HTMLInputElement, InputProps>(\n  (\n    {\n      type = \"text\",\n      error,\n      startAdornment,\n      endAdornment,\n      isValid,\n      startAdornmentWidth = DEFAULT_ADORNMENT_WIDTH,\n      endAdornmentWidth = DEFAULT_ADORNMENT_WIDTH,\n      disabled,\n      className,\n      label,\n      id,\n      showStartDivider,\n      showEndDivider,\n      variant = \"default\",\n      ...props\n    },\n    ref,\n  ) => {\n    return (\n      <div className=\"relative flex w-full items-center group\">\n        {startAdornment && (\n          <div\n            className={cn(iconVariants({ disabled, position: \"start\" }))}\n            style={{ width: `${startAdornmentWidth + 1}rem` }}\n          >\n            {startAdornment}\n            {showStartDivider && (\n              <div className={dividerVariants({ position: \"end\", error })} />\n            )}\n          </div>\n        )}\n        <input\n          ref={ref}\n          id={id}\n          type={type}\n          placeholder={label}\n          disabled={disabled}\n          className={cn(\n            inputVariants({ error, isLabel: variant === \"floating-label\" }),\n            typographyVariants({ variant: \"body\", level: 3 }),\n            className,\n          )}\n          {...props}\n          style={{\n            ...(startAdornment && {\n              paddingLeft: `${(showStartDivider ? 1.6 : 1) + startAdornmentWidth}rem`,\n            }),\n            ...(endAdornment && {\n              paddingRight: `${(showEndDivider ? 1.6 : 1) + endAdornmentWidth}rem`,\n            }),\n            ...(isValid && { paddingRight: `${1 + DEFAULT_ADORNMENT_WIDTH}rem` }),\n          }}\n        />\n        {(isValid || endAdornment) && (\n          <div\n            className={cn(iconVariants({ disabled, position: \"end\" }))}\n            style={{ width: `${endAdornmentWidth + 1}rem` }}\n          >\n            {isValid ? <Tick className=\"text-success-700\" /> : endAdornment}\n            {showEndDivider && (\n              <div className={dividerVariants({ position: \"start\", error })} />\n            )}\n          </div>\n        )}\n        {variant === \"floating-label\" && (\n          <label\n            htmlFor={id}\n            className={cn(\n              typographyVariants({ variant: \"body\", level: 3 }),\n              cn(\n                // Initial state\n                \"peer-placeholder-shown:text-sm peer-placeholder-shown:translate-y-0\",\n                \"peer-focus:-translate-y-[0.6rem] peer-focus:text-xs\",\n                // End state\n                \"absolute text-gray-500 duration-300 transform text-xs\",\n                \"-translate-y-[0.6rem] z-10 pl-4\",\n              ),\n            )}\n            style={{\n              ...(startAdornment && {\n                paddingLeft: `${1 + startAdornmentWidth}rem`,\n              }),\n            }}\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  },\n);\n\nInput.displayName = \"Input\";",
    "explanation": "1. Overview\n\n\u2022 This Input component is a custom, styled text input field built with React and TypeScript.  \n\u2022 It supports additional features such as start and end adornments (e.g., icons), a floating label variant, dynamic paddings based on adornment presence, error styling, disabled state, and an indicator for valid input.  \n\u2022 The component is created using React.forwardRef so that parent components can easily access the underlying <input> element via a ref.\n\n2. Usage in a Larger Application\n\n\u2022 Import the Input component from the UI kit package (following the import convention):\n\n  Example:\n  --------------------------------------------------\n  import React, { useRef } from 'react';\n  import { Input } from '@worldcoin/mini-apps-ui-kit-react';\n\n  const MyForm = () => {\n    const inputRef = useRef<HTMLInputElement>(null);\n\n    return (\n      <div>\n        <Input\n          id=\"username\"\n          label=\"Username\"\n          error={false} // or an error message/flag as needed\n          type=\"text\"\n          startAdornment={<span>$</span>}\n          endAdornment={<span>@</span>}\n          disabled={false}\n          variant=\"floating-label\"  // Use \"default\" for a standard input\n          isValid={true} // It shows a Tick icon if true\n          onChange={(e) => console.log(e.target.value)}\n          ref={inputRef}\n        />\n      </div>\n    );\n  };\n\n  export default MyForm;\n  --------------------------------------------------\n\n\u2022 Props to note:\n  - type: Sets the input type (default \"text\").\n  - label: Text label, used as a placeholder and floating label if variant is \"floating-label\".\n  - error: Indicates error state and is used to style or show an error divider.\n  - startAdornment / endAdornment: Elements (such as icons) to be displayed on the left or right side of the input.\n  - isValid: When true, replaces any endAdornment with a Tick icon, signaling that the input is valid.\n  - startAdornmentWidth / endAdornmentWidth: Control the spacing allocated for the adornments.\n  - showStartDivider / showEndDivider: Flags to render dividing lines between adornments and the input field.\n  - disabled: Disables the input field.\n  - className: Custom class names for additional styling.\n  - variant: Determines the input variant; \"floating-label\" moves the label when the input is focused.\n  - All other valid HTML input props are spread to the <input> element.\n\n3. Best Practices and Limitations\n\n\u2022 Best Practices:\n  - Always import the component from '@worldcoin/mini-apps-ui-kit-react' as specified, to ensure consistency and correct package resolution.\n  - Use React.forwardRef to access the underlying input element when necessary (e.g., focusing the input programmatically).\n  - Leverage the variant prop to choose between a standard input or a floating-label input to suit your UI needs.\n  - Use adornments to provide clear contextual cues (e.g., icons or symbols) for enhanced user experience.\n  - Ensure that the width of the adornments is adjusted as needed, especially when custom content is provided.\n\n\u2022 Limitations:\n  - The component\u2019s layout is highly dependent on the provided styling functions (e.g., cn, inputVariants, typographyVariants), so altering its appearance may require overriding styles or extending those functions.\n  - While default paddings account for adornments and dividers, extremely custom content within adornments may need additional CSS adjustments.\n  - The floating-label effect is achieved based on peer selectors and class manipulations; make sure to test in all supported browsers to verify smooth transitions.\n\nThis concise explanation should help you integrate and understand the Input component as part of your larger application using the '@worldcoin/mini-apps-ui-kit-react' package."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/NumberPad/Delete.tsx",
    "code_snippet": "export function Delete(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M15 6L9 12L15 18\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2.5\"\n        strokeLinecap=\"square\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided component and guidance for how to use it:\n\n1. What It Represents:\n\u2003\u2022 The Delete component is a reusable React component that renders an SVG icon.  \n\u2003\u2022 It draws a simple line-based icon using an SVG path (with the path \"M15 6L9 12L15 18\"), which appears as an arrow or chevron.  \n\u2003\u2022 The component accepts standard SVG properties (via React.SVGProps), making it configurable (for instance via styling, className, etc.).\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the Delete component along with other components from '@worldcoin/mini-apps-ui-kit-react'. For example:\n\u2003\u2003\n\u2003\u2003import { Delete, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2022 You can customize the icon by passing SVG props. It is especially useful as a child of buttons, links, or other clickable elements. For instance, it can be used as an icon inside a Button component to indicate a deletion action:\n\u2003\n\u2003\u2003Example:\n\u2003\u2003-------------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Delete, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003function DeleteButtonExample() {\n\u2003\u2003  const handleDelete = () => {\n\u2003\u2003    // deletion logic goes here\n\u2003\u2003    console.log(\"Item deleted!\");\n\u2003\u2003  };\n\u2003\u2003\n\u2003\u2003  return (\n\u2003\u2003    <Button onClick={handleDelete} startIcon={<Delete style={{ color: 'red' }} />}>\n\u2003\u2003      Delete\n\u2003\u2003    </Button>\n\u2003\u2003  );\n\u2003\u2003}\n\u2003\u2003\n\u2003\u2003export default DeleteButtonExample;\n\u2003\u2003-------------------------------------------------------------\n\u2003\n3. Best Practices and Limitations:\n\u2003\u2022 Use SVGProps to pass through any valid SVG attributes. This ensures the icon is flexible and customizable (e.g., setting width, height, fill, or stroke).\n\u2003\u2022 Always import the component from '@worldcoin/mini-apps-ui-kit-react' as shown, to maintain consistency in your project.\n\u2003\u2022 Since this is a stateless and presentational component, it does not handle any business logic. You should wrap it in interactive components (like buttons) to integrate it into your application workflow.\n\u2003\u2022 Consider accessibility: If the icon is purely decorative, you might want to set aria-hidden=\"true\" to avoid unnecessary screen reader announcements. For interactive icons, ensure proper ARIA labels are provided.\n\u2003\u2022 Limitations: This component is meant for a fixed SVG shape. Any changes to the icon's design require modifying the SVG path data. Additionally, it does not include built-in animations or interactivity.\n\nThis approach keeps your code modular, maintainable, and easy to reuse across your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/NumberPad/NumberPad.tsx",
    "code_snippet": "export const NumberPad = ({\n  value = \"\",\n  onChange,\n  disabled = false,\n  onLongDeletePress = () => {},\n  longPressOptions = {\n    threshold: 1500,\n  },\n}: NumberPadProps) => {\n  // Validate that value is a valid number or empty string\n  if (value !== \"\" && isNaN(Number(value))) {\n    console.error(\"NumberPad value must be a valid number or empty string\");\n  }\n\n  const handleButtonClick = (buttonValue: string) => {\n    if (!onChange || disabled) return;\n\n    if (buttonValue === \"del\") {\n      onChange(value.slice(0, -1));\n    } else if (buttonValue === \".\" && value.includes(\".\")) {\n      // Don't add another decimal point if one already exists\n      return;\n    } else {\n      const newValue = value + buttonValue;\n      // Allow trailing decimal point for partial number input\n      if (buttonValue === \".\" || !isNaN(Number(newValue))) {\n        onChange(newValue);\n      }\n    }\n  };\n\n  const longPressAttributes = useLongPress(onLongDeletePress, longPressOptions);\n\n  return (\n    <div className=\"grid grid-cols-3 grid-rows-4 gap-1 w-full\">\n      {buttons.map((button) => (\n        <button\n          type=\"button\"\n          key={button.value}\n          onClick={() => handleButtonClick(button.value)}\n          disabled={disabled}\n          className={cn(\n            typographyVariants({ variant: \"heading\", level: 3 }),\n            \"h-12 min-w-28 flex items-center justify-center select-none group\",\n            \"disabled:text-gray-300 disabled:cursor-not-allowed disabled:active:bg-transparent\",\n          )}\n          {...(button.value === \"del\" ? longPressAttributes : {})}\n        >\n          <span className=\"duration-200 transition-colors size-12 flex items-center justify-center rounded-full group-active:bg-gray-50\">\n            {button.label || button.value}\n          </span>\n        </button>\n      ))}\n    </div>\n  );\n};",
    "explanation": "Below is a concise explanation of the provided NumberPad component:\n\n1. What the component does or represents:\n\u2003\u2022 The NumberPad is a numeric keypad UI component that renders a grid of buttons (typically numbers, a decimal point, and a delete key). It lets users build a numeric string by clicking on buttons.\n\u2003\u2022 When a button is clicked, it appends the corresponding digit (or decimal point) to the current value. If the delete button (\"del\") is pressed, it removes the last character.\n\u2003\u2022 The component validates that the given value is either empty or a valid number and prevents adding multiple decimal points.\n\u2003\u2022 It supports a long press on the delete button (using a custom hook, useLongPress) so that an action (like clearing the entire input) can be triggered after holding the button for a specified threshold duration (default 1500 ms).\n\n2. How to use it in a larger application:\n\u2003\u2022 The component expects props that include:\n\u2003\u2003\u2013 value (a string representing the current number input),\n\u2003\u2003\u2013 onChange (a callback to update the value),\n\u2003\u2003\u2013 disabled (optional boolean to disable user interactions),\n\u2003\u2003\u2013 onLongDeletePress (callback for handling long press actions, e.g., clearing the input),\n\u2003\u2003\u2013 longPressOptions (optional configuration for the long press behavior).\n\u2003\u2022 In a larger app, you would import and use the NumberPad just like any other component from the UI kit. For example:\n\n---------------------------------------------------------------\nimport React, { useState } from \"react\";\nimport { NumberPad } from \"@worldcoin/mini-apps-ui-kit-react\";\n\nconst App = () => {\n  const [numberInput, setNumberInput] = useState(\"\");\n\n  // This could clear all input when the delete button is long-pressed.\n  const handleLongDeletePress = () => {\n    setNumberInput(\"\");\n  };\n\n  return (\n    <div>\n      <h1>Enter a number:</h1>\n      <NumberPad\n        value={numberInput}\n        onChange={setNumberInput}\n        onLongDeletePress={handleLongDeletePress}\n      />\n      <p>Current value: {numberInput}</p>\n    </div>\n  );\n};\n\nexport default App;\n---------------------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Validation: The component logs an error if the initial value is neither empty nor a valid number. In production apps, consider handling such issues more gracefully.\n\u2003\u2022 User experience: The prevention of multiple decimal points and support for partial number entry (e.g., allowing a trailing decimal point) makes the input more forgiving.\n\u2003\u2022 Accessibility and feedback: The component disables interactions when the disabled prop is true and applies visual cues (using disabled styles). Make sure to extend accessibility features if needed.\n\u2003\u2022 Dependency and styling: This code makes use of utility functions (such as cn and typographyVariants) and hooks (like useLongPress) that need to be available in the project. Ensure that these are defined or imported from the corresponding packages.\n\u2003\u2022 Import paths: All components or utilities should be imported from '@worldcoin/mini-apps-ui-kit-react' (or appropriate paths defined by your project) to maintain consistency across your codebase.\n\nThis approach ensures that NumberPad is both reusable and easy to integrate into various parts of your application, providing a standard numeric input experience."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ToggleGroup/ToggleGroup.tsx",
    "code_snippet": "export { ToggleGroupRoot, ToggleGroupItem };",
    "explanation": "This code exports two components \u2013 ToggleGroupRoot and ToggleGroupItem \u2013 that work together to create a group of toggle buttons (or options). Here\u2019s a breakdown of what these components represent and how you might use them:\n\n1. What It Represents:\n\u2003\u2022 ToggleGroupRoot is the container component that manages the overall state and layout for the toggle elements.\n\u2003\u2022 ToggleGroupItem represents an individual toggle (or selectable option) within that group.\n\u2003\u2022 Together, they provide a structured way to let users select one or more items from a group of options, similar to radio buttons or multi-select buttons.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 You can import these components from the UI kit like so:\n\u2003\u2003import { ToggleGroupRoot, ToggleGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 ToggleGroupRoot is typically used as a controlled component where you pass in the current value(s) and an onChange handler to manage selection state.\n\u2003\u2022 ToggleGroupItem is used inside ToggleGroupRoot to represent each available option. Each item usually requires a unique value and can contain a label or any child content.\n\u2003\u2022 Example usage:\n\u2003\u2003------------------------------------------------\n\u2003\u2003// ExampleComponent.tsx\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { ToggleGroupRoot, ToggleGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const ExampleComponent = () => {\n\u2003\u2003\u2003  // Assume single-select for this example; for multi-select, adjust the logic as needed.\n\u2003\u2003\u2003  const [selectedValue, setSelectedValue] = useState<string | null>(null);\n\n\u2003\u2003\u2003  return (\n\u2003\u2003\u2003\u2003    <ToggleGroupRoot value={selectedValue} onValueChange={setSelectedValue}>\n\u2003\u2003\u2003\u2003\u2003  <ToggleGroupItem value=\"option1\">Option 1</ToggleGroupItem>\n\u2003\u2003\u2003\u2003\u2003  <ToggleGroupItem value=\"option2\">Option 2</ToggleGroupItem>\n\u2003\u2003\u2003\u2003\u2003  <ToggleGroupItem value=\"option3\">Option 3</ToggleGroupItem>\n\u2003\u2003\u2003\u2003    </ToggleGroupRoot>\n\u2003\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default ExampleComponent;\n\u2003\u2003------------------------------------------------\n\u2003\u2022 In this example, ToggleGroupRoot manages the state of which ToggleGroupItem is selected and passes that state and the update function down to its children.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Always import these components from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency.\n\u2003\u2022 Use controlled components: manage selection state with hooks (or a state management library) for predictable behavior.\n\u2003\u2022 Ensure accessible use: verify that the rendered elements have proper ARIA attributes and keyboard interactions.\n\u2003\u2022 Styling and layout: while the UI kit provides a base implementation, you may need to apply additional styling or customization depending on your application\u2019s design.\n\u2003\u2022 Verify multi-select vs. single-select behavior: Check the documentation (if available) to see if ToggleGroupRoot supports multiple selection, and adjust your management logic accordingly.\n\u2003\u2022 Since this is likely a generic UI component, test it within your application\u2019s environment to confirm it meets your specific business requirements and accessibility standards.\n\nThis explanation should help you understand how these components function together and how to integrate them into your React applications effectively."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ToggleGroup/types.ts",
    "code_snippet": "export interface ToggleGroupItemProps\n  extends Omit<React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>, \"asChild\"> {\n  /**\n   * Whether this item should be rendered as a child of another component\n   * @default false\n   */\n  asChild?: boolean;\n\n  /**\n   * The value of the toggle group item\n   */\n  value: string;\n\n  /**\n   * When true, prevents the user from interacting with the toggle group item\n   */\n  disabled?: boolean;\n}\n/**\n * Props for single selection mode\n */\ninterface SingleToggleGroupProps {\n  /**\n   * The type of selection that should be used\n   */\n  type: \"single\";\n\n  /**\n   * The value of the toggle group when initially rendered\n   * @default undefined\n   */\n  defaultValue?: string;\n\n  /**\n   * The controlled value of the toggle group\n   * @default undefined\n   */\n  value?: string;\n\n  /**\n   * Event handler called when the value changes\n   */\n  onValueChange?: (value: string) => void;\n}\n\n/**\n * Props for multiple selection mode\n */\ninterface MultipleToggleGroupProps {\n  /**\n   * The type of selection that should be used\n   */\n  type: \"multiple\";\n\n  /**\n   * The value of the toggle group when initially rendered\n   * @default undefined\n   */\n  defaultValue?: string[];\n\n  /**\n   * The controlled value of the toggle group\n   * @default undefined\n   */\n  value?: string[];\n\n  /**\n   * Event handler called when the value changes\n   */\n  onValueChange?: (value: string[]) => void;\n}\n\n/**\n * Props for the ToggleGroupRoot component\n */",
    "explanation": "Below is an explanation of the provided code snippet:\n\n1. What the Component Represents\n\n\u2022 The code defines TypeScript interfaces for a toggle group component. In particular:\n  \u2013 ToggleGroupItemProps: Defines the properties for each individual toggle item. Each item has a required value (a string) and can be marked as disabled. The asChild prop lets the item be rendered as a child of another component.\n  \u2013 SingleToggleGroupProps and MultipleToggleGroupProps: These interfaces define the props for the toggle group container for single\u2013selection and multiple\u2013selection modes respectively. Both variants provide options for controlled (value) and uncontrolled (defaultValue) usage, along with an onValueChange event handler that is triggered when the selection changes.\n\nThis toggle group component is designed to manage a set of toggleable items, similar to a radio group (for single selection) or a checkbox group (for multiple selection).\n\n2. How to Use It in a Larger Application\n\nYou would typically import and use the toggle group components from the kit like so:\n\nExample for Single Selection:\n------------------------------------------------\nimport React from 'react';\nimport { ToggleGroupRoot, ToggleGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst SingleToggleExample = () => {\n  const handleValueChange = (value: string) => {\n    console.log('Selected value:', value);\n  };\n\n  return (\n    <ToggleGroupRoot\n      type=\"single\"\n      defaultValue=\"option1\"\n      onValueChange={handleValueChange}\n    >\n      <ToggleGroupItem value=\"option1\">\n        Option 1\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"option2\">\n        Option 2\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"option3\" disabled>\n        Option 3 (Disabled)\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n  );\n};\n\nexport default SingleToggleExample;\n------------------------------------------------\n\nExample for Multiple Selection:\n------------------------------------------------\nimport React from 'react';\nimport { ToggleGroupRoot, ToggleGroupItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MultipleToggleExample = () => {\n  const handleValueChange = (values: string[]) => {\n    console.log('Selected values:', values);\n  };\n\n  return (\n    <ToggleGroupRoot\n      type=\"multiple\"\n      defaultValue={['option1']}\n      onValueChange={handleValueChange}\n    >\n      <ToggleGroupItem value=\"option1\">\n        Option 1\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"option2\">\n        Option 2\n      </ToggleGroupItem>\n      <ToggleGroupItem value=\"option3\">\n        Option 3\n      </ToggleGroupItem>\n    </ToggleGroupRoot>\n  );\n};\n\nexport default MultipleToggleExample;\n------------------------------------------------\n\nIn these examples, ToggleGroupRoot serves as the container that manages the state and behavior of the toggle items. Depending on the type property (\u201csingle\u201d or \u201cmultiple\u201d), the component manages selection logic accordingly.\n\n3. Best Practices and Limitations\n\n\u2022 Controlled vs. Uncontrolled: Choose between using value (controlled) and defaultValue (uncontrolled) props to manage the component\u2019s state. Do not mix both approaches.\n\u2022 Accessibility: Ensure that any rendered toggle items are keyboard accessible and include the necessary ARIA attributes (this may be handled internally if using a well-built UI kit).\n\u2022 asChild Prop: Use the asChild prop when you need to compose your toggle items with custom wrappers or styles by rendering them as children of another component.\n\u2022 Styling: Since this is likely a headless component or basic UI kit, you might need to provide additional styling to fit your application's design system.\n\u2022 Separation of Single/Multiple Modes: The component\u2019s API clearly separates single and multiple selection modes. Ensure that you provide the correct defaultValue/value type (string vs. string array) as per the selection mode you are implementing.\n\nBy importing from '@worldcoin/mini-apps-ui-kit-react' as shown in the examples, you ensure consistency with the UI kit\u2019s intended usage and integration within a larger application ecosystem."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ToggleGroup/types.ts",
    "code_snippet": "export type ToggleGroupRootProps = (SingleToggleGroupProps | MultipleToggleGroupProps) & {\n  /**\n   * Whether this component should be rendered as a child of another component\n   * @default false\n   */\n  asChild?: boolean;\n\n  /**\n   * When true, prevents the user from interacting with the toggle group\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * When true and rovingFocus is true, keyboard navigation will loop from last item to first, and vice versa.\n   * @default true\n   */\n  loop?: boolean;\n\n  /**\n   * When false, navigating through the items using arrow keys will be disabled.\n   * @default false\n   */\n  rovingFocus?: boolean;\n\n  /**\n   * The reading direction of the toggle group. If omitted, inherits globally from DirectionProvider or assumes LTR (left-to-right) reading mode.\n   * @default undefined\n   */\n  dir?: \"ltr\" | \"rtl\";\n  /**\n   * The children of the toggle group\n   */\n  children?: React.ReactNode;\n};",
    "explanation": "Below is a concise explanation of the provided ToggleGroupRootProps code:\n\n1. What this component does or represents:\n\u2003\u2022 This is a set of TypeScript prop definitions for a Toggle Group component that can operate either as a single-selection group or as a multi-selection group (via the SingleToggleGroupProps or MultipleToggleGroupProps intersection).  \n\u2003\u2022 It supports additional options including:  \n\u2003\u2003\u2013 asChild: Controls whether the component should be rendered as a child element of another component (default is false).  \n\u2003\u2003\u2013 disabled: When true, the entire toggle group becomes non-interactive.  \n\u2003\u2003\u2013 loop: If true and rovingFocus is enabled, keyboard navigation will wrap from the last toggle back to the first, and vice versa (default is true).  \n\u2003\u2003\u2013 rovingFocus: When true, arrow keys are used to navigate between toggles (default is false).  \n\u2003\u2003\u2013 dir: Sets the text direction (either \"ltr\" or \"rtl\") which can be important for proper keyboard navigation and layout.  \n\u2003\u2003\u2013 children: The nested components or toggle items that belong to this group.\n\n2. How to use it in a larger application:\n\u2003\u2022 This component (or the Toggle Group that implements these props) would typically be imported from the UI kit and used as a container for a group of toggle buttons/icons.  \n\u2003\u2022 It allows you to manage toggle behavior, keyboard navigation, and accessibility features easily.  \n\u2003\u2022 Example usage in a larger application:\n\n-----------------------------------------------------------\nimport React from 'react';\nimport { ToggleGroup } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyToggleGroupComponent = () => {\n  return (\n    <ToggleGroup\n      disabled={false}\n      loop={true}\n      rovingFocus={true}\n      dir=\"ltr\"\n    >\n      <ToggleGroup.Item value=\"option1\">Option 1</ToggleGroup.Item>\n      <ToggleGroup.Item value=\"option2\">Option 2</ToggleGroup.Item>\n      <ToggleGroup.Item value=\"option3\">Option 3</ToggleGroup.Item>\n    </ToggleGroup>\n  );\n};\n\nexport default MyToggleGroupComponent;\n-----------------------------------------------------------\n\n\u2003\u2022 In the code above, the ToggleGroup is imported from '@worldcoin/mini-apps-ui-kit-react'. The group is configured to be interactive (not disabled), supports looping for keyboard navigation, enables arrow key navigation (rovingFocus), and is set for left-to-right reading. The children of the toggle group are individual ToggleGroup.Item components representing each toggle option.\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always import the components directly from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and proper version management.\n\u2003\u2003\u2013 Make sure to provide meaningful values for props like value on each toggle item for accessibility and state management.\n\u2003\u2003\u2013 Use the 'dir' prop in situations where the global reading direction might not be clear or when implementing internationalization.\n\u2003\u2003\u2013 Utilize the asChild prop if you need to integrate the toggle group within a custom component structure without adding additional DOM nodes.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The arrow key navigation (rovingFocus) is only active if explicitly enabled; if disabled, users might rely on other navigation methods.\n\u2003\u2003\u2013 Ensure that the usage of SingleToggleGroupProps versus MultipleToggleGroupProps is handled appropriately in order to prevent state management conflicts (e.g., managing single select vs. multiple selections).\n\u2003\u2003\u2013 When disabled, the component prevents all interactions; thus, it should be used only when absolutely necessary to avoid reducing overall accessibility.\n\nThis explanation should help you understand the purpose, usage, and important considerations when integrating the Toggle Group component into your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Toast/use-toast.tsx",
    "code_snippet": "export const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      };\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t,\n        ),\n      };\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action;\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId);\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id);\n        });\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t,\n        ),\n      };\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        };\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      };\n  }\n};\n\nconst listeners: Array<(state: State) => void> = [];\n\nlet memoryState: State = { toasts: [] };\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action);\n  listeners.forEach((listener) => {\n    listener(memoryState);\n  });\n}\n\ntype Toast = Omit<ToasterToast, \"id\">;\n\nconst toast = ({ ...props }: Toast) => {\n  const id = genId();\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    });\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id });\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss();\n      },\n    },\n  });\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  };\n};\n\nfunction useToast() {\n  const [state, setState] = useState<State>(memoryState);\n\n  useEffect(() => {\n    listeners.push(setState);\n    return () => {\n      const index = listeners.indexOf(setState);\n      if (index > -1) {\n        listeners.splice(index, 1);\n      }\n    };\n  }, [state]);\n\n  return {\n    ...state,\n    toast: {\n      success: (props: Omit<Toast, \"variant\">) => toast({ ...props, variant: \"success\" }),\n      error: (props: Omit<Toast, \"variant\">) => toast({ ...props, variant: \"error\" }),\n    },\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  };\n}",
    "explanation": "This code implements a simple toast notification system that can be used across your application to display transient messages (toasts). It uses a reducer function to manage toast state, a dispatch function to update that state, and a custom React hook (useToast) to allow components to trigger and monitor toasts.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. What It Represents\n\n\u2022 Toast State Management:  \n  \u2013 A reducer function handles actions like adding a new toast (\u201cADD_TOAST\u201d), updating an existing toast (\u201cUPDATE_TOAST\u201d), dismissing a toast (\u201cDISMISS_TOAST\u201d), and finally removing a toast (\u201cREMOVE_TOAST\u201d).  \n  \u2013 Toasts are stored in a state object as an array, and the reducer ensures that the list of toasts does not grow indefinitely (using TOAST_LIMIT).\n\n\u2022 Global Update and Subscription:  \n  \u2013 A mutable memoryState and an array of listeners provide a simple pub\u2013sub model, so any component using the hook will be updated when the toast state changes.\n\n\u2022 Toast Helper Function:  \n  \u2013 The toast function generates unique IDs for each toast (using genId) and creates \u201cupdate\u201d and \u201cdismiss\u201d helper methods for toast control.  \n  \u2013 It dispatches an \u201cADD_TOAST\u201d event with the properties passed in and an onOpenChange callback to automatically dismiss a toast when it is closed.\n\n\u2022 useToast Hook:  \n  \u2013 This React hook subscribes to toast state changes and returns the current state plus helper methods for quickly creating success or error toasts (via toast.success and toast.error) and dismissing toasts.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. How to Use It in a Larger Application\n\nYou can import and use the toast functionality from the UI kit directly. For example, in a component you might:\n\na. Import the hook:\n-------------------------------------------------\nimport { useToast } from '@worldcoin/mini-apps-ui-kit-react';\n-------------------------------------------------\n\nb. Use the hook inside your component to display a toast on an event (like a button click):\n-------------------------------------------------\nimport React from 'react';\nimport { Button, useToast } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst NotifyUser = () => {\n  const { toast } = useToast();\n\n  const handleSuccess = () => {\n    toast.success({\n      title: 'Operation Successful',\n      message: 'Your action has been completed successfully!',\n      // any additional props like duration can be added here\n    });\n  };\n\n  const handleError = () => {\n    toast.error({\n      title: 'Error Occurred',\n      message: 'There was a problem processing your request.',\n    });\n  };\n\n  return (\n    <div>\n      <Button onClick={handleSuccess}>Show Success Toast</Button>\n      <Button onClick={handleError}>Show Error Toast</Button>\n    </div>\n  );\n};\n\nexport default NotifyUser;\n-------------------------------------------------\n\nc. Rendering Toasts:  \n   \u2013 A separate component in your UI kit (not shown in the code snippet) would likely be responsible for rendering the list of toasts from the state.  \n   \u2013 That component would also be imported from the kit, for example:\n-------------------------------------------------\nimport { ToastContainer } from '@worldcoin/mini-apps-ui-kit-react';\n\n// Render somewhere high up in your component tree:\n<ToastContainer />\n-------------------------------------------------\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n3. Best Practices and Limitations\n\n\u2022 Global State:  \n  \u2013 The implementation uses a module-scoped memoryState and a mutable listeners array. This can be sufficient for small apps, but in larger applications you might want to integrate with a more robust state management solution (like Redux or Context API).\n\n\u2022 Side Effects in Reducers:  \n  \u2013 Note the comment about side effects in the \u201cDISMISS_TOAST\u201d action (calls to addToRemoveQueue). It\u2019s usually recommended to handle side effects outside of reducers (e.g., via middleware) to keep reducers pure, although this implementation keeps it simple.\n\n\u2022 Cleanup of Listeners:  \n  \u2013 The useEffect inside useToast cleans up its subscription. Ensure that this pattern is maintained when extending the functionality to avoid memory leaks.\n\n\u2022 Scalability:  \n  \u2013 The current approach is straightforward but relies on global mutable state. If you need multiple independent toast scenarios or more complex interactions, refactoring into a more scalable architecture may be required.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nSummary\n\nThis code provides a lightweight toast notification system wrapped in a custom React hook (useToast). By dispatching actions to a reducer, it manages toast addition, update, dismiss, and removal, while keeping subscribed components in sync through a simple listener pattern. In your application, you\u2019d import the necessary hooks and UI components from '@worldcoin/mini-apps-ui-kit-react', call toast.success or toast.error when needed, and include a ToastContainer to actually render the notifications."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Toast/Toaster.tsx",
    "code_snippet": "export function Toaster({ duration }: { duration?: number }) {\n  const { toasts } = useToast();\n\n  return (\n    <ToastProvider duration={duration}>\n      {toasts.map(({ id, ...props }) => (\n        <Toast key={id} {...props} />\n      ))}\n      <ToastViewport />\n    </ToastProvider>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided Toaster component:\n\n1. What It Represents:\n\u2003\u2022 The Toaster component is designed to display toast notifications.  \n\u2003\u2022 It leverages a custom hook (useToast) to obtain the current list of toast messages.  \n\u2003\u2022 A ToastProvider wraps the inner content, optionally accepting a duration prop to control how long each toast is visible.  \n\u2003\u2022 Each toast message is rendered using a Toast component, while a ToastViewport is included to position the notifications appropriately on the screen.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the Toaster (and any other necessary subcomponents) from the kit using the provided import paths.  \n\u2003\u2022 The component accepts a single optional prop, duration, which defines how long each toast appears.  \n\u2003\u2022 Typical usage involves placing the Toaster in a central location of your application so that any toast messages pushed via useToast are rendered.  \n\u2003\u2022 Example:\n\n--------------------------------------------------\nimport React from 'react';\nimport { Toaster, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst DemoPage = () => {\n  // Assuming some context or hook that pushes toast notifications is already set up.\n\n  return (\n    <div>\n      <h1>Welcome to the Demo</h1>\n      {/* Render a button that may trigger a toast notification */}\n      <Button onClick={() => {\n          // Trigger a toast notification, e.g., via some toast function\n          console.log('Button clicked, triggering toast...');\n        }}>\n        Click me\n      </Button>\n      {/* Place the Toaster component at a top-level so that it listens for toast notifications */}\n      <Toaster duration={5000} />\n    </div>\n  );\n};\n\nexport default DemoPage;\n--------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Ensure that the Toaster component is rendered once at a high level in your application (typically near the root) so that all toast notifications can be captured and displayed.  \n\u2003\u2022 The duration prop should be chosen carefully to balance user readability and interface responsiveness.  \n\u2003\u2022 Keep toast messages clear, succinct, and non-intrusive.  \n\u2003\u2022 The code assumes that the useToast hook and the Toast, ToastProvider, and ToastViewport components are properly implemented within the '@worldcoin/mini-apps-ui-kit-react' package.  \n\u2003\u2022 Double-check that your application\u2019s context supports the notifications mechanism; otherwise, you might need to integrate or adapt the toast providers accordingly.\n\nThis concise explanation should help you understand the purpose and integration of the Toaster component in your UI project."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Toast/Toast.tsx",
    "code_snippet": "export { type ToastProps, ToastProvider, ToastViewport, Toast };",
    "explanation": "This snippet re-exports several toast-related utilities and components for displaying temporary notifications. Here\u2019s a concise overview:\n\n1. What It Represents:\n\u2003\u2022 It provides the types and components needed to implement toast notifications in a React app.\n\u2003\u2022 ToastProps is the TypeScript type for the toast component\u2019s props.\n\u2003\u2022 ToastProvider wraps your application and manages toast state.\n\u2003\u2022 ToastViewport is a container that renders the currently active toasts.\n\u2003\u2022 Toast is the component that renders an individual notification message.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the components from the library using:\n\u2003\u2003import { ToastProvider, ToastViewport, Toast, type ToastProps } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 Wrap your top-level component (or a section of your app) inside ToastProvider. This allows any child component to trigger a toast.\n\u2003\u2022 Place ToastViewport in your component tree (often near the top- or bottom-right of the screen) to display toast messages.\n\u2003\u2022 Use the Toast component to create or customize individual toast notifications, following the structure defined by ToastProps.\n\nExample Usage:\n-------------------------------------------------\nimport React from 'react';\nimport { ToastProvider, ToastViewport, Toast } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction App() {\n  return (\n    <ToastProvider>\n      <div>\n        {/* Other components of your application */}\n        <button onClick={() => {\n          // Logic to trigger a toast, e.g., via a context or custom hook provided alongside ToastProvider.\n          // This may be something like: addToast({ title: 'Action successful!', description: 'Your settings were saved.' });\n          console.log('Trigger toast');\n        }}>\n          Show Toast\n        </button>\n        {/* Place the ToastViewport where you want the toasts to appear */}\n        <ToastViewport />\n      </div>\n    </ToastProvider>\n  );\n}\n\nexport default App;\n-------------------------------------------------\n3. Best Practices and Limitations:\n\u2003\u2022 Always wrap your application (or the section using toasts) with ToastProvider for proper context management.\n\u2003\u2022 Position ToastViewport appropriately in the UI so that toast notifications are prominently visible and non-intrusive.\n\u2003\u2022 Leverage TypeScript\u2019s type-checking with ToastProps to ensure you pass all the required props when customizing Toast.\n\u2003\u2022 Check any additional documentation regarding styling and configuration. Customization beyond the default styles might require extra CSS or theme configuration.\n\u2003\u2022 Be aware that this snippet is part of a UI kit; its API and available props might evolve, so keep your dependencies updated and refer to the latest docs if you run into limitations.\n\nThis setup promotes a modular, maintainable way to handle notifications in your application while adhering to React best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Chip/Chip.tsx",
    "code_snippet": "export interface ChipProps extends HTMLAttributes<HTMLDivElement> {\n  /**\n   * The variant of the chip. Default value is \"default\".\n   */\n  variant?: ChipVariant;\n  /**\n   * The label text displayed on the chip.\n   */\n  label: string;\n  /**\n   * Optional icon to display alongside the label.\n   */\n  icon?: ReactNode;\n  /**\n   *  Optional additional CSS class names.\n   */\n  className?: string;\n}\n\nconst chipVariants = cva(\n  \"inline-flex h-7 items-center gap-2 rounded-full px-4 font-sans text-sm font-medium leading-none\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-gray-100 text-gray-900\",\n        success: \"bg-success-100 text-success-700\",\n        warning: \"bg-warning-100 text-warning-700\",\n        error: \"bg-error-100 text-error-700\",\n        important: \"bg-info-100 text-info-700\",\n      },\n      isIcon: {\n        true: \"pl-3\",\n        false: \"\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      isIcon: false,\n    },\n  },\n);",
    "explanation": "Below is a concise explanation of the code snippet:\n\n1. What the Component Does or Represents:\n   \u2022 The Chip component (or chip-like element) is a UI element that displays a small, inline label with optional styling variations and an optional icon.\n   \u2022 It takes a text label (required) and optionally an icon, and it supports different visual variants (such as default, success, warning, error, and important) to convey different states.\n   \u2022 Styling is managed by the Class Variance Authority (cva), which maps each variant and an \"isIcon\" flag (indicating whether the icon is present) to a corresponding set of CSS utility classes.\n\n2. How to Use It in a Larger Application:\n   \u2022 Import the Chip component from the UI kit:\n     Example:\n     --------------------------------------------------\n     import React from 'react';\n     import { Chip } from '@worldcoin/mini-apps-ui-kit-react';\n\n     const MyComponent = () => {\n       return (\n         <div>\n           {/*\n             Render a default chip with just a label.\n           */}\n           <Chip label=\"Default Chip\" />\n\n           {/*\n             Render a success variant chip with an icon.\n           */}\n           <Chip\n             label=\"Success Chip\"\n             variant=\"success\"\n             icon={<span role=\"img\" aria-label=\"check\">\u2705</span>}\n           />\n         </div>\n       );\n     };\n\n     export default MyComponent;\n     --------------------------------------------------\n   \u2022 Props:\n     - label (string): The text to be shown on the chip.\n     - variant (ChipVariant): Visual style; can be \"default\", \"success\", \"warning\", \"error\", or \"important\". Defaults to \"default\".\n     - icon (ReactNode): Optional icon to display next to the label.\n     - className (string): Optional additional CSS classes to extend or override the default styling.\n     - Any additional HTML Div attributes are supported.\n\n3. Best Practices or Limitations:\n   \u2022 Best Practices:\n     - Use clear, descriptive labels to improve accessibility.\n     - When using an icon, consider wrapping it in a semantic element or providing proper accessibility attributes (like aria-label or role) if needed.\n     - Extend the component via the className prop if custom styling is required.\n     - The component is built with responsiveness and consistency in mind using utility classes (e.g., Tailwind CSS classes) so ensure your project setup is compatible.\n   \u2022 Limitations:\n     - The component has a fixed height and padding defined by the CSS classes, so if your design differs significantly, you might need to override the styles.\n     - The component assumes a specific design system (the utility classes provided by cva). If your project uses a different styling approach, adjustments may be required.\n     - Be mindful if you have icons with varying sizes as the component applies standard spacing (e.g., using an \"isIcon\" flag); extra care may be needed to maintain alignment.\n\nThis explanation outlines the purpose, usage, and best practices for a chip component designed to be used as part of a larger UI library from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Chip/Chip.tsx",
    "code_snippet": "export const Chip = forwardRef<HTMLDivElement, ChipProps & VariantProps<typeof chipVariants>>(\n  ({ icon, label, variant = \"default\", className, ...props }, ref) => {\n    return (\n      <div\n        ref={ref}\n        className={chipVariants({ variant, className, isIcon: !!icon })}\n        {...props}\n      >\n        {icon && <Slot style={{ width: \"1rem\", height: \"1rem\" }}>{icon}</Slot>}\n        <Typography variant=\"subtitle\" level={4}>\n          {label}\n        </Typography>\n      </div>\n    );\n  },\n);\n\nChip.displayName = \"Chip\";",
    "explanation": "Below is an explanation of what the Chip component does, how to use it in an application, and some best practices/limitations.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. What the Component Does  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n\u2022 The Chip is a UI element that acts like a small, discrete badge or tag.  \n\u2022 It renders a container <div> that can optionally display an icon (wrapped in a Slot) alongside a text label.  \n\u2022 The styling is configurable via a variant prop (defaulting to \"default\") and an optional className, and it leverages a chipVariants function to determine its class names.  \n\u2022 The component uses forwardRef to pass down refs to the underlying <div>, allowing parent components to manipulate this element if needed.  \n\u2022 It also wraps the label in a Typography component (with variant \"subtitle\" and level 4) for consistent text styling.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. How to Use It In a Larger Application  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nYou would import and use the Chip component from the UI kit in your application just like any other UI component.  \nHere\u2019s an example of typical usage:  \n\n-------------------------------------------------\nimport React from 'react';\nimport { Chip } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst ExampleComponent = () => {\n  return (\n    <div>\n      {/* Chip without an icon */}\n      <Chip label=\"Default Chip\" />\n\n      {/* Chip with an icon and a custom variant */}\n      <Chip \n        label=\"With Icon\" \n        icon={<svg viewBox=\"0 0 20 20\"><circle cx=\"10\" cy=\"10\" r=\"8\" fill=\"blue\" /></svg>} \n        variant=\"highlight\" \n      />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n-------------------------------------------------\n\nIn this example:  \n\u2022 The Chip component is imported from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2022 You can pass a label prop to display the text.  \n\u2022 Optionally, you pass an icon prop which can be any valid React node (e.g., an SVG).  \n\u2022 The variant prop can be used to change the styling according to the predefined chipVariants (possible values include \"default\", \"highlight\", etc., depending on your styling configuration).\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n3. Best Practices & Limitations  \n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n\u2022 Best Practices:  \n  - Keep the component stateless for easy reusability and testability.  \n  - Use the ref forwarding capability when you need advanced manipulation or focus control over the Chip element.  \n  - Consistently use the Typography component for maintaining design standards in text elements across your application.  \n  - Always import components from '@worldcoin/mini-apps-ui-kit-react' to ensure version consistency and avoid relative path issues.\n\n\u2022 Limitations:  \n  - The Chip component is primarily presentational. If you need behavior like click events or removability, you might need to extend it or wrap it in additional logic.  \n  - The available variants are defined externally (via chipVariants). Ensure you have clarity on the supported variants and their visual outcomes.  \n  - The component assumes the presence of subcomponents (Slot and Typography) from the same UI kit; if any of these are missing or customized differently, be cautious about compatibility.\n\nThis concise explanation should help you understand and incorporate the Chip component into your broader UI application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Checkbox/Checkbox.tsx",
    "code_snippet": "export interface CheckboxProps\n  extends Omit<RadixCheckboxProps, \"onCheckedChange\" | \"onChange\" | \"className\"> {\n  /**\n   * Whether to forward the root element\n   * @default false\n   */\n  asChild?: boolean;\n\n  /**\n   * The initial checked state when the checkbox is uncontrolled\n   */\n  defaultChecked?: boolean;\n\n  /**\n   * The controlled checked state of the checkbox\n   */\n  checked?: boolean;\n\n  /**\n   * Event handler called when the checked state changes\n   */\n  onChange?: (checked: boolean) => void;\n\n  /**\n   * Whether the checkbox is disabled\n   */\n  disabled?: boolean;\n\n  /**\n   * Whether the checkbox is required\n   */\n  required?: boolean;\n\n  /**\n   * The name of the checkbox\n   */\n  name?: string;\n\n  /**\n   * The value of the checkbox\n   * @default \"\"\n   */\n  value?: string;\n}",
    "explanation": "Below is a concise explanation of the Checkbox component based on the provided code snippet:\n\n1. What the Component Does/Represents:\n\u2003\u2022 The component represents a custom Checkbox element built on top of Radix UI\u2019s checkbox primitives.\n\u2003\u2022 Its interface (CheckboxProps) extends all properties from Radix's checkbox props\u2014with some exclusions (\"onCheckedChange\", \"onChange\", \"className\")\u2014and adds its own custom properties.\n\u2003\u2022 It supports both controlled (via the 'checked' prop) and uncontrolled (via 'defaultChecked' prop) usage. The change in checked state is communicated using the provided onChange callback.\n\u2003\u2022 Additional props include disabling the checkbox, setting it as required, forwarding its root element if needed (using asChild), giving it a name, and specifying a value.\n\n2. How to Use it in a Larger Application:\n\u2003\u2022 Import the Checkbox component from the designated package:\n\u2003\u2003import { Checkbox } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 When using the component, pass any of the defined props based on whether you need uncontrolled or controlled behavior.\n\u2003\u2022 Typical usage scenarios:\n\u2003\u2003\u2013 Uncontrolled usage (the component keeps its own state internally):\n\u2003\u2003\u2003<Checkbox defaultChecked onChange={(checked) => console.log('Checkbox changed to', checked)} />\n\u2003\u2003\u2013 Controlled usage (the parent component manages the checked state):\n\u2003\u2003\u2003<Checkbox\n\u2003\u2003\u2003\u2003checked={isChecked}\n\u2003\u2003\u2003\u2003onChange={(checked) => setIsChecked(checked)}\n\u2003\u2003\u2003\u2003disabled={false}\n\u2003\u2003\u2003/>\n\u2003\u2022 You may also wrap other elements when using the asChild prop to propagate style or layout mechanisms.\n\nExample Usage in a Larger Application:\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { Checkbox } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyFormComponent = () => {\n  const [isSubscribed, setIsSubscribed] = useState(false);\n\n  return (\n    <form>\n      <label>\n        Subscribe to newsletter:\n        <Checkbox\n          checked={isSubscribed}\n          onChange={(checked) => setIsSubscribed(checked)}\n          name=\"subscribe\"\n          value=\"newsletter\"\n          required\n        />\n      </label>\n      {/* Additional form fields */}\n    </form>\n  );\n};\n\nexport default MyFormComponent;\n--------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Ensure you decide between controlled vs. uncontrolled usage; mixing both can lead to unpredictable behavior.\n\u2003\u2022 When using onChange, always update state appropriately if working in a controlled mode.\n\u2003\u2022 Pay attention to accessibility by using the required and disabled props as needed.\n\u2003\u2022 The asChild prop is useful when you want to wrap the checkbox with custom elements that control layout or styling without losing the checkbox\u2019s underlying behavior.\n\u2003\u2022 Limitations: Since this interface omits some Radix props (like className), you might need alternate methods for styling. Ensure that you are consistent with state management practices in your larger application, to avoid UI inconsistencies.\n\nThis explanation and examples should help you integrate this Checkbox component effectively into your React application using the '@worldcoin/mini-apps-ui-kit-react' package."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Checkbox/Checkbox.tsx",
    "code_snippet": "export const Checkbox = forwardRef<HTMLButtonElement, CheckboxProps>(\n  ({ checked, onChange: onCheckedChange, disabled = false, ...props }, ref) => {\n    return (\n      <RadixCheckbox.Root\n        ref={ref}\n        checked={checked}\n        onCheckedChange={onCheckedChange}\n        disabled={disabled}\n        className=\"flex size-6 items-center justify-center rounded-md border-[0.09375rem] transition-all data-[state=checked]:border-gray-900 data-[state=checked]:bg-gray-900 data-[state=unchecked]:border-gray-200 data-[state=unchecked]:bg-transparent disabled:cursor-not-allowed disabled:opacity-20\"\n        {...props}\n      >\n        <RadixCheckbox.Indicator>\n          <Tick className=\"text-gray-0\" />\n        </RadixCheckbox.Indicator>\n      </RadixCheckbox.Root>\n    );\n  },\n);\n\nCheckbox.displayName = \"Checkbox\";",
    "explanation": "1. What It Represents:\n\u2003\u2022 The Checkbox component is a custom UI control that renders a styled checkbox using Radix UI primitives. It visually represents a toggleable state that shows a tick mark when checked. The component uses React\u2019s forwardRef to expose the underlying HTML button element, which aids in accessibility and integration with other libraries. It accepts props such as \"checked\" (a boolean to determine its current state), \"onChange\" (a handler function for state changes), and \"disabled\" (an optional flag to disable interaction). The component applies conditional Tailwind CSS classes based on its state to render different border, background, and cursor styles.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 To use the Checkbox component in an application, import it from '@worldcoin/mini-apps-ui-kit-react'. Use it within a form or any UI that requires a checkbox input while managing its state externally (e.g., via React\u2019s useState). For example:\n\u2003\u2003\n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { Checkbox } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const ExampleForm = () => {\n\u2003\u2003\u2003const [isChecked, setIsChecked] = useState(false);\n\n\u2003\u2003\u2003const handleCheckboxChange = (newState: boolean) => {\n\u2003\u2003\u2003\u2003setIsChecked(newState);\n\u2003\u2003\u2003};\n\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003<Checkbox checked={isChecked} onChange={handleCheckboxChange} disabled={false} />\n\u2003\u2003\u2003\u2003\u2003<label>Accept Terms and Conditions</label>\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2003export default ExampleForm;\n\u2003\u2003\n\u2003\u2022 In this example, the Checkbox component is controlled by the parent component's state. The onChange callback is used to update the state when the checkbox toggles.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Always manage the checkbox\u2019s state in a controlled manner, passing in the \"checked\" and \"onChange\" props.\n\u2003\u2003- Use forwardRef appropriately to maintain accessibility and to allow parent components or external libraries to manipulate or monitor the component properly.\n\u2003\u2003- Ensure that the component receives any additional props or style adjustments via the spread operator.\n\u2003\u2003- Keep consistency in your styling by using a standard set of Tailwind CSS classes or similar utility-first approach.\n\n\u2003\u2022 Limitations:\n\u2003\u2003- The component relies on Radix UI\u2019s primitives and Tailwind CSS classes. Customization beyond what is provided may require overriding or extending the current styles.\n\u2003\u2003- Being a controlled component, forgetting to handle state changes may lead to unexpected behavior.\n\u2003\u2003- The component\u2019s internal structure ties it to specific styling logic (e.g., data attributes for styling), so changes in the design system might necessitate corresponding modifications in the component code.\n\nIn summary, the Checkbox component offers a reusable, accessible, and styled checkbox element that can be seamlessly integrated into larger applications with consistent UI practices and strong control over its state and appearance."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Pill/Pill.tsx",
    "code_snippet": "export interface PillProps\n  extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, \"className\" | \"style\">,\n    VariantProps<typeof pillVariants> {\n  /**\n   * Whether the pill is checked\n   * @default false\n   */\n  checked?: boolean;\n  /**\n   * Whether the pill is rendered as a child component\n   * @default false\n   */\n  asChild?: boolean;\n}",
    "explanation": "1. Purpose and Representation:\n\u2003\u2022 The code defines a TypeScript interface (PillProps) that represents the properties for a \"Pill\" component\u2014a UI element styled like a pill-shaped button.  \n\u2003\u2022 It extends standard HTML button properties (excluding \"className\" and \"style\" to enforce controlled styling) and includes variant properties (using a predefined styling variant helper, pillVariants).  \n\u2003\u2022 Two custom properties are defined:\n\u2003\u2003- checked (boolean): Indicates if the pill is active/selected (default is false).\n\u2003\u2003- asChild (boolean): Determines if the pill should render its children directly rather than wrapping them, often used to compose with other components (default is false).\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Typical usage involves importing the Pill component from the UI kit package and then utilizing it as you would with any other button-like element.\n\u2003\u2022 Props you can pass include standard button attributes (except for className and style), variant options (such as color or size if defined by pillVariants), and the additional checked or asChild props.\n\u2003\u2022 Example usage:\n\u2003\u2003Example file: MyComponent.tsx\n\u2003\u2003--------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Pill } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const MyComponent = () => {\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002<Pill onClick={() => console.log('Pill clicked!')} checked>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002Click Me\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002</Pill>\n\u2003\u2003\u2002\u2002\u2002\u2002</div>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default MyComponent;\n\u2003\u2003--------------------------------------------------\n\u2003\u2022 In scenarios where you need more control over rendering (e.g., using a custom root element), set asChild to true and pass children accordingly.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Utilize the defined props to ensure consistency with styling and behavior dictated by pillVariants.\n\u2003\u2003- Avoid passing custom className or style props directly; instead, use variants and the provided API for styling consistency.\n\u2003\u2003- When using asChild, make sure your child component properly forwards refs and handles events.\n\u2003\u2003- Leverage TypeScript\u2019s type safety when using PillProps to avoid runtime errors.\n\u2003\u2022 Limitations:\n\u2003\u2003- The component deliberately omits className and style manipulation to preserve internal styling, so customization should be handled via available variants or through higher-level composition.\n\u2003\u2003- Users must adhere to the provided defaults (checked: false, asChild: false) unless overridden, as these default behaviors might be unexpected if not reviewed in the documentation.\n\u2003\u2003- Ensure that when integrating with other components requiring specific styling, the asChild prop is used carefully to avoid style conflicts.\n\nUsing these guidelines will help integrate the Pill component effectively within your broader application while maintaining a consistent design and behavior as provided by the '@worldcoin/mini-apps-ui-kit-react' package."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Pill/Pill.tsx",
    "code_snippet": "export const Pill = forwardRef<HTMLButtonElement, PillProps>(\n  ({ checked, children, asChild, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\";\n    return (\n      <Comp\n        ref={ref}\n        className={cn(\n          pillVariants({ checked }),\n          typographyVariants({ variant: \"label\", level: 2 }),\n        )}\n        {...props}\n      >\n        {children}\n      </Comp>\n    );\n  },\n);\n\nPill.displayName = \"Pill\";",
    "explanation": "1. Purpose:\n\u2022 The Pill component is a stylized, accessible UI element designed to behave like a button. It conditionally renders either a standard <button> or a custom element (using the \"Slot\" component) if the asChild prop is provided.\n\u2022 It applies variant-based styling based on its \"checked\" state and typography settings for a label style.\n\n2. How to Use It:\n\u2022 Import the Pill component from the UI kit:\n\u2003\u2003import { Pill } from '@worldcoin/mini-apps-ui-kit-react';\n\u2022 The component accepts props including:\n\u2003\u2003\u2013 checked: A boolean determining styling variations.\n\u2003\u2003\u2013 asChild: A boolean that lets you render a custom element in place of the default <button>.\n\u2003\u2003\u2013 children: The content inside the Pill.\n\u2022 Example usage with a default button behavior:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Pill } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003function MyComponent() {\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<Pill checked onClick={() => console.log('Pill clicked')}>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002Click Me\n\u2003\u2003\u2002\u2002\u2002\u2002</Pill>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003}\n\u2003\u2003\n\u2003\u2003export default MyComponent;\n\u2003\u2003\n\u2022 Example using asChild to render a custom anchor element:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Pill } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003function MyLink() {\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<Pill asChild checked>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002<a href=\"https://example.com\">Visit Example.com</a>\n\u2003\u2003\u2002\u2002\u2002\u2002</Pill>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003}\n\u2003\u2003\n\u2003\u2003export default MyLink;\n\n3. Best Practices & Limitations:\n\u2022 Best Practices:\n\u2003\u2003\u2013 Always import the Pill component from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and version management.\n\u2003\u2003\u2013 Utilize the asChild prop if you need to wrap another element for custom behaviors or when integrating with routing libraries (e.g., using a Link component).\n\u2003\u2003\u2013 Make use of the ref forwarding to manage focus or imperative DOM manipulations if necessary.\n\u2022 Limitations:\n\u2003\u2003\u2013 The component\u2019s design and behavior rely on external helper functions (such as cn, pillVariants, and typographyVariants) that must be defined/imported within your project.\n\u2003\u2003\u2013 Without proper accessibility attributes (such as aria-pressed if used as a toggle), additional ARIA labeling might be required for complete accessibility compliance.\n\u2003\u2003\u2013 The component styling is pre-determined; overriding these styles should be done cautiously to maintain consistency with the overall design system."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/GroupedCountryList.tsx",
    "code_snippet": "export function GroupedCountryList({\n  groupedCountries,\n  onSelect,\n  value,\n}: GroupedCountryListProps) {\n  if (Object.keys(groupedCountries).length === 0) {\n    return (\n      <div className=\"flex flex-col items-center justify-center grow text-gray-400 gap-2 h-full\">\n        <Magnifier className=\"size-8\" />\n        <Typography variant=\"body\" level={3}>\n          No search results\n        </Typography>\n      </div>\n    );\n  }\n\n  return (\n    <>\n      {Object.entries(groupedCountries)\n        .sort(([a], [b]) => a.localeCompare(b))\n        .map(([letter, countries]) => (\n          <div key={letter} className=\"group\">\n            <Typography variant=\"subtitle\" level={3} className=\"text-gray-400 mb-2\">\n              {letter}\n            </Typography>\n            {countries.map((country) => (\n              <DrawerClose key={country.countryCode} asChild>\n                <CountryListItem\n                  countryCode={country.countryCode}\n                  countryName={country.name}\n                  onClick={onSelect}\n                  isSelected={value === country.countryCode}\n                />\n              </DrawerClose>\n            ))}\n            <div className=\"h-[1px] bg-gray-200 my-4 group-last:hidden\" />\n          </div>\n        ))}\n    </>\n  );\n}",
    "explanation": "Below is a concise explanation of the code, along with an example of how to integrate it into a larger application:\n\n1. What This Component Does  \n\u2022 GroupedCountryList is a React functional component that displays a list of countries organized into groups by their starting letter.  \n\u2022 It takes in a groupedCountries object (where keys are letters and values are arrays of country objects), and for each key it renders a header with the alphabet letter and a list of CountryListItem entries for the countries.  \n\u2022 If no grouped countries are provided (i.e. the object is empty), it shows a \u201cNo search results\u201d message along with a Magnifier icon.  \n\u2022 Each country entry is wrapped inside a DrawerClose component\u2014presumably to close a modal or drawer after a selection\u2014while highlighting the selected country (controlled via the value prop) and calling an onSelect callback when a country is clicked.\n\n2. How to Use It in a Larger Application  \n\u2022 Import the component and any additional UI components using the '@worldcoin/mini-apps-ui-kit-react' package.  \n\u2022 Pass in the groupedCountries prop as an object whose keys are letters (for grouping) and values are arrays of country objects (e.g., with countryCode and name).  \n\u2022 Provide an onSelect callback to handle when a country is chosen, and a value prop that indicates which country is currently selected.  \n\nExample:  \n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { GroupedCountryList } from '@worldcoin/mini-apps-ui-kit-react';\n\n// Example grouped country data structure\nconst groupedCountries = {\n  A: [\n    { countryCode: 'AF', name: 'Afghanistan' },\n    { countryCode: 'AL', name: 'Albania' }\n  ],\n  B: [\n    { countryCode: 'BD', name: 'Bangladesh' },\n    { countryCode: 'BR', name: 'Brazil' }\n  ]\n};\n\nfunction CountrySelector() {\n  const [selectedCountry, setSelectedCountry] = useState('');\n\n  const handleSelect = (countryCode: string) => {\n    setSelectedCountry(countryCode);\n  };\n\n  return (\n    <div className=\"country-selector\">\n      <GroupedCountryList \n        groupedCountries={groupedCountries} \n        onSelect={handleSelect} \n        value={selectedCountry} \n      />\n    </div>\n  );\n}\n\nexport default CountrySelector;\n--------------------------------------------------  \nIn this example, CountrySelector imports GroupedCountryList from '@worldcoin/mini-apps-ui-kit-react' and supplies it with props. The selected country code state is updated by the handleSelect function passed to onSelect.\n\n3. Best Practices and Limitations  \n\u2022 Best Practices:  \n\u2003- Ensure that the groupedCountries data is well formatted where each key is a group letter and its value is an array of valid country objects.  \n\u2003- Use the provided UI components (e.g., Typography, Magnifier, DrawerClose, and CountryListItem) to maintain consistency across your application.  \n\u2003- Always provide unique keys for list items (as done with country.countryCode) to help React manage reconciliation efficiently.  \n\u2003- Consider accessibility by checking that the interactive elements (like CountryListItem) provide proper focus and ARIA attributes if needed.  \n\n\u2022 Limitations:  \n\u2003- The component assumes that all country groups are defined and that the country objects have valid countryCode and name properties.  \n\u2003- Styling is applied using utility classes (likely from Tailwind CSS), so you must ensure your project supports these classes or adjust accordingly.  \n\u2003- The DrawerClose wrapper suggests that this list is used within a modal/drawer context. If your use case changes, you might need to adjust or remove that wrapper.\n\nThis encapsulated component is designed to be plug-and-play when working with grouped data, and using the standardized UI kit imports helps maintain design consistency across your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/utils.ts",
    "code_snippet": "export const getValidatedCountryCode = (\n  code: string,\n  defaultCountryCode: CountryCode,\n): CountryCode => {\n  const upperCaseCode = code.toUpperCase() as CountryCode;\n\n  return isSupportedCountryCode(upperCaseCode) ? upperCaseCode : defaultCountryCode;\n};",
    "explanation": "Below is a concise explanation of the provided function code:\n\n1. What it does:\n\u2003\u2022 The function, getValidatedCountryCode, takes two inputs\u2014a string \"code\" and a \"defaultCountryCode\" (of type CountryCode).  \n\u2003\u2022 It first converts the input code to uppercase (ensuring consistency in format).  \n\u2003\u2022 Next, it checks whether the uppercase code is among a set of supported country codes using the helper function isSupportedCountryCode.  \n\u2003\u2022 If the country code is supported, it returns that code; otherwise, it falls back to the provided default country code.  \n\u2003\u2022 In essence, it validates a given country code and ensures a valid country code is always returned.\n\n2. How to use it in a larger application:\n\u2003\u2022 You can consider getValidatedCountryCode as a utility function (or helper) integrated into forms, settings, or APIs that require country codes.  \n\u2003\u2022 When building UI components (e.g., country select or location forms) that depend on validated country codes, invoke this helper to ensure the values meet your supported list criteria.  \n\u2003\u2022 Example usage:\n\u2003\u2003a. Import any UI component you might want to display along with your function.  \n\u2003\u2003b. For instance, if a form uses a Button from the UI kit for submitting a validated country code:\n\u2003\n\u2003\u2003Example:\n\u2003\u2003------------------------------------------------------------\n\u2003\u2003// Importing UI components from the designated kit\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Button, Input } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003import { getValidatedCountryCode } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003// Example component using the helper function in a form\n\u2003\u2003const CountryCodeForm = () => {\n\u2003\u2003  const [inputCode, setInputCode] = React.useState('');\n\u2003\u2003  const defaultCountryCode = 'US';  // Example default code\n\u2003\u2003  \n\u2003\u2003  const handleSubmit = () => {\n\u2003\u2003    const validatedCode = getValidatedCountryCode(inputCode, defaultCountryCode);\n\u2003\u2003    console.log('Validated Country Code:', validatedCode);\n\u2003\u2003    // Further actions such as API calls can be performed here\n\u2003\u2003  };\n\u2003\u2003  \n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <Input \n\u2003\u2003        placeholder=\"Enter country code\"\n\u2003\u2003        value={inputCode}\n\u2003\u2003        onChange={(e) => setInputCode(e.target.value)} \n\u2003\u2003      />\n\u2003\u2003      <Button onClick={handleSubmit}>\n\u2003\u2003        Submit Country Code\n\u2003\u2003      </Button>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default CountryCodeForm;\n\u2003\u2003------------------------------------------------------------\n\u2003\u2022 The above example shows how a developer could integrate the utility function within a country code form field that validates user input and then logs or processes the result.\n\n3. Best practices or limitations:\n\u2003\u2022 Ensure that isSupportedCountryCode is properly defined and maintained; if the supported list changes, update that function accordingly.  \n\u2003\u2022 Use TypeScript types effectively\u2014here, CountryCode should be a union of allowed strings (or a similar construct) to help catch errors at compile time.  \n\u2003\u2022 This function is pure and side-effect free, making it easy to test. Write unit tests covering both valid and fallback scenarios.  \n\u2003\u2022 Remember that this helper only normalizes and validates the code; if further formatting or additional metadata is required (e.g., country name, flag assets), they need to be handled elsewhere in your application.  \n\u2003\u2022 When using in user-facing forms, consider also providing user feedback if the code is invalid instead of silently defaulting, depending on your application's UX requirements.\n\nThis explanation covers what the function represents, how to incorporate it in your UI components (with proper imports from '@worldcoin/mini-apps-ui-kit-react'), and touches on best practices and potential limitations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/utils.ts",
    "code_snippet": "export const getCountryDataListByCodes = (\n  countryCodes: CountryCode[] | undefined,\n): CountryData[] => {\n  if (!countryCodes?.length) {\n    return extendedCountryDataList;\n  }\n\n  const countryCodeSet = new Set(countryCodes);\n\n  return extendedCountryDataList.filter((country) => {\n    const countryCode = parseCountry(country).iso2.toUpperCase();\n\n    return countryCodeSet.has(countryCode as CountryCode);\n  });\n};",
    "explanation": "Below is an explanation of the code and how you might integrate it into a larger application:\n\n1. What this function does:\n\u2003\u2022 The function getCountryDataListByCodes takes an optional array of country codes (of type CountryCode[]) as input.\n\u2003\u2022 If no country codes are provided or if the array is empty, it returns an entire list of country data (extendedCountryDataList).\n\u2003\u2022 When a list of country codes is provided, it first converts it into a Set for fast lookups. It then filters extendedCountryDataList and returns those countries whose ISO2 code (obtained via parseCountry) matches one of the provided codes (after converting to uppercase).\n\n2. How to use it in a larger application:\n\u2003\u2022 This helper function can be used, for example, in a country selector component or any feature that needs to show a filtered list of country details based on user-selected codes.\n\u2003\u2022 When integrating this in your UI, you could pass the output of getCountryDataListByCodes as props to a country list or dropdown component.\n\u2003\u2022 Example usage in a component:\n\n------------------------------------------------\nimport React from 'react';\nimport { getCountryDataListByCodes, CountryCode } from '@worldcoin/mini-apps-ui-kit-react';\nimport { CountryDropdown } from '@worldcoin/mini-apps-ui-kit-react';\n\ninterface CountrySelectorProps {\n  selectedCodes?: CountryCode[];\n}\n\nconst CountrySelector: React.FC<CountrySelectorProps> = ({ selectedCodes }) => {\n  const filteredCountries = getCountryDataListByCodes(selectedCodes);\n\n  return (\n    <div>\n      <h2>Select a Country</h2>\n      <CountryDropdown countries={filteredCountries} />\n    </div>\n  );\n};\n\nexport default CountrySelector;\n------------------------------------------------\n\nIn this example:\n\u2003\u2022 We import our helper function and a sample CountryDropdown component from '@worldcoin/mini-apps-ui-kit-react'.\n\u2003\u2022 We filter the country data based on potentially selected country codes and pass the results to a dropdown component.\n\n3. Best practices or limitations:\n\u2003\u2022 Ensure that extendedCountryDataList and the parseCountry function are defined and imported properly wherever getCountryDataListByCodes is used.\n\u2003\u2022 The function is built under the assumption that country codes are case-insensitive; it converts them to uppercase so that input like \"us\" is properly matched to \"US\".\n\u2003\u2022 If extendedCountryDataList is a large array, consider memoizing the filtered results (for example, using React.useMemo) to avoid redundant filtering on every render.\n\u2003\u2022 In scenarios where countryCodes might be undefined or empty, this function smartly returns the full list, but make sure that this behavior fits the requirements of your application.\n\u2003\u2022 Finally, always validate that the types for CountryCode and CountryData align with your data structures to prevent runtime issues.\n\nThis setup not only showcases solid component composition but also emphasizes modularity and reuse of UI logic across your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/utils.ts",
    "code_snippet": "export const filterCountries = (countries: CountryData[], searchText: string) => {\n  if (!searchText) {\n    return countries;\n  }\n\n  return countries.filter((country) => {\n    const parsedCountry = parseCountry(country);\n    const countryName = parsedCountry.name.toLowerCase();\n    const dialCode = `${DIAL_CODE_PREFIX}${parsedCountry.dialCode.toLowerCase()}`;\n    const searchLower = searchText.toLowerCase();\n\n    return countryName.includes(searchLower) || dialCode.includes(searchLower);\n  });\n};",
    "explanation": "Below is a concise explanation of what the provided function does, how you might use it in a larger application, and some best practices/limitations.\n\n\u2013\u2013\u2013\u2013\u2013\u2013\n1. What This Code Does\n\n\u2022 The code defines a function named filterCountries that takes an array of country objects (of type CountryData) and a search string (searchText).  \n\u2022 If searchText is empty or falsy, it returns the original list of countries.  \n\u2022 Otherwise, it converts both the country\u2019s name and dial code (after prefixing with DIAL_CODE_PREFIX) to lower case, then checks if either contains the lowercased search text.  \n\u2022 The function returns only the countries that match the search criteria.\n\n\u2013\u2013\u2013\u2013\u2013\u2013\n2. How to Use It in a Larger Application\n\nImagine you have a component where users can search for countries by name or dial code. You might import the function along with any other UI components from '@worldcoin/mini-apps-ui-kit-react'.\n\nExample usage in a React component:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { Input, List, ListItem } from '@worldcoin/mini-apps-ui-kit-react';\n// Assume CountryData is defined and filterCountries is exported from the UI kit.\nimport { filterCountries } from '@worldcoin/mini-apps-ui-kit-react';\n\ntype CountryData = {\n  name: string;\n  dialCode: string;\n  // other country properties\u2026\n};\n\ninterface CountrySearchProps {\n  countries: CountryData[];\n}\n\nconst CountrySearch: React.FC<CountrySearchProps> = ({ countries }) => {\n  const [searchText, setSearchText] = useState('');\n\n  const filtered = filterCountries(countries, searchText);\n\n  return (\n    <div>\n      <Input\n        placeholder=\"Search by country name or dial code\"\n        value={searchText}\n        onChange={(e) => setSearchText(e.target.value)}\n      />\n      <List>\n        {filtered.map((country) => (\n          <ListItem key={country.dialCode}>\n            {country.name} ( {country.dialCode} )\n          </ListItem>\n        ))}\n      </List>\n    </div>\n  );\n};\n\nexport default CountrySearch;\n--------------------------------------------------\n\n\u2022 In this example, the user types into an Input component imported from the '@worldcoin/mini-apps-ui-kit-react' library.  \n\u2022 The filtered results are then rendered using a List component.\n\n\u2013\u2013\u2013\u2013\u2013\u2013\n3. Best Practices & Limitations\n\nBest Practices:\n\u2022 Ensure that the search comparison is case-insensitive by converting both the search text and the values to lower case, as shown.  \n\u2022 Consider memoizing the filtered results (using useMemo) if the list of countries is large to reduce unnecessary re-renders and improve performance.  \n\u2022 Validate that the expected properties exist on the country objects (or enhance error handling) if the data source may be inconsistent.\n\nLimitations:\n\u2022 This filtering function runs synchronously; if the country list grows very large, performance might become a concern.\n\u2022 The function assumes that parseCountry and DIAL_CODE_PREFIX are defined and available in the scope. Make sure these are appropriately imported or defined in your project.\n\u2022 The current approach only matches substrings which might lead to ambiguous matches; you could extend the logic if more specific filtering is required (e.g., exact matching or regex).\n\n\u2013\u2013\u2013\u2013\u2013\u2013\nThis explanation covers what the function does, illustrates how to integrate it in your application using imports from the '@worldcoin/mini-apps-ui-kit-react' library, and addresses important practices and considerations when using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/CountrySelectorButton.tsx",
    "code_snippet": "export default CountrySelectorButton;",
    "explanation": "Below is an explanation of what the exported CountrySelectorButton represents, how you could use it, and some best practices related to its usage.\n\n1. What It Does or Represents:\n\u2003\u2022 The CountrySelectorButton is a React component that encapsulates the functionality of a button meant to allow users to select a country.  \n\u2003\u2022 When clicked, it likely opens up a UI (such as a drop-down list or modal) listing available countries, enabling the user to pick one.  \n\u2003\u2022 The component is built with TypeScript, ensuring that props and internal state are type-safe, leading to more predictable behavior in your application.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the component from the centralized UI kit:\n\u2003\u2003import { CountrySelectorButton } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 In your parent component (e.g., App), include CountrySelectorButton as part of your UI. It may accept props (such as event handlers for when a country is selected, style customizations, or a default selected country).  \n\u2003\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { CountrySelectorButton } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function App() {\n\u2003\u2003  // Callback function to handle the country selection event.\n\u2003\u2003  const handleCountryChange = (selectedCountry: string) => {\n\u2003\u2003    console.log('Country selected:', selectedCountry);\n\u2003\u2003    // Additional logic to update state or perform API calls can be added here.\n\u2003\u2003  };\n\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      {/* Render the button, pass necessary props such as event handlers */}\n\u2003\u2003      <CountrySelectorButton onSelect={handleCountryChange}>\n\u2003\u2003        Select Your Country\n\u2003\u2003      </CountrySelectorButton>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003}\n\n\u2003\u2003export default App;\n\n\u2003\u2022 The exact props (like onSelect) depend on the component\u2019s implementation, so refer to its prop types or documentation for details on available options.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Always import UI components from the designated UI kit (in this case '@worldcoin/mini-apps-ui-kit-react') to ensure consistency in style and behavior across mini apps.  \n\u2003\u2022 Make sure to review the component\u2019s TypeScript definitions to understand what props are required and which are optional.  \n\u2003\u2022 Manage state and event handling in a predictable manner by using React hooks (e.g., useState and useEffect) if necessary.  \n\u2003\u2022 Be aware that while the component encapsulates its own behavior, any custom styling or behavior changes might require overriding default styles or using additional props if the API allows.  \n\u2003\u2022 Ensure that any local logic (for example, a loading state or error handling when the country list fails to load) is appropriately managed in the parent component or using higher-level abstractions.\n\nOverall, CountrySelectorButton is a modular and reusable UI element designed to be easily integrated into larger applications while maintaining best practices for code organization and component reuse."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/constants.ts",
    "code_snippet": "export const extendedCountryDataList: CountryData[] = [\n  ...supportedDefaultCountryCodes,\n  ...customCountries,\n].sort((a, b) => a[0].localeCompare(b[0])); // sorted by country name",
    "explanation": "1. Overview:\n\u2003\u2022 The code exports a constant named extendedCountryDataList, which is an array of CountryData objects.  \n\u2003\u2022 It combines two arrays\u2014supportedDefaultCountryCodes and customCountries\u2014using the spread operator, then sorts the combined list alphabetically by the country name (assumed to be stored in the first element of each CountryData tuple).\n\n2. How to Use in a Larger Application:\n\u2003\u2022 This sorted country list can be passed as a prop to UI components like dropdowns, autocomplete fields, or country selectors.  \n\u2003\u2022 When importing in your application, do so from the UI kit package:\n\u2003\u2003Example:\n\u2003\u2003----------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { extendedCountryDataList } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003import { Dropdown } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const CountrySelector = () => {\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<Dropdown\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002options={extendedCountryDataList.map(country => ({\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002// assuming country is a tuple like [name, code]\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002label: country[0],\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002value: country[1],\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002}))}\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002placeholder=\"Select a country\"\n\u2003\u2003\u2002\u2002\u2002\u2002/>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default CountrySelector;\n\u2003\u2003----------------------------------------------------------\n\u2003\u2022 In typical usage, you pass the processed extendedCountryDataList to the component that needs to list country information.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Ensure that both supportedDefaultCountryCodes and customCountries conform to the CountryData type for consistency.  \n\u2003\u2003- Use localeCompare for proper alphabetical ordering with international strings.  \n\u2003\u2003- Import dependencies from '@worldcoin/mini-apps-ui-kit-react' as required by the project guidelines, avoiding relative paths.\n\u2003\u2022 Limitations:\n\u2003\u2003- The sort function assumes that the first element of each CountryData tuple is a string representing the country\u2019s name; if this isn\u2019t the case, the sorting may behave unexpectedly.  \n\u2003\u2003- In scenarios with huge datasets, consider performance implications with sorting on every change (though in this static export that is less of a concern).  \n\nThis setup allows you to maintain a flexible and centralized list of country data that can be reused throughout your UI, ensuring consistency and proper localization in sorting."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/constants.ts",
    "code_snippet": "export const DIAL_CODE_PREFIX = \"+\";",
    "explanation": "Below is a concise explanation of the code snippet:\n\n1. What It Represents:\n   \u2022 The code exports a constant named DIAL_CODE_PREFIX set to the string \"+\".\n   \u2022 This constant is intended to serve as the prefix for dialing codes (e.g., when formatting international phone numbers).\n\n2. How to Use It in a Larger Application:\n   \u2022 When building phone number input components or sections that show international dialing details, you can import this constant from the library package.\n   \u2022 Example usage in a larger React component:\n\n------------------------------------------------\nimport React from 'react';\nimport { DIAL_CODE_PREFIX } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst PhoneNumberDisplay: React.FC<{ countryCode: string; localNumber: string }> = ({ countryCode, localNumber }) => {\n  return (\n    <div>\n      {/* Uses DIAL_CODE_PREFIX in formatting the display */}\n      <span>{DIAL_CODE_PREFIX}{countryCode} {localNumber}</span>\n    </div>\n  );\n};\n\nexport default PhoneNumberDisplay;\n------------------------------------------------\n\n   \u2022 In the above example, the DIAL_CODE_PREFIX ensures that the same prefix (\"+\") is used consistently across your project whenever phone numbers are displayed.\n\n3. Best Practices or Limitations:\n   \u2022 Best Practices:\n     - Maintain consistency by centralizing frequently used constants like dial code prefixes.\n     - Import the constant directly from '@worldcoin/mini-apps-ui-kit-react' to preserve a single source of truth.\n     - Use clear, descriptive names (as done here) to indicate its purpose.\n   \u2022 Limitations:\n     - Since this is a simple constant, it isn\u2019t configurable at runtime. If your application requires different behavior or additional prefixes based on region, extend the functionality rather than modifying this immutable value.\n     - As a design constant, ensure it stays unchanged throughout your project to maintain consistency in UI displays.\n\nThis component of code is a small but crucial part of building consistent internationalization and formatting in your UI components."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/constants.ts",
    "code_snippet": "export const startAdornmentWidthByDialCodeLength: Record<string, number> = {\n  \"1\": 5.5,\n  \"2\": 6,\n  \"3\": 6.5,\n  \"4\": 7,\n};",
    "explanation": "Below is an explanation of the provided code along with guidelines on how to integrate it into a larger application:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. What this component (or constant) represents\n\n\u2022 The code defines a constant record called startAdornmentWidthByDialCodeLength.  \n\u2022 It maps string representations of dial code lengths (\"1\", \"2\", \"3\", \"4\") to corresponding numeric widths (e.g., 5.5, 6, 6.5, and 7).  \n\u2022 This record is likely used for dynamically setting the width of an input\u2019s \"start adornment\" (a visual prefix element) based on the length of the dial code (for example, for phone number inputs).  \n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to use it in a larger application\n\nAssume you have a component (e.g., a phone input field) that shows a dial code as a prefix. You can import UI components from the UI kit and then use this record (perhaps in a styling function or as an inline style) to adjust the width of that adornment based on the dial code length.\n\nExample usage in a PhoneInput component might look like this:\n\n------------------------------------------------\nFile: PhoneInput.tsx\n\nimport React from 'react';\nimport { Input, Box } from '@worldcoin/mini-apps-ui-kit-react';\nimport { startAdornmentWidthByDialCodeLength } from '@worldcoin/mini-apps-ui-kit-react'; // Modify as needed if the record is exported from the same package\n\ninterface PhoneInputProps {\n  dialCode: string; // e.g., \"+1\" or \"+44\", etc.\n  value: string;\n  onChange: (value: string) => void;\n}\n\nconst PhoneInput: React.FC<PhoneInputProps> = ({ dialCode, value, onChange }) => {\n  // Remove '+' and calculate the effective length of the dial code digits.\n  const dialDigits = dialCode.replace('+', '');\n  // A simple lookup. If the dial code length is not defined, fallback to some default width.\n  const adornmentWidth = startAdornmentWidthByDialCodeLength[dialDigits.length.toString()] || 7;\n\n  return (\n    <Box display=\"flex\" alignItems=\"center\">\n      <Box\n        width={`${adornmentWidth}rem`}\n        mr={1}  // margin right for spacing\n        textAlign=\"center\"\n      >\n        {dialCode}\n      </Box>\n      <Input\n        value={value}\n        onChange={(e) => onChange(e.target.value)}\n        placeholder=\"Enter your phone number\"\n      />\n    </Box>\n  );\n};\n\nexport default PhoneInput;\n------------------------------------------------\n\nIn a parent component you could use PhoneInput as follows:\n\n------------------------------------------------\nFile: App.tsx\n\nimport React, { useState } from 'react';\nimport PhoneInput from '@worldcoin/mini-apps-ui-kit-react/PhoneInput';\n\nconst App = () => {\n  const [phone, setPhone] = useState('');\n  \n  return (\n    <div>\n      <PhoneInput \n        dialCode=\"+1\" \n        value={phone} \n        onChange={setPhone} \n      />\n    </div>\n  );\n};\n\nexport default App;\n------------------------------------------------\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best practices or limitations\n\n\u2022 Best Practices:\n  - Maintain separation of concerns by keeping style logic (like adjusting widths based on dial code length) separate from the core component logic.\n  - Use TypeScript\u2019s typing system to enforce valid props (e.g., ensuring dialCode is provided correctly).\n  - Centralize reusable mappings\u2014such as this width mapping\u2014in a common file so that if design requirements change, adjustments can be made in one place.\n  - When importing, ensure components and helper constants are accessed from the package '@worldcoin/mini-apps-ui-kit-react' for consistency and better package management.\n\n\u2022 Limitations:\n  - The record only covers dial code lengths of 1 to 4. If your application might encounter dial codes with a different number of digits, you\u2019ll need to extend the record or implement a dynamic calculation.\n  - Hardcoded values may lack flexibility for different screen sizes unless additional responsive design logic is applied.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\nThis explanation outlines what the record is for, how to integrate it within a phone input component, and the recommended best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/CountryListItem.tsx",
    "code_snippet": "export default CountryListItem;",
    "explanation": "Below is a concise explanation of the exported CountryListItem component:\n\n1. What This Component Does or Represents:\n\u2003\u2022 CountryListItem is a UI element designed to represent a single country within a list. In a typical application, it might display a country\u2019s name, flag, or other relevant details.\n\u2003\u2022 The component is likely designed to be interactive (for example, clickable), so that users can select or view more details about the country it represents.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Since CountryListItem is exported as a default export, you can import and use it wherever you need a country list item in your application.\n\u2003\u2022 The component may expect props such as country name, country code, a flag image URL, and an onClick handler for selection or navigation. (Note: Check the specific prop types and default values in the component\u2019s documentation or source code to know exactly what is required.)\n\u2003\u2022 To integrate it into a list of countries, you might render multiple CountryListItem components inside a container (such as an unordered list or a styled wrapper).\n\u2003\n\u2003Example usage:\n\u2003--------------------------------------------------\n\u2003// Importing from the UI kit\n\u2003import { CountryListItem } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003import React from 'react';\n\n\u2003type Country = {\n\u2003\u2003name: string;\n\u2003\u2003code: string;\n\u2003\u2003flagUrl?: string;\n\u2003};\n\n\u2003const countries: Country[] = [\n\u2003\u2003{ name: 'United States', code: 'US', flagUrl: 'https://example.com/flags/us.png' },\n\u2003\u2003{ name: 'Canada', code: 'CA', flagUrl: 'https://example.com/flags/ca.png' },\n\u2003\u2003// ...more countries\n\u2003];\n\n\u2003const handleCountryClick = (code: string) => {\n\u2003\u2003console.log('Selected country code:', code);\n\u2003};\n\n\u2003const CountrySelector = () => {\n\u2003\u2003return (\n\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003{countries.map((country) => (\n\u2003\u2003\u2003\u2003\u2003<CountryListItem\n\u2003\u2003\u2003\u2003\u2003\u2003key={country.code}\n\u2003\u2003\u2003\u2003\u2003\u2003// Assuming CountryListItem has these props:\n\u2003\u2003\u2003\u2003\u2003\u2003countryName={country.name}\n\u2003\u2003\u2003\u2003\u2003\u2003countryCode={country.code}\n\u2003\u2003\u2003\u2003\u2003\u2003flagUrl={country.flagUrl}\n\u2003\u2003\u2003\u2003\u2003\u2003onClick={() => handleCountryClick(country.code)}\n\u2003\u2003\u2003\u2003\u2003/>\n\u2003\u2003\u2003\u2003))}\n\u2003\u2003\u2003</div>\n\u2003\u2003);\n\u2003};\n\n\u2003export default CountrySelector;\n\u2003--------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Props Validation: Make sure that you pass all required props (like countryName or countryCode) and validate them (using TypeScript interfaces or PropTypes) to prevent runtime issues.\n\u2003\u2022 Accessibility: If CountryListItem is interactive, ensure that it is accessible (using appropriate ARIA roles, keyboard navigation, etc.).\n\u2003\u2022 Styling Consistency: When using the component from '@worldcoin/mini-apps-ui-kit-react', try to follow the design system guidelines provided by the kit to maintain a consistent look and feel across your application.\n\u2003\u2022 Limitations: Since CountryListItem is designed for a specific purpose (displaying country information), don\u2019t overload it with too many responsibilities. For any additional functionality (like filtering or complex state management), use wrapper components or higher-order components.\n\nIn summary, CountryListItem provides a reusable and focused way to represent a country in lists. By following the usage example and best practices above, you can easily integrate it into your larger application while ensuring consistency and maintainability."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/PhoneField.tsx",
    "code_snippet": "export interface PhoneFieldProps\n  extends Omit<\n    InputProps,\n    \"onChange\" | \"startAdornment\" | \"startAdornmentWidth\" | \"placeholder\"\n  > {\n  /**\n   * Current phone number value.\n   */\n  value?: string;\n  /**\n   * Callback triggered when the phone number changes.\n   */\n  onChange?: (phone: string, countryCode: CountryCode) => void;\n  /**\n   * List of countries to display in the country selector.\n   * If not provided, all countries will be displayed.\n   */\n  countries?: CountryCode[];\n  /**\n   * Disable dial code prefill on initialization.\n   * Dial code prefill works only when empty phone value have been provided.\n   * @default true\n   */\n  disableDialCodePrefill?: boolean;\n  /**\n   * If true, the input will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the input will display in a valid state with success styling\n   */\n  isValid?: boolean;\n  /**\n   * The label text to display\n   */\n  label?: string;\n  /**\n   * When true, prevents the user from interacting with phone field.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * Default ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')\n   * @default \"US\"\n   */\n  defaultCountryCode?: CountryCode;\n  /**\n   * Element to be rendered at the end (right side) of the input.\n   * The component passed to this prop must accept a `style` prop.\n   * The component should use currentColor to match the Input's styling.\n   */\n  endAdornment?: React.ReactNode;\n  /**\n   * Width of the end adornment in rem\n   * @default 1.25\n   */\n  endAdornmentWidth?: number;\n}",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What It Does/Represents:\n\u2003\u2022 The code defines an interface (PhoneFieldProps) for a PhoneField component\u2014a specialized input field for phone numbers.  \n\u2003\u2022 It extends common input properties (InputProps) but omits typical properties like onChange, startAdornment, etc., to replace them with phone-specific logic.  \n\u2003\u2022 This component supports selecting a country (with a default country code and optional country list) so that a dial code is prefilled (unless disabled) when the input is empty.  \n\u2003\u2022 It also handles validation states (error or valid display), can be disabled, and supports custom adornments at the end of the input.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the component and any necessary types from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 Provide props such as value (current phone number), onChange (callback with the updated phone number and country code), countries (to filter available country codes), and additional styling or functional props (disabled, error, label, etc.).  \n\u2003\u2022 Example usage within a form could look like this:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { PhoneField } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst PhoneInputExample = () => {\n  // Local state to hold the phone and country code\n  const [phone, setPhone] = useState('');\n\n  const handlePhoneChange = (newPhone, countryCode) => {\n    setPhone(newPhone);\n    // Optionally handle the countryCode here or validate the phone number\n    console.log('Selected country code:', countryCode);\n  };\n\n  return (\n    <form>\n      <PhoneField\n        label=\"Your Phone Number\"\n        value={phone}\n        onChange={handlePhoneChange}\n        defaultCountryCode=\"US\"\n        countries={['US', 'GB', 'FR']}\n        disableDialCodePrefill={false}\n        error={false}\n        isValid={phone.length >= 10} // example validation logic\n      />\n      {/* Other form components */}\n    </form>\n  );\n};\n\nexport default PhoneInputExample;\n--------------------------------------------------\n\n3. Best Practices or Limitations:\n\u2003\u2022 Always validate the phone number (both client-side and server-side) as this component only provides UI-level validation.\n\u2003\u2022 Use type checking with TypeScript to ensure that proper types and data flows are maintained.\n\u2003\u2022 Provide a clear onChange callback that handles both the phone number and country code so that the logic for valid dial codes is consistent.\n\u2003\u2022 When using adornments (like icons), ensure the component passed to endAdornment accepts a style prop and uses currentColor so that styling remains consistent.\n\u2003\u2022 Limitations may include dependency on the provided list of countries; if none is provided, the component defaults to showing all, which might not be suitable for every locale or application.\n\u2003\u2022 Customization is somewhat limited by the props available\u2014if further customization is needed, consider extending or wrapping the PhoneField component.\n\nThis explanation outlines what the PhoneField component is for, how to integrate it into an app using '@worldcoin/mini-apps-ui-kit-react', and important practices to follow while using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PhoneField/PhoneField.tsx",
    "code_snippet": "export const PhoneField = forwardRef<HTMLDivElement, PhoneFieldProps>(\n  (\n    {\n      value,\n      onChange,\n      countries,\n      label = \"Phone\",\n      defaultCountryCode = \"US\",\n      disableDialCodePrefill = true,\n      disabled = false,\n      error = false,\n      isValid,\n      endAdornment,\n      endAdornmentWidth,\n      type = \"tel\",\n      inputMode = \"tel\",\n      autoComplete = \"tel\",\n      autoCapitalize = \"off\",\n      autoCorrect = \"off\",\n      ...props\n    },\n    ref,\n  ) => {\n    const { inputValue, country, inputRef, handlePhoneValueChange, setCountry } = usePhoneInput(\n      {\n        defaultCountry: defaultCountryCode.toLowerCase(),\n        disableDialCodePrefill,\n        disableDialCodeAndPrefix: true,\n        value,\n        countries: getCountryDataListByCodes(countries),\n        onChange: (data) => {\n          onChange?.(\n            data.phone,\n            getValidatedCountryCode(data.country.iso2, defaultCountryCode),\n          );\n        },\n      },\n    );\n\n    const selectedCountryCode = getValidatedCountryCode(country.iso2, defaultCountryCode);\n    const currentDialCode = `${DIAL_CODE_PREFIX}${country.dialCode}`;\n    const startAdornmentWidth = startAdornmentWidthByDialCodeLength[country.dialCode.length];\n\n    // This allows the parent component to interact with the input element directly\n    useImperativeHandle(ref, () => inputRef.current as HTMLDivElement);\n\n    const handleCountrySelect = (selectedCountry: string) => {\n      setCountry(selectedCountry.toLowerCase());\n    };\n\n    const handleDrawerAnimationEnd = (open: boolean) => {\n      if (!open) {\n        // This allow to schedule focus on the input element during the next repaint cycle\n        requestAnimationFrame(() => {\n          inputRef.current?.focus();\n        });\n      }\n    };\n\n    return (\n      <Input\n        {...props}\n        ref={inputRef}\n        type={type}\n        inputMode={inputMode}\n        autoComplete={autoComplete}\n        autoCapitalize={autoCapitalize}\n        autoCorrect={autoCorrect}\n        value={inputValue}\n        onChange={handlePhoneValueChange}\n        label={label}\n        disabled={disabled}\n        error={error}\n        isValid={isValid}\n        endAdornment={endAdornment}\n        endAdornmentWidth={endAdornmentWidth}\n        startAdornmentWidth={startAdornmentWidth}\n        showStartDivider\n        startAdornment={\n          <CountryDrawer\n            value={selectedCountryCode}\n            defaultValue={defaultCountryCode}\n            countries={countries}\n            onAnimationEnd={handleDrawerAnimationEnd}\n            onChange={handleCountrySelect}\n            disabled={disabled}\n          >\n            <CountrySelectorButton value={selectedCountryCode} label={currentDialCode} />\n          </CountryDrawer>\n        }\n      />\n    );\n  },\n);\n\nPhoneField.displayName = \"PhoneField\";",
    "explanation": "Below is a concise explanation of the PhoneField component:\n\n1. What this component does or represents:\n\u2003\u2022 PhoneField is a phone number input component that comes with an integrated country selector.  \n\u2003\u2022 It uses a custom phone input hook (usePhoneInput) to manage the phone value and country state.  \n\u2003\u2022 It renders an Input component (presumably part of the UI kit) with a configurable country selector as a start adornment. This allows users to pick a country (affecting the dial code) and enter a phone number accordingly.  \n\u2003\u2022 The component is also ref-forwarded, enabling parent components to directly access the underlying input DOM element.\n\n2. How to use it in a larger application (props, typical usage, example):\n\u2003\u2022 Props include the phone value, onChange handler (which returns the phone number and validated country code), list of supported countries, and UI options (label, disabled, error, etc.).  \n\u2003\u2022 The country selector is integrated into the component using a CountryDrawer that wraps a CountrySelectorButton.  \n\u2003\u2022 To use PhoneField within your application, simply import it from the UI kit and supply the necessary props. For example:\n\n-------------------------------------------------------\nimport React, { useState } from 'react';\nimport { PhoneField } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst PhoneInputForm = () => {\n  const [phone, setPhone] = useState('');\n  const [countryCode, setCountryCode] = useState('');\n\n  const handlePhoneChange = (newPhone: string, newCountryCode: string) => {\n    setPhone(newPhone);\n    setCountryCode(newCountryCode);\n  };\n\n  return (\n    <form>\n      <PhoneField\n        value={phone}\n        countries={['US', 'CA', 'GB']}\n        onChange={handlePhoneChange}\n        label=\"Enter your phone number\"\n        defaultCountryCode=\"US\"\n      />\n      <div>\n        <p>Phone: {phone}</p>\n        <p>Country: {countryCode}</p>\n      </div>\n    </form>\n  );\n};\n\nexport default PhoneInputForm;\n-------------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Use ref forwarding to gain direct access to the input element when needed (e.g., focusing the input after animations).\n\u2003\u2003- Ensure that the onChange handler is properly handling both the number and validated country code.\n\u2003\u2003- Keep the list of countries limited to those supported by your application to enhance performance and ease of management.\n\u2003\u2022 Limitations:\n\u2003\u2003- The component assumes a specific structure from the UI kit (Input, CountryDrawer, CountrySelectorButton, etc.), so customizations outside the provided styling or behavior might require additional effort.\n\u2003\u2003- Some accessibility concerns (such as proper labeling, keyboard navigation, etc.) depend on the inner implementation of the Input and CountryDrawer components and may need further verification.\n\nThis explanation should help you understand what PhoneField does, how to integrate it into your project by importing from '@worldcoin/mini-apps-ui-kit-react', and the associated best practices and limitations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Spinner/Spinner.tsx",
    "code_snippet": "export const Spinner = ({ className }: SpinnerProps) => {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"h-6 w-6 animate-spin text-gray-900\", className)}\n    >\n      <circle\n        cx=\"12\"\n        cy=\"12\"\n        r=\"10.75\"\n        stroke=\"currentColor\"\n        strokeOpacity=\"0.16\"\n        strokeWidth=\"2.5\"\n      />\n      <path\n        d=\"M17.8921 1.54613C16.1312 0.553676 14.1482 0.0220795 12.1271 0.000672984C10.1059 -0.0207335 8.11211 0.468744 6.33065 1.42368L7.50987 3.62356C8.92079 2.86725 10.4999 2.47958 12.1007 2.49653C13.7014 2.51349 15.2719 2.93451 16.6665 3.72054L17.8921 1.54613Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n};",
    "explanation": "Below is a concise explanation of the provided Spinner component:\n\n1. What the Component Represents:\n\u2003\u2022 The Spinner component renders an SVG-based spinner icon typically used to indicate that a process is loading or in progress.\n\u2003\u2022 It uses a combination of an SVG circle (for the overall outline) and a path element (representing a highlighted section) along with Tailwind CSS classes (e.g., \"animate-spin\") to animate the spinner.\n\u2003\u2022 The component accepts a prop called className, allowing the caller to override or extend the default styling.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 The Spinner is a reusable presentational component. You import it from the UI kit and include it wherever you need to show a loading indicator.\n\u2003\u2022 Props:\n\u2003\u2003\u2013 className (optional): A string that adds or overrides additional styling classes.\n\u2003\u2022 Typical usage involves conditionally rendering the Spinner when data is loading or during asynchronous operations.\n\u2003\u2022 Example:\n\u2003\u2003\u2022 Import from the UI kit:\n\u2003\u2003\u2003import { Spinner } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\u2022 Use in a component:\n\u2003\u2003\u2003--------------------------------------------------\n\u2003\u2003\u2003import React, { useState, useEffect } from 'react';\n\u2003\u2003\u2003import { Spinner } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003\u2003const DataLoader = () => {\n\u2003\u2003\u2003  const [loading, setLoading] = useState(true);\n\u2003\u2003\u2003  const [data, setData] = useState(null);\n\n\u2003\u2003\u2003  useEffect(() => {\n\u2003\u2003\u2003    // simulate an async data fetch\n\u2003\u2003\u2003    setTimeout(() => {\n\u2003\u2003\u2003      setData('Loaded data');\n\u2003\u2003\u2003      setLoading(false);\n\u2003\u2003\u2003    }, 2000);\n\u2003\u2003\u2003  }, []);\n\n\u2003\u2003\u2003  return (\n\u2003\u2003\u2003    <div>\n\u2003\u2003\u2003      {loading ? (\n\u2003\u2003\u2003        <Spinner className=\"text-blue-500\" />\n\u2003\u2003\u2003      ) : (\n\u2003\u2003\u2003        <div>{data}</div>\n\u2003\u2003\u2003      )}\n\u2003\u2003\u2003    </div>\n\u2003\u2003\u2003  );\n\u2003\u2003\u2003};\n\n\u2003\u2003\u2003export default DataLoader;\n\u2003\u2003\u2003--------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Keep the Spinner\u2019s styling customizable via the className prop to integrate well with different parts of your application.\n\u2003\u2003\u2013 Use semantic naming for classes (e.g., text-gray-900) and consider consistency across your UI components.\n\u2003\u2003\u2013 When used within a button or other interactive element, ensure that proper accessibility and focus management are in place.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component uses fixed dimensions (width: 24, height: 24); if different sizes are required, consider adding new props (e.g., size) to adjust dimensions dynamically.\n\u2003\u2003\u2013 The internal usage of the cn helper function (likely a utility to join or conditionally add CSS classes similar to the classnames package) implies that it must be available in the context where Spinner is used. If not, it should be imported or replaced with a standard alternative.\n\u2003\u2003\u2013 The component\u2019s styling relies on Tailwind CSS utility classes, so your project needs to be set up with Tailwind CSS for the expected styling to apply.\n\nThis concise explanation should help you understand how the Spinner component is designed for loading indication, how it can be integrated into your applications, and what to consider for usage and customization."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ListItem/ListItem.tsx",
    "code_snippet": "export const ListItem = forwardRef<HTMLButtonElement, ListItemProps>(\n  ({ children, label, description, startAdornment, endAdornment, disabled, ...props }, ref) => {\n    return (\n      <button ref={ref} className={listItemStyles()} {...props} disabled={disabled}>\n        {startAdornment && <div className=\"mr-3 flex-shrink-0\">{startAdornment}</div>}\n        <div className=\"flex flex-col flex-grow min-w-0 items-start gap-0.5\">\n          {label && (\n            <Typography variant=\"subtitle\" level={2} className=\"truncate grow w-full text-left\">\n              {label}\n            </Typography>\n          )}\n          {description && (\n            <Typography\n              level={4}\n              className={cn(\n                \"truncate grow w-full text-left\",\n                disabled ? \"text-gray-400\" : \"text-gray-500\",\n              )}\n            >\n              {description}\n            </Typography>\n          )}\n        </div>\n        {endAdornment && <div className=\"ml-4 flex-shrink-0\">{endAdornment}</div>}\n      </button>\n    );\n  },\n);\n\nListItem.displayName = \"ListItem\";",
    "explanation": "Below is a concise explanation of the provided ListItem component:\n\n1. What the component does or represents:\n   \u2022 The ListItem component represents an interactive list entry rendered as a button.  \n   \u2022 It can display a main label and a secondary description.  \n   \u2022 Optional visual elements (adornments) can be placed at the beginning and end of the item.  \n   \u2022 It uses React\u2019s forwardRef to allow parent components access to the underlying button element, which is useful for focus management or animations.\n\n2. How to use it in a larger application:\n   \u2022 Import the component (and any related components like Typography) from the package:\n   \n     Example:\n     -----------------------------------------------------------\n     import React from 'react';\n     import { ListItem, Typography } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     const MyList = () => {\n       const handleClick = () => {\n         console.log('ListItem clicked');\n       };\n     \n       return (\n         <div>\n           <ListItem \n             label=\"Item Title\"\n             description=\"Additional details about the item\"\n             startAdornment={<span>Icon</span>}\n             endAdornment={<span>\u27a1\ufe0f</span>}\n             onClick={handleClick}\n           />\n         </div>\n       );\n     };\n     \n     export default MyList;\n     -----------------------------------------------------------\n     \n   \u2022 Props explanation:\n     - label: The main text shown in the list item.\n     - description: A secondary text giving extra details.\n     - startAdornment: An element (icon/image) displayed before the text.\n     - endAdornment: An element (icon/image) displayed after the text.\n     - disabled: A boolean that, if true, disables click events and dims the text.\n     - children: Any additional JSX passed into the component if needed.\n   \n   \u2022 Typical usage would be within a list or menu where each item should be interactive.\n\n3. Best practices or limitations:\n   \u2022 Accessibility is enhanced by using an HTML button, ensuring inherent keyboard and screen reader functionality.\n   \u2022 Using forwardRef ensures that any parent component can directly reference the button element (for functions like focus control).\n   \u2022 Visual overflow is managed with CSS classes (like \"truncate\"), but ensure the style definitions (e.g. listItemStyles and Typography classes) are properly set up in your project configuration.\n   \u2022 Keep in mind that extra CSS class names (like \"mr-3\", \"ml-4\", etc.) assume a utility-first CSS framework (such as TailwindCSS) is in place.\n   \u2022 The component gracefully handles conditional renderings for missing label or description.\n   \u2022 Be sure to handle the disabled state appropriately to maintain user experience consistency.\n\nThis explanation covers the functionality, integration in larger applications, and recommended practices for using the ListItem component within the Webcoin mini-apps UI toolkit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PasswordField/PasswordField.tsx",
    "code_snippet": "export interface PasswordFieldProps\n  extends Omit<InputProps, \"startAdornment\" | \"startAdornmentWidth\"> {\n  /**\n   * If true, the input will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the input will display in a valid state with success styling\n   */\n  isValid?: boolean;\n}",
    "explanation": "1. Description\n\nThe snippet defines a TypeScript interface, PasswordFieldProps, which is used to type the properties for a password input component. It extends a base set of properties from InputProps but explicitly removes (using Omit) the \"startAdornment\" and \"startAdornmentWidth\" properties since those aren\u2019t applicable to this field. Additionally, it adds two optional boolean props\u2014error and isValid\u2014that help determine if the input should visually indicate an error (via error styling) or success (via valid styling).\n\n2. How to Use It in a Larger Application\n\nIn a larger application, you would use the password field component (which would implement PasswordFieldProps) to render a password input with built-in validation feedback. For example, you could import it along with other components from '@worldcoin/mini-apps-ui-kit-react' and then use it in a form. Its props allow you to customize the look and behavior of the input field by handling standard input properties (from InputProps) as well as passing error or valid state flags. Here is an example usage:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { PasswordField, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst LoginForm: React.FC = () => {\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState(false);\n\n  const validatePassword = (pwd: string) => pwd.length >= 8;\n\n  const handlePasswordChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const newPassword = e.target.value;\n    setPassword(newPassword);\n    setError(!validatePassword(newPassword));\n  };\n\n  const handleSubmit = (e: React.FormEvent) => {\n    e.preventDefault();\n    // Further processing or submitting the form\n    console.log('Submitted Password:', password);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <PasswordField\n        value={password}\n        onChange={handlePasswordChange}\n        error={error}\n        isValid={!error && password.length > 0}\n        placeholder=\"Enter your password\"\n        type=\"password\"\n      />\n      <Button type=\"submit\">Login</Button>\n    </form>\n  );\n};\n\nexport default LoginForm;\n--------------------------------------------------\n\nIn the above example:\n\u2022 The PasswordField is imported from '@worldcoin/mini-apps-ui-kit-react'.\n\u2022 The field is controlled with a state hook.\n\u2022 The error prop toggles the error styling if the password doesn\u2019t meet the required conditions.\n\u2022 The isValid prop provides a visual cue when the password is correct.\n\n3. Best Practices and Limitations\n\n\u2022 Best Practices:\n  - Use meaningful names for your state variables and event handlers for clarity.\n  - Validate the password (or any input) in real time for better user experience.\n  - Leverage the built-in props (error, isValid) to adhere to consistent UI styling and behavior across the application.\n  - Import components directly from '@worldcoin/mini-apps-ui-kit-react' to ensure compatibility and avoid relative path issues.\n\n\u2022 Limitations:\n  - The PasswordFieldProps interface explicitly omits \"startAdornment\" and \"startAdornmentWidth\", meaning if you need an input with an icon or prefix, you\u2019d need an alternative component.\n  - The interface assumes that InputProps contains the base set of properties; therefore, any changes to InputProps should be managed carefully to avoid breaking the component's API.\n  - Error handling and validation logic must be implemented externally, as the interface only supports visual state indications.\n\nThis concise explanation should help you understand and implement this password input component in your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PasswordField/PasswordField.tsx",
    "code_snippet": "export const PasswordField = forwardRef<HTMLInputElement, PasswordFieldProps>(\n  (\n    {\n      isValid,\n      disabled,\n      type = \"password\",\n      autoComplete = \"current-password\",\n      spellCheck = \"false\",\n      inputMode = \"text\",\n      autoCapitalize = \"off\",\n      autoCorrect = \"off\",\n      endAdornment: endAdornmentProp,\n      endAdornmentWidth: endAdornmentWidthProp,\n      ...props\n    },\n    ref,\n  ) => {\n    const [showPassword, setShowPassword] = useState(false);\n    return (\n      <Input\n        {...props}\n        ref={ref}\n        isValid={isValid}\n        disabled={disabled}\n        endAdornmentWidth={2.4}\n        endAdornment={\n          <button type=\"button\" onClick={() => setShowPassword(!showPassword)}>\n            {showPassword ? <EyeClosed /> : <Eye />}\n          </button>\n        }\n        type={showPassword ? \"text\" : \"password\"}\n        autoComplete={autoComplete}\n        spellCheck={spellCheck}\n        inputMode={inputMode}\n        autoCapitalize={autoCapitalize}\n        autoCorrect={autoCorrect}\n      />\n    );\n  },\n);\n\nPasswordField.displayName = \"PasswordField\";",
    "explanation": "Below is an explanation of the PasswordField component:\n\n1. What this component does or represents:\n   \u2022 This component wraps a standard input field designed specifically for password inputs.  \n   \u2022 It initially hides the password (type=\"password\") and provides a button with an icon (Eye or EyeClosed) that toggles the visibility of the password.  \n   \u2022 It accepts validation-related props (such as isValid and disabled) and several default input configurations for a typical password input (autoComplete, spellCheck, inputMode, autoCapitalize, autoCorrect).  \n\n2. How to use it in a larger application:\n   \u2022 Import the component along with any other UI components from the package using:  \n     import { PasswordField } from '@worldcoin/mini-apps-ui-kit-react';\n   \u2022 You can pass additional props that propagate to the underlying Input component. For example, specify a placeholder, whether the field should be disabled, or any validation state.  \n   \u2022 A typical usage might look like:\n     \n     // Example usage in a login form\n     import React, { useRef } from 'react';\n     import { PasswordField, Button } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     const LoginForm = () => {\n       const passwordRef = useRef<HTMLInputElement>(null);\n       \n       const handleLogin = () => {\n         // Access the password input value using passwordRef.current.value, etc.\n         console.log(passwordRef.current?.value);\n       };\n       \n       return (\n         <form onSubmit={(e) => { e.preventDefault(); handleLogin(); }}>\n           <PasswordField\n             ref={passwordRef}\n             placeholder=\"Enter your password\"\n             isValid={true} // use appropriate validation state\n           />\n           <Button type=\"submit\">Login</Button>\n         </form>\n       );\n     };\n     \n     export default LoginForm;\n   \n3. Best practices or limitations:\n   \u2022 Using forwardRef allows parent components to directly interact with the input element, which can be beneficial for form libraries or directly setting focus.  \n   \u2022 Ensure that the eye toggle button is accessible (consider adding aria-labels that explain the toggle action for screen readers).  \n   \u2022 The component assigns fixed values (such as a fixed endAdornmentWidth) that might not suit all designs \u2013 consider extending it for additional customization as needed.  \n   \u2022 The default input properties such as autoCapitalize and spellCheck are set to typical values for password fields; verify they align with your application\u2019s requirements.  \n   \u2022 Always validate and secure any sensitive data handled by password fields on both the client and server sides.  \n\nThis explanation provides an overview of how to integrate and work with the PasswordField component from '@worldcoin/mini-apps-ui-kit-react' in your UI."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ClearButton/Clear.tsx",
    "code_snippet": "export function Clear({ className }: ClearProps) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6\", className)}\n    >\n      <path\n        d=\"M6.75729 17.2426L11.9999 12M17.2426 6.75736L11.9999 12M11.9999 12L6.75729 6.75736M11.9999 12L17.2426 17.2426\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"square\"\n      />\n    </svg>\n  );\n}",
    "explanation": "1. What the component does or represents:\n\u2022 The Clear component is a React functional component that renders an SVG representing a \u201cclear\u201d or \u201cclose\u201d icon (often displayed as an \u201cX\u201d).\n\u2022 It accepts an optional className prop that allows customizing its styling. The component combines the default \"size-6\" class with any additional classes provided.\n\u2022 It is designed to be used as a small, reusable UI element to indicate actions like closing a modal or clearing input.\n\n2. How to use it in a larger application:\n\u2022 Import the component from the UI kit package instead of a relative path.\n\u2022 Pass additional style classes via the className prop if needed.\n\u2022 Example usage:\n-------------------------------------------------\nimport React from 'react';\nimport { Clear } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction MyComponent() {\n  return (\n    <div>\n      <p>Click the icon to clear the content:</p>\n      <Clear className=\"text-gray-500 hover:text-black\" />\n    </div>\n  );\n}\n\nexport default MyComponent;\n-------------------------------------------------\n\u2022 In this example, the Clear component is imported directly from the '@worldcoin/mini-apps-ui-kit-react' package and used within a parent component. Additional custom styles are applied through the className prop.\n\n3. Best practices or limitations:\n\u2022 Since the component is stateless and purely presentational, ensure that any interaction (such as onClick functionality) is handled by wrapping it with a button or another interactive element if needed.\n\u2022 It uses a utility (cn) to combine class names, so make sure that this utility is defined or imported within your project context.\n\u2022 The component size is fixed to a 24x24 SVG view box; if you need different sizes, consider modifying the component or handling it via CSS.\n\u2022 When using the component, follow accessibility best practices by ensuring that any interactive icons are properly labeled (for example, wrapping the SVG in a button with an aria-label) if they perform an action."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ClearButton/ClearButton.tsx",
    "code_snippet": "export const CLEAR_BUTTON_WIDTH = 1.25;\n\nconst ClearButton = React.forwardRef<HTMLButtonElement, ClearButtonProps>(\n  ({ children, inputRef, className, onClear, ...props }, ref) => {\n    const handleClear = (e: React.MouseEvent<HTMLButtonElement>) => {\n      e.preventDefault();\n      e.stopPropagation();\n\n      if (inputRef && \"current\" in inputRef && inputRef.current) {\n        inputRef.current.value = \"\";\n        onClear?.();\n      }\n    };\n\n    return (\n      <button\n        type=\"button\"\n        ref={ref}\n        className={cn(className)}\n        onMouseDown={handleClear}\n        {...props}\n      >\n        <Clear />\n      </button>\n    );\n  },\n);\n\nClearButton.displayName = \"ClearButton\";",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What this component does or represents:\n\u2003\u2022 The ClearButton component renders a button with a clear (or \"X\") icon (the Clear component used inside the button).  \n\u2003\u2022 It is designed to clear the value of an associated input element when clicked.  \n\u2003\u2022 It accepts an inputRef (a React ref) pointing to the input element and calls an optional onClear callback after clearing the input.\n\n2. How to use it in a larger application (props, typical usage, example):\n\u2003\u2022 Props include:\n\u2003\u2003\u2013 inputRef: A ref to an input element whose value should be cleared.\n\u2003\u2003\u2013 onClear: An optional callback that is executed once the input is cleared.\n\u2003\u2003\u2013 className: Additional CSS classes.\n\u2003\u2003\u2013 children: Any children (although in this case the Clear icon is rendered by default).\n\u2003\u2003\u2013 Plus any other standard button properties.\n\u2003\u2022 Typical usage involves importing it from the UI kit and pairing it with an input element. For example:\n\n-------------------------------------------------\nimport React, { useRef } from 'react';\nimport { ClearButton } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst ExampleComponent = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handleClear = () => {\n    console.log('Input was cleared');\n  };\n\n  return (\n    <div>\n      <input type=\"text\" ref={inputRef} placeholder=\"Type something\u2026\" />\n      <ClearButton inputRef={inputRef} onClear={handleClear} />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n-------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always ensure the inputRef points to a valid input element; otherwise, the clear functionality won\u2019t work.\n\u2003\u2003\u2013 Provide an onClear callback if additional side effects are needed after clearing.\n\u2003\u2003\u2013 Use the component with appropriate styling by utilizing the className prop.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component relies on the structure of inputRef (i.e., that the ref is an object with a current property pointing to an input element). If a non-standard ref is passed, it may not work as expected.\n\u2003\u2003\u2013 The current design clears only the input\u2019s value; if there are additional validations or state updates needed, they must be managed externally.\n\nThis explanation outlines the functionality, intended usage, and best practice considerations for integrating ClearButton from '@worldcoin/mini-apps-ui-kit-react' into your larger application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/TextArea/TextArea.tsx",
    "code_snippet": "export interface TextAreaProps\n  extends Omit<\n      React.TextareaHTMLAttributes<HTMLTextAreaElement>,\n      \"className\" | \"style\" | \"placeholder\"\n    >,\n    VariantProps<typeof inputVariants> {\n  /**\n   * If true, the textarea will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the textarea will display in a focused state with focus styling\n   * @default false\n   */\n  isFocused?: boolean;\n  /**\n   * The label text for the textarea\n   */\n  label?: string;\n  /**\n   * Variant of the input\n   * @default \"default\"\n   */\n  variant?: \"default\" | \"floating-label\";\n}\n\nconst textAreaVariants = cva(\"min-h-[7.5rem] resize-y\", {\n  variants: {\n    variant: {\n      \"floating-label\": \"pt-8\",\n      default: \"pt-4\",\n    },\n  },\n});",
    "explanation": "Below is an explanation of the provided TypeScript/React code snippet:\n\n1. What This Component Represents:\n   \u2022 The code defines a TextAreaProps interface and a set of style variants for a textarea component.\n   \u2022 The TextAreaProps interface extends the built\u2010in React.TextareaHTMLAttributes while omitting some attributes (\u201cclassName\u201d, \u201cstyle\u201d, \u201cplaceholder\u201d) to enforce styling standards and behavior.\n   \u2022 It also includes custom properties such as:\n\u2003\u2003\u2013 error: a boolean that, when true, styles the textarea to indicate an error (e.g., red border).\n\u2003\u2003\u2013 isFocused: a boolean indicating whether the component should display with focus styling.\n\u2003\u2003\u2013 label: a string used to display a descriptive label for the textarea.\n\u2003\u2003\u2013 variant: a string that selects between \u201cdefault\u201d and \u201cfloating-label\u201d styles. The \u201cfloating-label\u201d variant has extra padding on top (pt-8) to make room for a label that might float.\n   \u2022 The textAreaVariants is created using a utility (cva) that sets the base style (min height and resize behavior) and then adjusts top padding based on the variant selected.\n\n2. How to Use It in a Larger Application:\n   \u2022 This component would typically be part of a UI kit. It could be used anywhere you need a styled textarea with built-in support for error states, focus indicator, and label handling.\n   \u2022 In a larger application, you would import and use the component from '@worldcoin/mini-apps-ui-kit-react'. For instance:\n  \n\u2003\u2003Example Usage:\n\u2003\u2003--------------------------------------------------\n\u2003\u2003import React from \"react\";\n\u2003\u2003import { TextArea } from '@worldcoin/mini-apps-ui-kit-react';\n  \n\u2003\u2003const CommentBox = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <TextArea\n\u2003\u2003        label=\"Your Comment\"\n\u2003\u2003        placeholder=\"Write your comment here...\"\n\u2003\u2003        variant=\"floating-label\"\n\u2003\u2003        isFocused={false}\n\u2003\u2003        error={false}\n\u2003\u2003        onChange={(e) => console.log(e.target.value)}\n\u2003\u2003      />\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n  \n\u2003\u2003export default CommentBox;\n\u2003\u2003--------------------------------------------------\n   \u2022 Props:\n\u2003\u2003\u2013 All standard HTML textarea attributes (except for className, style, and placeholder which are overridden).\n\u2003\u2003\u2013 error (boolean): toggles error styling.\n\u2003\u2003\u2013 isFocused (boolean): toggles focus styling.\n\u2003\u2003\u2013 label (string): displays a label associated with the textarea.\n\u2003\u2003\u2013 variant (\"default\" | \"floating-label\"): defines the styling variant (default is \u201cdefault\u201d).\n\n3. Best Practices and Limitations:\n   \u2022 Accessible Labels: Ensure that the label prop is used along with proper ARIA attributes (if necessary) so that the control is accessible for all users.\n   \u2022 Consistent Styling: By restricting className, style, and placeholder props, the component enforces consistent styling across your application. Customizations should be done via the provided variant and error/isFocused props.\n   \u2022 Extensibility: While the variants cover common scenarios, if more styling or behaviors are needed, consider extending this component carefully to avoid breaking the consistent look.\n   \u2022 Testing: When using the component, write tests for both appearance (error, focused states) and behavior (onChange events, accessibility).\n   \u2022 Limitations: Since the component omits direct style and className overrides, developers may have limited flexibility unless the UI kit exposes controlled extension points. Also, custom placeholder management might require additional logic if needed beyond what\u2019s currently provided.\n\nIn summary, this component is a styled textarea component with built\u2010in support for error states, focus styles, and label management. It\u2019s designed to be used as a building block within the '@worldcoin/mini-apps-ui-kit-react' library to maintain consistent design language throughout your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/TextArea/TextArea.tsx",
    "code_snippet": "export const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>(\n  ({ error, isFocused = false, disabled, label, variant = \"default\", id, ...props }, ref) => {\n    return (\n      <div className=\"relative flex w-full items-center group\">\n        <textarea\n          ref={ref}\n          id={id}\n          placeholder={label}\n          disabled={disabled}\n          className={cn(\n            inputVariants({ error, isFocused, variant }),\n            typographyVariants({ variant: \"body\", level: 3 }),\n            textAreaVariants({ variant }),\n          )}\n          {...props}\n        />\n        {variant === \"floating-label\" && (\n          <label\n            htmlFor={id}\n            className={cn(\n              typographyVariants({ variant: \"body\", level: 3 }),\n              cn(\n                // Initial state\n                \"peer-placeholder-shown:text-sm\",\n                \"peer-focus:text-xs peer-focus:border-gray-300 peer-focus:bg-gray-0\",\n                // End state\n                \"absolute text-gray-500 duration-300 transform text-xs top-0 pt-4 z-10 pl-4 w-full bg-gray-100 rounded-t-[0.625rem] border-t border-x border-gray-100\",\n              ),\n            )}\n          >\n            {label}\n          </label>\n        )}\n      </div>\n    );\n  },\n);\n\nTextArea.displayName = \"TextArea\";",
    "explanation": "1. Description:\n   \u2022 The TextArea component is a customizable text area input field built with React and TypeScript.  \n   \u2022 It supports different styles and variants (e.g., a default style and a floating-label variant).  \n   \u2022 It accepts props to handle different input states such as error, focus, disabled, and custom labels.  \n   \u2022 The component uses React.forwardRef to allow parent components to interact with the underlying HTMLTextAreaElement.\n\n2. Usage in a larger application:\n   \u2022 To use the TextArea component, import it from the kit's package:\n     Example:\n     -------------------------------------------------\n     import React, { useRef } from 'react';\n     import { TextArea } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     const MyFormComponent = () => {\n       const textAreaRef = useRef<HTMLTextAreaElement>(null);\n     \n       return (\n         <form>\n           <TextArea\n             ref={textAreaRef}\n             id=\"message\"\n             label=\"Your Message\"\n             error={false}\n             isFocused={false}\n             disabled={false}\n             variant=\"floating-label\" // or \"default\"\n             placeholder=\"Type your message here...\"\n           />\n         </form>\n       );\n     };\n     \n     export default MyFormComponent;\n     -------------------------------------------------\n   \u2022 Props include:\n     - error: A boolean to indicate if the text area is in an error state.\n     - isFocused: Boolean to manage focus state styling.\n     - disabled: Boolean to disable the text area.\n     - label: Text label for the input (also used as placeholder).\n     - variant: Style variant, defaulting to \"default\"; can also be \"floating-label\".\n     - id: A unique identifier for the text area element.\n     - ...props: Spread operator to pass any additional props to the underlying <textarea> element.\n\n3. Best practices and limitations:\n   \u2022 Best Practices:\n     - Use the ref forwarded by the component for focus management or value extraction.\n     - Ensure unique ids are provided when using label-related functionalities, especially with the floating-label variant.\n     - Follow a consistent styling approach by using variants and typography classes.\n     - Import the component from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and proper versioning across your application.\n   \u2022 Limitations:\n     - Styling is tied to the custom helper functions like inputVariants, typographyVariants, and textAreaVariants. Customization beyond provided variants may require additional CSS or modifications.\n     - The floating-label logic relies on specific class names and CSS rules (such as \"peer-placeholder-shown\") that may need careful handling when modifying global styles.\n\nThis component is ideal for form inputs that require enhanced visual feedback along with accessible labeling and coherent theming as provided by the UI kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Button/Button.tsx",
    "code_snippet": "export interface ButtonProps\n  extends ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  /**\n   * The variant style to use\n   * @default \"primary\"\n   */\n  variant?: \"primary\" | \"secondary\" | \"tertiary\";\n  /**\n   * The size of the button\n   * @default \"lg\"\n   */\n  size?: \"sm\" | \"lg\" | \"icon\";\n  /**\n   * The state of the button\n   * @default undefined\n   */\n  state?: \"pending\" | \"success\" | \"failed\";\n  /**\n   * Whether the button should take up the full width of its container\n   * @default false\n   */\n  fullWidth?: boolean;\n  /**\n   * Whether the button should be rendered as a slot\n   * @default false\n   */\n  asChild?: boolean;\n}",
    "explanation": "This component represents a customizable Button component in React with TypeScript. It defines the ButtonProps interface, which extends both the standard HTML button attributes and a set of predefined variant styles. This allows the button to have different looks and behaviors based on its props.\n\n1. What this component does or represents:\n\u2003\u2022 It creates a button element with additional styling and behavior options.\n\u2003\u2022 The props include:\n\u2003\u2003\u2013 variant: Determines the button\u2019s visual style (primary, secondary, tertiary). Defaults to \"primary\".\n\u2003\u2003\u2013 size: Sets the button size (small, large, or an icon-only variant). Defaults to \"lg\".\n\u2003\u2003\u2013 state: Indicates a state such as pending, success, or failed, which could be used to show loading or success states.\n\u2003\u2003\u2013 fullWidth: Whether the button expands to fill its container.\n\u2003\u2003\u2013 asChild: Allows the button to be rendered as a custom element via a slot pattern.\n\u2003\u2022 It also accepts all standard button attributes (like onClick, disabled, etc.), making it flexible and easy to integrate.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the Button component from the UI kit package. For example:\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2003\u2003import { Button } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2003\u2022 Pass the props to customize the button appearance and behavior. For instance:\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2003\u2003<Button variant=\"secondary\" size=\"sm\" fullWidth onClick={() => console.log('Clicked')}>\n\u2003\u2003  Click Me\n\u2003\u2003</Button>\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2003\u2022 Typical usage involves placing the button within forms, dialogs, or any interactive UI segment.\n\u2003\u2022 When you need to render a custom wrapper or different element (using a slot), set asChild to true:\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\u2003\u2003<Button asChild>\n\u2003\u2003  <a href=\"/dashboard\">Go to Dashboard</a>\n\u2003\u2003</Button>\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n\n3. Best practices or limitations:\n\u2003\u2022 Maintain consistency by using the defined variants and sizes to ensure a uniform look across the application.\n\u2003\u2022 Use the asChild prop carefully to avoid accessibility issues, ensuring the underlying element behaves like a button if needed.\n\u2003\u2022 The component extends standard HTML button attributes, so be mindful of potential conflicts or unintended side effects when passing additional props.\n\u2003\u2022 Ensure that state management (like pending or success) is handled appropriately in your app to give users clear feedback.\n\u2003\u2022 The component might rely on external styling utilities (suggested by the buttonVariants usage), so ensure those styles are correctly configured in your project.\n\nOverall, this Button component is designed for reusability, allowing developers to quickly build interactive and consistent UI experiences while keeping accessibility and customization in mind."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Button/Button.tsx",
    "code_snippet": "export const Button = forwardRef<HTMLButtonElement, ButtonProps>(\n  (\n    { variant = \"primary\", size = \"lg\", fullWidth, asChild, state, children, ...props },\n    ref,\n  ) => {\n    const Comp = asChild ? Slot : \"button\";\n\n    const stateful = !!state;\n\n    return (\n      <Comp\n        ref={ref}\n        {...props}\n        className={cn(\n          buttonVariants({\n            variant,\n            size,\n            stateful,\n            fullWidth,\n          }),\n          typographyVariants({\n            variant: \"label\",\n            level: size === \"lg\" ? 1 : 2,\n          }),\n          props.className,\n        )}\n      >\n        {!state && children}\n        {state === \"pending\" && <Spinner className=\"absolute size-6\" />}\n        {state === \"success\" && <Success className=\"absolute size-6\" />}\n        {state === \"failed\" && <Fail className=\"absolute size-6\" />}\n      </Comp>\n    );\n  },\n);\n\nButton.displayName = \"Button\";",
    "explanation": "Below is an explanation of the Button component provided in the code snippet.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. What This Component Does or Represents\n\n\u2022 The Button component is a customizable React button element built with TypeScript.  \n\u2022 It supports several prop options to adjust the appearance and behavior:  \n\u2003\u2003\u2013 variant (default \"primary\") and size (default \"lg\") determine styling.  \n\u2003\u2003\u2013 fullWidth makes the button take up the full available width.  \n\u2003\u2003\u2013 asChild allows you to render a different element (using a Slot component) instead of a native button if needed.  \n\u2003\u2003\u2013 state can be set to represent asynchronous conditions (e.g., \"pending\", \"success\", \"failed\") which will display a Spinner, Success icon, or Fail icon, respectively.  \n\u2022 It uses utility functions (cn, buttonVariants, typographyVariants) to compose its CSS classes dynamically based on props.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to Use It in a Larger Application\n\nTo use this Button component in your application, import it from '@worldcoin/mini-apps-ui-kit-react'. Then, include it in your JSX and pass in the appropriate props as required.\n\nExample Usage:\n------------------------------------------------\nimport React from 'react';\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Basic primary button */}\n      <Button onClick={() => console.log('Clicked!')}>\n        Click Me\n      </Button>\n\n      {/* A large full-width button with a success state */}\n      <Button fullWidth state=\"success\" size=\"lg\" onClick={() => console.log('Submitted!')}>\n        Submit\n      </Button>\n\n      {/* Using asChild to render a custom component (for example, a link styled as a button) */}\n      <Button asChild>\n        <a href=\"https://example.com\">Go to Example</a>\n      </Button>\n    </div>\n  );\n};\n\nexport default App;\n------------------------------------------------\n\n\u2022 Props Explained:\n\u2003\u2003- variant: Determines the visual style (e.g., \"primary\", \"secondary\").\n\u2003\u2003- size: Modifies the button size and typography level.\n\u2003\u2003- fullWidth: When set, the button spans the full width of its container.\n\u2003\u2003- asChild: If true, leverages the Slot component to render a different element, letting you pass a custom component in as children.\n\u2003\u2003- state: Controls the display of an icon (Spinner, Success, Fail) based on an asynchronous operation state.\n\u2003\u2003- children: The content displayed within the button.\n\u2003\u2003- Forwarded ref and additional spread props for further customization.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices and Limitations\n\n\u2022 Best Practices:\n\u2003\u2003- Import the Button component directly from '@worldcoin/mini-apps-ui-kit-react' as shown in the examples to maintain a consistent import strategy.\n\u2003\u2003- Provide descriptive onClick handlers and accessible labels to ensure good user experience and accessibility.\n\u2003\u2003- Use concise and clear prop names when passing state, size, and variants.\n\u2003\u2003- Leverage the asChild prop if you need to integrate the button component with custom elements without losing the standard style.\n\u2003\u2003- Forward refs correctly if you plan to manipulate the button imperatively.\n\n\u2022 Limitations:\n\u2003\u2003- The component\u2019s styling relies on utility functions (cn, buttonVariants, typographyVariants) and external icons (Spinner, Success, Fail), so ensure these are available or properly implemented in your project context.\n\u2003\u2003- When using asynchronous states, it\u2019s important that the parent component correctly manages state transitions, as the Button only visually represents these states.\n\u2003\u2003- The merging of class names via \u201cprops.className\u201d should be considered carefully to avoid conflicting styles.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nThis explanation should help you understand how the Button component works, how to integrate it into your application, and what to watch for regarding its usage and limitations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/Tick.tsx",
    "code_snippet": "export function Tick({ className }: TickProps) {\n  return (\n    <svg\n      width=\"16\"\n      height=\"16\"\n      viewBox=\"0 0 16 16\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"h-4 w-4\", className)}\n      data-testid=\"tick-icon\"\n    >\n      <path\n        d=\"M3.33334 8.66669L6.00001 11.3334L12.6667 4.66669\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"square\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the component:\n\n1. What the Component Does or Represents\n\n\u2022 The Tick component renders a simple tick (checkmark) icon using SVG.  \n\u2022 It accepts an optional CSS className to allow additional styling on top of its default Tailwind CSS classes (e.g., \"h-4 w-4\").  \n\u2022 The icon\u2019s path is defined to have a stroke with a width of 1.5, using the currentColor so that it adapts its color from the parent element.\n\n2. How to Use It in a Larger Application\n\n\u2022 Import the Tick component from the kit:  \n\u2003\u2003import { Tick } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2022 Usage example in a parent component:\n\n\u2003\u2003import React from 'react';  \n\u2003\u2003import { Tick } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003export function SuccessMessage() {\n\u2003\u2003  return (\n\u2003\u2003    <div className=\"flex items-center\">\n\u2003\u2003      <Tick className=\"text-green-500\" />\n\u2003\u2003      <span className=\"ml-2 text-sm font-medium\">Success!</span>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003}\n\nIn the example above, the Tick component is imported from the '@worldcoin/mini-apps-ui-kit-react' package and used with an extra class for coloring. It is integrated into a success message component with adjacent text.\n\n\u2022 Props: The Tick component only accepts a props object with an optional className (defined by TickProps) to further customize its styling.\n\n3. Best Practices or Limitations\n\n\u2022 Best Practices:\n\u2003\u2003- Use semantic HTML and accessible practices in the parent component. For example, add appropriate ARIA labels if the tick icon represents an actionable item.\n\u2003\u2003- Maintain consistent styling using the provided utility classes and any custom modifications through the className prop.\n\u2003\u2003- Document the usage of the icon in your UI kit to keep consistency across your app.\n\n\u2022 Limitations:\n\u2003\u2003- The SVG dimensions are fixed (16x16 viewing box and 4x4 Tailwind sizing classes) so if a larger or variable icon is needed, the component may require modification or wrapping in a container with scaling.\n\u2003\u2003- As the component relies on external CSS classes (such as Tailwind's h-4 and w-4), ensure that your project configuration includes the necessary CSS utilities if customization is required.\n\u2003\u2003- Only minimal customization is possible directly\u2014if further modifications to the icon are needed, consider extending the component or creating a new variant.\n\nThis explanation and examples show how to integrate the Tick icon component from '@worldcoin/mini-apps-ui-kit-react' and how to use it in larger applications following recommended practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/EyeClosed.tsx",
    "code_snippet": "export function EyeClosed({ className }: EyeProps) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6\", className)}\n    >\n      <path\n        d=\"M19.5001 16L17.0249 12.6038\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M12 17.5V14\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M4.5 16L6.96895 12.6124\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M3 8C6.6 16 17.4 16 21 8\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What It Does:  \n\u2003\u2022 The component, named EyeClosed, is a React function component that renders an SVG representing a closed eye.  \n\u2003\u2022 It accepts a prop named className (typed via EyeProps), which allows you to extend or override its default styling.  \n\u2003\u2022 The SVG paths are drawn with stroke attributes set to \"currentColor\" so that they inherit the color from their parent element, making it easy to style with CSS.\n\n2. How to Use It in a Larger Application:  \n\u2003\u2022 This component is designed to be imported and used in any React application that can benefit from an icon, for example, a password input toggle button.  \n\u2003\u2022 You pass an optional className prop to adjust its sizing or coloring via CSS classes.  \n\u2003\u2022 When using this component in your app, import it from the package \"@worldcoin/mini-apps-ui-kit-react\" (assuming that is your library\u2019s namespace).  \n\u2003\u2022 Here\u2019s an example of how you could integrate it:\n\n-------------------------------------------------\nExample Usage:\n\nimport React from 'react';\nimport { EyeClosed } from '@worldcoin/mini-apps-ui-kit-react';\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction PasswordInput() {\n  return (\n    <div className=\"password-input\">\n      <input type=\"password\" placeholder=\"Enter password\" />\n      <Button>\n        <EyeClosed className=\"custom-eye-icon\" />\n      </Button>\n    </div>\n  );\n}\n\nexport default PasswordInput;\n-------------------------------------------------\n\n3. Best Practices or Limitations:  \n\u2003\u2022 Make sure the utility function (cn) used for combining CSS classes is imported or available globally in your project; otherwise, replace it with a standard approach (like template literals or classnames library).  \n\u2003\u2022 The prop type (EyeProps) should be well defined, ensuring type safety; consistently document your props for clarity when others use or maintain your code.  \n\u2003\u2022 Since the icon uses \"currentColor\" for its strokes, ensure that the parent container sets an appropriate text or icon color.  \n\u2003\u2022 This component is purely presentational and does not include any interactive behavior\u2014it should be combined with interactive wrappers (like buttons) if needed.\n\nThis explanation summarizes what the component does, how to integrate it into your project, and any notable considerations or limitations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/ArrowDown.tsx",
    "code_snippet": "export function ArrowDown(props: React.SVGProps<SVGSVGElement>) {\n  return (\n    <svg\n      width=\"18\"\n      height=\"18\"\n      viewBox=\"0 0 18 18\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      {...props}\n    >\n      <path\n        d=\"M4.5 6.75L9 11.25L13.5 6.75\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.35\"\n        strokeLinecap=\"square\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the ArrowDown component:\n\n1. What It Does/Represents:\n   \u2022 This is a functional React component that renders an SVG icon of a downward pointing arrow.\n   \u2022 It accepts all standard SVG properties (React.SVGProps) allowing customization of attributes like stroke color, width, height, className, etc.\n   \u2022 The component is designed to serve as a reusable UI element representing a downward action or indicating a dropdown.\n\n2. How to Use It in a Larger Application:\n   \u2022 Import the component from the designated package:\n     Example:\n     ------------------------------------------------\n     import { ArrowDown } from '@worldcoin/mini-apps-ui-kit-react';\n     ------------------------------------------------\n   \u2022 Include the component in your JSX, optionally overriding its default SVG attributes:\n     Example usage:\n     ------------------------------------------------\n     import React from 'react';\n     import { ArrowDown, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n     function Example() {\n       return (\n         <div>\n           <h2>Click the Button Below</h2>\n           <Button onClick={() => console.log('Button clicked!')}>\n             Press Me <ArrowDown stroke=\"blue\" width=\"20\" height=\"20\" />\n           </Button>\n         </div>\n       );\n     }\n\n     export default Example;\n     ------------------------------------------------\n   \u2022 Here, the ArrowDown is used as an icon next to the text within a button, with its color and dimensions customized via props.\n\n3. Best Practices and Limitations:\n   \u2022 Best Practices:\n     - Keep the SVG props in mind to override properties when styling (for instance, changing the stroke color or size).\n     - Because the component uses currentColor for the stroke, it inherits the text color from its parent element which can be useful for consistent theming.\n     - Document the usage if you extend its functionality for better collaboration among UI developers.\n   \u2022 Limitations:\n     - The component is fixed to an 18x18 view box; if scaling is needed, ensure it is handled via props or external styling.\n     - Being a simple SVG, it does not include interactive behaviors by itself (like animations), so those would need to be implemented separately if needed.\n\nThis explanation should help integrate the ArrowDown component effectively into your projects using '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/Magnifier.tsx",
    "code_snippet": "export function Magnifier({ className }: MagnifierProps) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6\", className)}\n    >\n      <path\n        d=\"M17 17L21 21\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M3 11C3 15.4183 6.58172 19 11 19C13.213 19 15.2161 18.1015 16.6644 16.6493C18.1077 15.2022 19 13.2053 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided Magnifier component:\n\n1. What it represents:\n\u2003\u2022 The Magnifier component renders an SVG icon that visually represents a magnifying glass, often used as a symbol for search functionality.\n\u2003\u2022 It accepts an optional className prop to allow additional styling.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the component from the design system package.\n\u2003\u2022 Pass any additional class names through the className prop for custom styling.\n\u2003\u2022 For example, if you are building a search bar interface, you might incorporate it alongside input components.\n\u2003\n\u2003Example usage:\n\u2003----------------------------------------------------\n\u2003import React from 'react';\n\u2003import { Magnifier, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003function SearchComponent() {\n\u2003\u2002\u2002return (\n\u2003\u2002\u2002\u2002\u2002<div className=\"search-container\">\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002<label htmlFor=\"search-input\">Search</label>\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002<div className=\"search-box\">\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<Magnifier className=\"custom-magnifier\" />\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<input id=\"search-input\" type=\"text\" placeholder=\"Type to search...\" />\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002</div>\n\u2003\u2002\u2002\u2002\u2002\u2002\u2002<Button onClick={() => alert('Searching...')}>Go</Button>\n\u2003\u2002\u2002\u2002\u2002</div>\n\u2003\u2002\u2002);\n\u2003}\n\n\u2003export default SearchComponent;\n\u2003----------------------------------------------------\n\n3. Best practices and limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Keep the component stateless and focused on the presentation of the icon.\n\u2003\u2003\u2013 Use the className prop to integrate with your app's styling system.\n\u2003\u2003\u2013 Always ensure that visual components that indicate interactive behavior (like a search icon) are accompanied by appropriate accessibility labels or instructions if they are clickable.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 Being a simple SVG icon, it does not handle any business logic such as search functionality.\n\u2003\u2003\u2013 Without proper ARIA attributes or context when used in an interactive element, it might not be accessible on its own.\n\u2003\u2003\u2013 The component relies on an external helper function (such as cn for class names) which should be available or replaced with standard alternatives (e.g., a simple className concatenation).\n\nThis component is designed to be easily composable, enabling you to leverage it within your UI toolkit while maintaining visual consistency by importing directly from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/Success.tsx",
    "code_snippet": "export const Success = ({ className }: SuccessProps) => {\n  return (\n    <svg\n      width=\"25\"\n      height=\"24\"\n      viewBox=\"0 0 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6 text-success-600\", className)}\n    >\n      <rect x=\"0.5\" width=\"24\" height=\"24\" rx=\"12\" fill=\"currentColor\" />\n      <rect\n        opacity=\"0.2\"\n        x=\"0.5\"\n        width=\"24\"\n        height=\"24\"\n        rx=\"12\"\n        fill=\"url(#paint0_radial_578_332)\"\n      />\n      <rect\n        x=\"0.636364\"\n        y=\"0.136364\"\n        width=\"23.7273\"\n        height=\"23.7273\"\n        rx=\"11.8636\"\n        stroke=\"url(#paint1_linear_578_332)\"\n        strokeWidth=\"0.272727\"\n      />\n      <path\n        d=\"M8.54541 12.4091L10.7272 14.5909L16.1818 9.13633\"\n        stroke=\"white\"\n        strokeWidth=\"1.5\"\n      />\n      <defs>\n        <radialGradient\n          id=\"paint0_radial_578_332\"\n          cx=\"0\"\n          cy=\"0\"\n          r=\"1\"\n          gradientUnits=\"userSpaceOnUse\"\n          gradientTransform=\"translate(5.95455) rotate(63.4349) scale(26.8328 26.7171)\"\n        >\n          <stop stopColor=\"white\" />\n          <stop offset=\"1\" stopColor=\"white\" stopOpacity=\"0\" />\n        </radialGradient>\n        <linearGradient\n          id=\"paint1_linear_578_332\"\n          x1=\"12.5\"\n          y1=\"0\"\n          x2=\"12.5\"\n          y2=\"24\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"white\" stopOpacity=\"0.3\" />\n          <stop offset=\"1\" stopColor=\"white\" stopOpacity=\"0\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};",
    "explanation": "1. What the Component Does:  \n\u2003\u2022 The Success component renders an SVG graphic that visually represents a \"success\" status\u2014typically used to indicate that an operation has completed successfully.  \n\u2003\u2022 Its design features a circular background with a checkmark icon in the foreground, using a combination of rectangles, paths, and gradients to achieve a modern, subtle effect.  \n\u2003\u2022 The component accepts a className prop that is merged with default utility classes via the cn() function, allowing customization of its styling (e.g., size, color modifiers).\n\n2. How to Use It in a Larger Application:  \n\u2003\u2022 Import the Success component from the UI kit using the designated module name:  \n\u2003\u2003import { Success } from '@worldcoin/mini-apps-ui-kit-react';  \n\u2003\u2022 Pass in additional classes as needed using the className prop to tailor its appearance within your layout.  \n\u2003\u2022 Typical usage might be within a notification, modal, or card component to indicate that a process was successful.  \n\u2003\u2003Example:  \n\u2003\u2003------------------------------------------------------------  \n\u2003\u2003import React from 'react';\n\u2003\u2003import { Success } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const Notification = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div className=\"flex items-center p-4 bg-white shadow rounded\">\n\u2003\u2003      <Success className=\"mr-2\" />\n\u2003\u2003      <span className=\"text-gray-800\">Operation completed successfully!</span>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default Notification;\n\u2003\u2003------------------------------------------------------------\n\n3. Best Practices and Limitations:  \n\u2003\u2022 Best Practices:  \n\u2003\u2003- Ensure consistent naming and theming by applying appropriate classes via the className prop.  \n\u2003\u2003- Use the component in contexts that require a visual indication of success, ensuring that it\u2019s semantically and contextually appropriate.  \n\u2003\u2003- Maintain accessibility by combining this icon with visible status text, so that users relying on assistive technologies understand the success state.  \n\u2003\u2022 Limitations:  \n\u2003\u2003- The SVG\u2019s dimensions (25x24) and shape are hardcoded; if different sizes are required, additional styling or modifications might be needed.  \n\u2003\u2003- The color styling is tied to the CSS classes (\"text-success-600\") and currentColor usage; changes in theme may require updating these classes accordingly.\n\nThis explanation should give you a clear picture of what the Success component is, how to integrate it within your application, and what considerations to keep in mind during its use."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/Eye.tsx",
    "code_snippet": "export function Eye({ className }: EyeProps) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6\", className)}\n    >\n      <path\n        d=\"M3 13C6.6 5 17.4 5 21 13\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M12 17C10.3431 17 9 15.6569 9 14C9 12.3431 10.3431 11 12 11C13.6569 11 15 12.3431 15 14C15 15.6569 13.6569 17 12 17Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"square\"\n        strokeLinejoin=\"round\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided Eye component:\n\n1. What It Represents  \n\u2003\u2022 The Eye component is a React functional component that renders an SVG icon resembling an eye.  \n\u2003\u2022 It accepts a prop named className (along with any additional classes via the helper function cn), which allows you to customize its styling (e.g., size, color) without altering the component\u2019s internal structure.\n\n2. How to Use It in a Larger Application  \n\u2003\u2022 In your application, you can import the Eye component from the UI kit (here, using the package name '@worldcoin/mini-apps-ui-kit-react').  \n\u2003\u2022 Include the Eye in your component tree and pass additional class names via the className prop as needed.  \n\u2003\u2022 For example, to show this icon with custom styling:\n\n------------------------------------------------\nimport React from 'react';\nimport { Eye } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction App() {\n  return (\n    <div className=\"app-container\">\n      {/* Render the Eye icon with additional styling */}\n      <Eye className=\"text-blue-500\" />\n    </div>\n  );\n}\n\nexport default App;\n------------------------------------------------\n\n\u2003\u2022 In larger applications, Eye might be used in button components, modal dialogs, or as a decorative element in forms, where an eye icon is typical (for example, to toggle password visibility).\n\n3. Best Practices and Limitations  \n\u2003\u2022 Best Practices:  \n\u2003\u2003- Use a consistent design system by importing and using pre-built components from your UI kit (here imported from '@worldcoin/mini-apps-ui-kit-react').  \n\u2003\u2003- Leverage TypeScript for type-checking ensuring that the expected props (like className) conform to the defined interface (EyeProps).  \n\u2003\u2003- Use helper functions such as cn (usually a utility for conditionally joining class names) to keep the component styling flexible and maintainable.  \n\u2003- Limitations:  \n\u2003\u2003- The SVG\u2019s dimensions (width and height of 24px) are fixed. If you need more flexible scaling, consider passing in dimensions as props or using CSS scaling.  \n\u2003\u2003- The component is solely presentational. It does not provide interactive logic (e.g., onClick handlers), so you will need to wrap it in interactive elements if interactivity is required.\n\nThis explanation should give you a clear understanding of what the Eye component does, how you can integrate it into your applications, and some best practices to follow."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/Fail.tsx",
    "code_snippet": "export const Fail = ({ className }: FailProps) => {\n  return (\n    <svg\n      width=\"25\"\n      height=\"24\"\n      viewBox=\"0 0 25 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-6 text-error-600\", className)}\n    >\n      <rect x=\"0.5\" width=\"24\" height=\"24\" rx=\"12\" fill=\"currentColor\" />\n      <rect\n        opacity=\"0.2\"\n        x=\"0.5\"\n        width=\"24\"\n        height=\"24\"\n        rx=\"12\"\n        fill=\"url(#paint0_radial_578_338)\"\n      />\n      <rect\n        x=\"0.636364\"\n        y=\"0.136364\"\n        width=\"23.7273\"\n        height=\"23.7273\"\n        rx=\"11.8636\"\n        stroke=\"url(#paint1_linear_578_338)\"\n        strokeWidth=\"0.272727\"\n      />\n      <path\n        d=\"M9.50403 14.7233L12.3637 11.8636M15.2233 9.00403L12.3637 11.8636M12.3637 11.8636L9.50403 9.00403M12.3637 11.8636L15.2233 14.7233\"\n        stroke=\"white\"\n        strokeWidth=\"1.5\"\n      />\n      <defs>\n        <radialGradient\n          id=\"paint0_radial_578_338\"\n          cx=\"0\"\n          cy=\"0\"\n          r=\"1\"\n          gradientUnits=\"userSpaceOnUse\"\n          gradientTransform=\"translate(5.95455) rotate(63.4349) scale(26.8328 26.7171)\"\n        >\n          <stop stopColor=\"white\" />\n          <stop offset=\"1\" stopColor=\"white\" stopOpacity=\"0\" />\n        </radialGradient>\n        <linearGradient\n          id=\"paint1_linear_578_338\"\n          x1=\"12.5\"\n          y1=\"0\"\n          x2=\"12.5\"\n          y2=\"24\"\n          gradientUnits=\"userSpaceOnUse\"\n        >\n          <stop stopColor=\"white\" stopOpacity=\"0.3\" />\n          <stop offset=\"1\" stopColor=\"white\" stopOpacity=\"0\" />\n        </linearGradient>\n      </defs>\n    </svg>\n  );\n};",
    "explanation": "Below is a concise explanation of the provided component:\n\n1. What it Represents or Does:\n\u2003\u2022 The Fail component is a presentational React functional component that renders an SVG icon.\n\u2003\u2022 It visually represents a failure or error state (typically by showing a circle with an \"X\" mark).\n\u2003\u2022 It accepts an optional className prop that lets you extend or override its default styling using CSS classes.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the component from the UI kit package:\n\u2003\u2003import { Fail } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 Use it anywhere you need to indicate an error or failure state:\n\u2003\u2003<Fail className=\"my-custom-class\" />\n\u2003\u2022 The component is flexible: you can pass additional styling via the className prop. For instance, if you\u2019re using Tailwind CSS, you could adjust its size or color via class names.\n\u2003\u2022 Example usage inside a larger component:\n\u2003\u2003---------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Fail, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const ErrorNotification = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div className=\"flex items-center space-x-4\">\n\u2003\u2003      <Fail className=\"w-8 h-8\" />\n\u2003\u2003      <div>\n\u2003\u2003        <p className=\"text-error-600 font-bold\">An error occurred!</p>\n\u2003\u2003        <Button variant=\"secondary\" onClick={() => window.location.reload()}>\n\u2003\u2003          Retry\n\u2003\u2003        </Button>\n\u2003\u2003      </div>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default ErrorNotification;\n\u2003\u2003---------------------------------------------------------\n\u2003\u2003This example shows how to import and embed the Fail icon within an error notification component.\n\n3. Best Practices or Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Use semantic components to indicate error states, ensuring accessibility and clearer UI signaling.\n\u2003\u2003\u2013 Pass custom classNames to maintain consistency with your design system.\n\u2003\u2003\u2013 The SVG uses \u201ccurrentColor\u201d so that its color can easily inherit from CSS, making it flexible for theming.\n\u2003\u2003\u2013 Ensure that the helper function (cn) used for concatenating className values is imported or defined in your project.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component is purely presentational and does not include any interactive behavior.\n\u2003\u2003\u2013 It has fixed dimensions (width=\"25\" and height=\"24\"), so if the design needs different sizing, you may need to override these styles using CSS or consider modifying the component.\n\u2003\u2003\u2013 Because it relies on a specific SVG design, it might not be ideal if you need a different visual representation for error states.\n\nUsing the component as described ensures consistency with the design system provided by '@worldcoin/mini-apps-ui-kit-react' and allows for easy customization where needed."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/MagicWand.tsx",
    "code_snippet": "export function MagicWand({ className }: MagicWandProps) {\n  return (\n    <svg\n      width=\"20\"\n      height=\"20\"\n      viewBox=\"0 0 20 20\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"size-5\", className)}\n    >\n      <path\n        d=\"M14.0774 3.8389L3.82886 14.0874L4.48362 14.7421L5.25751 15.516L5.91227 16.1707L16.1607 5.92225L15.506 5.26752L14.7321 4.49363L14.0774 3.8389Z\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n      />\n      <path\n        d=\"M11.2844 6.63257L13.3678 8.7159\"\n        stroke=\"currentColor\"\n        strokeWidth=\"1.5\"\n        strokeLinecap=\"round\"\n        strokeLinejoin=\"round\"\n      />\n      <path\n        d=\"M10.2313 3.98142C10.6148 3.98142 10.9258 3.6705 10.9258 3.28697C10.9258 2.90344 10.6148 2.59253 10.2313 2.59253C9.84778 2.59253 9.53687 2.90344 9.53687 3.28697C9.53687 3.6705 9.84778 3.98142 10.2313 3.98142Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M6.87508 3.125L7.43777 4.64564L8.95841 5.20833L7.43777 5.77102L6.87508 7.29167L6.31239 5.77102L4.79175 5.20833L6.31239 4.64564L6.87508 3.125Z\"\n        fill=\"currentColor\"\n      />\n      <path\n        d=\"M15 10.8333L15.6752 12.658L17.5 13.3333L15.6752 14.0085L15 15.8333L14.3248 14.0085L12.5 13.3333L14.3248 12.658L15 10.8333Z\"\n        fill=\"currentColor\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided MagicWand component:\n\n1. What it does/represents:\n\u2003\u2022 The MagicWand component is a stateless React component that renders an SVG icon representing a magic wand.  \n\u2003\u2022 It accepts an optional className prop to allow custom styling, which is merged with a default size class (\"size-5\") using a helper function (cn).  \n\u2003\u2022 The SVG comprises several paths that collectively form the graphic with both filled areas and strokes.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the MagicWand component from the UI kit package instead of a relative path.  \n\u2003\u2022 The component accepts props (currently, at least className through the MagicWandProps interface) to allow styling customization.  \n\u2003\u2022 Example usage within a React component might look like this:\n\n-------------------------------------------------------\nimport React from 'react';\nimport { MagicWand, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nexport function ExampleComponent() {\n  return (\n    <div className=\"flex flex-col items-center space-y-4\">\n      <h1>Check out the Magic Wand Icon!</h1>\n      <MagicWand className=\"text-purple-500\" />\n      <Button onClick={() => console.log('Magic Wand action triggered!')}>\n        Activate Magic\n      </Button>\n    </div>\n  );\n}\n-------------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Ensure that icons are accessible. Although this SVG is purely decorative, consider adding descriptive attributes or wrapping it with an element providing context if needed.\n\u2003\u2003- Maintain consistency in styling by using the provided class names and overriding them using the className prop.\n\u2003\u2003- Keep SVG icons lightweight and reuse them across the application for a consistent UI.\n\u2003\u2022 Limitations:\n\u2003\u2003- The component as shown has no accessibility labels (such as aria-hidden or title), which might be necessary if the icon conveys important information.\n\u2003\u2003- It is a presentational component only\u2014if additional interactivity is needed, further enhancements might be required.\n\u2003\u2003- The helper function cn is assumed to handle combining class names; ensure it is defined or imported in your application.\n\nBy following these guidelines and usage examples, you can effectively integrate the MagicWand component into your application while maintaining consistency and best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Icons/XMark.tsx",
    "code_snippet": "export function XMark({ className }: XMarkProps) {\n  return (\n    <svg\n      width=\"24\"\n      height=\"24\"\n      viewBox=\"0 0 24 24\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n      className={cn(\"h-6 w-6\", className)}\n    >\n      <path\n        d=\"M6.75729 17.2426L11.9999 12M17.2426 6.75736L11.9999 12M11.9999 12L6.75729 6.75736M11.9999 12L17.2426 17.2426\"\n        stroke=\"currentColor\"\n        strokeWidth=\"2\"\n        strokeLinecap=\"square\"\n      />\n    </svg>\n  );\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What this component does or represents:\n   \u2022 This code defines a React component called XMark.\n   \u2022 It renders an SVG representing an \u201cX\u201d or close icon.\n   \u2022 The SVG element takes a className prop (combined with a default \"h-6 w-6\" class by using a helper function cn) to allow for custom styling.\n   \u2022 The icon\u2019s strokes and dimensions are preset, but the styling can be further customized via the className prop.\n\n2. How to use it in a larger application:\n   \u2022 Import the XMark component from the UI kit:\n     Example:\n     --------------------------------------------------\n     import { XMark } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     function App() {\n       return (\n         <div>\n           <h1>Welcome to the App</h1>\n           <XMark className=\"text-red-600\" />\n         </div>\n       );\n     }\n     \n     export default App;\n     --------------------------------------------------\n   \u2022 In a common scenario, you might use this XMark icon in buttons, modals, or any context where a \"close\" action is needed.\n   \u2022 The component accepts props such as className (defined in XMarkProps) to modify its appearance.\n\n3. Best practices or limitations:\n   \u2022 Best Practices:\n     - Ensure that non-default styling is applied by passing a className if needed.\n     - Use semantic naming for icons (e.g., using XMark for close actions) to maintain clarity.\n     - If using the cn helper function, verify that it is imported and available in your project to correctly combine class names.\n   \u2022 Limitations:\n     - The component is fixed in its size (24x24 view box, with h-6 w-6 guidelines) which might require tweaks if a different size is needed.\n     - It uses a stroke for the icon meaning that color or thickness overrides should be done cautiously,\n       ensuring consistency with theming or styling across the application.\n     - The component relies on an external helper (cn) for class name combination; any misconfiguration there might break styling behavior.\n\nIn summary, the XMark component is a reusable SVG icon for \"close\" actions, easily customizable through props, and it integrates seamlessly into a frontend application when imported from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ColorPicker/ColorPicker.tsx",
    "code_snippet": "export const ColorPickerItem = forwardRef<HTMLButtonElement, ColorPickerItemProps>(\n  ({ value, ...props }, ref) => {\n    return (\n      <RadioGroup.Item\n        ref={ref}\n        value={value}\n        className=\"size-[2.5rem] cursor-default rounded-full outline-none flex items-center justify-center relative disabled:opacity-90 disabled:cursor-not-allowed\"\n        style={{\n          background: value,\n        }}\n        {...props}\n      >\n        <RadioGroup.Indicator\n          className=\"absolute flex size-[2.75rem] items-center rounded-full justify-center\"\n          style={{ boxShadow: `0px 0px 0px 4px ${value}` }}\n        />\n      </RadioGroup.Item>\n    );\n  },\n);",
    "explanation": "Below is a concise explanation of the ColorPickerItem component:\n\n1. What this component does or represents:\n\u2003\u2022 The ColorPickerItem component is a styled radio button used as part of a color picker interface.  \n\u2003\u2022 It renders a circular, clickable button whose background color is determined by the \"value\" prop.  \n\u2003\u2022 A radio indicator with a slightly larger circle is positioned absolutely to provide an additional visual cue (such as a border-like effect) using the same color.  \n\u2003\u2022 It uses React\u2019s forwardRef to allow parent components to access the underlying HTML button element.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import ColorPickerItem (and any related components) from the '@worldcoin/mini-apps-ui-kit-react' package.  \n\u2003\u2022 Typically, ColorPickerItem will be used as a child within a RadioGroup component from the same UI kit, which manages the selection state.  \n\u2003\u2022 The essential prop is \"value\" (representing a color string), and any additional props are passed through to the underlying RadioGroup.Item element.  \n\nExample usage in a larger application:\n--------------------------------------------------\nimport React from 'react';\nimport { RadioGroup, ColorPickerItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst ColorPicker = () => {\n  const [selectedColor, setSelectedColor] = React.useState('#FF0000');\n\n  return (\n    <RadioGroup value={selectedColor} onValueChange={setSelectedColor}>\n      <ColorPickerItem value=\"#FF0000\" aria-label=\"Red\" />\n      <ColorPickerItem value=\"#00FF00\" aria-label=\"Green\" />\n      <ColorPickerItem value=\"#0000FF\" aria-label=\"Blue\" />\n    </RadioGroup>\n  );\n};\n\nexport default ColorPicker;\n--------------------------------------------------\nIn this example:\n\u2003\u2022 The RadioGroup from the UI kit wraps several ColorPickerItem components.  \n\u2003\u2022 Each ColorPickerItem represents a different color option.  \n\u2003\u2022 The component maintains the state of the selected color and updates the state upon user interaction.\n\n3. Best practices or limitations:\n\u2003\u2022 Ensure the \"value\" prop is a valid color string (hex, rgb, etc.) since it\u2019s directly applied to CSS styles.  \n\u2003\u2022 When integrating within a form, maintain proper accessibility practices (using aria-labels if the color is not visually discernible enough for screen readers).  \n\u2003\u2022 Utilize the forwarded ref if you need to manage focus or perform other DOM manipulations from a parent component.  \n\u2003\u2022 The inline styles set the background and boxShadow dynamically; if more complex theming is required, you might consider using CSS classes or styled-components for improved maintainability.  \n\u2003\u2022 Keep in mind that the component spreads any additional props onto the RadioGroup.Item, so ensure that extra props don\u2019t conflict with the defined styles or semantics.\n\nThis design pattern helps in creating modular, reusable UI components that integrate seamlessly with other elements provided by '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ColorPicker/ColorPicker.tsx",
    "code_snippet": "export const ColorPickerGroup = forwardRef<HTMLDivElement, ColorPickerGroupProps>(\n  ({ value, onChange, children, ...props }, ref) => {\n    return (\n      <RadioGroup.Root\n        ref={ref}\n        value={value}\n        onValueChange={onChange}\n        className=\"flex gap-4 items-center\"\n        {...props}\n      >\n        {children}\n      </RadioGroup.Root>\n    );\n  },\n);",
    "explanation": "1. Overview:\n\u2022 The ColorPickerGroup is a React component built with TypeScript that wraps a radio group UI element (likely from Radix UI). It accepts a current value, an onChange handler, and children representing individual radio options (for example, colored options). The component uses React\u2019s forwardRef to allow parent components to access its underlying div element.\n\n2. How to Use It:\n\u2022 Import the component from the UI kit package, set the value and onChange props, and nest radio items or other suitable elements as children. For example:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { ColorPickerGroup } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction MyColorPicker() {\n  const [selectedColor, setSelectedColor] = useState('red');\n\n  return (\n    <ColorPickerGroup\n      value={selectedColor}\n      onChange={(newColor) => setSelectedColor(newColor)}\n    >\n      {/* Each child should represent one choice in the radio group */}\n      <button type=\"button\" value=\"red\">Red</button>\n      <button type=\"button\" value=\"green\">Green</button>\n      <button type=\"button\" value=\"blue\">Blue</button>\n    </ColorPickerGroup>\n  );\n}\n\nexport default MyColorPicker;\n--------------------------------------------------\n\n3. Best Practices & Limitations:\n\u2022 Best Practices:\n  - Ensure that the children passed into ColorPickerGroup are appropriate radio options that work well with the RadioGroup context.\n  - Use the forwarded ref if you require programmatic access or measurements on the group container.\n  - Validate prop types to ensure that value and onChange are in sync with the child elements.\n\n\u2022 Limitations:\n  - The component is designed for a radio group scenario, so using elements that aren\u2019t designed to act like radio buttons may lead to unexpected behavior.\n  - Additional props passed to ColorPickerGroup are spread on the RadioGroup.Root element, so ensure they are consistent with its expected API.\n  \nOverall, ColorPickerGroup serves as a customizable, reusable radio group container that can be easily integrated into larger applications using the standardized imports from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/ColorPicker/ColorPicker.tsx",
    "code_snippet": "export default ColorPickerGroup;",
    "explanation": "Below is a concise explanation of ColorPickerGroup:\n\n1. What it does or represents:\n\u2003\u2022 ColorPickerGroup is a React component that acts as a container to organize a collection of color pickers. It provides a consistent layout and grouping behavior for individual color picking components, making it easier to manage styles and interactions when multiple color options are available in the UI.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the component from the UI kit and include it in your component tree.\n\u2003\u2022 It may accept props that control its layout (like className, style, or configuration props) as well as callbacks that help manage the selection of colors from its child pickers.\n\u2003\u2022 For example, you might have a form where the user selects multiple colors and you can wrap individual ColorPicker components (also imported from the UI kit) inside the ColorPickerGroup.\n\nExample usage:\n--------------------------------------------------\nimport React from 'react';\nimport { ColorPickerGroup, ColorPicker, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyColorForm: React.FC = () => {\n  const handleColorChange = (color: string) => {\n    console.log('Color selected:', color);\n  };\n\n  return (\n    <form>\n      <ColorPickerGroup>\n        <ColorPicker \n          label=\"Primary Color\" \n          onChange={handleColorChange} \n          defaultColor=\"#ff0000\" \n        />\n        <ColorPicker \n          label=\"Secondary Color\" \n          onChange={handleColorChange} \n          defaultColor=\"#00ff00\" \n        />\n      </ColorPickerGroup>\n      <Button type=\"submit\">Submit</Button>\n    </form>\n  );\n};\n\nexport default MyColorForm;\n--------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always import components from the designated package (\u2018@worldcoin/mini-apps-ui-kit-react\u2019) to ensure consistency and module compatibility.\n\u2003\u2003\u2013 Use clear and concise prop names to maintain component reusability and readability.\n\u2003\u2003\u2013 Validate props where necessary (using TypeScript types or PropTypes) to catch potential errors early.\n\u2003\u2003\u2013 Keep your component state managed at an appropriate level (either inside ColorPickerGroup or via parent components) for easier maintenance.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The component\u2019s styling or behavior might be limited by what is exposed through its API. Extra customization may require additional wrapping or overrides.\n\u2003\u2003\u2013 If ColorPickerGroup does not expose some configuration or event callbacks, more complex interactions might be harder to implement without modifying the component or composition patterns.\n\nThis design and usage approach ensures the ColorPickerGroup is both easy to integrate into larger applications and flexible enough to support various color selection interfaces."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export interface TypographyProps extends React.HTMLAttributes<HTMLElement> {\n  /**\n   * The HTML element to render the typography as\n   * @default \"p\"\n   */\n  as?:\n    | \"p\"\n    | \"h1\"\n    | \"h2\"\n    | \"h3\"\n    | \"h4\"\n    | \"h5\"\n    | \"h6\"\n    | \"span\"\n    | \"small\"\n    | \"strong\"\n    | \"div\"\n    | \"em\";\n}",
    "explanation": "Below is a concise explanation of the code:\n\n1. What this component does or represents:  \n   \u2022 The code defines a TypeScript interface called TypographyProps for a Typography component.  \n   \u2022 This interface extends React\u2019s HTML attributes for any HTML element (using React.HTMLAttributes<HTMLElement>) and supports all common event and attribute props.  \n   \u2022 One specific prop, as, allows users to choose which HTML element the component should render as. Its allowed values include \"p\", \"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\", \"span\", \"small\", \"strong\", \"div\", and \"em\". If not provided, it defaults to a paragraph element (p).\n\n2. How to use it in a larger application (props, typical usage, example):  \n   \u2022 To use the Typography component, you would import it from the '@worldcoin/mini-apps-ui-kit-react' package.  \n   \u2022 You can now pass any HTML attribute (like className, id, style, etc.) to style or interact with the rendered element, and specify the \"as\" prop to control which HTML tag is used.  \n   \u2022 Example usage:\n\n-----------------------------------------------------------\nimport React from 'react';\nimport { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst App = () => {\n  return (\n    <div>\n      {/* Renders as a paragraph by default */}\n      <Typography className=\"default-paragraph\">\n        This is a paragraph.\n      </Typography>\n\n      {/* Renders as an h1 element */}\n      <Typography as=\"h1\" className=\"header\">\n        This is a header.\n      </Typography>\n\n      {/* Renders as a span element with additional HTML attributes */}\n      <Typography as=\"span\" style={{ color: 'red' }}>\n        This is an inline element.\n      </Typography>\n    </div>\n  );\n};\n\nexport default App;\n-----------------------------------------------------------\n\n3. Any best practices or limitations:  \n   \u2022 Ensure that the chosen element in the as prop is semantically appropriate for the content to support accessibility and SEO best practices.  \n   \u2022 Since TypographyProps extends React.HTMLAttributes, be mindful of potential unintended props passing to the underlying HTML element.  \n   \u2022 Use the as prop to maintain consistency in typography styling while allowing flexibility in how the component is rendered across your application.  \n   \u2022 Keep in mind that if additional custom features or styles are needed, you may extend this component further but ensure backward compatibility with the defined prop types.\n\nThis concise explanation along with the provided example should help you integrate and use the Typography component from '@worldcoin/mini-apps-ui-kit-react' in your larger React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export interface TypographyNumberProps extends TypographyProps {\n  variant?: \"number\";\n  level?: 1 | 2 | 3 | 4 | 5;\n}",
    "explanation": "This interface defines additional properties for a specialized typography component that handles number styling. Here\u2019s what\u2019s going on:\n\n1. What it represents:\n\u2003\u2022 The interface extends the generic TypographyProps, meaning it inherits all standard typography-related properties.\n\u2003\u2022 It adds two specific props:\n\u2003\u2003\u2013 variant?: It is restricted to the literal string \"number\", enforcing that this component is used for numerical text.\n\u2003\u2003\u2013 level?: A numeric level (1 to 5) which can be used to adjust the visual hierarchy (for example, different font sizes or weights) for number typography.\n\n2. How to use it in a larger application:\n\u2003\u2022 Assume you have a component (let\u2019s call it Typography) that accepts TypographyNumberProps. Its usage will typically involve passing the variant as \"number\" along with the desired level.\n\u2003\u2022 When using this component in your app, import it from the UI kit package. For example:\n\u2003\u2003\n\u2003\u2003import { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function App() {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003{/* Usage for displaying a number with a specific style */}\n\u2003\u2003\u2003\u2003\u2003<Typography variant=\"number\" level={2}>\n\u2003\u2003\u2003\u2003\u2003\u200312345\n\u2003\u2003\u2003\u2003\u2003</Typography>\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003}\n\u2003\u2003\n3. Best practices and limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always validate that the level provided lies within the supported range (1\u20135) to ensure consistent UI.\n\u2003\u2003\u2013 Use explicit typing to catch errors at compile time.\n\u2003\u2003\u2013 Import components directly from '@worldcoin/mini-apps-ui-kit-react' to maintain a consistent versioning and dependency management across your project.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The variant prop is strictly limited to \"number\". If you need other variants, you may need additional interfaces or to extend this one.\n\u2003\u2003\u2013 The interface only defines styling for numerical text. Other text types may require different props or handling.\n\nThis concise explanation should help you integrate and use the number-specific typography component within your application while following best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export interface TypographyCommonProps extends TypographyProps {\n  variant?: \"heading\" | \"subtitle\" | \"body\";\n  level?: 1 | 2 | 3 | 4;\n}",
    "explanation": "Below is a concise explanation of the code snippet:\n\n1. What this component does or represents:\n\u2003\u2022 This code defines a TypeScript interface called TypographyCommonProps.  \n\u2003\u2022 It extends another interface (TypographyProps) to include additional properties specific to typography components.  \n\u2003\u2022 The props include:\n\u2003\u2003\u2013 variant: an optional property that can be \"heading\", \"subtitle\", or \"body\". This determines the style or role of the text.\n\u2003\u2003\u2013 level: an optional property (with values 1, 2, 3, or 4) often used to specify the heading level when the variant is \"heading\".\n\n2. How to use it in a larger application:\n\u2003\u2022 The interface would typically be used to type the props of a Typography component.  \n\u2003\u2022 You can import the component (and other related components) from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 When implementing the component, you pass in the appropriate props to style your text accordingly.  \n\u2003\u2022 Example usage:\n\n\u2003\u2003----------------------------------------------------\n\u2003\u2003// Import the Typography component (assuming it uses TypographyCommonProps)\n\u2003\u2003import { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function App() {\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      {/* Heading example */}\n\u2003\u2003      <Typography variant=\"heading\" level={1}>\n\u2003\u2003        Welcome to Our App\n\u2003\u2003      </Typography>\n\n\u2003\u2003      {/* Subtitle example */}\n\u2003\u2003      <Typography variant=\"subtitle\">\n\u2003\u2003        Your gateway to world-class user experience.\n\u2003\u2003      </Typography>\n\n\u2003\u2003      {/* Body text example */}\n\u2003\u2003      <Typography variant=\"body\">\n\u2003\u2003        Lorem ipsum dolor sit amet, consectetur adipiscing elit.\n\u2003\u2003      </Typography>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003}\n\n\u2003\u2003export default App;\n\u2003\u2003----------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Ensure that you only use the allowed strings for variant (\"heading\", \"subtitle\", \"body\") and valid numbers for level (1\u20134) to maintain consistent typography styling.  \n\u2003\u2003\u2013 Use this interface to enforce type safety within your application, which helps in reducing styling mistakes.\n\u2003\u2003\u2013 Extend or customize the Typography component by leveraging TypeScript\u2019s interface extension if additional styling or properties are needed.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The interface restricts the variant options to only three types, meaning any design requirement outside these values might require additional extensions or modifications.\n\u2003\u2003\u2013 The level is limited to four specific choices, which might not cover all semantic requirements for headings in some complex applications.\n\nThis interface helps maintain consistent text styling while ensuring that any Typography component built on it adheres to the same prop restrictions and styling conventions across your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export interface TypographyLabelProps extends TypographyProps {\n  variant?: \"label\";\n  level?: 1 | 2;\n}",
    "explanation": "1. What this component does or represents:\n\u2003\u2022 This snippet defines a TypeScript interface named TypographyLabelProps that extends an existing TypographyProps interface.  \n\u2003\u2022 It customizes typography properties by adding two optional properties:  \n\u2003\u2003\u2013 variant: which can be set to the literal string \"label\". This helps in applying specific styles or behavior for label elements.  \n\u2003\u2003\u2013 level: which accepts either 1 or 2, likely corresponding to different stylistic levels or sizes for the label text.\n\n2. How to use it in a larger application:\n\u2003\u2022 Typically, this interface would be used to type the props of a TypographyLabel component that renders styled text for labels.  \n\u2003\u2022 As part of a UI component library, this component might be imported and used like any other UI element.  \n\u2003\u2022 Example usage:  \n\u2003\u2003\u2013 Import the TypographyLabel (or a similar component that uses TypographyLabelProps for its props) from the kit.\n\u2003\u2003\u2013 Pass the desired props (e.g., text content, level) to render a label-styled typography element.\n\u2003\n\u2003Example:\n\u2003\u2003------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { TypographyLabel } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const App = () => {\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<div>\n\u2003\u2003\u2003\u2003\u2003<TypographyLabel level={1}>\n\u2003\u2003\u2003\u2003\u2003\u2003This is a level 1 label.\n\u2003\u2003\u2003\u2003\u2003</TypographyLabel>\n\u2003\u2003\u2003\u2003\u2003<TypographyLabel level={2}>\n\u2003\u2003\u2003\u2003\u2003\u2003This is a level 2 label.\n\u2003\u2003\u2003\u2003\u2003</TypographyLabel>\n\u2003\u2003\u2003\u2003</div>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default App;\n\u2003\u2003------------------------------------------------\n\u2003\u2022 In this example, TypographyLabel is rendered with different levels. The component might apply different font sizes, weights, or spacing based on the level.\n\n3. Best practices or limitations:\n\u2003\u2022 Always ensure that the properties passed match the expected types (e.g., level must be 1 or 2, variant is \"label\" if provided) to prevent runtime errors.\n\u2003\u2022 Use TypeScript to maintain strong type checking for consistency across the UI.\n\u2003\u2022 Keep the API of the component clear\u2014limiting the allowed values (level 1 or 2) is good for consistency but might be restrictive if future design requires more levels.\n\u2003\u2022 Document the component's behavior and its design decisions, so other developers understand the constraints (e.g., why only two levels are allowed).\n\u2003\u2022 When extending TypographyProps, ensure that any overlapping properties are well-coordinated so that styling is applied predictably.\n\u2003\u2022 Prefer named imports from the '@worldcoin/mini-apps-ui-kit-react' to maintain a consistent module system across your application.\n\nThis concise explanation should help integrate and utilize the TypographyLabel component effectively within a larger React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export interface TypographyDisplayProps extends TypographyProps {\n  variant?: \"display\";\n  level?: 1;\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What It Does/Represents:\n\u2003\u2022 This interface (TypographyDisplayProps) extends a basic set of typography properties (TypographyProps) that you might have in your design system.\n\u2003\u2022 It adds two optional properties:\n\u2003\u2003\u2013 variant: Set to the fixed string literal \"display\" if provided. This indicates that the component is meant to be used for display typography (often large headers or prominent text).\n\u2003\u2003\u2013 level: A numeric property (defaulting to 1 if you choose) which might control the size, weight, or styling of the display text. Although here it\u2019s marked optional, you might use it to distinguish between different hierarchy levels.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Typically, this interface would be consumed by a TypographyDisplay component that renders text with a display styling.\n\u2003\u2022 To use in a larger application, import the component from '@worldcoin/mini-apps-ui-kit-react' and pass any additional typography properties along with the optional variant and level. For example:\n\n----------------------------------------------------------\nimport React from 'react';\nimport { TypographyDisplay } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyDisplayText = () => {\n  return (\n    <TypographyDisplay level={1}>\n      Welcome to the Worldcoin Mini Apps!\n    </TypographyDisplay>\n  );\n};\n\nexport default MyDisplayText;\n----------------------------------------------------------\n\n\u2003\u2022 In this example, the TypographyDisplay component will render the text using display styling, and the level prop may influence its appearance based on the design guidelines (e.g., level 1 for the main headline).\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Keep props consistent: When extending base props (TypographyProps), ensure that additional props such as 'variant' and 'level' are well-documented so developers understand their intended use.\n\u2003\u2003\u2013 Use default props wisely: Even though level is optional, provide sensible defaults so the component behaves predictably without manual prop assignment.\n\u2003\u2003\u2013 Importing: Always import your components and dependencies (like TypographyDisplay) from the centralized module (@worldcoin/mini-apps-ui-kit-react) to maintain consistency in your codebase.\n\u2003\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The interface specifically locks the variant to \"display\", meaning the component is intended only for one style of typography. If additional variants or levels need to be supported in the future, consider refactoring the props to make variant more flexible.\n\u2003\u2003\u2013 Given level is typed as a literal 1 by default in the interface, if you need levels beyond 1, you might need to adjust the type definitions.\n\nIn summary, TypographyDisplayProps is a type definition tailored for a display typography component, ensuring consistency with your design system while allowing some level of customization through props."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export type TypographyComponentProps =\n  | TypographyNumberProps\n  | TypographyCommonProps\n  | TypographyLabelProps\n  | TypographyDisplayProps;",
    "explanation": "1. What This Component Represents:\n\u2022 The provided code defines a TypeScript type alias named TypographyComponentProps.  \n\u2022 It is a union of four different property sets: TypographyNumberProps, TypographyCommonProps, TypographyLabelProps, and TypographyDisplayProps.  \n\u2022 This means any Typography component that accepts TypographyComponentProps can be configured using one of these predefined sets of props, allowing the component to render different styles or variants of typography (e.g., numeric, common text, labels, or displays).\n\n2. How to Use It in a Larger Application:\n\u2022 In a typical app, you\u2019d import the Typography component from the UI Kit and provide it with props based on one of the allowed types.  \n\u2022 The component will use the props structure defined by one of the union members (e.g., if you need to render a label, you\u2019d pass props as defined in TypographyLabelProps).\n\u2022 Example usage:\n  \n  Example:\n  --------------------------------------------------\n  import React from 'react';\n  import { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n  \n  const MyComponent = () => {\n    return (\n      <div>\n        {/* Example using label props */}\n        <Typography\n          variant=\"label\"\n          size=\"small\"\n          color=\"primary\"\n        >\n          Label Text\n        </Typography>\n        \n        {/* Example using display props */}\n        <Typography\n          variant=\"display\"\n          weight=\"bold\"\n          align=\"center\"\n        >\n          Large Display Text\n        </Typography>\n      </div>\n    );\n  };\n  \n  export default MyComponent;\n  --------------------------------------------------\n\u2022 In the example, the Typography component is used with different props depending on which variant you need (label or display), demonstrating the flexibility provided by the union type.\n\n3. Best Practices or Limitations:\n\u2022 Best Practices:\n  - Ensure that the props passed to the Typography component strictly match one of the defined unions to maintain type safety.\n  - Leverage TypeScript\u2019s discriminated unions if possible. For example, having a common property (like a type identifier) that distinguishes among variant prop sets can help prevent passing incompatible props.\n  - Use descriptive prop names and types within each interface to clearly indicate the permitted usage of each variant.\n  - When extending or customizing the Typography component, add new prop types in a way that maintains backward compatibility with existing unions.\n  \n\u2022 Limitations:\n  - Overlapping prop names in the different interfaces can lead to ambiguity and potential type conflicts. To mitigate this, consider using discriminant properties.\n  - Consumers of the component need to be aware of which prop set they intend to use so that they don\u2019t inadvertently mix props from different types.\n  - The union approach might limit automated prop suggestions in IDEs when the unions are large or complex, so clear documentation is necessary.\n\nUsing these strategies and the provided example, you can effectively integrate the Typography component from '@worldcoin/mini-apps-ui-kit-react' into your React application while maintaining robust type checking and flexibility across various typography styles."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export const typographyVariants = cva(\"\", {\n  variants: {\n    variant: {\n      display: \"font-sans font-semibold leading-narrow tracking-[-0.02em]\",\n      heading: \"font-sans font-semibold leading-narrow tracking-[-0.01em]\",\n      subtitle: \"font-sans font-medium leading-narrow\",\n      label: \"font-sans font-semibold leading-narrow\",\n      body: \"font-sans font-normal leading-compact\",\n      number: \"font-sans font-semibold\",\n    },\n    level: {\n      1: \"\",\n      2: \"\",\n      3: \"\",\n      4: \"\",\n      5: \"\",\n      6: \"\",\n    },\n  },\n  compoundVariants: [\n    // Display\n    {\n      variant: \"display\",\n      level: 1,\n      className: \"text-7xl\",\n    },\n    // Heading\n    {\n      variant: \"heading\",\n      level: 1,\n      className: \"text-4xl\",\n    },\n    {\n      variant: \"heading\",\n      level: 2,\n      className: \"text-3xl\",\n    },\n    {\n      variant: \"heading\",\n      level: 3,\n      className: \"text-2xl\",\n    },\n    {\n      variant: \"heading\",\n      level: 4,\n      className: \"text-[1.375rem]\",\n    },\n    // Subtitle\n    {\n      variant: \"subtitle\",\n      level: 1,\n      className: \"text-lg\",\n    },\n    {\n      variant: \"subtitle\",\n      level: 2,\n      className: \"text-base\",\n    },\n    {\n      variant: \"subtitle\",\n      level: 3,\n      className: \"text-sm\",\n    },\n    {\n      variant: \"subtitle\",\n      level: 4,\n      className: \"text-xs\",\n    },\n    // Label\n    {\n      variant: \"label\",\n      level: 1,\n      className: \"text-base\",\n    },\n    {\n      variant: \"label\",\n      level: 2,\n      className: \"text-sm\",\n    },\n    // Body\n    {\n      variant: \"body\",\n      level: 1,\n      className: \"text-lg\",\n    },\n    {\n      variant: \"body\",\n      level: 2,\n      className: \"text-base\",\n    },\n    {\n      variant: \"body\",\n      level: 3,\n      className: \"text-sm\",\n    },\n    {\n      variant: \"body\",\n      level: 4,\n      className: \"text-xs\",\n    },\n    // Number\n    {\n      variant: \"number\",\n      level: 1,\n      className: \"text-6xl tracking-[-0.01em]\",\n    },\n    {\n      variant: \"number\",\n      level: 2,\n      className: \"text-5xl tracking-[-0.02em]\",\n    },\n    {\n      variant: \"number\",\n      level: 3,\n      className: \"text-3xl tracking-[-0.01em]\",\n    },\n    {\n      variant: \"number\",\n      level: 4,\n      className: \"text-xl tracking-[-0.02em]\",\n    },\n    {\n      variant: \"number\",\n      level: 5,\n      className: \"text-base tracking-[-0.02em]\",\n    },\n    {\n      variant: \"label\",\n      level: 1,\n      className: \"text-[17px]\",\n    },\n    {\n      variant: \"label\",\n      level: 2,\n      className: \"text-[15px]\",\n    },\n  ],\n  defaultVariants: {\n    variant: \"body\",\n    level: 2,\n  },\n});",
    "explanation": "Below is a concise explanation of the code snippet:\n\n1. What It Represents:\n\u2003\u2022 This snippet defines a typography utility using a \"class variance authority\" (cva) function.  \n\u2003\u2022 It creates a set of variants for text styling (like display, heading, subtitle, label, body, and number) with additional levels that modify things such as text size and spacing.  \n\u2003\u2022 Essentially, it structures and centralizes typography styling rules so that when developers want to apply text styles consistently across an app, they can just specify a variant and level rather than manually composing class names.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import and use this typography configuration to compute CSS class strings that are then applied to text elements.  \n\u2003\u2022 Example usage in a component might look like this:\n\n\u2003\u2003// ExampleComponent.tsx\n\u2003\u2003import React from 'react';\n\u2003\u2003import { typographyVariants } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003export const ExampleComponent = () => {\n\u2003\u2003\u2003// Specify variant and level \u2013 for example, a heading of level 1\n\u2003\u2003\u2003const headingClass = typographyVariants({ variant: 'heading', level: 1 });\n\u2003\u2003\u2003\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<h1 className={headingClass}>\n\u2003\u2003\u2003\u2003\u2003Hello, World!\n\u2003\u2003\u2003\u2003</h1>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\n\u2003\u2022 In a larger application, this utility would be used in many text components to ensure uniform typography styling. It allows you to simply change variant/level props in one place to update the overall UI typography without having to adjust multiple components individually.\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Use centralized utility functions like this one to keep typography styling consistent across your application.  \n\u2003\u2003\u2013 Since the cva function composes Tailwind CSS classes, make sure your project is set up with Tailwind or the appropriate CSS framework.  \n\u2003\u2003\u2013 Maintain a clear mapping of semantic text elements (like headings, body text, labels) to style variants.\n\u2003\u2003\u2013 Document the variants and level usages to help other developers understand which variant/level combination to use for a specific context.\n\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The implementation depends on the specific \"cva\" API and Tailwind CSS class names. If you\u2019re not using Tailwind or a similar utility-first CSS framework, this approach might need to be adjusted.\n\u2003\u2003\u2013 The compoundVariants are hardcoded; if your design system evolves (new sizes, weights, etc.), you\u2019ll need to update this config accordingly.\n\u2003\u2003\u2013 As it only provides class strings, it does not automatically render the correct HTML element (e.g., <p>, <h1>); you must choose the appropriate element when rendering.\n\nThis pattern helps those building UI components to maintain a consistent design language while also keeping the code DRY and easy to manage."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx",
    "code_snippet": "export const Typography = forwardRef<HTMLElement, PropsWithChildren<TypographyComponentProps>>(\n  (\n    { variant = \"body\", level = 2, children, as: Component = \"p\", className, ...props },\n    ref,\n  ) => {\n    return (\n      <Component\n        className={cn(typographyVariants({ variant, level, className }))}\n        ref={ref as never}\n        {...props}\n      >\n        {children}\n      </Component>\n    );\n  },\n);\n\nTypography.displayName = \"Typography\";",
    "explanation": "1. What It Does:\n\u2022 The Typography component is a flexible, styled text element that renders a given HTML element (by default a <p> element) with typography-related styles.\n\u2022 It accepts a variant (defaulting to \"body\"), a level (e.g., a heading level, defaulting to 2), and arbitrary children.\n\u2022 The \"as\" prop lets you choose which HTML tag to render (e.g., \"p\", \"span\", \"h1\"), making the component highly reusable.\n\u2022 It uses forwardRef for ref forwarding and applies computed class names (via a helper like cn and typographyVariants) to handle styling based on props.\n\n2. How to Use It in a Larger Application:\n\u2022 Import the component from the UI kit:\n\u2003\u2003import { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n\u2022 Typical Props:\n\u2003\u2003\u2022 variant: a string (like \"body\", \"headline\", etc.) that defines a set of styling rules.\n\u2003\u2003\u2022 level: a number that might dictate the intensity or heading level.\n\u2003\u2003\u2022 as: a string to override the default HTML tag (default is \"p\").\n\u2003\u2003\u2022 children: the content to be displayed.\n\u2022 Example Usage:\n\u2003\u2003Example rendering a heading and a paragraph:\n\u2003\u2003--------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { Typography } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyComponent = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <Typography as=\"h1\" variant=\"headline\" level={1}>\n\u2003\u2003        Welcome to Our App\n\u2003\u2003      </Typography>\n\u2003\u2003      <Typography variant=\"body\" level={2}>\n\u2003\u2003        This is a sample paragraph styled using our typography component.\n\u2003\u2003      </Typography>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default MyComponent;\n\u2003\u2003--------------------------------------------------------\n\u2022 In this example, the HTML tag rendered for the headline is overridden to \"h1\", while the paragraph uses the default \"p\" tag.\n\n3. Best Practices and Limitations:\n\u2022 Best Practices:\n\u2003\u2003- Use forwardRef for better integration with higher-order components or libraries that need ref access.\n\u2003\u2003- Leverage default values (variant and level) to maintain consistency across the application while still allowing customization.\n\u2003\u2003- Take advantage of the \"as\" prop to semantically render the correct HTML elements without duplicating component logic.\n\u2003\u2003- Always import from '@worldcoin/mini-apps-ui-kit-react' as the source of UI components.\n\u2022 Limitations:\n\u2003\u2003- The component relies on helper functions (like cn and typographyVariants) which must be properly defined and imported within the library context.\n\u2003\u2003- Customizing styles beyond what's available in the variant and level system might require additional CSS or component overrides.\n\u2003\u2003- The TypeScript forwarding ref is typed as never internally (ref as never), so ensure that this does not cause any type-safety issues in your usage.\n\nThis Typography component aims to standardize text styling throughout your application while providing flexibility in the rendered element and style variations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/SearchField/SearchField.tsx",
    "code_snippet": "export interface SearchFieldProps\n  extends Omit<InputProps, \"startAdornment\" | \"startAdornmentWidth\" | \"placeholder\"> {\n  /**\n   * If true, the input will display in an error state with error styling\n   */\n  error?: boolean;\n  /**\n   * If true, the input will display in a valid state with success styling\n   */\n  isValid?: boolean;\n  /**\n   * If true, displays a paste button as an end adornment\n   * @default false\n   */\n  showPasteButton?: boolean;\n  /**\n   * Label for the paste button\n   * @default \"Paste\"\n   */\n  pasteButtonLabel?: string;\n  /**\n   * Label for the input\n   * @default \"Search\"\n   */\n  label?: string;\n}",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. Component Purpose  \n\u2022 This code defines a TypeScript interface named SearchFieldProps, which outlines the properties that a SearchField component will accept.  \n\u2022 It extends a generic InputProps type (with some omitted props: \"startAdornment\", \"startAdornmentWidth\", and \"placeholder\") and adds additional props specific to the search field functionality.  \n\u2022 The additional props include:  \n\u2003\u2003\u2013 error: When true, the component will show error styling.  \n\u2003\u2003\u2013 isValid: When true, the component will display with success (valid state) styling.  \n\u2003\u2003\u2013 showPasteButton: When true, the component renders a paste button at the end of the input (default is false).  \n\u2003\u2003\u2013 pasteButtonLabel: Custom label for the paste button (default is \"Paste\").  \n\u2003\u2003\u2013 label: The label for the input field (default is \"Search\").\n\n2. How to Use It in a Larger Application  \n\u2022 The SearchField component (expected to exist) will use these props to render an input with possible extra features (i.e., error/success styling and a paste button).  \n\u2022 To incorporate it into your application, import the component from the UI kit. For example:\n\n------------------------------------------------------\nimport React from 'react';\nimport { SearchField } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyComponent = () => {\n  return (\n    <div>\n      <SearchField\n        error={false}\n        isValid={true}\n        showPasteButton={true}\n        pasteButtonLabel=\"Paste from Clipboard\"\n        label=\"Search Items\"\n        // ... other InputProps can also be provided here\n      />\n    </div>\n  );\n};\n\nexport default MyComponent;\n------------------------------------------------------\n\n\u2022 In your larger code-base, you can configure it with any additional properties that the underlying InputProps interface supports (except for the omitted ones). This helps maintain consistency and leverages the styling and behavior defined in your UI kit.\n\n3. Best Practices and Limitations  \n\u2022 Always provide default values for props when possible to ensure the component behaves as expected even if certain props are omitted.  \n\u2022 Use TypeScript\u2019s strict type-checking to catch potential issues when passing props.  \n\u2022 Avoid using the omitted properties (startAdornment, startAdornmentWidth, and placeholder) directly, as they have been purposefully removed to preserve the component\u2019s integrity.  \n\u2022 Remember to import the component using the provided package name ('@worldcoin/mini-apps-ui-kit-react') rather than relative paths, especially when working within a monorepo or shared library.\n\u2022 Ensure consistency in styling between the error and valid states to avoid user confusion.\n\nThis overview should help you understand how the SearchField component is designed, how you can integrate it into your application, and what best practices to follow when using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/SearchField/SearchField.tsx",
    "code_snippet": "export const SearchField = forwardRef<HTMLInputElement, SearchFieldProps>(\n  (\n    {\n      showPasteButton,\n      pasteButtonLabel,\n      isValid,\n      disabled,\n      type = \"search\",\n      autoComplete = \"off\",\n      spellCheck = \"false\",\n      endAdornment: endAdornmentProp,\n      endAdornmentWidth: endAdornmentWidthProp,\n      label = \"Search\",\n      ...props\n    },\n    forwardedRef,\n  ) => {\n    const inputRef = useRef<HTMLInputElement>(null);\n    const [isFocused, setIsFocused] = useState(false);\n    const [isPasted, setIsPasted] = useState(false);\n    useImperativeHandle(forwardedRef, () => inputRef.current!);\n\n    let endAdornment = endAdornmentProp;\n    let endAdornmentWidth = endAdornmentWidthProp;\n    if (showPasteButton && !disabled && !isPasted) {\n      endAdornment = (\n        <PasteButton\n          inputRef={inputRef}\n          label={pasteButtonLabel}\n          onPaste={() => {\n            if (inputRef.current) {\n              const event = createChangeEvent(inputRef.current);\n              props.onChange?.(event);\n              setIsPasted(true);\n            }\n          }}\n        />\n      );\n      endAdornmentWidth = PASTE_BUTTON_WIDTH;\n    } else if (isFocused && !disabled) {\n      endAdornment = (\n        <ClearButton\n          inputRef={inputRef}\n          onClear={() => {\n            if (inputRef.current) {\n              const event = createChangeEvent(inputRef.current);\n              props.onChange?.(event);\n            }\n          }}\n        />\n      );\n      endAdornmentWidth = 2.3;\n    }\n\n    return (\n      <Input\n        {...props}\n        ref={inputRef}\n        startAdornment={<Magnifier />}\n        isValid={isValid}\n        disabled={disabled}\n        startAdornmentWidth={2.3}\n        endAdornmentWidth={endAdornmentWidth}\n        endAdornment={endAdornment}\n        type={type}\n        autoComplete={autoComplete}\n        spellCheck={spellCheck}\n        onFocus={(e) => {\n          setIsFocused(true);\n          props.onFocus?.(e);\n        }}\n        label={label}\n        onBlur={(e) => {\n          setIsFocused(false);\n          props.onBlur?.(e);\n        }}\n        className=\"rounded-full h-[3.125rem]\"\n      />\n    );\n  },\n);\n\nSearchField.displayName = \"SearchField\";",
    "explanation": "Below is a concise explanation of the component:\n\n1. What the component does or represents:\n\u2003\u2022 The SearchField is a custom input field specifically styled for search functionality.  \n\u2003\u2022 It utilizes forwardRef so that the parent component can directly access the underlying input element.  \n\u2003\u2022 By default, it renders a magnifying glass icon as the start adornment.  \n\u2003\u2022 Depending on the state (focused, paste attempted, disabled), it dynamically adjusts the end adornment to display either a PasteButton (when paste functionality is enabled and the value has not yet been pasted) or a ClearButton (when the field is focused and not disabled).  \n\u2003\u2022 The component also handles events such as focus, blur, and change events (triggered via the paste or clear operations).\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the SearchField from the '@worldcoin/mini-apps-ui-kit-react' package.  \n\u2003\u2022 Provide appropriate props such as onChange, onFocus, onBlur, label, etc.  \n\u2003\u2022 Optionally, you can enable the paste button by setting showPasteButton to true and providing a pasteButtonLabel.  \n\u2003\u2022 The component handles ref forwarding which allows you to control the input programmatically if needed.\n\nExample usage in an application:\n\n---------------------------------------------------\nimport React, { useRef } from \"react\";\nimport { SearchField } from \"@worldcoin/mini-apps-ui-kit-react\";\n\nconst MySearchComponent = () => {\n  const searchInputRef = useRef<HTMLInputElement>(null);\n\n  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    console.log(\"Search input value:\", e.target.value);\n  };\n\n  return (\n    <div>\n      <SearchField\n        ref={searchInputRef}\n        label=\"Search\"\n        showPasteButton={true}\n        pasteButtonLabel=\"Paste\"\n        onChange={handleChange}\n        onFocus={(e) => console.log(\"Focused!\")}\n        onBlur={(e) => console.log(\"Blurred!\")}\n        isValid={true}\n        disabled={false}\n      />\n    </div>\n  );\n};\n\nexport default MySearchComponent;\n---------------------------------------------------\n\n3. Best practices or limitations:\n\u2003\u2022 The component is built with accessibility and user feedback in mind; it changes icons based on the interaction (paste vs. clear) which provides a better UX.\n\u2003\u2022 Using forwardRef is a best practice for input components that might require programmatic focus or value manipulation.\n\u2003\u2022 Ensure you pass any custom event handlers (onChange, onFocus, onBlur) when integrating as the component proxies these events.\n\u2003\u2022 The component expects an Input, PasteButton, ClearButton, and Magnifier (and related constants like PASTE_BUTTON_WIDTH) to be available, so be mindful that these dependencies are part of the '@worldcoin/mini-apps-ui-kit-react' package.\n\u2003\u2022 Since the styling (e.g., className=\"rounded-full h-[3.125rem]\") is hardcoded, customization might require additional overriding or extending styles through higher specificity in your stylesheet.\n\nThis overview should help you understand the component's purpose, its usage, and key things to consider when integrating it into a larger React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Switch/Switch.tsx",
    "code_snippet": "export interface SwitchProps\n  extends Omit<RadixSwitchProps, \"onCheckedChange\" | \"onChange\" | \"className\"> {\n  /**\n   * The checked state of the switch.\n   * @default false\n   */\n  checked?: boolean;\n  /**\n   * Callback function that is triggered when the checked state changes.\n   */\n  onChange?: (checked: boolean) => void;\n  /**\n   * Disables the switch when set to true.\n   * @default false\n   */\n  disabled?: boolean;\n}",
    "explanation": "1. What It Does or Represents:\n   \u2022 This interface defines the properties (props) for a customizable toggle switch component.\n   \u2022 It extends the base properties from the Radix UI switch component (RadixSwitchProps), excluding some properties (\u201conCheckedChange\u201d, \u201conChange\u201d, \u201cclassName\u201d) to provide a simpler API.\n   \u2022 It supports a controlled state by accepting a boolean \u201cchecked\u201d value, an \u201conChange\u201d callback that receives the new state when toggled, and a \u201cdisabled\u201d flag to disable user interaction.\n   \n2. How to Use It in a Larger Application:\n   \u2022 Import the switch component from the UI kit using the provided package:\n     Example:\n     -------------------------------------------------------\n     import React, { useState } from 'react';\n     import { Switch } from '@worldcoin/mini-apps-ui-kit-react';\n     \n     const ToggleExample = () => {\n       const [isToggled, setIsToggled] = useState(false);\n     \n       const handleToggleChange = (checked: boolean) => {\n         setIsToggled(checked);\n       };\n     \n       return (\n         <div>\n           <h3>Toggle Switch</h3>\n           <Switch checked={isToggled} onChange={handleToggleChange} disabled={false} />\n         </div>\n       );\n     };\n     \n     export default ToggleExample;\n     -------------------------------------------------------\n   \u2022 Typical props:\n     - checked: Use a boolean to control the switch\u2019s state.\n     - onChange: A function that gets called with the new state (true/false) upon toggling.\n     - disabled: A boolean that, when true, prevents user interaction.\n   \u2022 This controlled component should be used where you can manage its state externally (via state hooks or other state management) and pass a callback to handle changes.\n\n3. Best Practices and Limitations:\n   \u2022 Use Controlled Components: Since the switch\u2019s state is controlled by the \u201cchecked\u201d prop, ensure that you maintain the state in your parent component.\n   \u2022 Consistent Importing: Always import the component from '@worldcoin/mini-apps-ui-kit-react' as shown, to maintain consistency and ease of upgrades.\n   \u2022 Accessibility: If not handled internally, consider adding appropriate ARIA attributes for improved accessibility.\n   \u2022 Limitations: This abstraction limits the exposed props by omitting lower-level events such as \u201conCheckedChange\u201d or \u201cclassName\u201d. If you need more granular control or custom styling, additional modifications might be needed.\n   \u2022 Documentation: Be sure to check the official documentation for any further requirements or updates that might affect state management or styling when using the switch component in your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Switch/Switch.tsx",
    "code_snippet": "export const Switch = forwardRef<HTMLButtonElement, SwitchProps>(\n  ({ checked, onChange: onCheckedChange, disabled = false, ...rest }, ref) => {\n    return (\n      <RadixSwitch.Root\n        ref={ref}\n        checked={checked}\n        onCheckedChange={onCheckedChange}\n        disabled={disabled}\n        className=\"relative inline-flex h-6 w-10 items-center rounded-full border-2 transition-all data-[state=checked]:border-gray-900 data-[state=checked]:bg-gray-900 data-[state=unchecked]:border-gray-300 data-[state=unchecked]:bg-gray-300 disabled:cursor-not-allowed disabled:opacity-20\"\n        {...rest}\n      >\n        <RadixSwitch.Thumb className=\"bg-gray-0 block h-5 w-5 transform rounded-full transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0\" />\n      </RadixSwitch.Root>\n    );\n  },\n);\n\nSwitch.displayName = \"Switch\";",
    "explanation": "Below is a concise explanation of the provided Switch component:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. Component Purpose\n\n\u2022 This Switch component is a custom toggle switch built using Radix UI primitives.  \n\u2022 It accepts props such as checked (to determine its state), onCheckedChange (callback when toggled), and disabled (to block user interaction).  \n\u2022 It uses forwardRef so that parent components can access the underlying button element.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. Usage in a Larger Application\n\n\u2022 Import the Switch from the UI kit package:\n\u2003\u2003import { Switch } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2022 You can use the component by providing the required props. For example:\n\u2003\u2003\u2022 Use the checked prop to control its state.\n\u2003\u2003\u2022 Pass a callback function via onCheckedChange to update the state when the switch is toggled.\n\u2003\u2003\u2022 Optionally disable it using the disabled prop.\n\nExample usage in a parent component:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { Switch } from '@worldcoin/mini-apps-ui-kit-react';\n\nexport function SettingsToggle() {\n  const [isEnabled, setIsEnabled] = useState(false);\n\n  const handleToggle = (newState: boolean) => {\n    setIsEnabled(newState);\n  };\n\n  return (\n    <div>\n      <h3>Enable Notifications</h3>\n      <Switch\n        checked={isEnabled}\n        onCheckedChange={handleToggle}\n        disabled={false}\n      />\n    </div>\n  );\n}\n--------------------------------------------------\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices or Limitations\n\n\u2022 Best Practices:\n\u2003\u2003- Use forwardRef appropriately when you need external access to the underlying element.\n\u2003\u2003- Keep the component controlled by managing the checked state in a parent component.\n\u2003\u2003- Provide clear prop names such as checked and onCheckedChange for readability.\n\u2003\u2003- Leverage utility classes from Tailwind CSS (or a similar framework) for styling and state-based variants.\n\u2003\u2003- Import components consistently from '@worldcoin/mini-apps-ui-kit-react' for ease of maintenance and updates.\n\n\u2022 Limitations:\n\u2003\u2003- The component is tightly coupled with the Radix UI's API and styling conventions. Customizations may require a good understanding of these paradigms.\n\u2003\u2003- There might be a learning curve if one is not familiar with controlled components and forwardRef.\n\u2003\u2003- The component might need additional accessibility or behavioral enhancements based on specific use cases.\n\nThis explanation provides a clear overview of what the Switch component does, how to integrate it into your project, and key considerations when using it."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/OTPField/OTPField.tsx",
    "code_snippet": "export const OTPField = React.forwardRef<React.ElementRef<typeof OTPInput>, OTPFieldProps>(\n  ({ maxLength = 6, error, children, mode = \"digits\", pattern, ...props }, ref) => {\n    return (\n      <OTPInput\n        ref={ref}\n        {...props}\n        maxLength={maxLength}\n        inputMode={inputModeDictionary[mode]}\n        pattern={pattern || patternDictionary[mode]}\n        containerClassName=\"flex items-center gap-2 has-[:disabled]:opacity-50\"\n        render={({ slots }) => (\n          <>\n            {slots.map(({ isActive, char }, idx) => (\n              <div\n                key={idx}\n                ref={ref}\n                role=\"textbox\"\n                className={cn(\n                  inputVariants({ error }),\n                  typographyVariants({ variant: \"body\", level: 2 }),\n                  \"w-12 h-[4.25rem] rounded-lg flex items-center justify-center\",\n                  (isActive || error) && \"z-10 bg-gray-0\",\n                )}\n              >\n                {char}\n              </div>\n            ))}\n          </>\n        )}\n      />\n    );\n  },\n);",
    "explanation": "Below is a concise explanation of the OTPField component:\n\n1. What this component does or represents:  \n\u2003\u2022 OTPField is a specialized input field designed for entering One-Time Passwords (OTPs).  \n\u2003\u2022 It leverages an underlying OTPInput component and uses React.forwardRef so that parent components can easily control focus or read the current input state via refs.  \n\u2003\u2022 The component accepts configuration such as the maximum number of characters (default is 6), the input mode (for instance, allowing only digits), and a custom error state for styling purposes.  \n\u2003\u2022 It customizes the render of each OTP slot by mapping over them and applying conditional styling (e.g., highlighting the active input or errors) and additional classes for layout.\n\n2. How to use it in a larger application (props, typical usage, example):  \n\u2003\u2022 Import the OTPField from the package via '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 Pass in any desired props including maxLength, error state, mode (such as \"digits\"), or a custom pattern if needed.  \n\u2003\u2022 Optionally, use the forwarded ref to manage focus or validation from a parent component.  \n\nExample usage in an application:\n\n----------------------------------------------------------\nimport React, { useRef } from 'react';\nimport { OTPField } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst LoginWithOTP = () => {\n  const otpFieldRef = useRef(null);\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // Use otpFieldRef to check the entered OTP value or manage focus\n    console.log(otpFieldRef.current);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <OTPField\n        ref={otpFieldRef}\n        maxLength={6}\n        mode=\"digits\"\n        error={false}\n        onChange={(value) => console.log(value)}\n      />\n      <button type=\"submit\">Verify OTP</button>\n    </form>\n  );\n};\n\nexport default LoginWithOTP;\n----------------------------------------------------------\n\n3. Any best practices or limitations:  \n\u2003\u2022 It is best practice to use forwardRef when you need external access to the underlying DOM node, as this component does.  \n\u2003\u2022 Ensure to pass proper validation and error handling via props so that the user receives immediate visual feedback.  \n\u2003\u2022 Limitations may include:  \n\u2003\u2003\u2013 The OTPField\u2019s styling and behavior is partly dependent on underlying components (like OTPInput) and utility functions (e.g., inputModeDictionary, patternDictionary, inputVariants, typographyVariants, cn), so make sure those are correctly defined in your UI kit setup.  \n\u2003\u2003\u2013 Customization options are tied to the predefined styling classes, so if you need heavy customizations, you may need to override those classes or extend the component.  \n\nThis explanation and example should guide you in integrating OTPField from '@worldcoin/mini-apps-ui-kit-react' into your UI application effectively."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Select/Select.tsx",
    "code_snippet": "export interface SelectOption {\n  /**\n   * The value of the option.\n   */\n  value: string;\n  /**\n   * The label to display for the option.\n   */\n  label: string;\n}",
    "explanation": "This snippet defines a TypeScript interface named SelectOption that describes the shape of a single option typically used in select or dropdown components. Each option has two string properties:\n\n1. value: A unique string identifier or data value that will be used internally (e.g., when the option is selected).\n2. label: A human\u2010readable string that can be rendered in the UI so users know what the option represents.\n\nUsing It in a Larger Application:\n\u2022 When building forms or dropdown menus, you can define an array of SelectOption objects and pass them as props into a select or dropdown component.\n\u2022 Components using this interface can be designed to expect a list of options, and internally they use the value and label for rendering and data handling.\n\u2022 The interface ensures that any options passed to the component conform to the expected structure.\n\nExample Usage:\n\nBelow is an example of how you might use the SelectOption interface along with a hypothetical Select component from the '@worldcoin/mini-apps-ui-kit-react' package.\n\n-------------------------------------------------------------\nExample Component:\n\nimport React, { useState } from 'react';\nimport { Select } from '@worldcoin/mini-apps-ui-kit-react';\n\nexport interface SelectOption {\n  /**\n   * The value of the option.\n   */\n  value: string;\n  /**\n   * The label to display for the option.\n   */\n  label: string;\n}\n\nconst options: SelectOption[] = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'orange', label: 'Orange' },\n  { value: 'banana', label: 'Banana' },\n];\n\nconst FruitSelector: React.FC = () => {\n  const [selectedValue, setSelectedValue] = useState<string>('');\n\n  const handleChange = (value: string) => {\n    setSelectedValue(value);\n  };\n\n  return (\n    <Select\n      options={options}\n      value={selectedValue}\n      onChange={handleChange}\n      placeholder=\"Select a fruit\"\n    />\n  );\n};\n\nexport default FruitSelector;\n\n-------------------------------------------------------------\nIn the example above:\n\u2022 We define an array of options of type SelectOption.\n\u2022 We use a Select component that is expected to receive:\n\u2003\u2003\u2013 options: an array of option objects.\n\u2003\u2003\u2013 value: the current selected value.\n\u2003\u2003\u2013 onChange: a callback to update the parent\u2019s state when the selection changes.\n\u2022 The component is imported from '@worldcoin/mini-apps-ui-kit-react', following your instruction.\n\nBest Practices and Limitations:\n\u2022 Type safety: Using interfaces like SelectOption ensures components only receive properly structured data. TypeScript will help catch any misconfigured option objects.\n\u2022 Documentation: The inline comments explain each property clearly, making it easier for team members to understand the expected structure.\n\u2022 Consistency: When using this interface across various components (like selects and dropdowns), you ensure consistency in how options are represented.\n\u2022 Limitations: The interface is very minimal. Depending on the use case, you might need to extend it with additional properties (for example, disabled states, grouping, or custom renderers) to support more complex UI requirements.\n\nBy following these guidelines and the example provided, you can integrate the SelectOption interface into your components effectively and maintain a consistent, reliable contract for \"option\" data throughout your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Select/Select.tsx",
    "code_snippet": "export interface SelectProps\n  extends Omit<RadixSelect.SelectProps, \"className\" | \"onValueChange\" | \"style\"> {\n  /**\n   * The value of the select item that should be selected by default.\n   * Use when you do not need to control the state of the select items.\n   */\n  defaultValue?: string;\n  /**\n   * The controlled value of the select.\n   * Should be used in conjunction with onChange.\n   */\n  value?: string;\n  /**\n   * Callback triggered when the selected value changes.\n   */\n  onChange?: (value: string) => void;\n  /**\n   * The options to display in the select dropdown.\n   */\n  options: SelectOption[];\n  /**\n   * The placeholder text to display when no value is selected.\n   */\n  placeholder?: string;\n  /**\n   * If true, the select will display in an error state with error styling\n   * @default false\n   */\n  error?: boolean;\n  /**\n   * The open state of the select when it is initially rendered.\n   * Use when you do not need to control its open state.\n   * @default false\n   */\n  defaultOpen?: boolean;\n  /**\n   * The controlled open state of the select. Must be used in conjunction with onOpenChange.\n   */\n  open?: boolean;\n  /**\n   * Callback triggered when the open state changes\n   */\n  onOpenChange?: (open: boolean) => void;\n  /**\n   * When true, prevents the user from interacting with select.\n   * @default false\n   */\n  disabled?: boolean;\n  /**\n   * The name of the select. Submitted with its owning form as part of a name/value pair.\n   */\n  name?: string;\n}",
    "explanation": "This is a customizable Select component that builds on top of Radix UI\u2019s select functionality. It accepts various props to manage its state (controlled or uncontrolled), display options, handle error styling, and more.\n\n1. What It Does/Represents:\n   \u2022 The component renders a dropdown select menu.\n   \u2022 It supports both controlled (using value and onChange) and uncontrolled (using defaultValue) patterns for managing the selected item.\n   \u2022 It allows customization of its open state (defaultOpen, open, onOpenChange) and enables error styling when needed.\n   \u2022 The options prop defines the items available in the dropdown.\n   \u2022 Additional props (like disabled and name) facilitate form integration and user interaction control.\n\n2. How to Use It in a Larger Application:\n   \u2022 Import the Select component from '@worldcoin/mini-apps-ui-kit-react'.\n   \u2022 Provide an array of options to display.\n   \u2022 Use the component in controlled mode by passing a value along with an onChange handler, or in uncontrolled mode using defaultValue.\n   \u2022 You can also configure it to open by default, disable it, or render an error state using the respective props.\n   \n   Example Usage:\n   -----------------------------------------------------------------------------\n   import React, { useState } from 'react';\n   import { Select } from '@worldcoin/mini-apps-ui-kit-react';\n   \n   const options = [\n     { value: 'apple', label: 'Apple' },\n     { value: 'banana', label: 'Banana' },\n     { value: 'cherry', label: 'Cherry' },\n   ];\n   \n   const FruitSelector = () => {\n     const [selectedFruit, setSelectedFruit] = useState('');\n     \n     const handleSelectChange = (value: string) => {\n       setSelectedFruit(value);\n     };\n     \n     return (\n       <Select\n         options={options}\n         value={selectedFruit}\n         onChange={handleSelectChange}\n         placeholder=\"Select a fruit\"\n         error={selectedFruit === ''}  // Example: error state when nothing is selected\n       />\n     );\n   };\n   \n   export default FruitSelector;\n   -----------------------------------------------------------------------------\n   \n3. Best Practices or Limitations:\n   \u2022 Best Practices:\n     - Use controlled mode when you need to synchronize the select\u2019s state with other parts of your application.\n     - Take advantage of the placeholder prop to guide users when no option is selected.\n     - Use error and disabled flags to improve accessibility and user feedback.\n     - Leverage proper naming (via the name prop) for forms submissions.\n   \n   \u2022 Limitations:\n     - Ensure props that manage state are used consistently (for instance, avoid mixing uncontrolled and controlled approaches).\n     - Custom styling might be limited by the design system, so additional CSS overrides might be needed if extensive customization is required.\n     - Since it extends RadixSelect props, be mindful of any underlying behavior inherited from Radix UI.\n\nThis explanation should help you incorporate the Select component seamlessly into your project using '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/Select/Select.tsx",
    "code_snippet": "export const Select = forwardRef<HTMLButtonElement, SelectProps>(\n  (\n    {\n      options = [],\n      placeholder = \"Select...\",\n      value,\n      onChange,\n      open,\n      onOpenChange,\n      error = false,\n      defaultOpen = false,\n      disabled = false,\n      name,\n      defaultValue,\n      ...rest\n    },\n    ref,\n  ) => {\n    const [isOpen, setIsOpen] = useState(open ?? defaultOpen);\n\n    const handleOpenChange = (open: boolean) => {\n      setIsOpen(open);\n      onOpenChange?.(open);\n    };\n\n    useEffect(() => {\n      if (open !== undefined) {\n        setIsOpen(open);\n      }\n    }, [open]);\n\n    if (!Array.isArray(options)) {\n      console.error(\"`options` must be an array of objects with `value` and `label` keys.\");\n    }\n\n    return (\n      <RadixSelect.Root\n        value={value}\n        open={isOpen}\n        onValueChange={onChange}\n        defaultOpen={defaultOpen}\n        onOpenChange={handleOpenChange}\n        name={name}\n        disabled={disabled}\n        defaultValue={defaultValue}\n        {...rest}\n      >\n        <RadixSelect.Trigger\n          ref={ref}\n          className={cn(\n            typographyVariants({ variant: \"body\", level: 3 }),\n            inputVariants({ error, isFocused: isOpen }),\n            \"flex items-center justify-between whitespace-nowrap [&>span:first-of-type]:line-clamp-1\",\n            \"data-[placeholder]:text-gray-500\",\n            \"data-[state=closed]:bg-gray-100 data-[state=closed]:border-gray-100\",\n          )}\n        >\n          <RadixSelect.Value placeholder={placeholder} />\n          <RadixSelect.Icon>\n            <ArrowDown className=\"text-gray-400 size-6\" />\n          </RadixSelect.Icon>\n        </RadixSelect.Trigger>\n\n        <RadixSelect.Portal>\n          <RadixSelect.Content position=\"popper\" className={cn(DROPDOWN_CONTAINER_STYLES)}>\n            <RadixSelect.Viewport\n              className={cn(\n                \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] p-2\",\n                options.length === 0 && \"hidden\",\n              )}\n            >\n              {options.map((option) => (\n                <RadixSelect.Item\n                  key={`${option.value}/${option.label}`}\n                  value={option.value}\n                  className={cn(\n                    \"w-full cursor-pointer select-none rounded-md p-2 font-sans outline-none hover:bg-gray-50\",\n                    value === option.value && \"bg-gray-100\",\n                    typographyVariants({ variant: \"body\", level: 2 }),\n                  )}\n                >\n                  <RadixSelect.ItemText>{option.label}</RadixSelect.ItemText>\n                </RadixSelect.Item>\n              ))}\n            </RadixSelect.Viewport>\n          </RadixSelect.Content>\n        </RadixSelect.Portal>\n      </RadixSelect.Root>\n    );\n  },\n);\n\nSelect.displayName = \"Select\";",
    "explanation": "Below is a concise explanation of the provided Select component:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. What the component does or represents\n\n\u2022 The Select component is a custom dropdown (select) element built on top of Radix UI\u2019s select primitives.  \n\u2022 It accepts an array of options (each having a value and a label) and displays a placeholder until a selection is made.  \n\u2022 Internally, it manages the open/closed state of the dropdown using React\u2019s useState, optionally controlled by the external open prop.  \n\u2022 When the dropdown's open state changes, it updates its internal state and optionally notifies any external onOpenChange callback.  \n\u2022 It supports additional features such as displaying error styles, handling disabled state, and integrating standard attributes like name and defaultValue.  \n\u2022 The visual styling is handled via helper classes (e.g., typographyVariants, inputVariants, and others) and by adding appropriate class names on its elements like trigger, icon, and dropdown items.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. How to use it in a larger application\n\nYou can import the Select component from the kit and use it as a controlled or uncontrolled component. For instance, you can pass the following props:\n  \u2022 options: an array of objects with both value and label keys,\n  \u2022 placeholder: a string displayed when no value is selected,\n  \u2022 value: the currently selected value (for controlled usage),\n  \u2022 onChange: a callback function when the selection changes,\n  \u2022 open/defaultOpen: to control the open state of the dropdown,\n  \u2022 error, disabled, name, and defaultValue for additional functionality.\n\nBelow is an example of how to use the Select component in your app:\n\n--------------------------------------------------\n/* ExampleUsage.tsx */\nimport React, { useState } from 'react';\nimport { Select } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst options = [\n  { value: 'apple', label: 'Apple' },\n  { value: 'orange', label: 'Orange' },\n  { value: 'banana', label: 'Banana' },\n];\n\nconst ExampleUsage = () => {\n  // Controlled usage for the Select component:\n  const [selectedValue, setSelectedValue] = useState<string | undefined>(undefined);\n\n  return (\n    <div>\n      <h2>Select your favorite fruit</h2>\n      <Select\n        options={options}\n        placeholder=\"Choose a fruit...\"\n        value={selectedValue}\n        onChange={(newValue) => setSelectedValue(newValue)}\n        onOpenChange={(open) => console.log(\"Dropdown open:\", open)}\n        name=\"fruit-select\"\n      />\n    </div>\n  );\n};\n\nexport default ExampleUsage;\n--------------------------------------------------\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n3. Best practices and limitations\n\n\u2022 Best Practices:\n  - Controlled vs. Uncontrolled: Decide if you want the component to be controlled (by managing the value prop externally) or uncontrolled (using the defaultValue).\n  - Data Validation: Always ensure that the options prop is passed as an array with objects that each have a value and a label. The component logs an error if the options prop is not an array.\n  - Consistent Theming: Use the utility classes (e.g., typographyVariants, inputVariants) consistently in your application theme to maintain visual coherence.\n  - Accessibility: Although Radix UI provides built-in accessibility features, you may consider additional ARIA attributes or custom keyboard navigation if needed.\n\n\u2022 Limitations:\n  - Dependency: The component relies on Radix UI's select primitives, so any breaking changes or limitations of Radix UI may affect the component.\n  - Options Format: The component expects options in a specific format. If your data source uses a different structure, you\u2019ll need to map it accordingly.\n  - Styling: Custom styling is applied using class names and utility functions, which might require adjustments based on your overall design system.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \nBy following these guidelines and using the example as a reference, you can integrate the Select component from '@worldcoin/mini-apps-ui-kit-react' seamlessly into your larger application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/TopBar/TopBar.tsx",
    "code_snippet": "export function TopBar({ title, startAdornment, endAdornment }: TopBarProps) {\n  const hasStartAdornment = Boolean(startAdornment);\n  const hasEndAdornment = Boolean(endAdornment);\n\n  const textAlignment = hasStartAdornment ? \"text-center\" : \"text-left\";\n  const justifyContent =\n    hasStartAdornment || hasEndAdornment ? \"justify-between\" : \"justify-start\";\n\n  return (\n    <div className={cn(\"flex items-center px-6 pt-6 pb-2 w-full h-[4.5rem]\", justifyContent)}>\n      {startAdornment && <div className=\"shrink-0\">{startAdornment}</div>}\n\n      <Typography\n        variant={hasStartAdornment ? \"subtitle\" : \"heading\"}\n        level={hasStartAdornment ? 1 : 3}\n        className={cn(\"flex-1 grow truncate\", textAlignment)}\n      >\n        {title}\n      </Typography>\n\n      {endAdornment && <div className=\"shrink-0\">{endAdornment}</div>}\n\n      {!endAdornment && hasStartAdornment && (\n        <div className=\"shrink-0 invisible\" aria-hidden=\"true\">\n          {startAdornment}\n        </div>\n      )}\n    </div>\n  );\n}",
    "explanation": "Below is a concise explanation of the TopBar component:\n\n1. What It Does/Represents:\n\u2003\u2022 TopBar is a UI header component that renders a horizontal bar at the top of an application view.\n\u2003\u2022 It displays a title in the center (or left-aligned when no adornments are provided) and supports optional start and end adornments (such as icons or buttons).\n\u2003\u2022 The component adapts its text style and alignment based on whether adornments are present. For example, if a startAdornment is supplied, the title is rendered with a \u201csubtitle\u201d style and centered, otherwise it appears as a \u201cheading\u201d and left-aligned.\n\u2003\u2022 An extra invisible element is conditionally rendered to maintain consistent spacing when only one adornment is present.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Props:\n\u2003\u2003\u2013 title (string or ReactNode): The central text or content to show.\n\u2003\u2003\u2013 startAdornment (optional): A React element (like an icon or button) displayed at the beginning.\n\u2003\u2003\u2013 endAdornment (optional): A React element displayed at the end.\n\u2003\u2022 Typical Usage:\n\u2003\u2003\u2013 Import the component (and any other needed UI primitives like Typography) from the UI kit package.\n\u2003\u2003\u2013 Pass in a title and, if needed, adornment components to customize the appearance.\n\u2003\n\u2003Example:\n\u2003\u2003-------------------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { TopBar, Button, Icon } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003export function AppHeader() {\n\u2003\u2003  return (\n\u2003\u2003    <TopBar\n\u2003\u2003      title=\"Dashboard\"\n\u2003\u2003      startAdornment={<Icon name=\"menu\" />}\n\u2003\u2003      endAdornment={<Button onClick={() => alert('Profile clicked')}>Profile</Button>}\n\u2003\u2003    />\n\u2003\u2003  );\n\u2003\u2003}\n\u2003\u2003-------------------------------------------------------------\n\u2003\u2022 In a larger application, you would incorporate the TopBar at the top of your layout, possibly alongside other UI elements or navigation components.\n\n3. Best Practices or Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Use descriptive, accessible content for the title and ensure adornments have proper click handlers or labels if interactive.\n\u2003\u2003\u2013 Keep the adorning elements simple and consistent with your overall design language.\n\u2003\u2003\u2013 Test the component with and without adornments to verify that the alignment and spacing behave as expected.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 The layout logic currently assumes that the presence of only a startAdornment requires an invisible duplicate element to balance the design; ensure that this approach works well across different browsers and screen sizes.\n\u2003\u2003\u2013 Overuse of adornments or overly complex children elements might cause layout issues, so it\u2019s best to keep the component\u2019s content straightforward.\n\nOverall, the TopBar component is a flexible header element that easily integrates into any app using the UI kit provided by '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BulletPoint/BulletPoint.tsx",
    "code_snippet": "export interface BulletProps extends ComponentProps<\"div\"> {\n  children?: ReactNode;\n}\n\nconst BulletPoint = forwardRef<HTMLDivElement, BulletProps>(({ children, ...props }, ref) => {\n  const { className, ...rest } = props;\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"size-9 flex justify-center items-center rounded-full bg-gray-900\",\n        className,\n      )}\n      {...rest}\n    >\n      {children}\n    </div>\n  );\n});\n\nBulletPoint.displayName = \"BulletPoint\";",
    "explanation": "Below is a concise explanation of the BulletPoint component:\n\n1. What This Component Does or Represents:\n\u2003\u2022 BulletPoint is a simple, styled React component that renders a div styled as a circular bullet point.  \n\u2003\u2022 It utilizes a \"forwardRef\" to allow the parent component to reference the underlying div element.  \n\u2003\u2022 The component accepts any valid div props (thanks to extending ComponentProps<\"div\">) and optional children to be rendered inside the circle.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the BulletPoint component from \"@worldcoin/mini-apps-ui-kit-react\".  \n\u2003\u2022 It can be included as part of a list, step indicator, or other UIs where a bullet-like element is required.  \n\u2003\u2022 Typical usage involves passing content (children) and optionally overriding or extending the default styling with a custom className.\n\u2003\nExample usage:\n-----------------------------------------------------------\nimport React from \"react\";\nimport { BulletPoint } from \"@worldcoin/mini-apps-ui-kit-react\";\n\nfunction ExampleList() {\n  return (\n    <div className=\"space-y-4\">\n      <BulletPoint className=\"bg-blue-500\">\n        1\n      </BulletPoint>\n      <BulletPoint>\n        <span>Step Two</span>\n      </BulletPoint>\n      <BulletPoint>\n        <span>Final Step</span>\n      </BulletPoint>\n    </div>\n  );\n}\n\nexport default ExampleList;\n-----------------------------------------------------------\n\u2003\u2022 In this example, BulletPoint elements are rendered in a vertical list, with one instance overriding the default background color by providing a custom className.\n\n3. Best Practices or Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Leverage \"forwardRef\" when you need to access or manipulate the DOM element from the parent component (e.g., for animations or focusing).\n\u2003\u2003- Pass additional props (e.g., event handlers, custom className) as needed to enhance the component\u2019s behavior.\n\u2003\u2003- Ensure that styling (defined through className) is consistent with your design system for uniform UX.\n\u2003\u2022 Limitations:\n\u2003\u2003- The component uses a fixed set of classes for styling (size, rounded, flex, bg-gray-900), so extensive customization might require overriding these classes.\n\u2003\u2003- The use of cn (assuming a classnames utility function) implies a dependency that must be provided in the project. Make sure it is correctly installed or available.\n\u2003\u2003- Accessibility considerations should be kept in mind; while a bullet point is largely presentational, any interactive child elements should be accessible.\n\nThis approach integrates BulletPoint into a larger application, keeping inline with modular practices and emphasizing customizability and ref management."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/PasteButton/PasteButton.tsx",
    "code_snippet": "export const PASTE_BUTTON_WIDTH = 5;\n\nconst PasteButton = React.forwardRef<HTMLButtonElement, PasteButtonProps>(\n  ({ children, inputRef, label = \"Paste\", className, onPaste, ...props }, ref) => {\n    const handlePaste = async () => {\n      try {\n        if (inputRef && \"current\" in inputRef && inputRef.current) {\n          const text = await navigator.clipboard.readText();\n          inputRef.current.value = text;\n          onPaste?.(text);\n        }\n      } catch (error) {\n        console.error(\"Failed to read clipboard:\", error);\n      }\n    };\n\n    return (\n      <button\n        type=\"button\"\n        ref={ref}\n        className={cn(\n          className,\n          \"flex h-full w-full items-center justify-center px-4 gap-1 text-gray-900 transition duration-300 bg-transparent disabled:cursor-not-allowed\",\n        )}\n        onClick={handlePaste}\n        {...props}\n      >\n        <Typography variant=\"subtitle\" level={3}>\n          {label}\n        </Typography>\n        <MagicWand />\n      </button>\n    );\n  },\n);\n\nPasteButton.displayName = \"PasteButton\";",
    "explanation": "This component defines a customizable button that, when clicked, attempts to read text from the clipboard and then pastes it into a referenced input element. It renders a button that displays a label (defaulting to \"Paste\") alongside an icon (MagicWand), and it accepts additional styling and behavior via props.\n\n1. What It Does or Represents:\n\u2003\u2022 The PasteButton is a React forward-ref button component.\n\u2003\u2022 It uses the Clipboard API (navigator.clipboard.readText) to read text from the user's clipboard.\n\u2003\u2022 When the clipboard text is successfully read, it sets the value of an input element referenced via the inputRef prop and optionally triggers an onPaste callback with the pasted text.\n\u2003\u2022 It visually displays a label (set by the label prop) and an icon (MagicWand) alongside the text.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Props:\n\u2003\u2003\u2013 children: (optional) can be used to pass custom content inside the button.\n\u2003\u2003\u2013 inputRef: a React ref linked to an input element that will receive the pasted text.\n\u2003\u2003\u2013 label (optional): custom text for the button label; defaults to \"Paste\".\n\u2003\u2003\u2013 className (optional): custom CSS classes for further styling.\n\u2003\u2003\u2013 onPaste (optional): a callback function that receives the pasted text.\n\u2003\u2003\u2013 \u2026props: any additional props are spread onto the underlying <button> element.\n\u2003\u2022 Typical Usage Example:\n\n-----------------------------------------------------------\nExample Usage (TypeScript/React):\n\nimport React, { useRef } from 'react';\nimport { PasteButton, Typography, MagicWand } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst ExampleComponent: React.FC = () => {\n  const inputRef = useRef<HTMLInputElement>(null);\n\n  const handlePaste = (pastedText: string) => {\n    console.log(\"Pasted text:\", pastedText);\n  };\n\n  return (\n    <div>\n      <input ref={inputRef} type=\"text\" placeholder=\"Paste text here...\" />\n      <PasteButton inputRef={inputRef} onPaste={handlePaste} label=\"Paste Clipboard\" />\n    </div>\n  );\n};\n\nexport default ExampleComponent;\n-----------------------------------------------------------\n\u2003\u2022 In this example, an input element is created with a ref (inputRef). The PasteButton is then rendered with that same reference. When the button is clicked, it reads the clipboard text and populates the input field. Additionally, it logs the pasted text to the console via the onPaste callback.\n\n3. Best Practices or Limitations:\n\u2003\u2022 Ensure that the browser supports navigator.clipboard; some older browsers might not support this API.\n\u2003\u2022 Remember that clipboard access might require a secure context (HTTPS) and proper user interaction (e.g., click event).\n\u2003\u2022 Be cautious of user privacy and security when accessing the clipboard.\n\u2003\u2022 The component uses forwardRef, so it can accept a ref for the underlying <button> element as well.\n\u2003\u2022 Use the provided constants (like PASTE_BUTTON_WIDTH) for layout consistency if integrating this button with other UI elements.\n\u2003\u2022 Always import components from '@worldcoin/mini-apps-ui-kit-react' for consistency and maintainability across your project.\n\nThis concise explanation should help you integrate the PasteButton from '@worldcoin/mini-apps-ui-kit-react' into your larger React application effectively."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/CountryDrawer/useCountryFiltering.ts",
    "code_snippet": "export function useCountryFiltering({ countries, searchText }: UseCountryFilteringProps) {\n  const richCountries = countries ? getCountryDataListByCodes(countries) : defaultCountries;\n  const filteredCountries = filterCountries(richCountries, searchText);\n\n  return filteredCountries;\n}",
    "explanation": "Below is a concise explanation of the useCountryFiltering hook, its usage in a larger application, and some best practices.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n1. What It Does\n\n\u2022 The hook, useCountryFiltering, receives a list of country codes (or country identifiers) along with a search text.  \n\u2022 It converts the provided country codes into rich country data using getCountryDataListByCodes (falling back on a default list if no countries are provided).  \n\u2022 It then filters the resulting list using filterCountries based on the search text and returns the filtered list.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n2. How to Use It in a Larger Application\n\n\u2022 Import the hook from '@worldcoin/mini-apps-ui-kit-react' along with any UI components you might need from the same package.  \n\u2022 Pass in the necessary props (i.e. countries and searchText) when calling the hook.  \n\u2022 Use the filtered list from the hook to render UI elements such as a country list or dropdown.\n\nBelow is an example of a component that uses the hook:\n\n--------------------------------------------------\nimport React, { useState } from 'react';\nimport { useCountryFiltering, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nexport const CountrySelector = () => {\n  // Initial list of country codes (could be ISO codes for example)\n  const countries = ['US', 'CA', 'GB'];\n  const [searchText, setSearchText] = useState('');\n\n  // Invoke the custom hook to filter countries based on the search text\n  const filteredCountries = useCountryFiltering({ countries, searchText });\n\n  return (\n    <div>\n      <input\n        type=\"text\"\n        placeholder=\"Search for a country...\"\n        value={searchText}\n        onChange={(e) => setSearchText(e.target.value)}\n      />\n      <ul>\n        {filteredCountries.map((country) => (\n          <li key={country.code}>{country.name}</li>\n        ))}\n      </ul>\n      <Button onClick={() => console.log('Countries updated')}>Update List</Button>\n    </div>\n  );\n};\n\n--------------------------------------------------\n\n3. Best Practices or Limitations\n\n\u2022 Make sure the helper functions (getCountryDataListByCodes and filterCountries) are implemented efficiently, as they could be a performance bottleneck when the list of countries is large or if filtering is frequent.\n\u2022 Validate the props passed into the hook. For example, ensure that the countries array is in the expected format.\n\u2022 Consider memoizing heavy computations within the filter or get functions, especially if the component is expected to re-render frequently.\n\u2022 Document the hook with clear information about what type of data is expected for 'countries' and 'searchText', so that consumers of the hook understand its requirements.\n\u2022 Handle cases where no results are returned gracefully in the UI.\n\nThis concise explanation and usage example should help integrate the useCountryFiltering hook into larger applications using components from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/CountryDrawer/CountryDrawer.tsx",
    "code_snippet": "export function CountryDrawer({\n  onChange,\n  value,\n  countries,\n  onAnimationEnd,\n  disabled = false,\n  children,\n  defaultValue = \"US\",\n}: CountryDrawerProps) {\n  const [searchText, setSearchText] = useState(\"\");\n  const [open, setOpen] = useState(false);\n  const searchRef = useRef<HTMLInputElement>(null);\n\n  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setSearchText(event.target.value);\n  };\n\n  const filteredCountries = useCountryFiltering({\n    countries,\n    searchText,\n  });\n\n  const groupedCountries = useCountryGrouping({\n    countries: filteredCountries,\n    defaultValue,\n  });\n\n  const handleCountrySelect = (countryCode: CountryCode) => {\n    onChange(countryCode);\n    setSearchText(\"\");\n    setOpen(false);\n  };\n\n  return (\n    <Drawer open={open} onOpenChange={setOpen} onAnimationEnd={onAnimationEnd} height=\"full\">\n      <DrawerTrigger asChild className=\"outline-none\" disabled={disabled}>\n        {children}\n      </DrawerTrigger>\n\n      <DrawerContent>\n        <TopBar\n          title=\"Country\"\n          startAdornment={\n            <DrawerClose asChild>\n              <Button variant=\"tertiary\" size=\"icon\">\n                <XMark />\n              </Button>\n            </DrawerClose>\n          }\n        />\n\n        <div className=\"p-6\">\n          <SearchField\n            ref={searchRef}\n            value={searchText}\n            onChange={handleSearchChange}\n            autoFocus={open}\n          />\n        </div>\n\n        <div className=\"no-scrollbar w-full overflow-auto px-6 h-full\">\n          <GroupedCountryList\n            groupedCountries={groupedCountries}\n            onSelect={handleCountrySelect}\n            value={value}\n          />\n        </div>\n      </DrawerContent>\n    </Drawer>\n  );\n}",
    "explanation": "Below is a concise explanation of the component:\n\n1. What This Component Does  \n\u2022 The CountryDrawer component displays a full-screen sliding drawer that allows users to select a country from a given list.  \n\u2022 It supports filtering via a search input. As users type, the provided useCountryFiltering hook returns a subset of the countries matching the query.  \n\u2022 It groups the filtered countries using the useCountryGrouping hook, based on a default country value.  \n\u2022 When a user selects a country, the component calls the onChange callback with the selected country code, clears the search input, and closes the drawer.  \n\u2022 The component is designed with accessibility and usability in mind, using a Drawer for the slide-in panel, a TopBar for navigation (including a close button), and a SearchField for live filtering.\n\n2. How to Use It in a Larger Application  \n\u2022 Import the CountryDrawer (along with any other mini-apps UI Kit components) directly from the '@worldcoin/mini-apps-ui-kit-react' package.  \n\u2022 Required properties include:\n  - onChange: A function to handle selection changes (receives the country code).\n  - value: The currently selected country code.\n  - countries: An array of country objects available for selection.\n  - onAnimationEnd: An optional callback that executes at the end of the drawer\u2019s animation.\n\u2022 Optional props:\n  - disabled: Disables the drawer trigger.\n  - children: The element which opens the drawer when clicked.\n  - defaultValue: The initial default country code (defaults to \"US\" if not specified).\n\nExample usage in a larger application:\n\n-------------------------------------------------\nimport React, { useState } from 'react';\nimport { \n  CountryDrawer,\n  Button,\n  // other necessary components can also be imported from the UI kit\n} from '@worldcoin/mini-apps-ui-kit-react';\n\nconst App = () => {\n  const [selectedCountry, setSelectedCountry] = useState('US');\n  const countries = [\n    // Example list of country objects\n    { code: 'US', name: 'United States' },\n    { code: 'CA', name: 'Canada' },\n    { code: 'GB', name: 'United Kingdom' },\n    // ... more countries\n  ];\n\n  return (\n    <div>\n      <CountryDrawer\n        onChange={(code) => setSelectedCountry(code)}\n        value={selectedCountry}\n        countries={countries}\n        onAnimationEnd={() => console.log('Drawer animation finished')}\n        defaultValue=\"US\"\n      >\n        <Button variant=\"primary\">Select Country</Button>\n      </CountryDrawer>\n      <p>Selected Country: {selectedCountry}</p>\n    </div>\n  );\n};\n\nexport default App;\n-------------------------------------------------\n\nIn this example:\n\u2022 The CountryDrawer is imported from the '@worldcoin/mini-apps-ui-kit-react' package.\n\u2022 A Button is passed as a child to act as the Drawer trigger.\n\u2022 The component\u2019s onChange callback sets the selected country, which is displayed elsewhere in the application.\n\n3. Best Practices and Limitations  \n\u2022 Ensure that the list of countries is properly formatted and contains all necessary details expected by the filtering and grouping hooks.  \n\u2022 Use accessibility-friendly practices: The Drawer, TopBar, and SearchField components are designed with built-in accessibility, so avoid overriding their behavior in ways that might hinder screen reader support.  \n\u2022 Avoid overly complex state management within the CountryDrawer; keep it focused on display and selection logic.  \n\u2022 If additional customization is needed, consider wrapping or extending the component rather than changing its core behavior.  \n\u2022 Finally, monitor performance if the list of countries is very large, and consider performance optimizations such as virtualization if necessary.\n\nThis explanation and example should help in integrating the CountryDrawer component effectively in your React application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/CountryDrawer/useCountryGrouping.ts",
    "code_snippet": "export function useCountryGrouping({\n  countries,\n  defaultValue = \"US\",\n}: UseCountryGroupingProps) {\n  const groupedCountries = countries.reduce<GroupedCountries>((acc, country) => {\n    const parsedCountry = parseCountry(country);\n    const firstLetter = parsedCountry.name.charAt(0).toUpperCase();\n\n    if (!acc[firstLetter]) {\n      acc[firstLetter] = [];\n    }\n\n    acc[firstLetter].push({\n      countryCode: getValidatedCountryCode(parsedCountry.iso2, defaultValue),\n      name: parsedCountry.name,\n    });\n\n    return acc;\n  }, {});\n\n  return groupedCountries;\n}",
    "explanation": "1. Purpose:\n\u2022 The useCountryGrouping hook processes a list of country entries and organizes them into groups based on the first letter of each country\u2019s name.\n\u2022 For each country, it uses helper functions (parseCountry to extract country details and getValidatedCountryCode to validate or default the country code) and then aggregates them into an object where keys represent the uppercase first letter of the country name and the values are arrays of country objects (each containing a validated countryCode and the country\u2019s name).\n\n2. How to use it in a larger application:\n\u2022 Import the hook from '@worldcoin/mini-apps-ui-kit-react' and call it within a React functional component.\n\u2022 It accepts a props object with at least two properties: \n\u2003\u2013 countries: an array of country entries (the exact structure depends on parseCountry\u2019s implementation).\n\u2003\u2013 defaultValue: an optional fallback country code (\"US\" by default).\n\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { useCountryGrouping } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const CountryList = () => {\n\u2003\u2003\u2002\u2002const countries = [\n\u2003\u2003\u2002\u2002\u2002\u2002// populate the array with country data, e.g., objects or strings per your app's requirements\n\u2003\u2003\u2002\u2002];\n\u2003\u2003\u2002\u2002const groupedCountries = useCountryGrouping({ countries, defaultValue: \"US\" });\n\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002{Object.keys(groupedCountries).sort().map(letter => (\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<div key={letter}>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<h3>{letter}</h3>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<ul>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002{groupedCountries[letter].map((country, index) => (\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002<li key={index}>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002{country.name} ({country.countryCode})\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002</li>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002))}\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002</ul>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002</div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002))\n\u2003\u2003\u2002\u2002\u2002\u2002}\n\u2003\u2003\u2002\u2002\u2002</div>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003};\n\n\u2003\u2003export default CountryList;\n\n3. Best practices & limitations:\n\u2022 Best Practices:\n\u2003\u2013 Ensure that this hook is only used within a React component (or another custom hook) to comply with React Hooks rules.\n\u2003\u2013 If the countries array is large or subject to frequent changes, consider memoizing the computation using React's useMemo hook to avoid unnecessary re-grouping.\n\u2003\u2013 Validate or sanitize the input data, especially depending on what parseCountry does, so that the hook can reliably build the groupings.\n\u2022 Limitations:\n\u2003\u2013 The implementation relies on helper functions (parseCountry and getValidatedCountryCode) that are assumed to be defined elsewhere; ensure these are available and tested.\n\u2003\u2013 The grouping logic is case-sensitive at the point of extracting the first letter, so make sure country names are formatted consistently.\n\u2003\u2013 There\u2019s no built-in sorting of items within groups; if ordering is important, additional sorting logic might be necessary.\n\nUsing this hook via the import from '@worldcoin/mini-apps-ui-kit-react' keeps your component usage consistent with your design system\u2019s library conventions."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BottomBar/BottomBar.tsx",
    "code_snippet": "export interface BottomBarProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"className\">,\n    VariantProps<typeof bottomBarVariants> {\n  /**\n   * The direction of the bottom bar\n   * @default \"horizontal\"\n   */\n  direction?: \"horizontal\" | \"vertical\";\n}",
    "explanation": "1. What the component represents:\n\u2003\u2022 The BottomBarProps interface defines the expected properties for a BottomBar component. It builds on React\u2019s standard div attributes (while purposely excluding the \"className\" prop) and includes style variant properties (via VariantProps connected to bottomBarVariants).  \n\u2003\u2022 It also introduces a \"direction\" prop that allows the bottom bar to be rendered either horizontally (default) or vertically, enabling different layout behaviors.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the BottomBar (or the component that uses BottomBarProps) from the UI kit:\n\u2003\u2003import { BottomBar } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2022 Pass any standard div props (except className) and styling variant props as needed, along with the \"direction\" prop.\n\u2003\u2022 Example usage:\n\u2003\u2003---------------------------------------------------\n\u2003\u2003import React from 'react';\n\u2003\u2003import { BottomBar, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003function App() {\n\u2003\u2003\u00a0\u00a0return (\n\u2003\u2003\u00a0\u00a0\u00a0\u00a0<BottomBar direction=\"horizontal\" data-testid=\"bottom-bar\">\n\u2003\u2003\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0<Button onClick={() => console.log('Clicked!')}>Click Me</Button>\n\u2003\u2003\u00a0\u00a0\u00a0\u00a0</BottomBar>\n\u2003\u2003\u00a0\u00a0);\n\u2003\u2003}\n\n\u2003\u2003export default App;\n\u2003\u2003---------------------------------------------------\n\u2003\u2022 In this example, the BottomBar is set to display its children horizontally. You can also set it to \"vertical\" to change the layout accordingly.\n\n3. Best practices and limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003- Always prefer using the provided import from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency across your project.\n\u2003\u2003- Rely on the TypeScript interface to catch prop type mismatches early.\n\u2003\u2003- Use the variant system (bottomBarVariants) to maintain standardized styling across your UI components.\n\u2003\u2003- Document any additional custom props or modifications if you extend the component.\n\u2003\u2022 Limitations:\n\u2003\u2003- The exclusion of the \"className\" prop means you\u2019re expected to use the built-in styling system (variants) rather than custom manual CSS classes. If you need to override or add custom styling, ensure you work within the constraints of the UI kit\u2019s design system.\n\u2003\u2003- Ensure that any HTML attribute applied to the BottomBar is compatible with the underlying div element, as custom props beyond those defined might be ignored or cause unexpected behavior.\n\nThis setup promotes a structured and consistent design approach within your application using the UI kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BottomBar/BottomBar.tsx",
    "code_snippet": "export const BottomBar = forwardRef<HTMLDivElement, BottomBarProps>(\n  ({ children, direction, ...props }, ref) => {\n    return (\n      <div ref={ref} className={bottomBarVariants({ direction })} {...props}>\n        {children}\n      </div>\n    );\n  },\n);\n\nBottomBar.displayName = \"BottomBar\";",
    "explanation": "Below is an explanation of the BottomBar component:\n\n1. What the component does or represents:\n\u2003\u2022 The BottomBar is a simple functional React component that renders a div element styled using variants (in this case, based on the provided \"direction\" prop).\n\u2003\u2022 It uses React\u2019s forwardRef to pass the ref down to the underlying div, enabling parent components to directly manipulate or reference the div.\n\u2003\u2022 It accepts children (content rendered inside the div) and additional props spread onto the div.\n\n2. How to use it in a larger application:\n\u2003\u2022 Import the component from '@worldcoin/mini-apps-ui-kit-react'.\n\u2003\u2022 The component accepts a prop called \u201cdirection\u201d (which is used for styling through bottomBarVariants) along with any standard div props.\n\u2003\u2022 Typical usage involves wrapping content that should appear at the bottom of a layout.\n\u2003\u2022 Example usage:\n\u2003\u2003--------------------------------------------------\n\u2003\u2003import React, { useRef } from 'react';\n\u2003\u2003import { BottomBar, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const App = () => {\n\u2003\u2003  const bottomBarRef = useRef<HTMLDivElement>(null);\n\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <h1>Main Content</h1>\n\u2003\u2003      <BottomBar direction=\"left\" ref={bottomBarRef} style={{ padding: '16px', backgroundColor: '#f0f0f0' }}>\n\u2003\u2003        <Button onClick={() => console.log('Button clicked!')}>Click Me</Button>\n\u2003\u2003      </BottomBar>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default App;\n\u2003\u2003--------------------------------------------------\n\u2003\u2022 In this usage example, BottomBar is imported from the UI kit, the ref is passed to manage the underlying div if needed, and additional props like style are also passed.\n\n3. Best practices or limitations:\n\u2003\u2022 Using React\u2019s forwardRef is a best practice for components that need to expose their internal DOM node to parent components.\n\u2003\u2022 Specifying a displayName for the component (BottomBar.displayName = \"BottomBar\") improves debugging and logging in development tools.\n\u2003\u2022 Ensure that the bottomBarVariants function (not shown) properly handles the \u201cdirection\u201d prop values and edge cases.\n\u2003\u2022 While the component is flexible (accepts standard div props and children), be aware that styling and behavior rely on the bottomBarVariants logic, so any limitations in that logic may affect how the BottomBar renders.\n\u2003\u2022 The component is lightweight, so advanced features (like animations or responsiveness) would need to be implemented separately if required.\n\nBy following these explanations and examples, you can effectively integrate and use the BottomBar component within your UI application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BulletList/BulletList.tsx",
    "code_snippet": "export interface BulletListProps extends ComponentProps<\"div\"> {\n  /**\n   * Children should be BulletListItem components, but any ReactNode is accepted for compatibility\n   */\n  children: ReactElement<BulletListItemProps>[] | ReactElement<BulletListItemProps>;\n}",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What this component does or represents  \n   \u2022 The code defines the properties (props) interface for a BulletList component.  \n   \u2022 It extends the default HTML div attributes (through ComponentProps<\"div\">), so it can accept any standard div properties such as className, style, etc.  \n   \u2022 Its main purpose is to render a list, where its children are meant to be BulletListItem components. However, any valid ReactNode can be passed for compatibility.\n\n2. How to use it in a larger application  \n   \u2022 Import the BulletList component (and its corresponding BulletListItem, if available) from '@worldcoin/mini-apps-ui-kit-react'.  \n   \u2022 Use the BulletList component as a container for BulletListItem components.  \n   \u2022 Typical usage involves passing one or more BulletListItem components as children to BulletList.  \n   \u2022 For example:\n\n-------------------------------------------------\nimport { BulletList, BulletListItem } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction Example() {\n  return (\n    <BulletList className=\"my-bullet-list\">\n      <BulletListItem>First point</BulletListItem>\n      <BulletListItem>Second point</BulletListItem>\n      <BulletListItem>Third point</BulletListItem>\n    </BulletList>\n  );\n}\n\nexport default Example;\n-------------------------------------------------\n\n3. Best practices or limitations  \n   \u2022 Best Practices:  \n     - Enforce the use of BulletListItem for semantic consistency, even though other ReactNode values are allowed, to ensure that the list styling and behavior remain predictable.  \n     - Utilize the additional div properties (like className, style) to improve accessibilities and design customizations.  \n     - The component\u2019s interface is flexible due to the acceptance of both a single BulletListItem or an array; ensure consistency in usage across your application for maintainability.  \n   \u2022 Limitations:  \n     - The component does not strictly enforce that only BulletListItem components are children. Although it advises BulletListItem usage, other React elements might not receive the intended styling or behavior.  \n     - There is no built-in handling for edge cases (e.g., if children are not provided), so you may need to implement additional validation or fallback logic in the component itself or when using it.\n\nThis explanation should help you integrate and use the BulletList component effectively in your project while following best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/BulletList/BulletList.tsx",
    "code_snippet": "export const BulletList = forwardRef<HTMLDivElement, BulletListProps>(\n  ({ children, className, ...props }, ref) => {\n    return (\n      <div ref={ref} className={cn(\"grid gap-y-5 content-start\", className)} {...props}>\n        {children}\n      </div>\n    );\n  },\n);\n\nBulletList.displayName = \"BulletList\";",
    "explanation": "1. What the Component Does:\n\u2022 BulletList is a React functional component that acts as a container for a list of bullet items.\n\u2022 It renders a div with specific grid layout classes (\"grid gap-y-5 content-start\") that automatically space its children vertically.\n\u2022 The component uses React.forwardRef to allow the parent component to get a reference to the underlying div.\n\u2022 It accepts custom children nodes, additional CSS classes via the className prop, and any other valid div props.\n\n2. How to Use It in a Larger Application:\n\u2022 Import the BulletList component from the UI kit as shown below.\n\u2022 Pass in bullet items (or any JSX elements) as children.\n\u2022 Optionally, add custom class names, and pass other HTML attributes to modify it further.\n\u2022 Typical usage example:\n\n-------------------------------------------------\nExample Usage:\n-------------------------------------------------\nimport React from \"react\";\nimport { BulletList } from \"@worldcoin/mini-apps-ui-kit-react\";\n\nconst Example = () => {\n  return (\n    <BulletList className=\"custom-bullet-list\">\n      <div>\u2022 First bullet item</div>\n      <div>\u2022 Second bullet item</div>\n      <div>\u2022 Third bullet item</div>\n    </BulletList>\n  );\n};\n\nexport default Example;\n-------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2022 Best Practices:\n  - Use React.forwardRef when you need to access the DOM element for animations or integrations.\n  - Always pass additional props to ensure the component is flexible and extendable.\n  - Use the provided utility (like the \"cn\" function) to merge class names\u2014ensuring your custom styles are applied along with default ones.\n  - Set the displayName on the component for easier debugging in React DevTools.\n\n\u2022 Limitations:\n  - The component uses a generic <div> instead of semantic HTML elements (like <ul> and <li> for a list). If accessible semantics are needed, consider using HTML list elements.\n  - The styling is dependent on the existing CSS framework (likely Tailwind CSS), so ensure consistency with the global styling of your application.\n  - Its grid layout is preset; significant customization may require extending or overriding default classes.\n\nThis explanation outlines what the BulletList component is designed to do, how to integrate it in a React application, and some considerations for best practices and limitations."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/AlertDialog.tsx",
    "code_snippet": "export {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogTrigger,\n  AlertDialogClose,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n};",
    "explanation": "This code exports a collection of React components that work together to build an alert dialog (modal) interface. They are part of a UI kit designed to provide a structured and accessible way to display modal dialogs with predefined sections such as header, content, footer, etc.\n\n1. What This Component Does:\n   \u2022 The exported components allow you to create an alert dialog that can be triggered by a user action (via AlertDialogTrigger), displays content in a modal overlay (AlertDialogContent) along with header (AlertDialogHeader), title (AlertDialogTitle), description (AlertDialogDescription), and footer (AlertDialogFooter), and can be closed with AlertDialogClose.\n   \u2022 AlertDialogPortal helps in rendering the dialog outside the normal DOM hierarchy to avoid stacking context issues.\n\n2. How to Use It in a Larger Application:\n   \u2022 Import the components from the '@worldcoin/mini-apps-ui-kit-react' package.\n   \u2022 Compose the components together in your JSX. For example, wrap your main element with <AlertDialog>. Use <AlertDialogTrigger> to designate the element that will open the dialog, and build the dialog structure inside with content, header, title, description, and footer.\n   \u2022 Example usage:\n     \n     ---------------------------------------------------------\n     // Example.tsx\n     import React from 'react';\n     import {\n       AlertDialog,\n       AlertDialogPortal,\n       AlertDialogTrigger,\n       AlertDialogClose,\n       AlertDialogContent,\n       AlertDialogHeader,\n       AlertDialogFooter,\n       AlertDialogTitle,\n       AlertDialogDescription,\n     } from '@worldcoin/mini-apps-ui-kit-react';\n\n     const ExampleDialog = () => {\n       return (\n         <AlertDialog>\n           <AlertDialogTrigger>\n             {/* This button opens the dialog */}\n             <button>Show Alert</button>\n           </AlertDialogTrigger>\n           <AlertDialogPortal>\n             <AlertDialogContent>\n               <AlertDialogHeader>\n                 <AlertDialogTitle>Warning</AlertDialogTitle>\n                 <AlertDialogDescription>\n                   This action cannot be undone. Please confirm if you wish to proceed.\n                 </AlertDialogDescription>\n               </AlertDialogHeader>\n               <AlertDialogFooter>\n                 <AlertDialogClose>\n                   <button>Cancel</button>\n                 </AlertDialogClose>\n                 <AlertDialogClose>\n                   <button>Confirm</button>\n                 </AlertDialogClose>\n               </AlertDialogFooter>\n             </AlertDialogContent>\n           </AlertDialogPortal>\n         </AlertDialog>\n       );\n     };\n\n     export default ExampleDialog;\n     ---------------------------------------------------------\n\n3. Best Practices or Limitations:\n   \u2022 Best Practices:\n     - Ensure that the dialog's structure follows the recommended accessibility guidelines by providing proper headers, descriptions, and focus management.\n     - Use the portal (AlertDialogPortal) to render dialogs outside of the normal app hierarchy to avoid CSS and stacking context issues.\n     - Keep the alert dialog\u2019s content concise and the actions clear to your users.\n     - Use meaningful prop names and semantic elements inside your trigger and content components.\n   \u2022 Limitations:\n     - The styling and behavior are governed by the UI kit's default implementation; if you need deep customization, check the underlying implementation or consider extending the components.\n     - Ensure that modal usage is in line with accessibility practices (e.g., handling keyboard events, focus trap) provided by the library.\n     - Be aware of potential performance concerns if your modal contains very complex or heavy components inside.\n\nBy following these guidelines, you can effectively integrate and manage alert dialogs within your React application using the components from '@worldcoin/mini-apps-ui-kit-react'."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/use-alert-dialog.tsx",
    "code_snippet": "export { AlertDialogContext, useAlertDialog };",
    "explanation": "This snippet is part of a UI toolkit that provides context-based state management for alert dialogs. It exposes:\n\n1. AlertDialogContext \u2013 a React Context that holds the state and configuration for an alert dialog, allowing any nested component to access or modify this dialog\u2019s state.\n2. useAlertDialog \u2013 a custom hook that lets components easily interact with the alert dialog without manually drilling props. It likely includes methods like open, close, or update for the dialog.\n\nBelow is a concise explanation covering usage and best practices:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. What It Represents\n\n\u2022 The AlertDialogContext is used to share alert dialog state across your component tree.  \n\u2022 The useAlertDialog hook provides a simple API to trigger or modify the alert dialog without needing to pass down props through multiple levels.  \n\u2022 Together, they help you implement a consistent way to manage alert dialogs in your application.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to Use It in a Larger Application\n\nTypically, you\u2019d wrap a part of your app (or the whole app) with an AlertDialogProvider (or similar) that supplies the context. Then, within any child component, call useAlertDialog to open or update the alert dialog.\n\nExample Usage:\n\n---------------------------------------------------------\nimport React from 'react';\nimport { AlertDialogContext, useAlertDialog } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst AlertDialogWrapper = ({ children }) => {\n  // Imagine that somewhere inside this provider the state is defined and provided.\n  // This component would be in charge of rendering the AlertDialog UI based on the context.\n  return (\n    <AlertDialogContext.Provider value={{\n      // These values and methods are provided by the UI kit.\n      open: () => { /* open the dialog */ },\n      close: () => { /* close the dialog */ },\n      // ... other properties and methods\n    }}>\n      {children}\n      {/* Additionally, the alert dialog component could be rendered here */}\n    </AlertDialogContext.Provider>\n  );\n};\n\nconst SomeComponent = () => {\n  const { open } = useAlertDialog();\n\n  return (\n    <div>\n      <button onClick={() => open()}>Show Alert Dialog</button>\n    </div>\n  );\n};\n\nconst App = () => (\n  <AlertDialogWrapper>\n    <SomeComponent />\n  </AlertDialogWrapper>\n);\n\nexport default App;\n---------------------------------------------------------\n\nIn this example:\n\u2022 Import statements use the package '@worldcoin/mini-apps-ui-kit-react'.  \n\u2022 The App component wraps its children inside the AlertDialogProvider (represented here as AlertDialogWrapper).  \n\u2022 Inside SomeComponent, the useAlertDialog hook is used to access the open method to trigger the dialog.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices & Limitations\n\n\u2022 Always ensure that components using the useAlertDialog hook are wrapped inside the associated AlertDialogContext provider. Otherwise, the hook may return undefined or throw an error.  \n\u2022 Keep context values as minimal as possible to avoid unnecessary re-renders.  \n\u2022 Document the contract of the useAlertDialog hook (what methods are available) so that developers know how to best integrate the functionality.  \n\u2022 This hook is specialized for alert dialogs; reuse it only in contexts where alert dialog interaction is needed.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nBy following the above usage pattern and best practices, you can efficiently manage alert dialog state across your application using the provided context and hook from the UI kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface WithFadeFromProps {\n  /**\n   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.\n   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.\n   * You can also use px values, which doesn't take screen height into account.\n   */\n  snapPoints: (number | string)[];\n  /**\n   * Index of a `snapPoint` from which the overlay fade should be applied. Defaults to the last snap point.\n   */\n  fadeFromIndex: number;\n}",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What it does or represents:\n\u2003\u2022 The code defines a TypeScript interface named WithFadeFromProps.\n\u2003\u2022 It is meant to be used on a component that handles overlay animations with multiple \u201csnap points\u201d (positions on the screen).\n\u2003\u2022 The snapPoints property is an array of numbers or strings that specify positions \u2013 either as a percentage of the screen (from 0 to 100) or using pixel values.\n\u2003\u2022 The fadeFromIndex indicates the index within the snapPoints array from which any overlay fade animation should begin. If not specified, the default is assumed to be the last snap point.\n\n2. How to use it in a larger application:\n\u2003\u2022 A component that leverages WithFadeFromProps would accept these props and use them to manage its position or animation states.\n\u2003\u2022 In your app, you import relevant UI components (e.g., a Button from the UI kit) from '@worldcoin/mini-apps-ui-kit-react' and then use your overlay component with the correct props.\n\u2003\u2022 Example usage:\n\u2003\u2003\n\u2003\u2003import React from 'react';\n\u2003\u2003import { OverlayComponent, Button } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003interface OverlayComponentProps extends WithFadeFromProps {\n\u2003\u2003  // ...additional props if needed.\n\u2003\u2003}\n\n\u2003\u2003const OverlayComponent: React.FC<OverlayComponentProps> = ({ snapPoints, fadeFromIndex, ...rest }) => {\n\u2003\u2003  // Render logic that handles overlay positioning and fade based on provided snapPoints and fadeFromIndex.\n\u2003\u2003  return (\n\u2003\u2003    <div style={{ transition: 'opacity 0.3s', opacity: 1 }}>\n\u2003\u2003      {/* Example contents */}\n\u2003\u2003      <p>Your content here with fade effect starting from index {fadeFromIndex}</p>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003// Usage inside a larger app\n\u2003\u2003const App = () => {\n\u2003\u2003  return (\n\u2003\u2003    <div>\n\u2003\u2003      <OverlayComponent snapPoints={[0.2, 0.5, 0.8]} fadeFromIndex={2} />\n\u2003\u2003      <Button onClick={() => console.log('button clicked')}>Click me</Button>\n\u2003\u2003    </div>\n\u2003\u2003  );\n\u2003\u2003};\n\n\u2003\u2003export default App;\n\n3. Best practices and limitations:\n\u2003\u2022 Validate Prop Values: Ensure that snapPoints values remain within a logical range and maintain consistent types (especially when mixing percentages and pixel values).\n\u2003\u2022 Documentation: Clearly document how each snap point functions (e.g., explaining the difference between using percentages and pixels).\n\u2003\u2022 Responsiveness: If using percentages, consider how the UI adapts to different screen sizes.\n\u2003\u2022 Default Values: Consider setting a default fadeFromIndex in the component logic if none is provided.\n\u2003\u2022 Code Maintainability: Use clear naming conventions and document the expected behavior, making it easier for future developers to reuse or modify the component.\n\nThis interface is a part of a UI kit's component toolkit that simplifies working with customizable overlay animations, enhancing the developer\u2019s ability to build dynamic and interactive interfaces."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface WithoutFadeFromProps {\n  /**\n   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.\n   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.\n   * You can also use px values, which doesn't take screen height into account.\n   */\n  snapPoints?: (number | string)[];\n  fadeFromIndex?: never;\n}\n\ntype BaseAlertDialogProps = {\n  /** The active snap point */\n  activeSnapPoint?: number | string | null;\n  /** Callback when the active snap point changes */\n  setActiveSnapPoint?: (snapPoint: number | string | null) => void;\n  /** The content of the drawer */\n  children?: React.ReactNode;\n  /** Whether the drawer is open */\n  open?: boolean;\n  /**\n   * Number between 0 and 1 that determines when the drawer should be closed.\n   * Example: threshold of 0.5 would close the drawer if the user swiped for 50% of the height of the drawer or more.\n   * @default 0.25\n   */\n  closeThreshold?: number;\n  /**\n   * Duration for which the drawer is not draggable after scrolling content inside of the drawer.\n   * @default 500ms\n   */\n  scrollLockTimeout?: number;\n  /**\n   * When `true`, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open\n   */\n  fixed?: boolean;\n  /**\n   * When `true` only allows the drawer to be dragged by the `<AlertDialog.Handle />` component.\n   * @default false\n   */\n  handleOnly?: boolean;\n  /**\n   * When `false` dragging, clicking outside, pressing esc, etc. will not close the drawer.\n   * Use this in comination with the `open` prop, otherwise you won't be able to open/close the drawer.\n   * @default true\n   */\n  dismissible?: boolean;\n  /**\n   * When `false` it allows to interact with elements outside of the drawer without closing it.\n   * @default true\n   */\n  modal?: boolean;\n  /**\n   * Direction of the drawer. Can be `top` or `bottom`, `left`, `right`.\n   * @default 'bottom'\n   */\n  direction?: \"top\" | \"bottom\" | \"left\" | \"right\";\n  /**\n   * Opened by default, skips initial enter animation. Still reacts to `open` state changes\n   * @default false\n   */\n  defaultOpen?: boolean;\n  /**\n   * When set to `true` prevents scrolling on the document body on mount, and restores it on unmount.\n   * @default false\n   */\n  disablePreventScroll?: boolean;\n  /**\n   * When `true` Vaul will reposition inputs rather than scroll then into view if the keyboard is in the way.\n   * Setting it to `false` will fall back to the default browser behavior.\n   * @default true when {@link snapPoints} is defined\n   */\n  repositionInputs?: boolean;\n  /**\n   * Disabled velocity based swiping for snap points.\n   * This means that a snap point won't be skipped even if the velocity is high enough.\n   * Useful if each snap point in a drawer is equally important.\n   * @default false\n   */\n  snapToSequentialPoint?: boolean;\n  /** The container element to render the drawer into */\n  container?: HTMLElement | null;\n  /** Whether to prevent scroll restoration */\n  preventScrollRestoration?: boolean;\n  /** Whether to auto focus the drawer when opened */\n  autoFocus?: boolean;\n  /** Callback when the open state changes */\n  onOpenChange?: (open: boolean) => void;\n  /** Callback when dragging */\n  onDrag?: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;\n  /** Callback when releasing */\n  onRelease?: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;\n  /** Callback when closing */\n  onClose?: () => void;\n  /**\n   * Gets triggered after the open or close animation ends, it receives an `open` argument with the `open` state of the drawer by the time the function was triggered.\n   * Useful to revert any state changes for example.\n   */\n  onAnimationEnd?: (open: boolean) => void;\n};\n/**\n * Props for the main AlertDialog component\n */",
    "explanation": "Below is a concise explanation of the provided code:\n\n1. What the Component Represents\n\n\u2022 The code defines TypeScript interfaces that describe the properties for a customizable AlertDialog component (or drawer).  \n\u2022 The BaseAlertDialogProps interface includes a rich set of props allowing you to control behaviors such as:  \n  \u2013 How the drawer opens/closes (using the open, onOpenChange, onAnimationEnd callbacks).  \n  \u2013 Snap points for the drawer\u2019s height/position (using snapPoints, activeSnapPoint, setActiveSnapPoint). You can provide an array of numbers (percentages) or CSS pixel values.  \n  \u2013 Drag interactions (handleOnly, onDrag, onRelease) and thresholds (closeThreshold) ensuring proper UX on mobile or desktop.  \n  \u2013 Additional UI behavior like fixed positioning, modal settings, and handling document scrolling when the drawer is open.  \n  \u2013 A range of customization through callbacks (onClose, onAnimationEnd) and additional configuration options.\n\n\u2022 The WithoutFadeFromProps interface is also defined with a single property (snapPoints) and explicitly disallows a fadeFromIndex (set to never) to avoid conflicts if that behavior is not desired.\n\n2. How to Use It in a Larger Application\n\n\u2022 In a larger application, you would import and use the AlertDialog (or drawer) component from the UI kit. Assume it is available from the package '@worldcoin/mini-apps-ui-kit-react'.  \n\u2022 You would then provide the necessary props when rendering it to control its open state, snapping behavior, drag events, etc.\n\nFor example:\n\n-------------------------------------------------\nimport React, { useState } from 'react';\nimport { AlertDialog } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst MyComponent = () => {\n  const [open, setOpen] = useState(false);\n  const [activeSnapPoint, setActiveSnapPoint] = useState(0.5);\n\n  return (\n    <div>\n      <button onClick={() => setOpen(true)}>Open Drawer</button>\n      <AlertDialog\n        open={open}\n        activeSnapPoint={activeSnapPoint}\n        setActiveSnapPoint={setActiveSnapPoint}\n        snapPoints={[0.2, 0.5, 0.8]}  // using percentages for demonstration\n        closeThreshold={0.25}  // Will close if dragged beyond 25% of its full height\n        onOpenChange={setOpen}\n        onAnimationEnd={(isOpen) => console.log('Animation ended, drawer open:', isOpen)}\n      >\n        <div>\n          <h2>Drawer Content</h2>\n          <p>This is the content of the drawer. You can place forms, menus, or any UI elements here.</p>\n          <button onClick={() => setOpen(false)}>Close Drawer</button>\n        </div>\n      </AlertDialog>\n    </div>\n  );\n};\n\nexport default MyComponent;\n-------------------------------------------------\n\n\u2022 In the example above, note the following:\n  \u2013 The AlertDialog is imported from '@worldcoin/mini-apps-ui-kit-react'.\n  \u2013 The drawer\u2019s state (open, activeSnapPoint) is managed via React state.\n  \u2013 Various behavior-related properties are supplied, such as the available snap points, close threshold, and callbacks to handle state changes.\n\n3. Best Practices and Limitations\n\n\u2022 Always import from the package '@worldcoin/mini-apps-ui-kit-react' to maintain consistency in your project rather than using relative paths.  \n\u2022 Ensure that the snapPoints array is sorted from least visible (small percentage or number) to most visible, or use pixel values carefully since px values do not adjust for screen height.  \n\u2022 Provide sensible default values or fallbacks for properties such as closeThreshold and scrollLockTimeout if not specified by the user to maintain predictable behavior.  \n\u2022 Be cautious when disabling dismissible behaviors (clicking outside, pressing Esc, etc.) as this may impact accessibility and user experience.  \n\u2022 If using drag interactions, testing for different device sizes is recommended to ensure consistent behavior across mobile and desktop environments.  \n\u2022 The WithoutFadeFromProps interface conditionally disallows using fadeFromIndex, so do not attempt to add this property if working in that prop subset.\n\nThis concise explanation should help you understand what the component does, how to integrate it into a larger application, and the best practices and limitations to keep in mind."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export type AlertDialogProps = BaseAlertDialogProps &\n  (WithFadeFromProps | WithoutFadeFromProps);\n\n/**\n * Props for the AlertDialogContent component\n */",
    "explanation": "Below is a concise explanation of what this code snippet represents and how you might use it in your application:\n\n1. What It Represents  \n\u2003\u2022 The AlertDialogProps type is a union type that composes properties for an AlertDialog component. It extends a set of base properties (BaseAlertDialogProps) and then requires either the properties defined in WithFadeFromProps or those in WithoutFadeFromProps.  \n\u2003\u2022 This structure suggests that the AlertDialog can optionally support a \u201cfade\u201d transition effect. When you want fade-related behaviour, you use the WithFadeFromProps; if not, you supply WithoutFadeFromProps. This makes the component flexible and type-safe by allowing only one of the fade-related prop combinations.\n\n2. How to Use It in a Larger Application  \n\u2003\u2022 In your app, you would import the AlertDialog component (or any other component that uses these props) directly from '@worldcoin/mini-apps-ui-kit-react'.  \n\u2003\u2022 When rendering the AlertDialog, you must supply the base properties and then choose between fade or non-fade configuration based on your requirements.  \n\u2003\u2022 Example usage:\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n\u2003\u2003import React, { useState } from 'react';\n\u2003\u2003import { AlertDialog } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003\n\u2003\u2003const App = () => {\n\u2003\u2003\u2003const [open, setOpen] = useState(true);\n\u2003\u2003\u2003\n\u2003\u2003\u2003// If you want to use fade transition, supply properties from WithFadeFromProps\n\u2003\u2003\u2003return (\n\u2003\u2003\u2003\u2003<AlertDialog\n\u2003\u2003\u2003\u2003\u2003open={open}\n\u2003\u2003\u2003\u2003\u2003title=\"Important Notice\"\n\u2003\u2003\u2003\u2003\u2003message=\"Are you sure you want to continue?\"\n\u2003\u2003\u2003\u2003\u2003fadeFrom=\"left\"\u2003\u2003// Example prop from WithFadeFromProps\n\u2003\u2003\u2003\u2003\u2003onClose={() => setOpen(false)}\n\u2003\u2003\u2003\u2003/>\n\u2003\u2003\u2003);\n\u2003\u2003};\n\u2003\u2003\n\u2003\u2003export default App;\n\u2003\u2003\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500  \n\u2003\u2022 If you do not require the fade transition, then use the set of properties defined in WithoutFadeFromProps, ensuring no fade-specific properties are included.\n\n3. Best Practices and Limitations  \n\u2003\u2022 Best Practices:  \n\u2003\u2003\u2013 Always import your UI components using the provided package import (e.g., from '@worldcoin/mini-apps-ui-kit-react') instead of using relative paths.  \n\u2003\u2003\u2013 Use TypeScript\u2019s type safety to ensure you pass the correct set of props \u2013 either the faded configuration or the non-faded one but not both simultaneously.  \n\u2003\u2003\u2013 Use clear and descriptive values for properties like fade direction (if applicable) to maintain readability.  \n\u2003\n\u2003\u2022 Limitations:  \n\u2003\u2003\u2013 The component enforces the choice between fade and non-fade props, so you must explicitly design your dialog flow depending on whether you need a visual transition.  \n\u2003\u2003\u2013 Customization beyond the defined properties may be limited, so if you need extensive styling or behavioural changes, check the documentation for available overrides or extensions.  \n\u2003\nBy following these guidelines, you can effectively integrate and use the AlertDialog component within your larger application while benefiting from type safety and maintainability."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogContentProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> {\n  /** The content of the drawer */\n  children?: React.ReactNode;\n  /** Additional CSS classes to apply */\n  className?: string;\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n  /** Whether to close the drawer when clicking outside */\n  onCloseAutoFocus?: (event: Event) => void;\n  /** Called when the escape key is pressed */\n  onEscapeKeyDown?: (event: KeyboardEvent) => void;\n  /** Called when pointer down occurs outside drawer */\n  onPointerDownOutside?: (event: Event) => void;\n  /** Called when drawer starts to close */\n  onInteractOutside?: (event: Event) => void;\n}\n\n/**\n * Props for the AlertDialogHeader component\n */",
    "explanation": "1. Purpose:\n\u2022 This interface describes props for an AlertDialogContent component that wraps content inside a drawer-like modal.\n\u2022 It extends the basic content component from a Drawer primitive (used to display modal content) and adds additional props such as custom CSS classes, children content, and several event callbacks (e.g., closing on escape key press, pointer interactions outside the drawer).\n\n2. Usage in a Larger Application:\n\u2022 The AlertDialogContent component is designed to be used within an AlertDialog or modal context. It accepts children (the UI/content to display) and several optional event handler props to manage focus and dismissal behavior.\n\u2022 In a larger application, you would import it from the package and include it as part of your dialog structure. For example, your AlertDialog might have a header, content (using AlertDialogContent), and footer.\n\nExample:\n--------------------------------------------------\nimport React from 'react';\nimport { AlertDialogContent, DrawerPrimitive } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction MyAlertDialog() {\n  return (\n    <DrawerPrimitive.Root>\n      <DrawerPrimitive.Trigger asChild>\n        <button>Open Dialog</button>\n      </DrawerPrimitive.Trigger>\n      <DrawerPrimitive.Overlay />\n      <AlertDialogContent\n        className=\"custom-dialog-content\"\n        onEscapeKeyDown={(event) => console.log(\"Escape pressed!\", event)}\n        onPointerDownOutside={(event) => console.log(\"Clicked outside!\", event)}\n      >\n        <h2>Attention!</h2>\n        <p>This action is irreversible.</p>\n        <button onClick={() => console.log(\"Confirmed!\")}>Confirm</button>\n      </AlertDialogContent>\n    </DrawerPrimitive.Root>\n  );\n}\n\nexport default MyAlertDialog;\n--------------------------------------------------\n\n3. Best Practices & Limitations:\n\u2022 Best Practices:\n  - Always supply meaningful children to provide clear context inside the dialog.\n  - Use the event callback props (such as onEscapeKeyDown or onInteractOutside) to tailor the user\u2019s interaction with the modal.\n  - Leverage the asChild prop as needed to override default styling or to wrap custom trigger elements.\n  - Use semantic HTML so that the content is accessible (e.g., proper use of headings and button elements).\n\u2022 Limitations:\n  - The component relies on the underlying DrawerPrimitive.Content, so any limitations or behaviors of that component are inherited.\n  - Overloading the component with too many event handlers or customizations may complicate the dialog's behavior; keep it as simple as possible.\n  - Ensure that integrating with other modal or drawer components from the kit maintains consistent behavior and UI.\n\nThis set of instructions and example usage should help you integrate and utilize the AlertDialogContent component effectively in your application."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogHeaderProps\n  extends Omit<React.HTMLAttributes<HTMLDivElement>, \"className\"> {\n  /** Optional icon to display in the header */\n  icon?: React.ReactNode;\n  children?: React.ReactNode;\n}\n\n/**\n * Props for the AlertDialogTitle component\n */",
    "explanation": "Below is an explanation covering what the component represents, how to use it, and some best practices or limitations:\n\n1. What the Component Does or Represents:\n\u2003\u2022 The AlertDialogHeader component (as defined by its props interface) is designed to serve as the header section of an alert dialog. \n\u2003\u2022 It extends the standard set of HTML attributes for a div element (except for the className property), allowing additional custom attributes to be passed.\n\u2003\u2022 It accepts two main props:\n\u2003\u2003\u2013 icon: an optional React node, which lets you include an icon or other visual element in the header.\n\u2003\u2003\u2013 children: any React node(s) that serve as the header content. This could be text or other elements that provide context or the title of the alert dialog.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the component from the '@worldcoin/mini-apps-ui-kit-react' package.\n\u2003\u2022 Use it as part of your alert dialog assembly, passing in the optional icon and any children to be displayed.\n\u2003\u2022 Example usage in a React application:\n\n\u2003\u2003import React from 'react';\n\u2003\u2003import { AlertDialogHeader } from '@worldcoin/mini-apps-ui-kit-react';\n\u2003\u2003import { SomeIcon } from '@worldcoin/mini-apps-ui-kit-react';\n\n\u2003\u2003const MyAlertDialog = () => {\n\u2003\u2003\u2002\u2002return (\n\u2003\u2003\u2002\u2002\u2002\u2002<div>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002<AlertDialogHeader icon={<SomeIcon />}>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002\u2002\u2002Important Alert!\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002</AlertDialogHeader>\n\u2003\u2003\u2002\u2002\u2002\u2002\u2002\u2002{/* You might include additional components like a content area or buttons below */}\n\u2003\u2003\u2002\u2002\u2002\u2002</div>\n\u2003\u2003\u2002\u2002);\n\u2003\u2003};\n\n\u2003\u2003export default MyAlertDialog;\n\n\u2003\u2022 In this example, the AlertDialogHeader is used to display an icon alongside the header text \"Important Alert!\".\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Keep the AlertDialogHeader focused solely on the header role; for additional dialog parts (footer, content) consider separate components.\n\u2003\u2003\u2013 Ensure that any icon or visual element provided is accessible (e.g., it includes appropriate alt text or ARIA labels if needed).\n\u2003\u2003\u2013 Use semantic HTML (e.g., headings) within the children if appropriate for accessibility.\n\u2003\u2003\u2013 When extending HTMLAttributes, be cautious of conflicts; here, className is deliberately omitted to ensure consistent styling.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 Since the component omits the className prop, styling customizations might need to rely on other props or wrapper components.\n\u2003\u2003\u2013 The simplicity of the interface means it is best suited for straightforward header content; more complex header interactions may require additional component logic.\n\u2003\nBy following these guidelines, you can easily integrate the AlertDialogHeader within your alert dialogs in a consistent and accessible design using the UI-kit."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogTitleProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title> {\n  children?: React.ReactNode;\n  /** Whether to render the title without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the AlertDialogDescription component\n */",
    "explanation": "This snippet describes the props interface for an AlertDialogTitle component, which is likely used as the title/header within an alert dialog. Here\u2019s a concise breakdown:\n\n1. What It Represents:\n   \u2022 The interface AlertDialogTitleProps extends the props of a DrawerPrimitive.Title component, meaning that AlertDialogTitle is built on top of an underlying primitive title component (from a Drawer or similar component).\n   \u2022 It accepts standard properties from that primitive (using React.ComponentPropsWithoutRef) and adds its own options:\n     \u2013 children: the content of the title.\n     \u2013 asChild?: a boolean flag to allow rendering the title without the default styling (typically used when you want to manage styles yourself or swap the element type).\n\n2. How to Use It in a Larger Application:\n   \u2022 Import the component (or its corresponding container) from the UI kit:\n     Example:\n     --------------------------------------------------\n     import { AlertDialogTitle } from '@worldcoin/mini-apps-ui-kit-react';\n     --------------------------------------------------\n   \u2022 Use it as part of an Alert Dialog component, passing any necessary properties including children.\n   \u2022 Example usage:\n     --------------------------------------------------\n     import React from 'react';\n     import { AlertDialog, AlertDialogTitle, AlertDialogDescription, AlertDialogContent, AlertDialogTrigger } from '@worldcoin/mini-apps-ui-kit-react';\n\n     const MyAlertDialog = () => (\n       <AlertDialog>\n         <AlertDialogTrigger>Show Alert</AlertDialogTrigger>\n         <AlertDialogContent>\n           <AlertDialogTitle asChild>\n             <h2>Warning!</h2>\n           </AlertDialogTitle>\n           <AlertDialogDescription>\n             This is an important message.\n           </AlertDialogDescription>\n         </AlertDialogContent>\n       </AlertDialog>\n     );\n\n     export default MyAlertDialog;\n     --------------------------------------------------\n   \u2022 In this example, AlertDialogTitle renders the title within the alert. The asChild prop lets you render a custom element (the h2) without applying the default styling.\n\n3. Best Practices and Limitations:\n   \u2022 Best Practices:\n     \u2013 Always import from '@worldcoin/mini-apps-ui-kit-react' as it centralizes your component sources.\n     \u2013 Utilize the asChild prop when you need to replace or customize the element while maintaining accessibility standards.\n     \u2013 Extend from the primitive component to inherit base functionality and ensure consistency in design.\n   \u2022 Limitations:\n     \u2013 The component relies on the underlying DrawerPrimitive.Title; any changes or issues in that base component may affect AlertDialogTitle.\n     \u2013 Be aware of styling conflicts if using asChild to render custom elements; ensure that any custom styling integrates well with the design system.\n\nThis explanation and example should help integrate AlertDialogTitle into your application while adhering to proper best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogDescriptionProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description> {\n  children?: React.ReactNode;\n  /** Whether to render the description without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the AlertDialogTrigger component\n */",
    "explanation": "Below is a concise explanation of what the provided code represents and how you might integrate it into your application:\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n1. What This Component Represents\n\n\u2022 The code defines the TypeScript interface for the properties of an AlertDialogDescription component.  \n\u2022 It extends the properties from an underlying primitive (DrawerPrimitive.Description), which means it inherits base behaviors and accessibility features defined by that primitive.  \n\u2022 The interface includes:\n\u2003\u2013 children: The content (typically text or React nodes) that will be displayed as the description in the alert dialog.\n\u2003\u2013 asChild (optional): A boolean flag that, when set to true, allows the component to render its children without applying default styles, enabling you to control the styling by wrapping the children with your preferred element.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n2. How to Use It in a Larger Application\n\nThe AlertDialogDescription component is designed to be part of an alert dialog UI kit. You would typically use it together with other alert dialog components (like trigger, content, or footer) to build accessible modal dialogs.\n\nExample usage in your project:\n\n--------------------------------------------------\nimport React from 'react';\nimport { AlertDialogDescription } from '@worldcoin/mini-apps-ui-kit-react';\nimport { AlertDialog, AlertDialogTrigger, AlertDialogContent } from '@worldcoin/mini-apps-ui-kit-react';\n\nfunction ExampleAlertDialog() {\n  return (\n    <AlertDialog>\n      <AlertDialogTrigger>\n        Open Alert\n      </AlertDialogTrigger>\n      <AlertDialogContent>\n        {/* Use AlertDialogDescription to show the dialog description */}\n        <AlertDialogDescription>\n          This is the alert description. It provides more information about the alert.\n        </AlertDialogDescription>\n      </AlertDialogContent>\n    </AlertDialog>\n  );\n}\n\nexport default ExampleAlertDialog;\n--------------------------------------------------\n\n\u2022 Props:\n\u2003\u2013 children: The content within the description.\n\u2003\u2013 asChild: If you want to render the description as a different element (for example, wrapping it in a span or another component without the default styles), pass asChild={true} and wrap your custom element accordingly.\n\u2022 Typical usage: Embed it inside the dialog content structure to offer additional context or explanation when an alert dialog appears.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\n3. Best Practices and Limitations\n\n\u2022 Accessibility: Since the component extends a primitive that likely implements accessibility patterns, always ensure that the usage context (such as labeling, focus management) complies with accessibility best practices.\n\u2022 asChild Prop: Use the asChild prop when you need more granular control over your element\u2019s styles or semantic markup. When using asChild, ensure that your custom element maintains the accessibility role and behavior.\n\u2022 Modularity: This component is part of a UI kit aimed at consistency across your alert dialogs. Avoid overriding core functionalities unless you are customizing component styling for a very specific need.\n\u2022 Limitations: Since the component passes through properties from DrawerPrimitive.Description, any limitations or bugs in the underlying primitive might affect this component.\n\u2022 Imports: As emphasized, always import the component from '@worldcoin/mini-apps-ui-kit-react' to maintain consistency and proper dependency management, especially in larger projects.\n\n\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\nOverall\n\nThe AlertDialogDescription component acts as a styled wrapper for dialog description text while leveraging underlying accessibility features of the DrawerPrimitive. It can be easily integrated into your alert dialog flow to provide additional context to users, and its flexibility (using the asChild option) makes it adaptable to custom styling requirements while adhering to best practices."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogTriggerProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Trigger> {\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n}\n\n/**\n * Props for the AlertDialogTrigger component\n */",
    "explanation": "Below is a concise explanation of the provided code snippet:\n\n1. What It Does/Represents:\n\u2003\u2022 The interface AlertDialogTriggerProps defines the properties for an AlertDialog trigger component in a React application.  \n\u2003\u2022 It extends the props of an underlying component (DrawerPrimitive.Trigger), meaning it inherits all its props without ref.  \n\u2003\u2022 It adds an additional optional property, asChild, which lets the consumer choose to render the trigger element without the default styling provided by the base component.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 You would typically have an AlertDialog component (or similar) that uses this interface for its trigger element.\n\u2003\u2022 Example use includes importing the component from the UI kit and then using it to wrap a button or any clickable element.\n\u2003\u2022 Here is an example:\n\n------------------------------------------------------------\nimport React from 'react';\nimport { AlertDialogTrigger } from '@worldcoin/mini-apps-ui-kit-react';\nimport { Button } from '@worldcoin/mini-apps-ui-kit-react';\n\nexport const MyAlertDialogExample = () => {\n  return (\n    // If you want to use a custom styled element as trigger,\n    // set asChild to true and then wrap your custom element.\n    <AlertDialogTrigger asChild>\n      <Button>Open Alert Dialog</Button>\n    </AlertDialogTrigger>\n  );\n};\n------------------------------------------------------------\n\u2003\u2022 In this example, the Button from '@worldcoin/mini-apps-ui-kit-react' is used as the alert dialog trigger with custom styling (if needed).\n\n3. Best Practices and Limitations:\n\u2003\u2022 When extending components (as is done with DrawerPrimitive.Trigger), ensure that consumers are aware of the inherited props so they can use or override them as needed.\n\u2003\u2022 The asChild prop is useful if you need custom styling or behavior, but when using it, ensure that the child component properly accepts and forwards any props (like ref) expected by the underlying trigger.\n\u2003\u2022 Always import from '@worldcoin/mini-apps-ui-kit-react' to maintain consistency and to follow your project\u2019s module resolution practices.\n\u2003\u2022 Test the component in different scenarios (with and without asChild) to verify that styling and behavior meet expectations.\n\u2003\u2022 Pay attention to accessibility issues (keyboard and screen reader interactions) for any interactive elements such as the AlertDialog trigger.\n\nThis explanation summarizes what the interface represents, how to integrate it into a larger application, and considerations for its proper use."
  },
  {
    "file_path": "/Users/bryanborck/Desktop/Zap/mini-apps-ui-kit/packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts",
    "code_snippet": "export interface AlertDialogCloseProps\n  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Close> {\n  /** Whether to render the trigger without default styling */\n  asChild?: boolean;\n}",
    "explanation": "1. What It Does/Represents:\n\u2003\u2022 This code defines a TypeScript interface, AlertDialogCloseProps, which extends the props of a base component (specifically, DrawerPrimitive.Close).  \n\u2003\u2022 It represents the properties for an AlertDialogClose component\u2014a component typically used to render a closing trigger (like a button or clickable element) inside an alert dialog.  \n\u2003\u2022 The optional asChild property allows you to render the trigger without the default styling, passing the children element through so you can customize it if needed.\n\n2. How to Use It in a Larger Application:\n\u2003\u2022 Import the AlertDialogClose component from the UI kit package.  \n\u2003\u2022 Pass in any additional props supported by DrawerPrimitive.Close, and optionally set asChild to true if you want to use a custom element for the close trigger.\n\nExample Usage:\n-----------------------------------------------------\nimport React from 'react';\nimport { AlertDialog, AlertDialogContent, AlertDialogClose } from '@worldcoin/mini-apps-ui-kit-react';\n\nconst ExampleAlertDialog = () => (\n  <AlertDialog>\n    <AlertDialogContent>\n      <p>This is an example alert dialog</p>\n      {/* With default styling */}\n      <AlertDialogClose>Close</AlertDialogClose>\n      \n      {/* With custom element as the trigger */}\n      <AlertDialogClose asChild>\n        <span style={{ cursor: 'pointer', color: 'red' }}>Custom Close Icon</span>\n      </AlertDialogClose>\n    </AlertDialogContent>\n  </AlertDialog>\n);\n\nexport default ExampleAlertDialog;\n-----------------------------------------------------\n\n3. Best Practices and Limitations:\n\u2003\u2022 Best Practices:\n\u2003\u2003\u2013 Always import components from '@worldcoin/mini-apps-ui-kit-react' to ensure consistency and compatibility with the kit.\n\u2003\u2003\u2013 Utilize the asChild prop to integrate custom styling or elements when the default styling does not meet your requirements.\n\u2003\u2003\u2013 Leverage TypeScript\u2019s type extension to benefit from autocompletion and type checking for any props inherited from DrawerPrimitive.Close.\n\u2003\u2022 Limitations:\n\u2003\u2003\u2013 Since AlertDialogCloseProps extends properties from DrawerPrimitive.Close, any changes or limitations in DrawerPrimitive.Close will impact AlertDialogClose.\n\u2003\u2003\u2013 Customizing with asChild requires careful attention to ensure that the custom element behaves as a valid trigger (including managing focus and accessibility).\n\nThis concise explanation should help you understand what the component represents, how to use it, and the associated best practices."
  }
]