DOCUMENT
SOURCE: unknown
CONTENT:
Directory structure:
└── worldcoin-mini-apps-ui-kit/
    ├── .nvmrc
    ├── .prettierrc
    ├── examples/
    │   └── nextjs/
    │       ├── README.md
    │       ├── LICENSE.md
    │       ├── next.config.ts
    │       ├── package.json
    │       ├── postcss.config.mjs
    │       ├── tailwind.config.ts
    │       ├── tsconfig.json
    │       ├── .eslintrc.json
    │       ├── .gitignore
    │       └── app/
    │           ├── globals.css
    │           ├── layout.tsx
    │           └── page.tsx
    ├── packages/
    │   └── mini-apps-ui-kit-react/
    │       ├── README.md
    │       ├── CHANGELOG.md
    │       ├── eslint.config.js
    │       ├── LICENSE.md
    │       ├── package.json
    │       ├── tailwind.config.ts
    │       ├── tsconfig.app.json
    │       ├── tsconfig.json
    │       ├── tsconfig.lib.json
    │       ├── tsconfig.node.json
    │       ├── vite.config.ts
    │       ├── .gitignore
    │       ├── @types/
    │       │   └── images.d.ts
    │       ├── public/
    │       │   ├── fonts/
    │       │   │   ├── TWKLausanne-350.woff
    │       │   │   ├── TWKLausanne-350Italic.woff
    │       │   │   ├── TWKLausanne-500.woff
    │       │   │   ├── TWKLausanne-500Italic.woff
    │       │   │   ├── TWKLausanne-600.woff
    │       │   │   └── TWKLausanne-600Italic.woff
    │       │   └── images/
    │       │       └── marbles/
    │       ├── src/
    │       │   ├── CHANGELOG.md
    │       │   ├── index.ts
    │       │   ├── components/
    │       │   │   ├── AlertDialog/
    │       │   │   │   ├── AlertDialog.tsx
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── types.ts
    │       │   │   │   └── use-alert-dialog.tsx
    │       │   │   ├── BottomBar/
    │       │   │   │   ├── BottomBar.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── BulletList/
    │       │   │   │   ├── BulletList.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── BulletListItem/
    │       │   │   │   ├── BulletListItem.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── BulletPoint/
    │       │   │   │   ├── BulletPoint.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── Button/
    │       │   │   │   ├── Button.tsx
    │       │   │   │   └── index.tsx
    │       │   │   ├── Checkbox/
    │       │   │   │   ├── Checkbox.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── Chip/
    │       │   │   │   ├── Chip.tsx
    │       │   │   │   └── index.tsx
    │       │   │   ├── ClearButton/
    │       │   │   │   ├── Clear.tsx
    │       │   │   │   ├── ClearButton.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── ColorPicker/
    │       │   │   │   ├── ColorPicker.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── CountryDrawer/
    │       │   │   │   ├── CountryDrawer.tsx
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── useCountryFiltering.ts
    │       │   │   │   └── useCountryGrouping.ts
    │       │   │   ├── Drawer/
    │       │   │   │   ├── Drawer.tsx
    │       │   │   │   ├── index.tsx
    │       │   │   │   ├── types.ts
    │       │   │   │   └── use-drawer.ts
    │       │   │   ├── Flag/
    │       │   │   │   ├── constants.ts
    │       │   │   │   ├── Flag.tsx
    │       │   │   │   ├── index.tsx
    │       │   │   │   ├── LazyFlag.tsx
    │       │   │   │   ├── utils.ts
    │       │   │   │   └── flag-components/
    │       │   │   │       ├── ad.tsx
    │       │   │   │       ├── ae.tsx
    │       │   │   │       ├── af.tsx
    │       │   │   │       ├── ag.tsx
    │       │   │   │       ├── ai.tsx
    │       │   │   │       ├── al.tsx
    │       │   │   │       ├── am.tsx
    │       │   │   │       ├── ao.tsx
    │       │   │   │       ├── ar.tsx
    │       │   │   │       ├── as.tsx
    │       │   │   │       ├── at.tsx
    │       │   │   │       ├── au.tsx
    │       │   │   │       ├── aw.tsx
    │       │   │   │       ├── ax.tsx
    │       │   │   │       ├── az.tsx
    │       │   │   │       ├── ba.tsx
    │       │   │   │       ├── bb.tsx
    │       │   │   │       ├── bd.tsx
    │       │   │   │       ├── be.tsx
    │       │   │   │       ├── bf.tsx
    │       │   │   │       ├── bg.tsx
    │       │   │   │       ├── bh.tsx
    │       │   │   │       ├── bi.tsx
    │       │   │   │       ├── bj.tsx
    │       │   │   │       ├── bl.tsx
    │       │   │   │       ├── bm.tsx
    │       │   │   │       ├── bn.tsx
    │       │   │   │       ├── bo.tsx
    │       │   │   │       ├── bq.tsx
    │       │   │   │       ├── br.tsx
    │       │   │   │       ├── bs.tsx
    │       │   │   │       ├── bt.tsx
    │       │   │   │       ├── bw.tsx
    │       │   │   │       ├── by.tsx
    │       │   │   │       ├── bz.tsx
    │       │   │   │       ├── ca.tsx
    │       │   │   │       ├── cc.tsx
    │       │   │   │       ├── cd.tsx
    │       │   │   │       ├── cf.tsx
    │       │   │   │       ├── cg.tsx
    │       │   │   │       ├── ch.tsx
    │       │   │   │       ├── ci.tsx
    │       │   │   │       ├── ck.tsx
    │       │   │   │       ├── cl.tsx
    │       │   │   │       ├── cm.tsx
    │       │   │   │       ├── cn.tsx
    │       │   │   │       ├── co.tsx
    │       │   │   │       ├── cr.tsx
    │       │   │   │       ├── cu.tsx
    │       │   │   │       ├── cv.tsx
    │       │   │   │       ├── cw.tsx
    │       │   │   │       ├── cy.tsx
    │       │   │   │       ├── cz.tsx
    │       │   │   │       ├── de.tsx
    │       │   │   │       ├── dj.tsx
    │       │   │   │       ├── dk.tsx
    │       │   │   │       ├── dm.tsx
    │       │   │   │       ├── do.tsx
    │       │   │   │       ├── dz.tsx
    │       │   │   │       ├── ec.tsx
    │       │   │   │       ├── ee.tsx
    │       │   │   │       ├── eg.tsx
    │       │   │   │       ├── er.tsx
    │       │   │   │       ├── es.tsx
    │       │   │   │       ├── et.tsx
    │       │   │   │       ├── eu.tsx
    │       │   │   │       ├── fi.tsx
    │       │   │   │       ├── fj.tsx
    │       │   │   │       ├── fk.tsx
    │       │   │   │       ├── fm.tsx
    │       │   │   │       ├── fo.tsx
    │       │   │   │       ├── fr.tsx
    │       │   │   │       ├── ga.tsx
    │       │   │   │       ├── gb.tsx
    │       │   │   │       ├── gd.tsx
    │       │   │   │       ├── ge.tsx
    │       │   │   │       ├── gg.tsx
    │       │   │   │       ├── gh.tsx
    │       │   │   │       ├── gi.tsx
    │       │   │   │       ├── gl.tsx
    │       │   │   │       ├── gm.tsx
    │       │   │   │       ├── gn.tsx
    │       │   │   │       ├── gp.tsx
    │       │   │   │       ├── gq.tsx
    │       │   │   │       ├── gr.tsx
    │       │   │   │       ├── gt.tsx
    │       │   │   │       ├── gu.tsx
    │       │   │   │       ├── gw.tsx
    │       │   │   │       ├── gy.tsx
    │       │   │   │       ├── hk.tsx
    │       │   │   │       ├── hn.tsx
    │       │   │   │       ├── hr.tsx
    │       │   │   │       ├── ht.tsx
    │       │   │   │       ├── hu.tsx
    │       │   │   │       ├── id.tsx
    │       │   │   │       ├── ie.tsx
    │       │   │   │       ├── il.tsx
    │       │   │   │       ├── im.tsx
    │       │   │   │       ├── in.tsx
    │       │   │   │       ├── index.ts
    │       │   │   │       ├── io.tsx
    │       │   │   │       ├── iq.tsx
    │       │   │   │       ├── ir.tsx
    │       │   │   │       ├── is.tsx
    │       │   │   │       ├── it.tsx
    │       │   │   │       ├── je.tsx
    │       │   │   │       ├── jm.tsx
    │       │   │   │       ├── jo.tsx
    │       │   │   │       ├── jp.tsx
    │       │   │   │       ├── ke.tsx
    │       │   │   │       ├── kg.tsx
    │       │   │   │       ├── kh.tsx
    │       │   │   │       ├── ki.tsx
    │       │   │   │       ├── km.tsx
    │       │   │   │       ├── kp.tsx
    │       │   │   │       ├── kr.tsx
    │       │   │   │       ├── kw.tsx
    │       │   │   │       ├── ky.tsx
    │       │   │   │       ├── kz.tsx
    │       │   │   │       ├── la.tsx
    │       │   │   │       ├── lb.tsx
    │       │   │   │       ├── lc.tsx
    │       │   │   │       ├── li.tsx
    │       │   │   │       ├── lk.tsx
    │       │   │   │       ├── lr.tsx
    │       │   │   │       ├── ls.tsx
    │       │   │   │       ├── lt.tsx
    │       │   │   │       ├── lu.tsx
    │       │   │   │       ├── lv.tsx
    │       │   │   │       ├── ly.tsx
    │       │   │   │       ├── ma.tsx
    │       │   │   │       ├── mc.tsx
    │       │   │   │       ├── md.tsx
    │       │   │   │       ├── me.tsx
    │       │   │   │       ├── mg.tsx
    │       │   │   │       ├── mh.tsx
    │       │   │   │       ├── mk.tsx
    │       │   │   │       ├── ml.tsx
    │       │   │   │       ├── mm.tsx
    │       │   │   │       ├── mn.tsx
    │       │   │   │       ├── mo.tsx
    │       │   │   │       ├── mp.tsx
    │       │   │   │       ├── mq.tsx
    │       │   │   │       ├── mr.tsx
    │       │   │   │       ├── ms.tsx
    │       │   │   │       ├── mt.tsx
    │       │   │   │       ├── mu.tsx
    │       │   │   │       ├── mv.tsx
    │       │   │   │       ├── mw.tsx
    │       │   │   │       ├── mx.tsx
    │       │   │   │       ├── my.tsx
    │       │   │   │       ├── mz.tsx
    │       │   │   │       ├── na.tsx
    │       │   │   │       ├── ne.tsx
    │       │   │   │       ├── nf.tsx
    │       │   │   │       ├── ng.tsx
    │       │   │   │       ├── ni.tsx
    │       │   │   │       ├── nl.tsx
    │       │   │   │       ├── no.tsx
    │       │   │   │       ├── np.tsx
    │       │   │   │       ├── nr.tsx
    │       │   │   │       ├── nu.tsx
    │       │   │   │       ├── nz.tsx
    │       │   │   │       ├── om.tsx
    │       │   │   │       ├── pa.tsx
    │       │   │   │       ├── pe.tsx
    │       │   │   │       ├── pf.tsx
    │       │   │   │       ├── pg.tsx
    │       │   │   │       ├── ph.tsx
    │       │   │   │       ├── pk.tsx
    │       │   │   │       ├── pl.tsx
    │       │   │   │       ├── pn.tsx
    │       │   │   │       ├── pr.tsx
    │       │   │   │       ├── ps.tsx
    │       │   │   │       ├── pt.tsx
    │       │   │   │       ├── pw.tsx
    │       │   │   │       ├── py.tsx
    │       │   │   │       ├── qa.tsx
    │       │   │   │       ├── ro.tsx
    │       │   │   │       ├── rs.tsx
    │       │   │   │       ├── ru.tsx
    │       │   │   │       ├── rw.tsx
    │       │   │   │       ├── sa.tsx
    │       │   │   │       ├── sb.tsx
    │       │   │   │       ├── sc.tsx
    │       │   │   │       ├── sd.tsx
    │       │   │   │       ├── se.tsx
    │       │   │   │       ├── sg.tsx
    │       │   │   │       ├── si.tsx
    │       │   │   │       ├── sk.tsx
    │       │   │   │       ├── sl.tsx
    │       │   │   │       ├── sm.tsx
    │       │   │   │       ├── sn.tsx
    │       │   │   │       ├── so.tsx
    │       │   │   │       ├── sr.tsx
    │       │   │   │       ├── ss.tsx
    │       │   │   │       ├── st.tsx
    │       │   │   │       ├── sv.tsx
    │       │   │   │       ├── sx.tsx
    │       │   │   │       ├── sy.tsx
    │       │   │   │       ├── sz.tsx
    │       │   │   │       ├── tc.tsx
    │       │   │   │       ├── td.tsx
    │       │   │   │       ├── tg.tsx
    │       │   │   │       ├── th.tsx
    │       │   │   │       ├── tj.tsx
    │       │   │   │       ├── tk.tsx
    │       │   │   │       ├── tl.tsx
    │       │   │   │       ├── tm.tsx
    │       │   │   │       ├── tn.tsx
    │       │   │   │       ├── to.tsx
    │       │   │   │       ├── tr.tsx
    │       │   │   │       ├── tt.tsx
    │       │   │   │       ├── tv.tsx
    │       │   │   │       ├── tw.tsx
    │       │   │   │       ├── tz.tsx
    │       │   │   │       ├── ua.tsx
    │       │   │   │       ├── ug.tsx
    │       │   │   │       ├── us.tsx
    │       │   │   │       ├── uy.tsx
    │       │   │   │       ├── uz.tsx
    │       │   │   │       ├── va.tsx
    │       │   │   │       ├── vc.tsx
    │       │   │   │       ├── ve.tsx
    │       │   │   │       ├── vg.tsx
    │       │   │   │       ├── vn.tsx
    │       │   │   │       ├── vu.tsx
    │       │   │   │       ├── ws.tsx
    │       │   │   │       ├── xk.tsx
    │       │   │   │       ├── ye.tsx
    │       │   │   │       ├── za.tsx
    │       │   │   │       ├── zm.tsx
    │       │   │   │       └── zw.tsx
    │       │   │   ├── Form/
    │       │   │   │   ├── Form.tsx
    │       │   │   │   └── index.ts
    │       │   │   ├── Icons/
    │       │   │   │   ├── ArrowDown.tsx
    │       │   │   │   ├── Eye.tsx
    │       │   │   │   ├── EyeClosed.tsx
    │       │   │   │   ├── Fail.tsx
    │       │   │   │   ├── MagicWand.tsx
    │       │   │   │   ├── Magnifier.tsx
    │       │   │   │   ├── Success.tsx
    │       │   │   │   ├── Tick.tsx
    │       │   │   │   └── XMark.tsx
    │       │   │   ├── Input/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Input.tsx
    │       │   │   ├── ListItem/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── ListItem.tsx
    │       │   │   ├── Marble/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Marble.tsx
    │       │   │   ├── NumberPad/
    │       │   │   │   ├── Delete.tsx
    │       │   │   │   ├── index.ts
    │       │   │   │   └── NumberPad.tsx
    │       │   │   ├── OTPField/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── OTPField.tsx
    │       │   │   ├── PasswordField/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── PasswordField.tsx
    │       │   │   ├── PasteButton/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── PasteButton.tsx
    │       │   │   ├── PhoneField/
    │       │   │   │   ├── constants.ts
    │       │   │   │   ├── CountryListItem.tsx
    │       │   │   │   ├── CountrySelectorButton.tsx
    │       │   │   │   ├── GroupedCountryList.tsx
    │       │   │   │   ├── index.tsx
    │       │   │   │   ├── PhoneField.tsx
    │       │   │   │   └── utils.ts
    │       │   │   ├── Pill/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Pill.tsx
    │       │   │   ├── Progress/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Progress.tsx
    │       │   │   ├── RadioGroup/
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── RadioGroup.tsx
    │       │   │   │   └── RadioGroupItem.tsx
    │       │   │   ├── SearchField/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── SearchField.tsx
    │       │   │   ├── Select/
    │       │   │   │   ├── index.tsx
    │       │   │   │   └── Select.tsx
    │       │   │   ├── Spinner/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Spinner.tsx
    │       │   │   ├── Switch/
    │       │   │   │   ├── index.tsx
    │       │   │   │   └── Switch.tsx
    │       │   │   ├── Tabs/
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── Tabs.tsx
    │       │   │   │   └── types.ts
    │       │   │   ├── TextArea/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── TextArea.tsx
    │       │   │   ├── Toast/
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── Toast.tsx
    │       │   │   │   ├── Toaster.tsx
    │       │   │   │   └── use-toast.tsx
    │       │   │   ├── ToggleGroup/
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── ToggleGroup.tsx
    │       │   │   │   └── types.ts
    │       │   │   ├── Token/
    │       │   │   │   ├── index.ts
    │       │   │   │   ├── Token.tsx
    │       │   │   │   └── icons/
    │       │   │   │       ├── btc.tsx
    │       │   │   │       ├── dai.tsx
    │       │   │   │       ├── eth.tsx
    │       │   │   │       ├── index.ts
    │       │   │   │       ├── types.ts
    │       │   │   │       ├── usdc.tsx
    │       │   │   │       ├── usdt.tsx
    │       │   │   │       ├── utils.ts
    │       │   │   │       └── wld.tsx
    │       │   │   ├── TopBar/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── TopBar.tsx
    │       │   │   ├── Typography/
    │       │   │   │   ├── index.ts
    │       │   │   │   └── Typography.tsx
    │       │   │   └── WalletAddressField/
    │       │   │       ├── index.ts
    │       │   │       └── WalletAddressField.tsx
    │       │   ├── lib/
    │       │   │   ├── utils.ts
    │       │   │   └── constants/
    │       │   │       └── dropdownStyles.ts
    │       │   └── tailwind/
    │       │       └── index.ts
    │       ├── stories/
    │       │   ├── AlertDialog.stories.tsx
    │       │   ├── BottomBar.stories.tsx
    │       │   ├── BulletList.stories.tsx
    │       │   ├── Button.stories.tsx
    │       │   ├── Checkbox.stories.tsx
    │       │   ├── Chip.stories.tsx
    │       │   ├── ColorPicker.stories.tsx
    │       │   ├── CountryDrawer.stories.tsx
    │       │   ├── Drawer.stories.tsx
    │       │   ├── Flag.stories.tsx
    │       │   ├── Form.stories.tsx
    │       │   ├── Input.stories.tsx
    │       │   ├── ListItem.stories.tsx
    │       │   ├── Marble.stories.tsx
    │       │   ├── mdx.d.ts
    │       │   ├── NumberPad.stories.tsx
    │       │   ├── OTPField.stories.tsx
    │       │   ├── PasswordField.stories.tsx
    │       │   ├── PhoneField.stories.tsx
    │       │   ├── Pill.stories.tsx
    │       │   ├── Progress.stories.tsx
    │       │   ├── RadioGroup.stories.tsx
    │       │   ├── SearchField.stories.tsx
    │       │   ├── Select.stories.tsx
    │       │   ├── Switch.stories.tsx
    │       │   ├── Tabs.stories.tsx
    │       │   ├── TextArea.stories.tsx
    │       │   ├── Toast.stories.tsx
    │       │   ├── ToggleGroup.stories.tsx
    │       │   ├── Token.stories.tsx
    │       │   ├── TopBar.stories.tsx
    │       │   ├── Typography.mdx
    │       │   ├── Typography.stories.tsx
    │       │   ├── WalletAddressField.stories.tsx
    │       │   ├── documentation/
    │       │   │   ├── Colors.mdx
    │       │   │   ├── Icons.mdx
    │       │   │   ├── Spacing.mdx
    │       │   │   ├── components/
    │       │   │   │   ├── Color.tsx
    │       │   │   │   ├── Section.tsx
    │       │   │   │   └── TypographyListItem.tsx
    │       │   │   └── static/
    │       │   │       └── spacing/
    │       │   └── helpers/
    │       │       ├── icon-control.tsx
    │       │       └── icons/
    │       │           ├── Apps.tsx
    │       │           ├── CircleSpark.tsx
    │       │           ├── Contacts.tsx
    │       │           ├── CountryCode.tsx
    │       │           ├── Shield.tsx
    │       │           ├── SparkIcon.tsx
    │       │           ├── Star.tsx
    │       │           ├── Switch.tsx
    │       │           ├── Wallet.tsx
    │       │           └── WorldID.tsx
    │       ├── styles/
    │       │   └── globals.css
    │       └── .storybook/
    │           ├── main.ts
    │           ├── manager.ts
    │           ├── preview-head.html
    │           ├── preview.css
    │           ├── preview.ts
    │           └── theme.ts
    ├── .changeset/
    │   └── config.json
    └── .github/
        └── workflows/
            ├── release.yml
            └── relyance-sci.yml

================================================
File: .nvmrc
================================================
v22.11.0


================================================
File: .prettierrc
================================================
{
  "singleQuote": false,
  "trailingComma": "all",
  "semi": true,
  "printWidth": 96,
  "tailwindFunctions": [
    "clsx",
    "cva"
  ],
  "importOrder": [
    "^(@|[a-zA-Z])(.*)$",
    "^[./]"
  ],
  "importOrderSeparation": true,
  "importOrderSortSpecifiers": true,
  "plugins": [
    "prettier-plugin-tailwindcss",
    "@trivago/prettier-plugin-sort-imports"
  ]
}


================================================
File: examples/nextjs/README.md
================================================
# Mini Apps UI Kit - Next.js Example

This is an example [Next.js](https://nextjs.org) application showcasing the implementation and usage of the `@worldcoin/mini-apps-ui-kit-react` package. This project demonstrates how to integrate and utilize the UI components in a real-world Next.js application.

## Features

- 🎨 Modern, responsive UI components
- 🚀 Built with Next.js 14
- 🎯 TypeScript support

## Prerequisites

- Node.js 18.17 or later
- pnpm (recommended), npm, yarn, or bun

## Getting Started

1. Clone the repository
2. Navigate to the example directory:
   ```bash
   cd examples/nextjs
   ```
3. Install dependencies:
   ```bash
   pnpm install
   ```
4. Start the development server:
   ```bash
   pnpm dev
   # or
   npm run dev
   # or
   yarn dev
   # or
   bun dev
   ```
5. Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

## Setting up the UI Kit

To use the `@worldcoin/mini-apps-ui-kit-react` in your Next.js application, follow these steps:

1. **Import Required Fonts**

   In your `app/layout.tsx`, import and configure the required fonts:

   ```typescript
   import { DM_Mono, Rubik, Sora } from "next/font/google";

   const rubik = Rubik({
     subsets: ["latin"],
     weight: ["300", "400", "500", "600", "700", "800", "900"],
     style: ["normal", "italic"],
     variable: "--font-sans",
   });

   const sora = Sora({
     subsets: ["latin"],
     weight: ["100", "200", "300", "400", "500", "600", "700", "800"],
     variable: "--font-display",
   });

   const dmMono = DM_Mono({
     weight: ["300", "400", "500"],
     subsets: ["latin"],
     variable: "--font-mono",
   });
   ```

   Apply the fonts in your layout's HTML:

   ```typescript
   <html lang="en" className={`${rubik.className} ${sora.className} ${dmMono.className}`}>
   ```

2. **Import UI Kit Styles**

   Add the UI Kit's CSS by importing it in your `app/layout.tsx`:

   ```typescript
   import "@worldcoin/mini-apps-ui-kit-react/styles.css";
   ```

3. **Configure Tailwind**

   Update your `tailwind.config.ts` to include the UI Kit's plugin:

   ```typescript
   import { uiKitTailwindPlugin } from "@worldcoin/mini-apps-ui-kit-react";

   export default {
     // ... other config options
     plugins: [uiKitTailwindPlugin],
   };
   ```

   Make sure your content array includes the UI Kit's path:

   ```typescript
   content: [
     // ... other paths
     "./node_modules/mini-apps-ui-kit/**/*.{js,ts,jsx,tsx}",
   ],
   ```

## Available Components

The UI Kit provides a variety of components that you can use in your application. Check out the main documentation for a complete list of components and their usage.



================================================
File: examples/nextjs/LICENSE.md
================================================
MIT License

Copyright (c) 2025 Tools for Humanity

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: examples/nextjs/next.config.ts
================================================
/* eslint-disable @typescript-eslint/no-require-imports */
import type { NextConfig } from "next";

const nextConfig: NextConfig = {
  /* config options here */
  transpilePackages: ["mini-apps-ui-kit/react"],
};

export default nextConfig;



================================================
File: examples/nextjs/package.json
================================================
{
  "name": "@worldcoin/mini-apps-ui-kit-example-nextjs",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@worldcoin/mini-apps-ui-kit-react": "workspace:*",
    "react": "19.0.0-rc-66855b96-20241106",
    "react-dom": "19.0.0-rc-66855b96-20241106"
  },
  "devDependencies": {
    "@types/node": "^20",
    "@types/react": "^18",
    "@types/react-dom": "^18",
    "eslint": "^8",
    "eslint-config-next": "15.0.3",
    "postcss": "^8",
    "tailwindcss": "^3.4.1",
    "typescript": "^5"
  }
}


================================================
File: examples/nextjs/postcss.config.mjs
================================================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;



================================================
File: examples/nextjs/tailwind.config.ts
================================================
import { uiKitTailwindPlugin } from "@worldcoin/mini-apps-ui-kit-react";
import type { Config } from "tailwindcss";

export default {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx,mdx}",
    "./components/**/*.{js,ts,jsx,tsx,mdx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
    "./node_modules/mini-apps-ui-kit/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        background: "var(--background)",
        foreground: "var(--foreground)",
      },
    },
  },
  plugins: [uiKitTailwindPlugin],
} satisfies Config;



================================================
File: examples/nextjs/tsconfig.json
================================================
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}



================================================
File: examples/nextjs/.eslintrc.json
================================================
{
  "extends": ["next/core-web-vitals", "next/typescript"]
}



================================================
File: examples/nextjs/.gitignore
================================================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts



================================================
File: examples/nextjs/app/globals.css
================================================
@tailwind base;
@tailwind components;
@tailwind utilities;

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  color: var(--foreground);
  background: var(--background);
  font-family: Arial, Helvetica, sans-serif;
}



================================================
File: examples/nextjs/app/layout.tsx
================================================
import { Toaster } from "@worldcoin/mini-apps-ui-kit-react";
import "@worldcoin/mini-apps-ui-kit-react/styles.css";
import type { Metadata } from "next";
import { DM_Mono, Rubik, Sora } from "next/font/google";

import "./globals.css";

const rubik = Rubik({
  subsets: ["latin"],
  weight: ["300", "400", "500", "600", "700", "800", "900"],
  style: ["normal", "italic"],
  variable: "--font-sans",
});

const sora = Sora({
  subsets: ["latin"],
  weight: ["100", "200", "300", "400", "500", "600", "700", "800"],
  variable: "--font-display",
});

const dmMono = DM_Mono({
  weight: ["300", "400", "500"],
  subsets: ["latin"],
  variable: "--font-mono",
});

export const metadata: Metadata = {
  title: "Create Next App",
  description: "Generated by create next app",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" className={`${rubik.className} ${sora.className} ${dmMono.className}`}>
      <body>{children}</body>
      <Toaster />
    </html>
  );
}



================================================
File: examples/nextjs/app/page.tsx
================================================
"use client";

import {
  Button,
  Checkbox,
  Chip,
  ColorPickerGroup,
  ColorPickerItem,
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerTrigger,
  Flag,
  Input,
  ListItem,
  NumberPad,
  OTPField,
  PhoneField,
  Pill,
  RadioGroup,
  RadioGroupItem,
  SearchField,
  Select,
  Switch,
  Token,
  Typography,
  useToast,
} from "@worldcoin/mini-apps-ui-kit-react";

export default function Home() {
  const { toast } = useToast();
  return (
    <div className="min-h-screen p-8">
      <Typography variant="heading" level={1} className="mb-8">
        Mini Apps UI Kit Components
      </Typography>

      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8">
        {/* Buttons Section */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Buttons
          </Typography>
          <div className="space-y-2">
            <Button>Default Button</Button>
            <Button variant="tertiary">Ghost Button</Button>
          </div>
        </section>

        {/* Input Fields Section */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Input Fields
          </Typography>
          <Input />
          <SearchField label="Search..." />
          <PhoneField />
        </section>

        {/* Form Elements Section */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Form Elements
          </Typography>
          <Switch />
          <RadioGroup>
            <RadioGroupItem value="1">Option 1</RadioGroupItem>
            <RadioGroupItem value="2">Option 2</RadioGroupItem>
          </RadioGroup>
          <Checkbox id="checkbox-1" />
        </section>

        {/* Interactive Elements */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Interactive Elements
          </Typography>
          <OTPField maxLength={6} />
          <NumberPad />
        </section>

        {/* Display Elements */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Display Elements
          </Typography>
          <div className="flex gap-2 flex-wrap">
            <Pill>Default Pill</Pill>
            <Chip label="Sample Chip" />
            <Token value="BTC" />
            <Token value="USDC" />
            <Token value="WLD" />
            <Flag countryCode="US" />
          </div>
        </section>

        {/* Color and Selection */}
        <section className="space-y-4">
          <Typography variant="heading" level={2}>
            Color & Selection
          </Typography>
          <ColorPickerGroup>
            <ColorPickerItem value="#FF0000" />
            <ColorPickerItem value="#000" />
            <ColorPickerItem value="#FF00FF" />
            <ColorPickerItem value="#0000FF" />
          </ColorPickerGroup>
          <Select
            options={[
              { label: "Option 1", value: "1" },
              { label: "Option 2", value: "2" },
            ]}
            onChange={(value) => console.log(value)}
          />
        </section>
      </div>

      {/* Drawer Example */}
      <Drawer>
        <DrawerTrigger>
          <Button>Open Drawer</Button>
        </DrawerTrigger>
        <DrawerContent className="flex flex-col items-center pb-4">
          <Typography variant="heading" level={3}>
            Drawer title
          </Typography>
          <Typography className="p-4">Drawer content</Typography>
          <DrawerClose>
            <div className="p-4">
              <Typography>Drawer Content</Typography>
              <ListItem>List Item Example</ListItem>
            </div>
          </DrawerClose>
        </DrawerContent>
      </Drawer>

      {/* Toast Example */}
      <Button
        onClick={() =>
          toast.success({
            title: '"Hello, World!"',
          })
        }
      >
        Show toast
      </Button>
    </div>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/README.md
================================================
# @worldcoin/mini-apps-ui-kit-react

React components UI Kit library for Mini Apps

> **⚠️ Security Notice**: This library has not been reviewed for security vulnerabilities. Use in production environments is discouraged until a security audit has been completed.

## Getting Started

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react/README.md) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs**/**vite-plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Tailwind **Configuration**

- `./**styles**/globals.css`: is the main entrypoint for the tailwind css styles
- `./public/globals.css`: compiled tailwind css styles
- `./src/tailwind`: tailwind plugin with uiKit tailwind presets

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type aware lint rules:

- Configure the top-level `parserOptions` property like this:

```js
export default tseslint.config({
  languageOptions: {
    // other options...
    parserOptions: {
      project: ["./tsconfig.node.json", "./tsconfig.app.json"],
      tsconfigRootDir: import.meta.dirname,
    },
  },
});
```

- Replace `tseslint.configs.recommended` to `tseslint.configs.recommendedTypeChecked` or `tseslint.configs.strictTypeChecked`
- Optionally add `...tseslint.configs.stylisticTypeChecked`
- Install [eslint-plugin-react](https://github.com/jsx-eslint/eslint-plugin-react) and update the config:

```js
// eslint.config.js
import react from "eslint-plugin-react";

export default tseslint.config({
  // Set the react version
  settings: { react: { version: "18.3" } },
  plugins: {
    // Add the react plugin
    react,
  },
  rules: {
    // other rules...
    // Enable its recommended rules
    ...react.configs.recommended.rules,
    ...react.configs["jsx-runtime"].rules,
  },
});
```

## Font Configuration

The library uses the following font **[TWK Lausanne](https://weltkern.com/typefaces/lausanne)** as the sans-serif font for all text `(--font-sans)`. 

> **⚠️ License Notice**: TWK Lausanne is a commercial font that requires a license. Make sure you have obtained the appropriate license from [Weltkern](https://weltkern.com/typefaces/lausanne) before using it in your project.

By default, the library sets `--font-sans` to **TWK Lausanne**, but you can override this CSS variable to use any other font of your choice:

```css
:root {
  --font-sans: 'Your Font Name', sans-serif;
}
```

You must import the font in your application before using it. The library does not include the font files - you need to handle the font loading yourself according to your license agreement.

## Importing Styles

To use the UI Kit components with their proper styling, you need to import the styles in your application. Add the following import statement to your application's entry point (e.g., `app/layout.tsx` for Next.js or `main.tsx` for Vite):

```typescript
import "@worldcoin/mini-apps-ui-kit-react/styles.css";
```

## Import Methods

The library supports two different import methods:

### Default Import

Import components from the main entry point:

```typescript
import { Button } from "@worldcoin/mini-apps-ui-kit-react";
```

This method is simpler but includes all components in your bundle, even if you're not using them.

### Component-Level Import

Import components directly from their individual modules:

```typescript
import { Button } from "@worldcoin/mini-apps-ui-kit-react/Button";
```

This method enables tree-shaking and reduces your final bundle size by only including the components you actually use. Recommended for production applications where bundle size is a concern.

## Icons

The library uses [Iconoir](https://iconoir.com/) for its icon system. To use icons in your project, you'll need to install the [React package](https://www.npmjs.com/package/iconoir-react):

```bash
npm install iconoir-react
# or
yarn add iconoir-react
```

Then you can import and use icons in your components:

```jsx
import { Home } from 'iconoir-react';

function MyComponent() {
  return <Home width={24} height={24} />;
}
```

Iconoir provides a comprehensive set of 1,600+ unique SVG icons, designed on a 24x24 pixels grid. The icons are:
- 100% free and open source
- Available in SVG, React, React Native, Flutter, Figma and Framer
- Optimized for performance
- Customizable with different sizes, colors, and styles

You can browse the complete icon set at [iconoir.com](https://iconoir.com/).

Iconoir is available under the MIT License. Please refer to their [website](https://iconoir.com/) for more details. 


================================================
File: packages/mini-apps-ui-kit-react/CHANGELOG.md
================================================
# @worldcoin/mini-apps-ui-kit-react

## 1.0.0

### Minor Changes

- Remove Typography `mono` variant
- Remove PhoneField `hideDialCode`, `placeholder` and `countrySelector` props.
- Replace the Button `isLoading` prop with `state`
- Remove Tailwind fonts `-mono` and `-display`
- Remove ListItem `variant` prop
- Add Typography `label` and `display` variants
- Add AlertDialog component
- Add PasswordField component
- Add BulletList component
- Add Spinner component
- Replace SearchField `placeholder` with `label`
- Add BottomBar component
- Add Drawer `height` prop for fit and full page size.
- Add TextArea component
- Add Progress component
- b465d6a: Update color palette
- Add Toast component
- Remove the Button `icon` prop. The Button now accepts icons in children.
- Add Button `icon` size.
- Replace Input `placeholder` prop with `label`.
- Remove the Button `md` size.
- Add Token `variant` support.
- Add CountryDrawer component
- Add Tabs component
- Remove the Button `ghost` variant.
- Remove the Button `radius` prop.
- Add TopBar component
- Add WalletAddressField
- Add Marble component
- Add Toast component
- Add Input variants: default and floating label.
- Add ToggleGroup component

### Patch Changes

- Update styles for Typography
- Add client directive to SearchField
- Add support for transparency color utility classes
- Add EU flag support
- Allow decimals in NumberPad

## 0.0.8

### Patch Changes

- e30fd26: Add client directive to SearchField

## 0.0.7

### Patch Changes

- Set correct color in Select chevron icon
- Add clear button to SearchField

## 0.0.6

### Patch Changes

- Set default input type for PhoneField to `tel`
- Fix type for optional props in `Typography`

## 0.0.5

### Patch Changes

- Fix Typography component type definitions

## 0.0.4

### Patch Changes

- Added `onLongDeletePress` prop to `NumberPad` component to handle long press on the delete button.
- Added `longPressOptions` prop to `NumberPad` component to customize long press behavior.

## 0.0.3

### Patch Changes

- Allow customization of countries in PhoneField via the `countries` prop.



================================================
File: packages/mini-apps-ui-kit-react/eslint.config.js
================================================
import js from "@eslint/js";
import globals from "globals";
import reactHooks from "eslint-plugin-react-hooks";
import reactRefresh from "eslint-plugin-react-refresh";
import tseslint from "typescript-eslint";
import react from "eslint-plugin-react";

export default tseslint.config(
  { ignores: ["dist"] },
  {
    extends: [
      js.configs.recommended,
      ...tseslint.configs.recommendedTypeChecked,
      ...tseslint.configs.stylisticTypeChecked,
      "plugin:storybook/recommended",
    ],
    settings: { react: { version: "18.3" } },
    files: ["**/*.{ts,tsx}"],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
      project: ["./tsconfig.node.json", "./tsconfig.app.json"],
      tsconfigRootDir: import.meta.dirname,
    },
    plugins: {
      "react-hooks": reactHooks,
      "react-refresh": reactRefresh,
      react,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      ...react.configs.recommended.rules,
      ...react.configs["jsx-runtime"].rules,
      "react-refresh/only-export-components": [
        "warn",
        { allowConstantExport: true },
      ],
    },
  },
);



================================================
File: packages/mini-apps-ui-kit-react/LICENSE.md
================================================
MIT License

Copyright (c) 2025 Tools for Humanity

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.



================================================
File: packages/mini-apps-ui-kit-react/package.json
================================================
{
  "name": "@worldcoin/mini-apps-ui-kit-react",
  "version": "1.0.0-canary.4",
  "type": "module",
  "main": "dist/index.js",
  "types": "dist/index.d.ts",
  "files": [
    "dist",
    "public"
  ],
  "exports": {
    ".": {
      "types": "./dist/index.d.ts",
      "default": "./dist/index.js"
    },
    "./Button": {
      "types": "./dist/components/Button/index.d.ts",
      "default": "./dist/components/Button/index.js"
    },
    "./BulletList": {
      "types": "./dist/components/BulletList/index.d.ts",
      "default": "./dist/components/BulletList/index.js"
    },
    "./BulletListItem": {
      "types": "./dist/components/BulletListItem/index.d.ts",
      "default": "./dist/components/BulletListItem/index.js"
    },
    "./BulletPoint": {
      "types": "./dist/components/BulletPoint/index.d.ts",
      "default": "./dist/components/BulletPoint/index.js"
    },
    "./Checkbox": {
      "types": "./dist/components/Checkbox/index.d.ts",
      "default": "./dist/components/Checkbox/index.js"
    },
    "./Chip": {
      "types": "./dist/components/Chip/index.d.ts",
      "default": "./dist/components/Chip/index.js"
    },
    "./ColorPicker": {
      "types": "./dist/components/ColorPicker/index.d.ts",
      "default": "./dist/components/ColorPicker/index.js"
    },
    "./Drawer": {
      "types": "./dist/components/Drawer/index.d.ts",
      "default": "./dist/components/Drawer/index.js"
    },
    "./Flag": {
      "types": "./dist/components/Flag/index.d.ts",
      "default": "./dist/components/Flag/index.js"
    },
    "./Form": {
      "types": "./dist/components/Form/index.d.ts",
      "default": "./dist/components/Form/index.js"
    },
    "./Input": {
      "types": "./dist/components/Input/index.d.ts",
      "default": "./dist/components/Input/index.js"
    },
    "./ListItem": {
      "types": "./dist/components/ListItem/index.d.ts",
      "default": "./dist/components/ListItem/index.js"
    },
    "./NumberPad": {
      "types": "./dist/components/NumberPad/index.d.ts",
      "default": "./dist/components/NumberPad/index.js"
    },
    "./OTPField": {
      "types": "./dist/components/OTPField/index.d.ts",
      "default": "./dist/components/OTPField/index.js"
    },
    "./Pill": {
      "types": "./dist/components/Pill/index.d.ts",
      "default": "./dist/components/Pill/index.js"
    },
    "./RadioGroup": {
      "types": "./dist/components/RadioGroup/index.d.ts",
      "default": "./dist/components/RadioGroup/index.js"
    },
    "./RadioGroupItem": {
      "types": "./dist/components/RadioGroup/index.d.ts",
      "default": "./dist/components/RadioGroup/index.js"
    },
    "./Select": {
      "types": "./dist/components/Select/index.d.ts",
      "default": "./dist/components/Select/index.js"
    },
    "./SearchField": {
      "types": "./dist/components/SearchField/index.d.ts",
      "default": "./dist/components/SearchField/index.js"
    },
    "./PhoneField": {
      "types": "./dist/components/PhoneField/index.d.ts",
      "default": "./dist/components/PhoneField/index.js"
    },
    "./Switch": {
      "types": "./dist/components/Switch/index.d.ts",
      "default": "./dist/components/Switch/index.js"
    },
    "./Token": {
      "types": "./dist/components/Token/index.d.ts",
      "default": "./dist/components/Token/index.js"
    },
    "./Typography": {
      "types": "./dist/components/Typography/index.d.ts",
      "default": "./dist/components/Typography/index.js"
    },
    "./Spinner": {
      "types": "./dist/components/Spinner/index.d.ts",
      "default": "./dist/components/Spinner/index.js"
    },
    "./Toast": {
      "types": "./dist/components/Toast/index.d.ts",
      "default": "./dist/components/Toast/index.js"
    },
    "./Progress": {
      "types": "./dist/components/Progress/index.d.ts",
      "default": "./dist/components/Progress/index.js"
    },
    "./TextArea": {
      "types": "./dist/components/TextArea/index.d.ts",
      "default": "./dist/components/TextArea/index.js"
    },
    "./WalletAddressField": {
      "types": "./dist/components/WalletAddressField/index.d.ts",
      "default": "./dist/components/WalletAddressField/index.js"
    },
    "./AlertDialog": {
      "types": "./dist/components/AlertDialog/index.d.ts",
      "default": "./dist/components/AlertDialog/index.js"
    },
    "./BottomBar": {
      "types": "./dist/components/BottomBar/index.d.ts",
      "default": "./dist/components/BottomBar/index.js"
    },
    "./TopBar": {
      "types": "./dist/components/TopBar/index.d.ts",
      "default": "./dist/components/TopBar/index.js"
    },
    "./Marble": {
      "types": "./dist/components/Marble/index.d.ts",
      "default": "./dist/components/Marble/index.js"
    },
    "./CountryDrawer": {
      "types": "./dist/components/CountryDrawer/index.d.ts",
      "default": "./dist/components/CountryDrawer/index.js"
    },
    "./ToggleGroup": {
      "types": "./dist/components/ToggleGroup/index.d.ts",
      "default": "./dist/components/ToggleGroup/index.js"
    },
    "./ToggleGroupItem": {
      "types": "./dist/components/ToggleGroup/index.d.ts",
      "default": "./dist/components/ToggleGroup/index.js"
    },
    "./Tabs": {
      "types": "./dist/components/Tabs/index.d.ts",
      "default": "./dist/components/Tabs/index.js"
    },
    "./TabItem": {
      "types": "./dist/components/TabItem/index.d.ts",
      "default": "./dist/components/TabItem/index.js"
    },
    "./tailwind": {
      "types": "./dist/tailwind/index.d.ts",
      "default": "./dist/tailwind/index.js"
    },
    "./styles.css": "./public/globals.css"
  },
  "scripts": {
    "storybook": "storybook dev -p 6006",
    "format": "prettier --write \"**/*.{ts,tsx,md}\"",
    "sb:move": "mv ./storybook-static ../../storybook-static",
    "dev:sb": "concurrently \"tailwindcss -i ./styles/globals.css -o ./public/globals.css --watch\" \"pnpm storybook\"",
    "build:tailwind": "tailwindcss -i ./styles/globals.css -o ./public/globals.css --minify",
    "build:sb": "pnpm build:tailwind && storybook build",
    "build": "pnpm build:tailwind && tsc -b ./tsconfig.lib.json && vite build",
    "lint": "eslint .",
    "publish": "pnpm build && npm publish --access public"
  },
  "peerDependencies": {
    "react": "^18 || ^19",
    "react-dom": "^18 || ^19",
    "tailwindcss": "^3"
  },
  "peerDependenciesMeta": {
    "tailwindcss": {
      "optional": true
    }
  },
  "devDependencies": {
    "@chromatic-com/storybook": "^3.2.2",
    "@eslint/js": "^9.13.0",
    "@storybook/addon-essentials": "^8.4.7",
    "@storybook/addon-interactions": "^8.4.7",
    "@storybook/addon-onboarding": "^8.4.7",
    "@storybook/blocks": "^8.4.7",
    "@storybook/manager-api": "^8.5.5",
    "@storybook/react": "^8.4.7",
    "@storybook/react-vite": "^8.4.7",
    "@storybook/test": "^8.4.7",
    "@storybook/theming": "^8.5.5",
    "@types/glob": "^8.1.0",
    "@types/react": "^18.3.12",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.3",
    "concurrently": "^9.1.0",
    "eslint": "^9.13.0",
    "eslint-plugin-react": "^7.37.2",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.14",
    "eslint-plugin-storybook": "^0.11.1",
    "glob": "^11.0.0",
    "globals": "^15.11.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "rollup-preserve-directives": "^1.1.3",
    "storybook": "^8.4.7",
    "tailwindcss": "^3.4.15",
    "tailwindcss-animate": "^1.0.7",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.11.0",
    "vite": ">=5.4.12",
    "vite-plugin-dts": "^4.3.0"
  },
  "dependencies": {
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-form": "^0.1.0",
    "@radix-ui/react-progress": "^1.1.2",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-switch": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.6",
    "@radix-ui/react-toggle-group": "^1.1.2",
    "@uidotdev/usehooks": "^2.4.1",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "countries-list": "^3.1.1",
    "input-otp": "^1.4.1",
    "react-international-phone": "^4.3.0",
    "tailwind-merge": "^2.5.5",
    "vaul": "^1.1.2"
  },
  "description": "React components UI Kit library for Mini Apps",
  "author": "",
  "license": "ISC"
}


================================================
File: packages/mini-apps-ui-kit-react/tailwind.config.ts
================================================
import type { Config } from "tailwindcss";

import uiKitTailwindPlugin from "./src/tailwind";

const config: Config = {
  content: [
    "./src/**/*.{html,js,ts,jsx,tsx}",
    "./stories/**/*.{html,js,ts,jsx,tsx}",
    "./.storybook/**/*.{js,ts,jsx,tsx}",
    "./stories/**/*.{mdx,md}",
  ],
  plugins: [uiKitTailwindPlugin, require("tailwindcss-animate")],
};

export default config;



================================================
File: packages/mini-apps-ui-kit-react/tsconfig.app.json
================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    // "declaration": true,
    // "declarationMap": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    // "noUncheckedSideEffectImports": true,

    // Alias
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"]
    }
  },
  "include": ["src", "stories", "@types"]
}



================================================
File: packages/mini-apps-ui-kit-react/tsconfig.json
================================================
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" },
    { "path": "./tsconfig.lib.json" }
  ]
}



================================================
File: packages/mini-apps-ui-kit-react/tsconfig.lib.json
================================================
{
  "extends": "./tsconfig.app.json",
  "include": ["src"]
}



================================================
File: packages/mini-apps-ui-kit-react/tsconfig.node.json
================================================
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "Bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts", ".storybook"]
}



================================================
File: packages/mini-apps-ui-kit-react/vite.config.ts
================================================
import react from "@vitejs/plugin-react";
import { glob } from "glob";
import { resolve } from "path";
import preserveDirectives from "rollup-preserve-directives";
import { defineConfig } from "vite";
import dts from "vite-plugin-dts";

// https://vite.dev/config/
export default defineConfig({
  plugins: [
    react(),
    dts({
      tsconfigPath: resolve(__dirname, "tsconfig.lib.json"),
    }),
    preserveDirectives(),
  ],
  resolve: {
    alias: {
      "@": resolve(__dirname, "./src"),
    },
  },
  build: {
    // sourcemap: true,
    minify: true,
    copyPublicDir: false,
    lib: {
      entry: resolve(__dirname, "src/index.ts"),
      formats: ["es"],
      name: "@worldcoin/mini-apps-ui-kit-react",
    },
    rollupOptions: {
      external: ["react", "react-dom", "react/jsx-runtime", "tailwindcss"],
      input: Object.fromEntries([
        ["index", resolve(__dirname, "src/index.ts")],
        ["tailwind/index", resolve(__dirname, "src/tailwind/index.ts")],
        ...glob
          .sync("src/components/**/*.{ts,tsx}")
          .map((file) => [file.slice(4).replace(/\.(ts|tsx)$/, ""), resolve(__dirname, file)]),
      ]),
      output: {
        // Ensure each entry point creates its own directory
        preserveModules: true,
        preserveModulesRoot: "src",
        entryFileNames: "[name].js",
      },
    },
  },
});



================================================
File: packages/mini-apps-ui-kit-react/.gitignore
================================================
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?

*storybook.log
storybook-static



================================================
File: packages/mini-apps-ui-kit-react/@types/images.d.ts
================================================
declare module "*.png" {
  const content: string;
  export default content;
}

declare module "*.svg" {
  const content: string;
  export default content;
}



================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-350.woff
================================================
[Non-text file]


================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-350Italic.woff
================================================
[Non-text file]


================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-500.woff
================================================
[Non-text file]


================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-500Italic.woff
================================================
[Non-text file]


================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-600.woff
================================================
[Non-text file]


================================================
File: packages/mini-apps-ui-kit-react/public/fonts/TWKLausanne-600Italic.woff
================================================
[Non-text file]



================================================
File: packages/mini-apps-ui-kit-react/src/CHANGELOG.md
================================================
# Changelog

All notable changes to this project will be documented in this file.

The format is based on [Keep a Changelog](https://keepachangelog.com/en/1.1.0/),
and this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).

## [Unreleased]

### Added

-

## 0.0.1 - 2025-01-10

### Added

- Button component
- Checkbox component
- Chip component
- ColorPicker component
- Drawer component
- Flag component
- Form component
- Input component
- ListItem component
- NumberPad component
- OTPField component
- PhoneField component
- Pill component
- RadioGroup component
- SearchField component
- Select component
- Switch component
- Token component
- Typography component
- Tailwind plugin



================================================
File: packages/mini-apps-ui-kit-react/src/index.ts
================================================
export * from "./components/Button";
export * from "./components/Checkbox";
export * from "./components/Chip";
export * from "./components/ColorPicker";
export * from "./components/Flag";
export * from "./components/Form";
export * from "./components/Input";
export * from "./components/ListItem";
export * from "./components/NumberPad";
export * from "./components/OTPField";
export * from "./components/Pill";
export * from "./components/RadioGroup";
export * from "./components/Select";
export * from "./components/SearchField";
export * from "./components/PhoneField";
export * from "./components/Spinner";
export * from "./components/Switch";
export * from "./components/Token";
export * from "./components/Toast";
export * from "./components/Typography";
export * from "./components/Drawer";
export * from "./components/Progress";
export * from "./components/TextArea";
export * from "./components/WalletAddressField";
export * from "./components/TextArea";
export * from "./components/AlertDialog";
export * from "./components/BottomBar";
export * from "./components/BulletList";
export * from "./components/BulletListItem";
export * from "./components/BulletPoint";
export * from "./components/Marble";
export * from "./components/TopBar";
export * from "./components/CountryDrawer";
export * from "./components/ToggleGroup";
export * from "./components/Tabs";

export { default as uiKitTailwindPlugin } from "./tailwind";



================================================
File: packages/mini-apps-ui-kit-react/src/components/AlertDialog/AlertDialog.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { BottomBar, BottomBarProps } from "../BottomBar";
import { Button } from "../Button";
import { XMark } from "../Icons/XMark";
import { Typography } from "../Typography";
import {
  AlertDialogCloseProps,
  AlertDialogContentProps,
  AlertDialogDescriptionProps,
  AlertDialogHeaderProps,
  AlertDialogProps,
  AlertDialogTitleProps,
  AlertDialogTriggerProps,
} from "./types";
import { AlertDialogContext, useAlertDialog } from "./use-alert-dialog";

const AlertDialog = ({ dismissible = true, modal = true, ...props }: AlertDialogProps) => (
  <AlertDialogContext.Provider value={{ dismissible }}>
    <DrawerPrimitive.Root
      shouldScaleBackground={false}
      dismissible={dismissible}
      modal={modal}
      {...props}
    />
  </AlertDialogContext.Provider>
);
AlertDialog.displayName = "AlertDialog";

const AlertDialogTrigger = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Trigger>,
  AlertDialogTriggerProps
>((props, ref) => <DrawerPrimitive.Trigger ref={ref} {...props} />);
AlertDialogTrigger.displayName = "AlertDialogTrigger";

const AlertDialogPortal = DrawerPrimitive.Portal;

const AlertDialogClose = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Close>,
  AlertDialogCloseProps
>((props, ref) => <DrawerPrimitive.Close ref={ref} {...props} />);
AlertDialogClose.displayName = "AlertDialogClose";

const AlertDialogContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  AlertDialogContentProps
>(({ className, children, ...props }, ref) => (
  <AlertDialogPortal>
    <DrawerPrimitive.Overlay
      ref={ref}
      className={cn("fixed inset-0 z-50 bg-gray-900/40", className)}
      {...props}
    />
    <DrawerPrimitive.Content
      ref={ref}
      className={cn("fixed inset-x-0 bottom-0 z-50 mt-24 h-auto", className)}
      {...props}
    >
      <div className="flex flex-col rounded-[1.75rem] bg-gray-0 m-3 p-8">{children}</div>
    </DrawerPrimitive.Content>
  </AlertDialogPortal>
));
AlertDialogContent.displayName = "AlertDialogContent";

const AlertDialogHeader = ({ icon, children, ...props }: AlertDialogHeaderProps) => {
  const { dismissible } = useAlertDialog();
  return (
    <div
      className={cn(
        "flex justify-between gap-4 mb-4 w-full",
        icon ? "items-start" : "items-center",
      )}
      {...props}
    >
      <div className="flex flex-col gap-6">
        {icon}
        {children}
      </div>
      {dismissible && (
        <div className="shrink-0">
          <AlertDialogClose asChild>
            <Button variant="tertiary" size="icon">
              <XMark />
            </Button>
          </AlertDialogClose>
        </div>
      )}
    </div>
  );
};
AlertDialogHeader.displayName = "AlertDialogHeader";

const AlertDialogFooter = (props: BottomBarProps) => <BottomBar {...props} />;
AlertDialogFooter.displayName = "AlertDialogFooter";

const AlertDialogTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  AlertDialogTitleProps
>(({ className, children, ...props }, ref) => (
  <DrawerPrimitive.Title ref={ref} {...props} asChild>
    <Typography variant="heading" level={2}>
      {children}
    </Typography>
  </DrawerPrimitive.Title>
));
AlertDialogTitle.displayName = "AlertDialogTitle";

const AlertDialogDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  AlertDialogDescriptionProps
>(({ className, children, ...props }, ref) => (
  <DrawerPrimitive.Description
    ref={ref}
    className={cn("text-gray-500 mb-8", className)}
    {...props}
    asChild
  >
    <Typography>{children}</Typography>
  </DrawerPrimitive.Description>
));
AlertDialogDescription.displayName = "AlertDialogDescription";

export {
  AlertDialog,
  AlertDialogPortal,
  AlertDialogTrigger,
  AlertDialogClose,
  AlertDialogContent,
  AlertDialogHeader,
  AlertDialogFooter,
  AlertDialogTitle,
  AlertDialogDescription,
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/AlertDialog/index.ts
================================================
export * from "./AlertDialog";



================================================
File: packages/mini-apps-ui-kit-react/src/components/AlertDialog/types.ts
================================================
import { Drawer as DrawerPrimitive } from "vaul";

export interface WithFadeFromProps {
  /**
   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.
   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.
   * You can also use px values, which doesn't take screen height into account.
   */
  snapPoints: (number | string)[];
  /**
   * Index of a `snapPoint` from which the overlay fade should be applied. Defaults to the last snap point.
   */
  fadeFromIndex: number;
}

export interface WithoutFadeFromProps {
  /**
   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.
   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.
   * You can also use px values, which doesn't take screen height into account.
   */
  snapPoints?: (number | string)[];
  fadeFromIndex?: never;
}

type BaseAlertDialogProps = {
  /** The active snap point */
  activeSnapPoint?: number | string | null;
  /** Callback when the active snap point changes */
  setActiveSnapPoint?: (snapPoint: number | string | null) => void;
  /** The content of the drawer */
  children?: React.ReactNode;
  /** Whether the drawer is open */
  open?: boolean;
  /**
   * Number between 0 and 1 that determines when the drawer should be closed.
   * Example: threshold of 0.5 would close the drawer if the user swiped for 50% of the height of the drawer or more.
   * @default 0.25
   */
  closeThreshold?: number;
  /**
   * Duration for which the drawer is not draggable after scrolling content inside of the drawer.
   * @default 500ms
   */
  scrollLockTimeout?: number;
  /**
   * When `true`, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open
   */
  fixed?: boolean;
  /**
   * When `true` only allows the drawer to be dragged by the `<AlertDialog.Handle />` component.
   * @default false
   */
  handleOnly?: boolean;
  /**
   * When `false` dragging, clicking outside, pressing esc, etc. will not close the drawer.
   * Use this in comination with the `open` prop, otherwise you won't be able to open/close the drawer.
   * @default true
   */
  dismissible?: boolean;
  /**
   * When `false` it allows to interact with elements outside of the drawer without closing it.
   * @default true
   */
  modal?: boolean;
  /**
   * Direction of the drawer. Can be `top` or `bottom`, `left`, `right`.
   * @default 'bottom'
   */
  direction?: "top" | "bottom" | "left" | "right";
  /**
   * Opened by default, skips initial enter animation. Still reacts to `open` state changes
   * @default false
   */
  defaultOpen?: boolean;
  /**
   * When set to `true` prevents scrolling on the document body on mount, and restores it on unmount.
   * @default false
   */
  disablePreventScroll?: boolean;
  /**
   * When `true` Vaul will reposition inputs rather than scroll then into view if the keyboard is in the way.
   * Setting it to `false` will fall back to the default browser behavior.
   * @default true when {@link snapPoints} is defined
   */
  repositionInputs?: boolean;
  /**
   * Disabled velocity based swiping for snap points.
   * This means that a snap point won't be skipped even if the velocity is high enough.
   * Useful if each snap point in a drawer is equally important.
   * @default false
   */
  snapToSequentialPoint?: boolean;
  /** The container element to render the drawer into */
  container?: HTMLElement | null;
  /** Whether to prevent scroll restoration */
  preventScrollRestoration?: boolean;
  /** Whether to auto focus the drawer when opened */
  autoFocus?: boolean;
  /** Callback when the open state changes */
  onOpenChange?: (open: boolean) => void;
  /** Callback when dragging */
  onDrag?: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;
  /** Callback when releasing */
  onRelease?: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;
  /** Callback when closing */
  onClose?: () => void;
  /**
   * Gets triggered after the open or close animation ends, it receives an `open` argument with the `open` state of the drawer by the time the function was triggered.
   * Useful to revert any state changes for example.
   */
  onAnimationEnd?: (open: boolean) => void;
};
/**
 * Props for the main AlertDialog component
 */
export type AlertDialogProps = BaseAlertDialogProps &
  (WithFadeFromProps | WithoutFadeFromProps);

/**
 * Props for the AlertDialogContent component
 */
export interface AlertDialogContentProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> {
  /** The content of the drawer */
  children?: React.ReactNode;
  /** Additional CSS classes to apply */
  className?: string;
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
  /** Whether to close the drawer when clicking outside */
  onCloseAutoFocus?: (event: Event) => void;
  /** Called when the escape key is pressed */
  onEscapeKeyDown?: (event: KeyboardEvent) => void;
  /** Called when pointer down occurs outside drawer */
  onPointerDownOutside?: (event: Event) => void;
  /** Called when drawer starts to close */
  onInteractOutside?: (event: Event) => void;
}

/**
 * Props for the AlertDialogHeader component
 */
export interface AlertDialogHeaderProps
  extends Omit<React.HTMLAttributes<HTMLDivElement>, "className"> {
  /** Optional icon to display in the header */
  icon?: React.ReactNode;
  children?: React.ReactNode;
}

/**
 * Props for the AlertDialogTitle component
 */
export interface AlertDialogTitleProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title> {
  children?: React.ReactNode;
  /** Whether to render the title without default styling */
  asChild?: boolean;
}

/**
 * Props for the AlertDialogDescription component
 */
export interface AlertDialogDescriptionProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description> {
  children?: React.ReactNode;
  /** Whether to render the description without default styling */
  asChild?: boolean;
}

/**
 * Props for the AlertDialogTrigger component
 */
export interface AlertDialogTriggerProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Trigger> {
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
}

/**
 * Props for the AlertDialogTrigger component
 */
export interface AlertDialogCloseProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Close> {
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/AlertDialog/use-alert-dialog.tsx
================================================
import { createContext, useContext } from "react";

interface AlertDialogContextValue {
  dismissible?: boolean;
}

const AlertDialogContext = createContext<AlertDialogContextValue | undefined>(undefined);

const useAlertDialog = () => {
  const context = useContext(AlertDialogContext);
  if (context === undefined) {
    throw new Error("useAlertDialog must be used within an AlertDialog");
  }
  return context;
};

export { AlertDialogContext, useAlertDialog };



================================================
File: packages/mini-apps-ui-kit-react/src/components/BottomBar/BottomBar.tsx
================================================
"use client";

import { type VariantProps, cva } from "class-variance-authority";
import { forwardRef } from "react";

const bottomBarVariants = cva("w-full gap-4", {
  variants: {
    direction: {
      horizontal: "grid grid-cols-1 [&>*]:col-span-1 [&:has(>*:nth-child(2))]:grid-cols-2",
      vertical: "flex flex-col-reverse",
    },
  },
  defaultVariants: {
    direction: "horizontal",
  },
});

export interface BottomBarProps
  extends Omit<React.HTMLAttributes<HTMLDivElement>, "className">,
    VariantProps<typeof bottomBarVariants> {
  /**
   * The direction of the bottom bar
   * @default "horizontal"
   */
  direction?: "horizontal" | "vertical";
}

export const BottomBar = forwardRef<HTMLDivElement, BottomBarProps>(
  ({ children, direction, ...props }, ref) => {
    return (
      <div ref={ref} className={bottomBarVariants({ direction })} {...props}>
        {children}
      </div>
    );
  },
);

BottomBar.displayName = "BottomBar";



================================================
File: packages/mini-apps-ui-kit-react/src/components/BottomBar/index.ts
================================================
export * from "./BottomBar";



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletList/BulletList.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentProps, ReactElement, forwardRef } from "react";

import { BulletListItemProps } from "../BulletListItem/BulletListItem";

export interface BulletListProps extends ComponentProps<"div"> {
  /**
   * Children should be BulletListItem components, but any ReactNode is accepted for compatibility
   */
  children: ReactElement<BulletListItemProps>[] | ReactElement<BulletListItemProps>;
}

export const BulletList = forwardRef<HTMLDivElement, BulletListProps>(
  ({ children, className, ...props }, ref) => {
    return (
      <div ref={ref} className={cn("grid gap-y-5 content-start", className)} {...props}>
        {children}
      </div>
    );
  },
);

BulletList.displayName = "BulletList";

export default BulletList;



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletList/index.ts
================================================
export * from "./BulletList";



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletListItem/BulletListItem.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentProps, ReactNode, forwardRef } from "react";

import { Typography } from "../Typography";

export interface BulletListItemProps extends ComponentProps<"div"> {
  children?: ReactNode;
  bulletPoint: ReactNode;
}

export const BulletListItem = forwardRef<HTMLDivElement, BulletListItemProps>(
  ({ children, className, bulletPoint, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={cn("grid grid-cols-[auto_1fr] gap-x-3 items-center", className)}
        {...props}
      >
        {bulletPoint}
        <Typography className="text-gray-500">{children}</Typography>
      </div>
    );
  },
);

BulletListItem.displayName = "BulletListItem";

export default BulletListItem;



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletListItem/index.ts
================================================
export * from "./BulletListItem";



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletPoint/BulletPoint.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentProps, ReactNode, forwardRef } from "react";

export interface BulletProps extends ComponentProps<"div"> {
  children?: ReactNode;
}

const BulletPoint = forwardRef<HTMLDivElement, BulletProps>(({ children, ...props }, ref) => {
  const { className, ...rest } = props;

  return (
    <div
      ref={ref}
      className={cn(
        "size-9 flex justify-center items-center rounded-full bg-gray-900",
        className,
      )}
      {...rest}
    >
      {children}
    </div>
  );
});

BulletPoint.displayName = "BulletPoint";

export default BulletPoint;



================================================
File: packages/mini-apps-ui-kit-react/src/components/BulletPoint/index.ts
================================================
export * from "./BulletPoint";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Button/Button.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import { ButtonHTMLAttributes, forwardRef } from "react";

import { Fail } from "../Icons/Fail";
import { Success } from "../Icons/Success";
import { Spinner } from "../Spinner";
import { typographyVariants } from "../Typography";

const buttonVariants = cva(
  "flex items-center justify-center rounded-full gap-2 font-sans leading-[1.2] tracking-normal transition-colors",
  {
    variants: {
      variant: {
        primary:
          "bg-gray-900 text-gray-0 hover:bg-gray-700 active:bg-gray-700 disabled:bg-gray-100 disabled:text-gray-300",
        secondary:
          "bg-transparent text-gray-900 border border-gray-200 hover:bg-gray-50 active:bg-gray-50 disabled:text-gray-300 disabled:border-gray-100",
        tertiary:
          "bg-gray-100 text-gray-900 hover:bg-gray-200 active:bg-gray-200 disabled:text-gray-300 disabled:bg-gray-50",
      },
      size: {
        sm: "h-10 min-w-10 px-4",
        lg: "h-14 min-w-14 px-4",
        icon: "size-10",
      },
      stateful: {
        true: "border-none bg-transparent fill-transparent text-transparent hover:bg-transparent active:bg-transparent disabled:bg-transparent disabled:text-transparent",
        false: "",
      },
      fullWidth: {
        true: "w-full",
        false: "",
      },
    },
    defaultVariants: {
      variant: "primary",
      size: "lg",
      fullWidth: false,
    },
  },
);

export interface ButtonProps
  extends ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  /**
   * The variant style to use
   * @default "primary"
   */
  variant?: "primary" | "secondary" | "tertiary";
  /**
   * The size of the button
   * @default "lg"
   */
  size?: "sm" | "lg" | "icon";
  /**
   * The state of the button
   * @default undefined
   */
  state?: "pending" | "success" | "failed";
  /**
   * Whether the button should take up the full width of its container
   * @default false
   */
  fullWidth?: boolean;
  /**
   * Whether the button should be rendered as a slot
   * @default false
   */
  asChild?: boolean;
}

export const Button = forwardRef<HTMLButtonElement, ButtonProps>(
  (
    { variant = "primary", size = "lg", fullWidth, asChild, state, children, ...props },
    ref,
  ) => {
    const Comp = asChild ? Slot : "button";

    const stateful = !!state;

    return (
      <Comp
        ref={ref}
        {...props}
        className={cn(
          buttonVariants({
            variant,
            size,
            stateful,
            fullWidth,
          }),
          typographyVariants({
            variant: "label",
            level: size === "lg" ? 1 : 2,
          }),
          props.className,
        )}
      >
        {!state && children}
        {state === "pending" && <Spinner className="absolute size-6" />}
        {state === "success" && <Success className="absolute size-6" />}
        {state === "failed" && <Fail className="absolute size-6" />}
      </Comp>
    );
  },
);

Button.displayName = "Button";

export default Button;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Button/index.tsx
================================================
export * from "./Button";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Checkbox/Checkbox.tsx
================================================
import * as RadixCheckbox from "@radix-ui/react-checkbox";
import { CheckboxProps as RadixCheckboxProps } from "@radix-ui/react-checkbox";
import { forwardRef } from "react";

import { Tick } from "../Icons/Tick";

export interface CheckboxProps
  extends Omit<RadixCheckboxProps, "onCheckedChange" | "onChange" | "className"> {
  /**
   * Whether to forward the root element
   * @default false
   */
  asChild?: boolean;

  /**
   * The initial checked state when the checkbox is uncontrolled
   */
  defaultChecked?: boolean;

  /**
   * The controlled checked state of the checkbox
   */
  checked?: boolean;

  /**
   * Event handler called when the checked state changes
   */
  onChange?: (checked: boolean) => void;

  /**
   * Whether the checkbox is disabled
   */
  disabled?: boolean;

  /**
   * Whether the checkbox is required
   */
  required?: boolean;

  /**
   * The name of the checkbox
   */
  name?: string;

  /**
   * The value of the checkbox
   * @default ""
   */
  value?: string;
}

export const Checkbox = forwardRef<HTMLButtonElement, CheckboxProps>(
  ({ checked, onChange: onCheckedChange, disabled = false, ...props }, ref) => {
    return (
      <RadixCheckbox.Root
        ref={ref}
        checked={checked}
        onCheckedChange={onCheckedChange}
        disabled={disabled}
        className="flex size-6 items-center justify-center rounded-md border-[0.09375rem] transition-all data-[state=checked]:border-gray-900 data-[state=checked]:bg-gray-900 data-[state=unchecked]:border-gray-200 data-[state=unchecked]:bg-transparent disabled:cursor-not-allowed disabled:opacity-20"
        {...props}
      >
        <RadixCheckbox.Indicator>
          <Tick className="text-gray-0" />
        </RadixCheckbox.Indicator>
      </RadixCheckbox.Root>
    );
  },
);

Checkbox.displayName = "Checkbox";

export default Checkbox;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Checkbox/index.ts
================================================
export * from "./Checkbox";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Chip/Chip.tsx
================================================
import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import { HTMLAttributes, ReactNode, forwardRef } from "react";

import { Typography } from "../Typography";

type ChipVariant = "default" | "success" | "warning" | "error" | "important";

export interface ChipProps extends HTMLAttributes<HTMLDivElement> {
  /**
   * The variant of the chip. Default value is "default".
   */
  variant?: ChipVariant;
  /**
   * The label text displayed on the chip.
   */
  label: string;
  /**
   * Optional icon to display alongside the label.
   */
  icon?: ReactNode;
  /**
   *  Optional additional CSS class names.
   */
  className?: string;
}

const chipVariants = cva(
  "inline-flex h-7 items-center gap-2 rounded-full px-4 font-sans text-sm font-medium leading-none",
  {
    variants: {
      variant: {
        default: "bg-gray-100 text-gray-900",
        success: "bg-success-100 text-success-700",
        warning: "bg-warning-100 text-warning-700",
        error: "bg-error-100 text-error-700",
        important: "bg-info-100 text-info-700",
      },
      isIcon: {
        true: "pl-3",
        false: "",
      },
    },
    defaultVariants: {
      variant: "default",
      isIcon: false,
    },
  },
);

export const Chip = forwardRef<HTMLDivElement, ChipProps & VariantProps<typeof chipVariants>>(
  ({ icon, label, variant = "default", className, ...props }, ref) => {
    return (
      <div
        ref={ref}
        className={chipVariants({ variant, className, isIcon: !!icon })}
        {...props}
      >
        {icon && <Slot style={{ width: "1rem", height: "1rem" }}>{icon}</Slot>}
        <Typography variant="subtitle" level={4}>
          {label}
        </Typography>
      </div>
    );
  },
);

Chip.displayName = "Chip";

export default Chip;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Chip/index.tsx
================================================
export * from "./Chip";



================================================
File: packages/mini-apps-ui-kit-react/src/components/ClearButton/Clear.tsx
================================================
import { cn } from "../../lib/utils";

interface ClearProps {
  /**
   * Additional CSS classes to apply to the Clear icon
   */
  className?: string;
}

export function Clear({ className }: ClearProps) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6", className)}
    >
      <path
        d="M6.75729 17.2426L11.9999 12M17.2426 6.75736L11.9999 12M11.9999 12L6.75729 6.75736M11.9999 12L17.2426 17.2426"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="square"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/ClearButton/ClearButton.tsx
================================================
import type { ButtonHTMLAttributes } from "react";
import * as React from "react";

import { cn } from "../../lib/utils";
import { Clear } from "./Clear";

interface ClearButtonProps extends ButtonHTMLAttributes<HTMLButtonElement> {
  /**
   * Reference to an input element that will receive the pasted text
   */
  inputRef: React.ForwardedRef<HTMLInputElement>;
  /**
   * Optional callback function that will be called after a successful paste
   */
  onClear?: () => void;
}

export const CLEAR_BUTTON_WIDTH = 1.25;

const ClearButton = React.forwardRef<HTMLButtonElement, ClearButtonProps>(
  ({ children, inputRef, className, onClear, ...props }, ref) => {
    const handleClear = (e: React.MouseEvent<HTMLButtonElement>) => {
      e.preventDefault();
      e.stopPropagation();

      if (inputRef && "current" in inputRef && inputRef.current) {
        inputRef.current.value = "";
        onClear?.();
      }
    };

    return (
      <button
        type="button"
        ref={ref}
        className={cn(className)}
        onMouseDown={handleClear}
        {...props}
      >
        <Clear />
      </button>
    );
  },
);

ClearButton.displayName = "ClearButton";

export default ClearButton;



================================================
File: packages/mini-apps-ui-kit-react/src/components/ClearButton/index.ts
================================================
export { default } from "./ClearButton";



================================================
File: packages/mini-apps-ui-kit-react/src/components/ColorPicker/ColorPicker.tsx
================================================
import * as RadioGroup from "@radix-ui/react-radio-group";
import { RadioGroupProps as RadixRadioGroupProps } from "@radix-ui/react-radio-group";
import { forwardRef } from "react";

interface ColorPickerItemProps extends Omit<RadioGroup.RadioGroupItemProps, "value"> {
  value: string;
}

interface ColorPickerGroupProps
  extends Omit<RadixRadioGroupProps, "value" | "onValueChange" | "onChange"> {
  /** The currently selected color value */
  value?: string;
  /** ColorPickerItem components to render as options */
  children: React.ReactNode;
  /** Callback fired when the selected color changes */
  onChange?: (value: string) => void;
}

export const ColorPickerItem = forwardRef<HTMLButtonElement, ColorPickerItemProps>(
  ({ value, ...props }, ref) => {
    return (
      <RadioGroup.Item
        ref={ref}
        value={value}
        className="size-[2.5rem] cursor-default rounded-full outline-none flex items-center justify-center relative disabled:opacity-90 disabled:cursor-not-allowed"
        style={{
          background: value,
        }}
        {...props}
      >
        <RadioGroup.Indicator
          className="absolute flex size-[2.75rem] items-center rounded-full justify-center"
          style={{ boxShadow: `0px 0px 0px 4px ${value}` }}
        />
      </RadioGroup.Item>
    );
  },
);

export const ColorPickerGroup = forwardRef<HTMLDivElement, ColorPickerGroupProps>(
  ({ value, onChange, children, ...props }, ref) => {
    return (
      <RadioGroup.Root
        ref={ref}
        value={value}
        onValueChange={onChange}
        className="flex gap-4 items-center"
        {...props}
      >
        {children}
      </RadioGroup.Root>
    );
  },
);

export default ColorPickerGroup;



================================================
File: packages/mini-apps-ui-kit-react/src/components/ColorPicker/index.ts
================================================
export * from "./ColorPicker";



================================================
File: packages/mini-apps-ui-kit-react/src/components/CountryDrawer/CountryDrawer.tsx
================================================
import { useRef, useState } from "react";

import { Button } from "../Button";
import { Drawer, DrawerClose, DrawerContent, DrawerTrigger } from "../Drawer";
import { CountryCode } from "../Flag";
import { XMark } from "../Icons/XMark";
import { GroupedCountryList } from "../PhoneField/GroupedCountryList";
import { SearchField } from "../SearchField";
import { TopBar } from "../TopBar";
import { useCountryFiltering } from "./useCountryFiltering";
import { useCountryGrouping } from "./useCountryGrouping";

interface CountryDrawerProps {
  value: CountryCode;
  countries?: CountryCode[];
  disabled?: boolean;
  defaultValue?: CountryCode;
  children: React.ReactNode;
  onChange: (countryCode: string) => void;
  onAnimationEnd?: (open: boolean) => void;
}

export function CountryDrawer({
  onChange,
  value,
  countries,
  onAnimationEnd,
  disabled = false,
  children,
  defaultValue = "US",
}: CountryDrawerProps) {
  const [searchText, setSearchText] = useState("");
  const [open, setOpen] = useState(false);
  const searchRef = useRef<HTMLInputElement>(null);

  const handleSearchChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    setSearchText(event.target.value);
  };

  const filteredCountries = useCountryFiltering({
    countries,
    searchText,
  });

  const groupedCountries = useCountryGrouping({
    countries: filteredCountries,
    defaultValue,
  });

  const handleCountrySelect = (countryCode: CountryCode) => {
    onChange(countryCode);
    setSearchText("");
    setOpen(false);
  };

  return (
    <Drawer open={open} onOpenChange={setOpen} onAnimationEnd={onAnimationEnd} height="full">
      <DrawerTrigger asChild className="outline-none" disabled={disabled}>
        {children}
      </DrawerTrigger>

      <DrawerContent>
        <TopBar
          title="Country"
          startAdornment={
            <DrawerClose asChild>
              <Button variant="tertiary" size="icon">
                <XMark />
              </Button>
            </DrawerClose>
          }
        />

        <div className="p-6">
          <SearchField
            ref={searchRef}
            value={searchText}
            onChange={handleSearchChange}
            autoFocus={open}
          />
        </div>

        <div className="no-scrollbar w-full overflow-auto px-6 h-full">
          <GroupedCountryList
            groupedCountries={groupedCountries}
            onSelect={handleCountrySelect}
            value={value}
          />
        </div>
      </DrawerContent>
    </Drawer>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/CountryDrawer/index.ts
================================================
export * from "./CountryDrawer";



================================================
File: packages/mini-apps-ui-kit-react/src/components/CountryDrawer/useCountryFiltering.ts
================================================
import { defaultCountries } from "react-international-phone";

import { CountryCode } from "../Flag";
import { filterCountries, getCountryDataListByCodes } from "../PhoneField/utils";

interface UseCountryFilteringProps {
  countries?: CountryCode[];
  searchText: string;
}

export function useCountryFiltering({ countries, searchText }: UseCountryFilteringProps) {
  const richCountries = countries ? getCountryDataListByCodes(countries) : defaultCountries;
  const filteredCountries = filterCountries(richCountries, searchText);

  return filteredCountries;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/CountryDrawer/useCountryGrouping.ts
================================================
import { parseCountry } from "react-international-phone";

import { CountryCode } from "../Flag";
import { getValidatedCountryCode } from "../PhoneField/utils";

interface GroupedCountries {
  [key: string]: {
    countryCode: CountryCode;
    name: string;
  }[];
}

interface UseCountryGroupingProps {
  countries: any[];
  defaultValue?: CountryCode;
}

export function useCountryGrouping({
  countries,
  defaultValue = "US",
}: UseCountryGroupingProps) {
  const groupedCountries = countries.reduce<GroupedCountries>((acc, country) => {
    const parsedCountry = parseCountry(country);
    const firstLetter = parsedCountry.name.charAt(0).toUpperCase();

    if (!acc[firstLetter]) {
      acc[firstLetter] = [];
    }

    acc[firstLetter].push({
      countryCode: getValidatedCountryCode(parsedCountry.iso2, defaultValue),
      name: parsedCountry.name,
    });

    return acc;
  }, {});

  return groupedCountries;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Drawer/Drawer.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import * as React from "react";
import { Drawer as DrawerPrimitive } from "vaul";

import { BottomBarProps } from "../BottomBar";
import { BottomBar } from "../BottomBar";
import { Button } from "../Button";
import { XMark } from "../Icons/XMark";
import { Typography } from "../Typography";
import {
  DrawerCloseProps,
  DrawerContentProps,
  DrawerDescriptionProps,
  DrawerHeaderProps,
  DrawerProps,
  DrawerTitleProps,
  DrawerTriggerProps,
} from "./types";
import { DrawerContext, useDrawer } from "./use-drawer";

/**
 * A drawer component that slides up from the bottom of the screen
 * @param props DrawerProps
 */
const Drawer = ({
  dismissible = true,
  height = "full",
  modal = true,
  ...props
}: DrawerProps) => (
  <DrawerContext.Provider value={{ dismissible, height }}>
    <DrawerPrimitive.Root
      shouldScaleBackground={false}
      dismissible={dismissible}
      modal={modal}
      direction="bottom"
      {...props}
    />
  </DrawerContext.Provider>
);
Drawer.displayName = "Drawer";

const DrawerTrigger = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Trigger>,
  DrawerTriggerProps
>((props, ref) => <DrawerPrimitive.Trigger ref={ref} {...props} />);

DrawerTrigger.displayName = DrawerPrimitive.Trigger.displayName;

const DrawerClose = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Close>,
  DrawerCloseProps
>((props, ref) => <DrawerPrimitive.Close ref={ref} {...props} />);

const DrawerOverlay = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>
>((props, ref) => (
  <DrawerPrimitive.Overlay ref={ref} className="fixed inset-0 z-50 bg-gray-900/40" {...props} />
));
DrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName;

/**
 * The content container of the drawer
 */
const DrawerContent = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Content>,
  DrawerContentProps
>((props, ref) => {
  const { height } = useDrawer();
  return (
    <DrawerPrimitive.Portal>
      <DrawerPrimitive.Overlay className="fixed inset-0 z-50">
        <div className="w-full h-full bg-gray-900 opacity-40" />
      </DrawerPrimitive.Overlay>

      <DrawerPrimitive.Content
        ref={ref}
        {...props}
        className={cn(
          "fixed inset-x-0 bottom-0 z-50 mt-24 bg-gray-0 outline-none",
          height === "full" ? "h-screen rounded-none" : "h-auto rounded-t-[1.75rem]",
          props.className,
        )}
      />
    </DrawerPrimitive.Portal>
  );
});
DrawerContent.displayName = "DrawerContent";

/**
 * The header section of the drawer
 */
const DrawerHeader = ({ icon, children, ...props }: DrawerHeaderProps) => {
  const { dismissible } = useDrawer();
  return (
    <div className="flex justify-between items-center gap-4 mb-2 w-full" {...props}>
      {dismissible && (
        <div className="shrink-0">
          <DrawerClose asChild>
            <Button variant="tertiary" size="icon">
              <XMark />
            </Button>
          </DrawerClose>
        </div>
      )}
      <div className="flex flex-col gap-6">{children}</div>
      {dismissible && <div className="shrink-0 size-10" />}
    </div>
  );
};
DrawerHeader.displayName = "DrawerHeader";

const DrawerFooter = (props: BottomBarProps) => <BottomBar {...props} />;
DrawerFooter.displayName = "DrawerFooter";

/**
 * The title component of the drawer
 */
const DrawerTitle = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Title>,
  DrawerTitleProps
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Title ref={ref} {...props} asChild>
    <Typography variant="subtitle" level={1}>
      {props.children}
    </Typography>
  </DrawerPrimitive.Title>
));
DrawerTitle.displayName = DrawerPrimitive.Title.displayName;

/**
 * The description component of the drawer
 */
const DrawerDescription = React.forwardRef<
  React.ElementRef<typeof DrawerPrimitive.Description>,
  DrawerDescriptionProps
>(({ className, ...props }, ref) => (
  <DrawerPrimitive.Description ref={ref} className="text-gray-500" {...props} asChild>
    <Typography variant="body" level={2}>
      {props.children}
    </Typography>
  </DrawerPrimitive.Description>
));
DrawerDescription.displayName = DrawerPrimitive.Description.displayName;

export { Drawer, DrawerTrigger, DrawerClose, DrawerContent, DrawerHeader, DrawerTitle };



================================================
File: packages/mini-apps-ui-kit-react/src/components/Drawer/index.tsx
================================================
export * from "./Drawer";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Drawer/types.ts
================================================
import { Drawer as DrawerPrimitive } from "vaul";

export interface WithFadeFromProps {
  /**
   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.
   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.
   * You can also use px values, which doesn't take screen height into account.
   */
  snapPoints: (number | string)[];
  /**
   * Index of a `snapPoint` from which the overlay fade should be applied. Defaults to the last snap point.
   */
  fadeFromIndex: number;
}

export interface WithoutFadeFromProps {
  /**
   * Array of numbers from 0 to 100 that corresponds to % of the screen a given snap point should take up.
   * Should go from least visible. Example `[0.2, 0.5, 0.8]`.
   * You can also use px values, which doesn't take screen height into account.
   */
  snapPoints?: (number | string)[];
  fadeFromIndex?: never;
}
type BaseDrawerProps = {
  /** Whether the drawer should take up the full page */
  height?: "full" | "fit";
  /** The active snap point */
  activeSnapPoint?: number | string | null;
  /** Callback when the active snap point changes */
  setActiveSnapPoint?: (snapPoint: number | string | null) => void;
  /** The content of the drawer */
  children?: React.ReactNode;
  /** Whether the drawer is open */
  open?: boolean;
  /**
   * Number between 0 and 1 that determines when the drawer should be closed.
   * Example: threshold of 0.5 would close the drawer if the user swiped for 50% of the height of the drawer or more.
   * @default 0.25
   */
  closeThreshold?: number;
  /**
   * Duration for which the drawer is not draggable after scrolling content inside of the drawer.
   * @default 500ms
   */
  scrollLockTimeout?: number;
  /**
   * When `true`, don't move the drawer upwards if there's space, but rather only change it's height so it's fully scrollable when the keyboard is open
   */
  fixed?: boolean;
  /**
   * When `false` dragging, clicking outside, pressing esc, etc. will not close the drawer.
   * Use this in comination with the `open` prop, otherwise you won't be able to open/close the drawer.
   * @default true
   */
  dismissible?: boolean;
  /**
   * When `false` it allows to interact with elements outside of the drawer without closing it.
   * @default true
   */
  modal?: boolean;
  /**
   * Direction of the drawer. Can be `top` or `bottom`, `left`, `right`.
   * @default 'bottom'
   */
  direction?: "top" | "bottom" | "left" | "right";
  /**
   * Opened by default, skips initial enter animation. Still reacts to `open` state changes
   * @default false
   */
  defaultOpen?: boolean;
  /**
   * When set to `true` prevents scrolling on the document body on mount, and restores it on unmount.
   * @default false
   */
  disablePreventScroll?: boolean;
  /**
   * When `true` Vaul will reposition inputs rather than scroll then into view if the keyboard is in the way.
   * Setting it to `false` will fall back to the default browser behavior.
   * @default true when {@link snapPoints} is defined
   */
  repositionInputs?: boolean;
  /**
   * Disabled velocity based swiping for snap points.
   * This means that a snap point won't be skipped even if the velocity is high enough.
   * Useful if each snap point in a drawer is equally important.
   * @default false
   */
  snapToSequentialPoint?: boolean;
  /** The container element to render the drawer into */
  container?: HTMLElement | null;
  /** Whether to prevent scroll restoration */
  preventScrollRestoration?: boolean;
  /** Whether to auto focus the drawer when opened */
  autoFocus?: boolean;
  /** Callback when the open state changes */
  onOpenChange?: (open: boolean) => void;
  /** Callback when dragging */
  onDrag?: (event: React.PointerEvent<HTMLDivElement>, percentageDragged: number) => void;
  /** Callback when releasing */
  onRelease?: (event: React.PointerEvent<HTMLDivElement>, open: boolean) => void;
  /** Callback when closing */
  onClose?: () => void;
  /**
   * Gets triggered after the open or close animation ends, it receives an `open` argument with the `open` state of the drawer by the time the function was triggered.
   * Useful to revert any state changes for example.
   */
  onAnimationEnd?: (open: boolean) => void;
};

/**
 * Props for the main Drawer component
 */
export type DrawerProps = BaseDrawerProps & (WithFadeFromProps | WithoutFadeFromProps);

/**
 * Props for the DrawerContent component
 */
export interface DrawerContentProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content> {
  /** The content of the drawer */
  children?: React.ReactNode;
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
  /** Whether to close the drawer when clicking outside */
  onCloseAutoFocus?: (event: Event) => void;
  /** Called when the escape key is pressed */
  onEscapeKeyDown?: (event: KeyboardEvent) => void;
  /** Called when pointer down occurs outside drawer */
  onPointerDownOutside?: (event: Event) => void;
  /** Called when drawer starts to close */
  onInteractOutside?: (event: Event) => void;
}

/**
 * Props for the DrawerHeader component
 */
export interface DrawerHeaderProps
  extends Omit<React.HTMLAttributes<HTMLDivElement>, "className"> {
  /** Optional icon to display in the header */
  icon?: React.ReactNode;
  children?: React.ReactNode;
}

/**
 * Props for the DrawerTitle component
 */
export interface DrawerTitleProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title> {
  children?: React.ReactNode;
  /** Whether to render the title without default styling */
  asChild?: boolean;
}

/**
 * Props for the DrawerDescription component
 */
export interface DrawerDescriptionProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description> {
  children?: React.ReactNode;
  /** Whether to render the description without default styling */
  asChild?: boolean;
}

/**
 * Props for the DrawerTrigger component
 */
export interface DrawerTriggerProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Trigger> {
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
}

/**
 * Props for the DrawerTrigger component
 */
export interface DrawerCloseProps
  extends React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Close> {
  /** Whether to render the trigger without default styling */
  asChild?: boolean;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Drawer/use-drawer.ts
================================================
import { createContext, useContext } from "react";

import { DrawerProps } from "./types";

interface DrawerContextValue {
  dismissible?: DrawerProps["dismissible"];
  height?: DrawerProps["height"];
}

const DrawerContext = createContext<DrawerContextValue | undefined>(undefined);

const useDrawer = () => {
  const context = useContext(DrawerContext);
  if (context === undefined) {
    throw new Error("useDrawer must be used within a Drawer");
  }
  return context;
};

export { DrawerContext, useDrawer };



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/constants.ts
================================================
import * as FlagComponents from "../Flag/flag-components";
import { CountryCode } from "./Flag";

export const countryCodes = Object.keys(FlagComponents).map((code) =>
  code.toUpperCase(),
) as CountryCode[];



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/Flag.tsx
================================================
import { forwardRef } from "react";

import * as FlagComponents from "./flag-components";

/* Unsupported countries:
 * - Antarctica (AQ)
 * - Bouvet Island (BV)
 * - Christmas Island (CX)
 * - Western Sahara (EH)
 * - French Guiana (GF)
 * - South Georgia and the South Sandwich Islands (GS)
 * - Heard Island and McDonald Islands (HM)
 * - Saint Kitts and Nevis (KN)
 * - Saint Martin (MF)
 * - New Caledonia (NC)
 * - Saint Pierre and Miquelon (PM)
 * - Reunion (RE)
 * - Saint Helena (SH)
 * - Svalbard and Jan Mayen (SJ)
 * - French Southern Territories (TF)
 * - U.S. Minor Outlying Islands (UM)
 * - U.S. Virgin Islands (VI)
 * - Wallis and Futuna (WF)
 * - Mayotte (YT)
 */
export type CountryCode = keyof typeof FlagComponents;
interface FlagProps {
  /**
   * ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')
   */
  countryCode: CountryCode;
  /**
   * Width and height in pixels for the flag SVG. Defaults to 40px if not specified.
   */
  size?: number;
}

export const Flag = forwardRef<SVGSVGElement, FlagProps>(({ countryCode, size = 40 }, ref) => {
  const Component = FlagComponents[countryCode];

  return <Component ref={ref} width={size} height={size} />;
});

Flag.displayName = "Flag";

export default Flag;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/index.tsx
================================================
export * from "./Flag";
export * from "./LazyFlag";
export { isSupportedCountryCode } from "./utils";
export type { CountryCode } from "./Flag";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/LazyFlag.tsx
================================================
import { cn } from "@/lib/utils";
import { Suspense, forwardRef, lazy } from "react";

interface FlagProps {
  /**
   * ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')
   */
  countryCode: string;
  /**
   * Width and height in pixels for the flag SVG.
   * Defaults to 40px if not specified.
   */
  size?: number;
}

const Placeholder = (props: Pick<FlagProps, "size"> & { className?: string }) => (
  <div
    className={cn("bg-gray-100 rounded-full animate-pulse", props.className)}
    style={{ width: props.size, height: props.size }}
  />
);

export const LazyFlag = forwardRef<SVGSVGElement, FlagProps>(
  ({ countryCode, size = 40 }, ref) => {
    const FlagComponent = lazy(() =>
      import(`./flag-components/${countryCode.toLowerCase()}.tsx`).catch(() => ({
        default: () => <Placeholder size={size} className="animate-none bg-gray-200" />,
      })),
    );

    return (
      <Suspense fallback={<Placeholder size={size} />}>
        <FlagComponent ref={ref} width={size} height={size} />
      </Suspense>
    );
  },
);

LazyFlag.displayName = "LazyFlag";

export default LazyFlag;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/utils.ts
================================================
import * as FlagComponents from "../Flag/flag-components";
import { CountryCode } from "./Flag";

export const isSupportedCountryCode = (code: string): code is CountryCode => {
  return Object.prototype.hasOwnProperty.call(FlagComponents, code.toUpperCase());
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ad.tsx
================================================
import React from "react";

const AD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7079)">
        <path
          d="M144.696 486.598C178.352 502.872 216.109 512 256 512C295.891 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402C333.648 9.128 295.891 0 256 0C216.109 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598Z"
          fill="#FFDA44"
        />
        <path
          d="M367.304 486.589C452.935 445.183 512 357.493 512 256C512 154.507 452.935 66.8171 367.304 25.4111V486.589Z"
          fill="#D80027"
        />
        <path
          d="M144.696 486.589V25.4111C59.065 66.8171 0 154.506 0 256C0 357.494 59.065 445.183 144.696 486.589Z"
          fill="#0052B4"
        />
        <path
          d="M256 345.043C256 304.192 256 256 256 256H322.783V289.391C322.783 295.192 311.653 316.448 284.18 333.913C273.775 340.529 263.004 342.657 256 345.043Z"
          fill="#D80027"
        />
        <path d="M189.217 189.217H256V256H189.217V189.217Z" fill="#D80027" />
        <path
          d="M289.391 166.957C289.391 154.662 279.424 144.696 267.13 144.696C263.07 144.696 259.276 145.8 256 147.698C252.723 145.8 248.93 144.696 244.87 144.696C232.576 144.696 222.609 154.662 222.609 166.957H166.957V278.26C166.957 319.696 199.863 343.659 225.668 356.081C223.737 359.379 222.609 363.206 222.609 367.305C222.609 379.6 232.576 389.566 244.87 389.566C248.93 389.566 252.724 388.462 256 386.564C259.277 388.462 263.07 389.566 267.13 389.566C279.424 389.566 289.391 379.6 289.391 367.305C289.391 363.206 288.263 359.379 286.331 356.081C312.136 343.659 345.043 319.697 345.043 278.26V166.957H289.391ZM311.652 278.26C311.652 284.061 311.652 301.712 284.18 319.178C273.774 325.794 263.004 330.084 256 332.469C248.996 330.084 238.226 325.794 227.82 319.178C200.348 301.712 200.348 284.061 200.348 278.26V200.348H311.652V278.26Z"
          fill="#FF9811"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7079">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ae.tsx
================================================
import React from "react";

const AE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7320)">
        <path
          d="M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z"
          fill="#F0F0F0"
        />
        <path
          d="M144.696 345.042L166.957 496.078C194.689 506.369 224.686 511.999 256 511.999C366.07 511.999 459.906 442.527 496.076 345.042H144.696Z"
          fill="black"
        />
        <path
          d="M144.696 166.956L166.957 15.92C194.689 5.62902 224.686 -0.000976562 256 -0.000976562C366.07 -0.000976562 459.906 69.471 496.076 166.956H144.696Z"
          fill="#6DA544"
        />
        <path
          d="M0 255.999C0 366.07 69.473 459.905 166.957 496.076V15.9221C69.473 52.0931 0 145.928 0 255.999Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7320">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/af.tsx
================================================
import React from "react";

const AF = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7074)">
        <path
          d="M367.304 25.402C333.648 9.128 295.89 0 256 0C216.11 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598C178.352 502.872 216.11 512 256 512C295.89 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402Z"
          fill="#D80027"
        />
        <path
          d="M144.696 25.4111C59.066 66.8181 0 154.507 0 256C0 357.493 59.066 445.182 144.696 486.589V25.4111Z"
          fill="black"
        />
        <path
          d="M367.304 25.4111V486.589C452.934 445.182 512 357.493 512 256C512 154.507 452.934 66.8181 367.304 25.4111Z"
          fill="#496E2D"
        />
        <path
          d="M256 166.957C206.822 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.178 166.957 256 166.957ZM256 311.652C225.264 311.652 200.348 286.735 200.348 256C200.348 225.265 225.265 200.348 256 200.348C286.735 200.348 311.652 225.265 311.652 256C311.652 286.735 286.736 311.652 256 311.652Z"
          fill="#FFDA44"
        />
        <path
          d="M256 222.609C243.705 222.609 233.739 232.575 233.739 244.87V278.261H278.261V244.87C278.261 232.575 268.295 222.609 256 222.609Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7074">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AF;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ag.tsx
================================================
import React from "react";

const AG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7082)">
        <path
          d="M0 256C0 273.535 1.768 290.657 5.127 307.2L256 322.783L506.874 307.2C510.234 290.657 512 273.535 512 256C512 238.465 510.232 221.343 506.874 204.8L256 189.217L5.127 204.8C1.768 221.343 0 238.465 0 256H0Z"
          fill="#0052B4"
        />
        <path
          d="M506.874 307.2H5.12695C28.846 424.05 132.151 512 256 512C379.849 512 483.154 424.05 506.874 307.2Z"
          fill="#F0F0F0"
        />
        <path
          d="M5.12695 204.8H506.875C483.154 87.95 379.851 0 256 0C132.149 0 28.846 87.95 5.12695 204.8Z"
          fill="black"
        />
        <path
          d="M367.304 204.8H144.696L190.176 183.406L165.957 139.361L215.342 148.806L221.602 98.917L256 135.611L290.4 98.917L296.656 148.806L346.043 139.361L321.826 183.408L367.304 204.8Z"
          fill="#FFDA44"
        />
        <path
          d="M0 256C0 397.384 114.616 512 256 512L51.196 102.391C19.052 145.18 0 198.363 0 256Z"
          fill="#A2001D"
        />
        <path
          d="M256 512C397.384 512 512 397.384 512 256C512 198.363 492.948 145.18 460.804 102.391L256 512Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7082">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ai.tsx
================================================
import React from "react";

const AI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7081)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1886 89.4761 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.044 133.566H133.564V133.568L255.997 256H255.999C255.999 256 255.999 234.293 255.999 224.519Z"
          fill="#D80027"
        />
        <path
          d="M432.939 293.474C440.3 283.346 445.217 270.978 445.217 256V144.696C435.915 151.684 424.355 155.826 411.826 155.826C393.62 155.826 377.457 147.083 367.304 133.567C357.15 147.083 340.987 155.826 322.782 155.826C310.252 155.826 298.692 151.683 289.391 144.698V256C289.391 270.978 294.308 283.346 301.669 293.474H432.939Z"
          fill="#F3F3F3"
        />
        <path
          d="M409.785 235.351C413.329 226.705 416.085 214.068 416.085 207.779C416.085 197.674 402.911 189.483 402.911 189.483C402.911 189.483 389.737 197.674 389.737 207.779C389.737 214.069 392.494 226.706 396.036 235.351L388.431 252.522C392.901 254.34 397.787 255.35 402.912 255.35C408.037 255.35 412.922 254.339 417.393 252.522L409.785 235.351Z"
          fill="#FF9811"
        />
        <path
          d="M358.294 179.752C349.038 181.006 336.715 184.941 331.269 188.085C322.518 193.138 322.01 208.641 322.01 208.641C322.01 208.641 335.692 215.954 344.442 210.902C349.89 207.757 359.454 199.053 365.167 191.661L383.843 189.661C383.182 184.883 381.61 180.146 379.051 175.709C376.487 171.272 373.172 167.544 369.362 164.581L358.294 179.752Z"
          fill="#FF9811"
        />
        <path
          d="M335.892 252.146C341.605 259.534 351.172 268.237 356.62 271.383C365.371 276.435 379.052 269.124 379.052 269.124C379.052 269.124 378.542 253.619 369.793 248.566C364.344 245.421 352.023 241.49 342.765 240.238L331.698 225.065C327.889 228.027 324.573 231.757 322.01 236.19C319.449 240.629 317.881 245.364 317.217 250.145L335.892 252.146Z"
          fill="#FF9811"
        />
        <path
          d="M298.916 289.394C319.704 322.749 367.305 333.914 367.305 333.914C367.305 333.914 414.905 322.749 435.694 289.394H298.916Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7081">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/al.tsx
================================================
import React from "react";

const AL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7076)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M400.696 190.009H307.97C313.694 184.015 317.217 175.9 317.217 166.957C317.217 148.516 302.267 133.566 283.826 133.566C272.208 133.566 261.981 139.502 256 148.503C250.019 139.502 239.791 133.566 228.174 133.566C209.733 133.566 194.783 148.516 194.783 166.957C194.783 175.9 198.306 184.016 204.03 190.009H111.305C111.305 214.598 132.722 234.53 157.309 234.53H155.825C155.825 259.12 175.758 279.053 200.348 279.053C200.348 287.017 202.447 294.483 206.111 300.947L169.181 337.878L197.515 366.21L237.707 326.019C239.281 326.596 240.91 327.059 242.592 327.374L218.305 382.209L256 422.957L293.695 382.207L269.408 327.372C271.091 327.057 272.719 326.595 274.293 326.017L314.485 366.208L342.819 337.875L305.888 300.944C309.553 294.481 311.652 287.014 311.652 279.05C336.241 279.05 356.174 259.118 356.174 234.527H354.691C379.278 234.529 400.696 214.598 400.696 190.009Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7076">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/am.tsx
================================================
import React from "react";

const AM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7084)">
        <path
          d="M512 256C512 224.686 506.368 194.689 496.077 166.957L256 155.826L15.923 166.956C5.633 194.689 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 356.174L496.077 345.044C506.368 317.311 512 287.314 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9229C52.0939 442.528 145.929 512 256 512Z"
          fill="#FF9811"
        />
        <path
          d="M15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0C145.929 0 52.0939 69.472 15.9229 166.957Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7084">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ao.tsx
================================================
import React from "react";

const AO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7080)">
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256C500.87 256 256 289.391 256 289.391L0 256Z"
          fill="#D80027"
        />
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256"
          fill="black"
        />
        <path
          d="M220.898 203.612L242.6 219.362L234.33 244.87L256.016 229.094L277.72 244.844L269.418 219.344L291.102 203.57L264.287 203.586L255.984 178.087L247.713 203.595L220.898 203.612Z"
          fill="#FFDA44"
        />
        <path
          d="M320 145.149C299.827 133.502 277.77 128.005 256 128.043V161.427C272.091 161.398 288.393 165.458 303.304 174.068C348.482 200.152 364.017 258.128 337.932 303.306C311.849 348.484 253.874 364.019 208.695 337.935C195.533 330.336 184.908 320.018 177.076 308.111L149.2 326.515C159.797 342.624 174.193 356.571 192 366.851C253.124 402.141 331.561 381.124 366.85 320C402.14 258.876 381.124 180.439 320 145.149Z"
          fill="#FFDA44"
        />
        <path
          d="M182.19 233.739C173.34 249.918 179.282 270.209 195.46 279.059L303.909 338.319C296.534 351.8 300.451 368.209 313.932 375.584L343.227 391.609C356.708 398.985 373.619 394.033 380.994 380.551L397.019 351.257L182.19 233.739Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7080">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ar.tsx
================================================
import React from "react";

const AR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7083)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C154.506 0 66.8103 59.065 25.4023 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="#338AF3"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4023C66.8103 452.935 154.506 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M332.515 256L301.25 270.707L317.899 300.986L283.949 294.491L279.647 328.787L256 303.563L232.352 328.787L228.051 294.491L194.101 300.985L210.749 270.706L179.485 256L210.75 241.293L194.101 211.015L228.05 217.509L232.353 183.213L256 208.437L279.648 183.213L283.949 217.509L317.9 211.015L301.251 241.294L332.515 256Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7083">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/as.tsx
================================================
import React from "react";

const AS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7078)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M380.196 32.112C343.412 11.664 301.07 0 256 0C114.626 0 0.018 114.598 0 255.97L178.087 166.957L380.196 32.112Z"
          fill="#0052B4"
        />
        <path
          d="M0 256.03C0.018 397.402 114.626 512 256 512C301.07 512 343.412 500.338 380.196 479.888L178.087 345.043L0 256.03Z"
          fill="#0052B4"
        />
        <path
          d="M401.53 45.3822C394.654 40.6232 387.529 36.1972 380.187 32.1162L0 255.97V256C0 256 0 256.021 0 256.03L380.188 479.883C387.53 475.801 394.654 471.376 401.531 466.617L43.822 256L401.53 45.3822Z"
          fill="#D80027"
        />
        <path
          d="M445.217 246.453H414.723C422.652 236.933 422.163 222.77 413.23 213.839C422.692 204.378 422.692 189.037 413.23 179.574L412.66 180.146C422.121 170.685 422.692 154.772 413.23 145.311L276.174 282.367C285.636 291.83 300.708 291.717 310.169 282.255L312.807 279.844L378.435 273.878V302.104H400.696V271.854L434.087 268.819L445.217 246.453Z"
          fill="#A2001D"
        />
        <path
          d="M278.269 311.652L256 300.522L278.269 289.391H422.964V311.652H278.269Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7078">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/at.tsx
================================================
import React from "react";

const AT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7087)">
        <path
          d="M496.077 345.043C506.368 317.311 512 287.314 512 256C512 224.686 506.368 194.691 496.077 166.957L256 144.696L15.923 166.957C5.633 194.691 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C366.07 512 459.906 442.528 496.076 345.043H15.9219C52.0939 442.528 145.928 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M256 0C145.928 0 52.0939 69.472 15.9219 166.957H496.077C459.906 69.472 366.07 0 256 0Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7087">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/au.tsx
================================================
import React from "react";

const AU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7086)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.06 256 0.029 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path d="M256 0C255.986 0 255.971 0.001 255.957 0.001L256 0Z" fill="#F0F0F0" />
        <path
          d="M255.315 256H256C256 255.768 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.566C256 88.521 256 59.004 256 0.000976562H255.957C114.592 0.0239766 0 114.629 0 256H133.565V180.788L208.777 256H255.316C255.545 255.772 255.773 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.779L180.788 133.566H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1896 89.4761 33.3906 129.515V256H100.174V100.175V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.046 133.567H133.565C133.565 133.566 133.565 133.567 133.565 133.567L255.998 256H255.999C255.999 256 255.999 234.295 255.999 224.519Z"
          fill="#D80027"
        />
        <path
          d="M154.395 300.522L168.445 329.9L200.172 322.567L185.964 351.869L211.478 372.102L179.711 379.262L179.8 411.826L154.395 391.453L128.991 411.826L129.08 379.262L97.3115 372.102L122.827 351.869L108.617 322.567L140.346 329.9L154.395 300.522Z"
          fill="#F0F0F0"
        />
        <path
          d="M383.283 356.174L390.308 370.863L406.172 367.196L399.067 381.847L411.825 391.964L395.941 395.544L395.985 411.826L383.283 401.639L370.581 411.826L370.625 395.544L354.742 391.964L367.499 381.847L360.395 367.196L376.258 370.863L383.283 356.174Z"
          fill="#F0F0F0"
        />
        <path
          d="M317.933 200.348L324.957 215.038L340.821 211.37L333.717 226.021L346.474 236.138L330.591 239.718L330.634 256L317.933 245.813L305.231 256L305.274 239.718L289.391 236.138L302.148 226.021L295.044 211.37L310.908 215.038L317.933 200.348Z"
          fill="#F0F0F0"
        />
        <path
          d="M383.283 111.304L390.308 125.994L406.172 122.327L399.068 136.978L411.824 147.094L395.941 150.675L395.985 166.957L383.283 156.77L370.581 166.957L370.625 150.675L354.742 147.094L367.498 136.978L360.395 122.327L376.258 125.994L383.283 111.304Z"
          fill="#F0F0F0"
        />
        <path
          d="M440.367 178.087L447.391 192.777L463.255 189.109L456.151 203.76L468.908 213.877L453.024 217.458L453.068 233.739L440.367 223.553L427.665 233.739L427.708 217.458L411.825 213.877L424.582 203.76L417.478 189.109L433.341 192.777L440.367 178.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M399.55 256L405.075 273.006H422.957L408.49 283.517L414.017 300.522L399.55 290.012L385.084 300.522L390.609 283.517L376.143 273.006H394.024L399.55 256Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7086">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/aw.tsx
================================================
import React from "react";

const AW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7085)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512C333.591 512 403.114 477.476 450.061 422.957H61.9395C108.886 477.476 178.409 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M512 256C512 114.616 397.384 0 256 0C114.616 0 0 114.616 0 256C0 279.107 3.08 301.489 8.819 322.783H503.182C508.92 301.489 512 279.107 512 256Z"
          fill="#338AF3"
        />
        <path
          d="M20.3486 356.174C25.2836 367.77 31.0526 378.922 37.5736 389.565H474.426C480.947 378.921 486.716 367.769 491.653 356.174H20.3486Z"
          fill="#338AF3"
        />
        <path
          d="M117.317 161.463L67.3008 139.389L117.317 117.315L139.39 67.2998L161.463 117.315L211.478 139.389L161.463 161.463L139.39 211.478L117.317 161.463Z"
          fill="#F0F0F0"
        />
        <path
          d="M139.39 94.8672L153.021 125.756L183.911 139.389L153.021 153.021L139.39 183.91L125.757 153.021L94.8682 139.389L125.757 125.756L139.39 94.8672Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7085">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ax.tsx
================================================
import React from "react";

const AX = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7075)">
        <path
          d="M503.181 322.783C508.92 301.489 512 279.107 512 256C512 232.893 508.92 210.511 503.181 189.217L233.739 0.974121C183.718 5.28412 137.815 23.9741 100.174 52.8951L8.819 189.217C3.08 210.511 0 232.893 0 256C0 278.972 3.043 301.231 8.718 322.413L100.173 459.105C137.814 488.026 183.717 506.717 233.738 511.026L503.181 322.783Z"
          fill="#FFDA44"
        />
        <path
          d="M8.81934 322.783C23.6313 377.742 56.2763 425.376 100.174 459.105V322.783H8.81934Z"
          fill="#0052B4"
        />
        <path
          d="M233.739 511.026C241.077 511.658 248.498 512 256 512C374.279 512 473.805 431.779 503.181 322.783H233.739V511.026Z"
          fill="#0052B4"
        />
        <path
          d="M503.181 189.217C473.805 80.221 374.279 0 256 0C248.498 0 241.077 0.342 233.739 0.974V189.217H503.181Z"
          fill="#0052B4"
        />
        <path
          d="M100.174 52.895C56.2763 86.625 23.6313 134.258 8.81934 189.217H100.174V52.895Z"
          fill="#0052B4"
        />
        <path
          d="M509.833 222.609H200.349H200.348V6.08496C176.69 11.331 154.261 19.834 133.565 31.127V222.608H2.167C0.742 233.539 0 244.683 0 256C0 267.317 0.742 278.461 2.167 289.391H133.564H133.565V480.872C154.261 492.164 176.69 500.669 200.348 505.914V289.394V289.392H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7075">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AX;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/az.tsx
================================================
import React from "react";

const AZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7088)">
        <path
          d="M512 256C512 224.686 506.368 194.689 496.077 166.957L256 155.826L15.923 166.956C5.633 194.689 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 356.174L496.077 345.044C506.368 317.311 512 287.314 512 256Z"
          fill="#D80027"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9229C52.0939 442.528 145.929 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0C145.929 0 52.0939 69.472 15.9229 166.957Z"
          fill="#338AF3"
        />
        <path
          d="M261.565 328.348C221.609 328.348 189.217 295.956 189.217 256C189.217 216.044 221.609 183.652 261.565 183.652C274.023 183.652 285.746 186.802 295.98 192.348C279.924 176.647 257.968 166.956 233.739 166.956C184.561 166.956 144.696 206.822 144.696 255.999C144.696 305.176 184.562 345.042 233.739 345.042C257.969 345.042 279.925 335.351 295.98 319.65C285.746 325.198 274.023 328.348 261.565 328.348Z"
          fill="#F0F0F0"
        />
        <path
          d="M317.217 205.913L326.8 232.864L352.634 220.582L340.353 246.416L367.304 256L340.353 265.584L352.634 291.418L326.8 279.136L317.217 306.087L307.635 279.136L281.8 291.418L294.082 265.584L267.13 256L294.082 246.416L281.8 220.582L307.635 232.864L317.217 205.913Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7088">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default AZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ba.tsx
================================================
import React from "react";

const BA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7104)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C165.23 0 85.4999 47.243 40.0439 118.479L387.203 475.849C461.946 431.147 512 349.423 512 256C512 114.616 397.384 0 256 0Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 189.578 486.702 129.07 445.217 83.572V428.429C486.702 382.93 512 322.422 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M319.789 481.873L346.604 481.856L354.876 456.347L363.178 481.846L376.628 481.838C384.875 477.423 392.852 472.571 400.528 467.309L44.689 111.471C38.825 120.027 33.477 128.961 28.668 138.221L31.83 147.933L58.645 147.916L36.961 163.691L45.263 189.19L23.559 173.442L10.614 182.858C3.713 206.034 0 230.583 0 256C0 397.384 114.616 512 256 512C285.892 512 314.583 506.868 341.25 497.448L319.789 481.873ZM57.099 244.87L65.369 219.362L43.667 203.612L70.482 203.595L78.753 178.086L87.055 203.585L113.87 203.568L92.185 219.343L100.487 244.842L78.783 229.094L57.099 244.87ZM112.324 300.522L120.594 275.014L98.892 259.264L125.707 259.247L133.978 233.738L142.28 259.237L169.095 259.22L147.411 274.995L155.713 300.494L134.009 284.746L112.324 300.522ZM167.548 356.174L175.818 330.666L154.116 314.916L180.931 314.899L189.202 289.39L197.504 314.889L224.319 314.872L202.635 330.647L210.937 356.146L189.233 340.396L167.548 356.174ZM244.457 396.051L222.772 411.826L231.042 386.318L209.34 370.568L236.155 370.551L244.427 345.042L252.729 370.541L279.544 370.524L257.86 386.299L266.162 411.798L244.457 396.051ZM277.997 467.478L286.267 441.97L264.565 426.22L291.38 426.203L299.651 400.694L307.953 426.193L334.768 426.176L313.084 441.951L321.386 467.45L299.682 451.7L277.997 467.478Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7104">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bb.tsx
================================================
import React from "react";

const BB = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7094)">
        <path
          d="M367.304 25.402C333.648 9.128 295.89 0 256 0C216.11 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598C178.352 502.872 216.11 512 256 512C295.89 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402Z"
          fill="#FFDA44"
        />
        <path
          d="M144.696 25.4111C59.066 66.8171 0 154.506 0 256C0 357.494 59.066 445.183 144.696 486.589V25.4111Z"
          fill="#0052B4"
        />
        <path
          d="M367.304 25.4111V486.589C452.934 445.183 512 357.493 512 256C512 154.507 452.934 66.8171 367.304 25.4111Z"
          fill="#0052B4"
        />
        <path
          d="M333.913 155.826L348.846 163.292L333.913 155.826L318.979 148.36C318.079 150.161 298.58 189.834 295.395 250.435H272.696V155.826L256 133.565L239.304 155.826V250.435H216.605C213.419 189.834 193.921 150.161 193.02 148.36L163.154 163.293C163.36 163.703 183.653 205.008 183.653 267.131V283.827H239.305V378.436H272.696V283.827H328.348V267.13C328.348 235.012 333.905 208.528 338.568 191.966C343.651 173.906 348.814 163.359 348.865 163.254L333.913 155.826Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7094">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BB;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bd.tsx
================================================
import React from "react";

const BD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7093)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M200.348 367.304C261.819 367.304 311.652 317.471 311.652 256C311.652 194.528 261.819 144.696 200.348 144.696C138.876 144.696 89.0439 194.528 89.0439 256C89.0439 317.471 138.876 367.304 200.348 367.304Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7093">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/be.tsx
================================================
import React from "react";

const BE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7097)">
        <path
          d="M345.043 15.923C317.31 5.633 287.314 0 256 0C224.686 0 194.69 5.633 166.957 15.923L144.696 256L166.957 496.077C194.69 506.368 224.686 512 256 512C287.314 512 317.31 506.368 345.043 496.077L367.304 256L345.043 15.923Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 145.93 442.528 52.0938 345.043 15.9238V496.079C442.528 459.906 512 366.072 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.072 69.472 459.906 166.957 496.078V15.9238C69.472 52.0938 0 145.93 0 256Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7097">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bf.tsx
================================================
import React from "react";

const BF = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7112)">
        <path
          d="M0.988281 256.001C0.988281 114.617 115.604 0.000976562 256.988 0.000976562C398.372 0.000976562 512.988 114.617 512.988 256.001C501.858 256.001 256.988 289.392 256.988 289.392L0.988281 256.001Z"
          fill="#D80027"
        />
        <path
          d="M512.988 256.001C512.988 397.385 398.372 512.001 256.988 512.001C115.604 512.001 0.988281 397.385 0.988281 256.001"
          fill="#6DA544"
        />
        <path
          d="M256.987 166.958L276.324 226.476H338.911L288.279 263.262L307.617 322.784L256.987 285.999L206.356 322.784L225.697 263.262L175.064 226.476H237.648L256.987 166.958Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7112">
          <rect
            width="512"
            height="512"
            fill="white"
            transform="translate(0.988281 0.000976562)"
          />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BF;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bg.tsx
================================================
import React from "react";

const BG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7111)">
        <path
          d="M512.989 256C512.989 224.686 507.357 194.689 497.066 166.957L256.989 155.826L16.9123 166.956C6.62226 194.689 0.989258 224.686 0.989258 256C0.989258 287.314 6.62226 317.311 16.9123 345.043L256.989 356.174L497.066 345.044C507.357 317.311 512.989 287.314 512.989 256Z"
          fill="#496E2D"
        />
        <path
          d="M256.989 512C367.06 512 460.895 442.528 497.066 345.043H16.9121C53.0831 442.528 146.918 512 256.989 512Z"
          fill="#D80027"
        />
        <path
          d="M16.9121 166.957H497.067C460.895 69.472 367.06 0 256.989 0C146.918 0 53.0831 69.472 16.9121 166.957Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7111">
          <rect width="512" height="512" fill="white" transform="translate(0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bh.tsx
================================================
import React from "react";

const BH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7091)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C204.624 0 156.792 15.145 116.7 41.198L182.539 85.327L100.174 127.993L182.539 170.659L100.174 213.325L182.539 255.986L100.174 298.651L182.539 341.316L100.174 383.986L182.539 426.652L116.692 470.795C156.786 496.853 204.621 512 256 512C397.384 512 512 397.384 512 256C512 114.616 397.384 0 256 0V0Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7091">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bi.tsx
================================================
import React from "react";

const BI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7113)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M411.876 52.902C320.224 -17.6241 191.776 -17.6241 100.124 52.901L256 208.777L411.876 52.902Z"
          fill="#D80027"
        />
        <path
          d="M255.998 303.224L100.124 459.098C191.776 529.624 320.224 529.624 411.876 459.098L256 303.222L255.998 303.224Z"
          fill="#D80027"
        />
        <path
          d="M208.777 256L52.9023 100.124C-17.6237 191.776 -17.6237 320.224 52.9023 411.876L208.777 256Z"
          fill="#6DA544"
        />
        <path
          d="M303.225 256L459.099 411.876C529.625 320.224 529.625 191.776 459.099 100.124L303.225 256Z"
          fill="#6DA544"
        />
        <path
          d="M256 367.304C317.472 367.304 367.304 317.472 367.304 256C367.304 194.529 317.472 144.696 256 144.696C194.529 144.696 144.696 194.529 144.696 256C144.696 317.472 194.529 367.304 256 367.304Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 178.087L265.639 194.783H284.918L275.278 211.478L284.918 228.174H265.639L256 244.87L246.361 228.174H227.083L236.722 211.478L227.083 194.783H246.361L256 178.087Z"
          fill="#D80027"
        />
        <path
          d="M207.005 256L216.644 272.696H235.922L226.283 289.391L235.922 306.087H216.644L207.005 322.783L197.365 306.087H178.087L187.726 289.391L178.087 272.696H197.365L207.005 256Z"
          fill="#D80027"
        />
        <path
          d="M304.996 256L314.635 272.696H333.913L324.274 289.391L333.913 306.087H314.635L304.996 322.783L295.356 306.087H276.078L285.717 289.391L276.078 272.696H295.356L304.996 256Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7113">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bj.tsx
================================================
import React from "react";

const BJ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7099)">
        <path
          d="M166.957 233.739L189.218 503.181C210.511 508.92 232.893 512 256 512C397.384 512 512 397.384 512 256L166.957 233.739Z"
          fill="#D80027"
        />
        <path
          d="M166.957 256L189.217 8.819C210.511 3.08 232.893 0 256 0C397.384 0 512 114.616 512 256H166.957Z"
          fill="#FFDA44"
        />
        <path
          d="M0 256C0 374.279 80.221 473.805 189.217 503.181V8.81885C80.221 38.1948 0 137.721 0 256Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7099">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BJ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bl.tsx
================================================
import React from "react";

const BL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7294)">
        <path
          d="M255.79 511.581C397.059 511.581 511.58 397.06 511.58 255.791C511.58 114.522 397.059 0.000976562 255.79 0.000976562C114.521 0.000976562 0 114.522 0 255.791C0 397.06 114.521 511.581 255.79 511.581Z"
          fill="#F0F0F0"
        />
        <path
          d="M456.714 205.745H372.563C372.563 190.39 360.115 177.942 344.76 177.942L322.517 222.427C322.517 222.427 346.243 289.155 345.501 289.155H373.304C388.66 289.155 401.107 276.708 401.107 261.352C416.463 261.352 428.91 248.905 428.91 233.549H427.984C443.339 233.548 456.714 221.101 456.714 205.745Z"
          fill="#ACABB1"
        />
        <path
          d="M54.8652 205.745H139.016C139.016 190.39 151.464 177.942 166.819 177.942L189.062 222.427C189.062 222.427 165.336 289.155 166.078 289.155H138.275C122.919 289.155 110.472 276.708 110.472 261.352C95.1162 261.352 82.6692 248.905 82.6692 233.549H83.5952C68.2392 233.548 54.8652 221.101 54.8652 205.745Z"
          fill="#ACABB1"
        />
        <path
          d="M344.76 355.882V367.003H166.819V355.882H122.334V400.367H166.819V411.488H344.76V400.367H389.245V355.882H344.76Z"
          fill="#FFDA44"
        />
        <path
          d="M166.819 177.941V289.153C166.819 357.256 255.789 378.124 255.789 378.124C255.789 378.124 344.759 357.256 344.759 289.153V177.941L255.789 166.82L166.819 177.941Z"
          fill="#0052B4"
        />
        <path d="M166.82 222.431H344.76V289.159H166.82V222.431Z" fill="#D80027" />
        <path
          d="M300.274 122.335V139.017L289.153 144.578L278.032 133.456V100.092H233.547V133.456L222.426 144.578L211.304 139.017V122.335H166.819V177.941H344.76V122.335H300.274Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7294">
          <rect
            width="511.58"
            height="511.58"
            fill="white"
            transform="translate(0 0.000976562)"
          />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bm.tsx
================================================
import React from "react";

const BM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7100)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#D80027"
        />
        <path d="M256 122.435V208.778L166.957 122.435H256Z" fill="#0052B4" />
        <path
          d="M133.565 256H208.776L133.565 155.826L122.435 233.739L133.565 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1886 89.4761 33.3906 129.515V267.13H100.174V100.176V100.174H267.13C267.13 79.1111 267.13 59.0451 267.13 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M266.176 234.694L165.044 133.565H133.564V133.567L266.173 266.176H266.175C266.176 266.177 266.176 244.47 266.176 234.694Z"
          fill="#D80027"
        />
        <path
          d="M289.391 133.565V255.999C289.391 315.639 445.217 315.639 445.217 255.999V133.565H289.391Z"
          fill="#F3F3F3"
        />
        <path
          d="M289.391 256V255.999C289.391 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.217 315.639 445.217 255.999V256H289.391Z"
          fill="#6DA544"
        />
        <path
          d="M367.304 207.026L331.13 222.609V256L367.304 278.261L403.478 256V222.609L367.304 207.026Z"
          fill="#A2001D"
        />
        <path d="M331.13 189.217H403.478V222.608H331.13V189.217Z" fill="#338AF3" />
      </g>
      <defs>
        <clipPath id="clip0_4_7100">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bn.tsx
================================================
import React from "react";

const BN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7110)">
        <path
          d="M255.997 511.953C397.358 511.953 511.954 397.357 511.954 255.996C511.954 114.635 397.358 0.0390625 255.997 0.0390625C114.636 0.0390625 0.0400391 114.635 0.0400391 255.996C0.0400391 397.357 114.636 511.953 255.997 511.953Z"
          fill="#F0F0F0"
        />
        <path
          d="M34.3301 128.016C22.7771 148.024 14.2551 168.942 8.58008 190.249L436.638 437.39C452.253 421.821 466.109 403.98 477.659 383.973L34.3301 128.016Z"
          fill="black"
        />
        <path
          d="M383.975 34.329C281.559 -24.8 155.279 -5.09305 75.3516 74.599L503.41 321.738C532.463 212.676 486.389 93.459 383.975 34.329Z"
          fill="#FFDA44"
        />
        <path
          d="M128.017 477.66C230.431 536.789 356.714 517.082 436.639 437.391L8.58039 190.249C-20.4706 299.314 25.6014 418.531 128.017 477.66Z"
          fill="#FFDA44"
        />
        <path
          d="M328.331 228.173C328.331 268.122 295.945 300.509 255.995 300.509C216.045 300.509 183.659 268.123 183.659 228.173C183.659 215.717 186.808 203.996 192.354 193.763C176.657 209.816 166.966 231.768 166.966 255.994C166.966 305.163 206.825 345.023 255.995 345.023C305.165 345.023 345.024 305.164 345.024 255.994C345.024 231.768 335.334 209.816 319.636 193.763C325.182 203.998 328.331 215.717 328.331 228.173Z"
          fill="#D80027"
        />
        <path d="M239.304 144.71H272.69V311.639H239.304V144.71Z" fill="#D80027" />
        <path
          d="M311.638 178.095H200.353C200.353 185.778 207.046 192.006 214.728 192.006H214.264C214.264 199.689 220.493 205.917 228.175 205.917C228.175 213.6 234.404 219.828 242.086 219.828H269.907C277.59 219.828 283.818 213.6 283.818 205.917C291.501 205.917 297.729 199.689 297.729 192.006H297.266C304.946 192.005 311.638 185.779 311.638 178.095Z"
          fill="#D80027"
        />
        <path d="M178.097 322.767H333.897V356.153H178.097V322.767Z" fill="#D80027" />
        <path d="M289.382 333.896H356.153V367.282H289.382V333.896Z" fill="#D80027" />
        <path d="M155.84 333.896H222.611V367.282H155.84V333.896Z" fill="#D80027" />
      </g>
      <defs>
        <clipPath id="clip0_4_7110">
          <rect width="511.989" height="511.989" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bo.tsx
================================================
import React from "react";

const BO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7102)">
        <path
          d="M512 256.001C512 224.687 506.368 194.69 496.077 166.958L256 155.827L15.923 166.957C5.632 194.69 0 224.687 0 256.001C0 287.315 5.632 317.312 15.923 345.044L256 356.175L496.077 345.045C506.368 317.312 512 287.315 512 256.001Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512.001C366.071 512.001 459.906 442.529 496.077 345.044H15.9229C52.0939 442.529 145.929 512.001 256 512.001Z"
          fill="#6DA544"
        />
        <path
          d="M15.9229 166.958H496.078C459.906 69.473 366.071 0.000976562 256 0.000976562C145.929 0.000976562 52.0939 69.473 15.9229 166.958Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7102">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bq.tsx
================================================
import React from "react";

const BQ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7103)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M74.9798 74.98C20.1148 129.845 -4.63219 203.419 0.720809 275.165L275.164 0.722029C203.418 -4.63197 129.845 20.115 74.9798 74.98Z"
          fill="#FFDA44"
        />
        <path
          d="M91.4102 452.071C191.991 536.693 342.35 531.688 437.02 437.019C531.69 342.35 536.695 191.99 452.072 91.4099L91.4102 452.071Z"
          fill="#0052B4"
        />
        <path
          d="M255.087 245.689L277.148 233.739L255.087 221.789C249.936 188.328 223.498 161.889 190.037 156.739L178.086 134.677L166.136 156.738C132.676 161.888 106.238 188.327 101.086 221.788L79.0244 233.739L101.085 245.689C106.236 279.15 132.674 305.589 166.135 310.739L178.086 332.801L190.036 310.74C223.498 305.589 249.936 279.15 255.087 245.689ZM178.087 278.261C153.498 278.261 133.565 258.329 133.565 233.739C133.565 209.149 153.497 189.217 178.087 189.217C202.677 189.217 222.609 209.149 222.609 233.739C222.609 258.329 202.676 278.261 178.087 278.261Z"
          fill="black"
        />
        <path
          d="M178.087 200.348L187.726 217.043H207.005L197.365 233.739L207.005 250.435H187.726L178.087 267.13L168.448 250.435H149.17L158.809 233.739L149.17 217.043H168.448L178.087 200.348Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7103">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BQ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/br.tsx
================================================
import React from "react";

const BR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7106)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M256 100.174L467.478 256L256 411.826L44.5225 256L256 100.174Z"
          fill="#FFDA44"
        />
        <path
          d="M256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.177 166.957 256 166.957C206.823 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M211.478 250.435C195.994 250.435 181.051 252.79 166.985 257.16C167.608 305.8 207.212 345.044 256 345.044C286.168 345.044 312.812 330.027 328.919 307.076C301.362 272.579 258.961 250.435 211.478 250.435Z"
          fill="#0052B4"
        />
        <path
          d="M343.394 273.06C344.466 267.536 345.045 261.837 345.045 256C345.045 206.822 305.179 166.957 256.002 166.957C219.308 166.957 187.808 189.158 174.176 220.856C186.226 218.359 198.702 217.044 211.481 217.044C263.198 217.043 309.984 238.541 343.394 273.06Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7106">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bs.tsx
================================================
import React from "react";

const BS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7090)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M155.826 166.957H496.076C459.906 69.472 366.07 0 256 0C185.306 0 121.313 28.659 74.9893 74.989L155.826 166.957Z"
          fill="#338AF3"
        />
        <path
          d="M155.826 345.043H496.076C459.906 442.528 366.07 512 256 512C185.306 512 121.313 483.341 74.9893 437.011L155.826 345.043Z"
          fill="#338AF3"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7090">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bt.tsx
================================================
import React from "react";

const BT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7101)">
        <path
          d="M437.019 437.02C337.045 536.994 174.955 536.994 74.9795 437.02C-24.9945 337.046 -24.9945 174.955 74.9795 74.9798C75.0155 74.9798 305.038 7.01283 405.013 106.987C504.988 206.961 437.088 436.95 437.019 437.02Z"
          fill="#FFDA44"
        />
        <path
          d="M437.019 437.02C536.993 337.046 536.993 174.955 437.019 74.9799C337.045 -24.9951 174.955 -24.9941 74.9805 74.9799L437.019 437.02Z"
          fill="#D80027"
        />
        <path
          d="M322.916 322.941C312.4 327.071 300.181 326.633 289.58 320.684C270.85 310.172 264.164 286.378 274.679 267.645L271.487 265.855C303.558 258.122 327.285 229.012 326.869 194.66C326.611 173.303 317.068 154.196 302.141 141.122L278.768 165.068C287.604 172.11 293.333 182.912 293.48 195.065C293.74 216.545 276.478 234.232 254.999 234.491L255.044 238.148C232.311 214.242 195.239 208.249 165.698 225.785C147.332 236.689 135.558 254.505 131.697 273.97L164.121 282.24C165.802 271.066 172.291 260.704 182.742 254.499C201.213 243.534 225.161 249.642 236.126 268.112L239.274 266.245C229.936 297.883 243.281 332.986 273.24 349.802C291.866 360.256 313.182 361.545 331.97 355.156L322.916 322.941ZM255.268 256.747L255.266 256.748L255.268 256.747Z"
          fill="#FF9811"
        />
        <path
          d="M350.786 173.381L332.692 237.952L278.402 227.927L243.456 155.892L149.049 189.393L141.604 168.413L116.904 165.37L135.515 217.819L200.484 201.203L218.947 253.232L174.035 319.513L250.252 384.519L235.805 401.456L245.52 424.371L281.638 382.027L234.764 334.07L270.591 292.067L350.449 297.821L368.638 199.311L390.529 203.354L405.518 183.484L350.786 173.381ZM255.981 257.742V257.744V257.742Z"
          fill="#FFEACF"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7101">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bw.tsx
================================================
import React from "react";

const BW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7105)">
        <path
          d="M12.089 178.086C4.24698 202.655 -2.32609e-05 228.828 0.000976739 255.999C-2.32609e-05 283.168 4.24698 309.342 12.09 333.912L256.001 345.044L499.911 333.912C507.752 309.342 512 283.167 512 256C512 228.83 507.753 202.655 499.911 178.086L256 166.956L12.089 178.086Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 240.813 510.67 225.937 508.133 211.477H3.868C1.33 225.937 0 240.811 0 255.999C0 271.187 1.331 286.061 3.868 300.521H508.133C510.669 286.06 512 271.186 512 256Z"
          fill="black"
        />
        <path
          d="M256.001 511.999C370.217 511.999 466.947 437.196 499.911 333.911H12.0898C45.0548 437.195 141.786 511.997 256.001 511.999Z"
          fill="#338AF3"
        />
        <path
          d="M256.001 0.000976603C141.786 0.000976603 45.0559 74.804 12.0889 178.086L499.909 178.087C466.946 74.804 370.215 -0.0010234 256.001 0.000976603Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7105">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/by.tsx
================================================
import React from "react";

const BY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7096)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FCFCFC"
        />
        <path
          d="M105.739 237.449L77.9131 186.966L105.739 137.275L133.565 186.966L105.739 237.449Z"
          fill="#A2001D"
        />
        <path
          d="M50.0867 237.449L22.2607 186.966L50.0867 137.275L77.9127 186.966L50.0867 237.449Z"
          fill="#A2001D"
        />
        <path
          d="M105.739 374.725L77.9131 324.242L105.739 274.551L133.565 324.242L105.739 374.725Z"
          fill="#A2001D"
        />
        <path
          d="M50.0867 374.725L22.2607 324.242L50.0867 274.551L77.9127 324.242L50.0867 374.725Z"
          fill="#A2001D"
        />
        <path
          d="M133.565 49.692L125.687 35.624C111.557 43.996 98.3038 53.689 86.0928 64.533L105.739 100.174L133.565 49.692Z"
          fill="#A2001D"
        />
        <path
          d="M105.739 411.826L85.8848 447.282C98.0848 458.14 111.329 467.848 125.453 476.237L133.566 461.518L105.739 411.826Z"
          fill="#A2001D"
        />
        <path
          d="M155.826 322.783V491.646C186.595 504.743 220.448 512 256 512C366.071 512 459.906 442.528 496.077 345.043L155.826 322.783Z"
          fill="#6DA544"
        />
        <path
          d="M496.077 345.043C506.368 317.31 512 287.314 512 256C512 114.616 397.384 0 256 0C220.451 0 186.595 7.253 155.826 20.348V345.044H496.077V345.043Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7096">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/bz.tsx
================================================
import React from "react";

const BZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7098)">
        <path
          d="M512 256C512 168.139 467.731 90.6261 400.287 44.5221L256 33.3911L111.713 44.5211C44.27 90.6261 0 168.14 0 256C0 343.863 44.27 421.374 111.713 467.478L256 478.609L400.287 467.479C467.731 421.374 512 343.863 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M400.287 44.522C359.202 16.436 309.524 0 256 0C202.477 0 152.798 16.436 111.713 44.522H400.287Z"
          fill="#A2001D"
        />
        <path
          d="M111.713 467.478C152.797 495.564 202.477 512 256 512C309.524 512 359.202 495.564 400.287 467.478H111.713Z"
          fill="#A2001D"
        />
        <path
          d="M256 378.435C323.619 378.435 378.435 323.619 378.435 256C378.435 188.381 323.619 133.565 256 133.565C188.381 133.565 133.565 188.381 133.565 256C133.565 323.619 188.381 378.435 256 378.435Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 356.174C311.325 356.174 356.174 311.325 356.174 256C356.174 200.676 311.325 155.826 256 155.826C200.676 155.826 155.826 200.676 155.826 256C155.826 311.325 200.676 356.174 256 356.174Z"
          fill="#6DA544"
        />
        <path
          d="M256 322.783C292.883 322.783 322.783 292.883 322.783 256C322.783 219.117 292.883 189.217 256 189.217C219.117 189.217 189.217 219.117 189.217 256C189.217 292.883 219.117 322.783 256 322.783Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 239.304L219.826 256V283.826L256 306.087L292.174 283.826V256L256 239.304Z"
          fill="#0052B4"
        />
        <path d="M219.826 222.609H292.174V256H219.826V222.609Z" fill="#FFDA44" />
      </g>
      <defs>
        <clipPath id="clip0_4_7098">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default BZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ca.tsx
================================================
import React from "react";

const CA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7116)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 154.506 452.935 66.8101 367.304 25.4021V486.597C452.935 445.19 512 357.494 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 357.494 59.065 445.19 144.696 486.598V25.4021C59.065 66.8101 0 154.506 0 256Z"
          fill="#D80027"
        />
        <path
          d="M300.522 289.391L345.043 267.13L322.783 256V233.739L278.261 256L300.522 211.478H278.261L256 178.087L233.739 211.478H211.478L233.739 256L189.217 233.739V256L166.957 267.13L211.478 289.391L200.348 311.652H244.87V345.043H267.13V311.652H311.652L300.522 289.391Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7116">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cc.tsx
================================================
import React from "react";

const CC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7126)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M392.984 367.304L400.009 381.993L415.873 378.327L408.769 392.978L421.526 403.094L405.642 406.674L405.687 422.957L392.984 412.77L380.282 422.957L380.326 406.674L364.443 403.094L377.2 392.978L370.096 378.327L385.959 381.993L392.984 367.304Z"
          fill="#FFDA44"
        />
        <path
          d="M327.632 211.478L334.658 226.167L350.522 222.5L343.417 237.152L356.174 247.268L340.291 250.848L340.335 267.13L327.632 256.944L314.93 267.13L314.973 250.848L299.091 247.268L311.848 237.152L304.743 222.5L320.608 226.167L327.632 211.478Z"
          fill="#FFDA44"
        />
        <path
          d="M392.984 122.435L400.009 137.124L415.873 133.456L408.77 148.108L421.526 158.225L405.642 161.804L405.685 178.087L392.984 167.9L380.282 178.087L380.326 161.804L364.444 158.225L377.2 148.108L370.096 133.456L385.959 137.124L392.984 122.435Z"
          fill="#FFDA44"
        />
        <path
          d="M450.067 189.217L457.092 203.906L472.957 200.239L465.852 214.891L478.609 225.007L462.726 228.587L462.77 244.87L450.067 234.683L437.365 244.87L437.408 228.587L421.526 225.007L434.283 214.891L427.178 200.239L443.042 203.906L450.067 189.217Z"
          fill="#FFDA44"
        />
        <path
          d="M409.249 267.13L414.776 284.137H432.657L418.19 294.647L423.717 311.652L409.249 301.143L394.784 311.652L400.309 294.647L385.843 284.137H403.724L409.249 267.13Z"
          fill="#FFDA44"
        />
        <path
          d="M283.826 328.348C243.869 328.348 211.477 295.956 211.477 256C211.477 216.044 243.868 183.652 283.826 183.652C296.284 183.652 308.007 186.803 318.241 192.348C302.186 176.646 280.231 166.956 255.998 166.956C206.822 166.956 166.956 206.822 166.956 255.999C166.956 305.176 206.822 345.042 255.998 345.042C280.23 345.042 302.186 335.352 318.24 319.65C308.007 325.197 296.284 328.348 283.826 328.348Z"
          fill="#FFDA44"
        />
        <path
          d="M160.986 100.174C153.286 86.87 138.911 77.913 122.435 77.913C105.959 77.913 91.5838 86.87 83.8838 100.174H160.986Z"
          fill="#FFDA44"
        />
        <path
          d="M161.134 100.431L122.435 139.13L83.7361 100.431C80.0371 106.922 77.9141 114.429 77.9141 122.435C77.9141 147.024 97.8471 166.957 122.436 166.957C147.025 166.957 166.958 147.025 166.958 122.435C166.957 114.429 164.833 106.922 161.134 100.431Z"
          fill="#FFDA44"
        />
        <path
          d="M111.304 128V165.554C114.861 166.469 118.591 166.956 122.434 166.956C126.277 166.956 130.007 166.468 133.564 165.554V128H111.304Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7126">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cd.tsx
================================================
import React from "react";

const CD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7137)">
        <path
          d="M483.574 138.616C471.745 115.697 456.24 94.185 437.028 74.973C417.815 55.76 396.302 40.255 373.384 28.427L193.035 193.033L28.4277 373.382C40.2567 396.301 55.7617 417.814 74.9737 437.026C94.1857 456.238 115.699 471.743 138.617 483.572L318.966 318.965L483.574 138.616Z"
          fill="#FFDA44"
        />
        <path
          d="M74.9736 437.027C85.7126 447.766 97.1716 457.344 109.191 465.777L465.775 109.191C457.344 97.172 447.766 85.713 437.027 74.974C426.287 64.235 414.829 54.658 402.81 46.226L46.2256 402.81C54.6566 414.827 64.2336 426.288 74.9736 437.027Z"
          fill="#D80027"
        />
        <path
          d="M74.9741 74.972C-5.79288 155.739 -21.2979 277.037 28.4281 373.382L373.384 28.427C277.038 -21.298 155.74 -5.79102 74.9741 74.972Z"
          fill="#338AF3"
        />
        <path
          d="M437.027 437.027C517.793 356.261 533.297 234.963 483.574 138.618L138.618 483.573C234.963 533.298 356.262 517.794 437.027 437.027Z"
          fill="#338AF3"
        />
        <path
          d="M136.426 77.905L150.24 120.422H194.944L158.778 146.698L172.592 189.214L136.426 162.937L100.258 189.214L114.074 146.698L77.9062 120.422H122.61L136.426 77.905Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7137">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cf.tsx
================================================
import React from "react";

const CF = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7120)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M480.873 134.554C447.793 73.9252 390.91 28.1562 322.783 9.79419L311.653 134.554H480.873Z"
          fill="#0052B4"
        />
        <path
          d="M31.127 134.554H200.347L189.217 9.79419C121.09 28.1562 64.208 73.9262 31.127 134.554Z"
          fill="#0052B4"
        />
        <path
          d="M311.652 256.989V379.424H480.872C500.717 343.053 512 301.339 512 256.989H311.652Z"
          fill="#6DA544"
        />
        <path
          d="M200.348 256.989H0C0 301.339 11.283 343.053 31.127 379.424H200.347V256.989H200.348Z"
          fill="#6DA544"
        />
        <path
          d="M31.127 379.424C64.208 440.053 121.09 485.822 189.217 504.184L200.347 395.075L31.127 379.424Z"
          fill="#FFDA44"
        />
        <path
          d="M322.783 504.184C390.91 485.822 447.793 440.053 480.873 379.424L311.653 395.073L322.783 504.184Z"
          fill="#FFDA44"
        />
        <path d="M311.652 395.073L480.873 379.424H311.652V395.073Z" fill="#FFDA44" />
        <path d="M200.348 379.424H31.127L200.348 395.073V379.424Z" fill="#FFDA44" />
        <path
          d="M256 0.989258C232.893 0.989258 210.511 4.06926 189.217 9.80826V504.171C210.511 509.909 232.893 512.989 256 512.989C279.107 512.989 301.489 509.909 322.783 504.17V9.80826C301.489 4.06926 279.107 0.989258 256 0.989258V0.989258Z"
          fill="#D80027"
        />
        <path
          d="M137.698 56.6414L144.604 77.8984H166.957L148.875 91.0364L155.782 112.293L137.698 99.1564L119.615 112.293L126.524 91.0364L108.442 77.8984H130.793L137.698 56.6414Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7120">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CF;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cg.tsx
================================================
import React from "react";

const CG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7264)">
        <path
          d="M138.771 483.645L326.836 326.837L483.644 138.772C459.264 91.524 420.606 52.845 373.377 28.434L185.163 185.165L28.4341 373.377C52.8431 420.608 91.5221 459.265 138.771 483.645Z"
          fill="#FFDA44"
        />
        <path
          d="M437.027 437.028C517.793 356.261 533.298 234.964 483.573 138.618L138.617 483.574C234.963 533.298 356.261 517.793 437.027 437.028Z"
          fill="#D80027"
        />
        <path
          d="M74.9732 74.973C-5.79279 155.739 -21.2968 277.037 28.4262 373.383L373.383 28.427C277.037 -21.298 155.739 -5.79198 74.9732 74.973Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7264">
          <rect width="512.001" height="512.001" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ch.tsx
================================================
import React from "react";

const CH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7301)">
        <path
          d="M256.578 512C397.963 512 512.578 397.385 512.578 256C512.578 114.615 397.963 0 256.578 0C115.193 0 0.578125 114.615 0.578125 256C0.578125 397.385 115.193 512 256.578 512Z"
          fill="#D80027"
        />
        <path
          d="M390.143 211.479H301.1V122.435H212.056V211.479H123.013V300.522H212.056V389.565H301.1V300.522H390.143V211.479Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7301">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ci.tsx
================================================
import React from "react";

const CI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7188)">
        <path
          d="M256 512C287.314 512 317.311 506.368 345.043 496.077L356.174 256L345.044 15.923C317.311 5.633 287.314 0 256 0C224.686 0 194.689 5.633 166.957 15.923L155.826 256L166.956 496.077C194.689 506.368 224.686 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 366.071 69.472 459.906 166.957 496.077V15.9231C69.472 52.0941 0 145.929 0 256Z"
          fill="#FF9811"
        />
        <path
          d="M345.043 15.9231V496.078C442.528 459.906 512 366.071 512 256C512 145.929 442.528 52.0941 345.043 15.9231Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7188">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ck.tsx
================================================
import React from "react";

const CK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7129)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.391C89.4756 56.19 56.1886 89.476 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.111 256 59.045 256 33.391H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.044 133.566H133.564V133.568L255.997 256H255.999C255.999 256 255.999 234.293 255.999 224.519Z"
          fill="#D80027"
        />
        <path
          d="M345.043 256L349.781 270.576H365.106L352.708 279.584L357.444 294.161L345.043 285.152L332.644 294.161L337.38 279.584L324.982 270.576H340.307L345.043 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M282.081 282.081L295.736 289.038L306.574 278.201L304.176 293.339L317.832 300.297L302.694 302.693L300.297 317.833L293.338 304.176L278.201 306.574L289.04 295.737L282.081 282.081Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 345.043L270.576 340.307L270.578 324.983L279.584 337.38L294.161 332.643L285.152 345.043L294.161 357.444L279.584 352.708L270.578 365.106V349.781L256 345.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M282.081 408.006L289.038 394.35L278.201 383.514L293.339 385.911L300.297 372.255L302.694 387.393L317.832 389.789L304.176 396.748L306.574 411.887L295.736 401.047L282.081 408.006Z"
          fill="#F0F0F0"
        />
        <path
          d="M345.043 434.087L340.307 419.51H324.981L337.38 410.502L332.644 395.926L345.043 404.934L357.444 395.926L352.708 410.502L365.106 419.51H349.781L345.043 434.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M408.006 408.006L394.35 401.05L383.514 411.887L385.911 396.748L372.255 389.791L387.393 387.393L389.791 372.255L396.748 385.911L411.886 383.514L401.047 394.351L408.006 408.006Z"
          fill="#F0F0F0"
        />
        <path
          d="M434.087 345.043L419.51 349.781V365.106L410.502 352.707L395.926 357.444L404.935 345.043L395.926 332.643L410.502 337.38L419.51 324.983V340.307L434.087 345.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M408.006 282.082L401.05 295.737L411.886 306.574L396.748 304.176L389.791 317.833L387.393 302.693L372.255 300.296L385.911 293.339L383.514 278.202L394.351 289.038L408.006 282.082Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7129">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cl.tsx
================================================
import React from "react";

const CL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7123)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 114.616 256 256 256 256C256 256 449.761 256 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0V256C256 256 89.043 256 0 256Z"
          fill="#0052B4"
        />
        <path
          d="M152.389 89.043L168.966 140.061H222.609L179.211 171.591L195.787 222.609L152.389 191.078L108.991 222.609L125.567 171.591L82.1689 140.061H135.812L152.389 89.043Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7123">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cm.tsx
================================================
import React from "react";

const CM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7115)">
        <path
          d="M367.304 25.402C333.648 9.128 295.89 0 256 0C216.11 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598C178.352 502.872 216.11 512 256 512C295.89 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402Z"
          fill="#D80027"
        />
        <path
          d="M255.998 166.957L278.098 234.976H349.626L291.762 277.02L313.863 345.043L255.998 303.002L198.133 345.043L220.238 277.02L162.374 234.976H233.897L255.998 166.957Z"
          fill="#FFDA44"
        />
        <path
          d="M144.696 25.4109C59.066 66.8169 0 154.506 0 256C0 357.494 59.066 445.183 144.696 486.589V25.4109Z"
          fill="#496E2D"
        />
        <path
          d="M367.304 25.4109V486.589C452.934 445.183 512 357.493 512 256C512 154.507 452.934 66.8169 367.304 25.4109Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7115">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cn.tsx
================================================
import React from "react";

const CN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7124)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M140.1 155.8L162.2 223.8H233.7L175.9 265.9L198 333.9L140.1 291.9L82.2 333.9L104.4 265.9L46.5 223.8H118L140.1 155.8Z"
          fill="#FFDA44"
        />
        <path
          d="M303.5 396.5L286.6 375.7L261.6 385.4L276.1 362.9L259.2 342L285.1 348.9L299.7 326.4L301.1 353.2L327.1 360.1L302 369.7L303.5 396.5Z"
          fill="#FFDA44"
        />
        <path
          d="M337.1 335.5L345.1 309.9L323.2 294.4L350 294L357.9 268.4L366.6 293.8L393.4 293.5L371.9 309.5L380.5 334.9L358.6 319.4L337.1 335.5Z"
          fill="#FFDA44"
        />
        <path
          d="M382.4 187.9L370.6 212L389.8 230.7L363.3 226.9L351.5 250.9L346.9 224.5L320.3 220.7L344.1 208.2L339.5 181.7L358.7 200.4L382.4 187.9Z"
          fill="#FFDA44"
        />
        <path
          d="M304.2 114.9L302.2 141.6L327.1 151.7L301 158.1L299.1 184.9L285 162.1L258.9 168.5L276.2 148L262 125.3L286.9 135.4L304.2 114.9Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7124">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/co.tsx
================================================
import React from "react";

const CO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7127)">
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256L256 278.261L0 256Z"
          fill="#FFDA44"
        />
        <path
          d="M34.2559 384C78.5209 460.516 161.245 512 256 512C350.755 512 433.479 460.516 477.744 384L256 367.304L34.2559 384Z"
          fill="#D80027"
        />
        <path
          d="M477.744 384C499.526 346.346 512 302.631 512 256H0C0 302.631 12.474 346.346 34.256 384H477.744Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7127">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cr.tsx
================================================
import React from "react";

const CR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7131)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.077 166.957H15.923C5.633 194.69 0 224.686 0 256C0 287.314 5.633 317.31 15.923 345.043H496.078C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957Z"
          fill="#D80027"
        />
        <path
          d="M256 0C178.409 0 108.886 34.524 61.9395 89.043H450.06C403.114 34.524 333.591 0 256 0Z"
          fill="#0052B4"
        />
        <path
          d="M450.061 422.957H61.9395C108.886 477.476 178.409 512 256 512C333.591 512 403.114 477.476 450.061 422.957Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7131">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cu.tsx
================================================
import React from "react";

const CU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7133)">
        <path d="M0.001 44.522H0V467.478H0.001V256.001V44.522Z" fill="#FF9811" />
        <path
          d="M255.999 511.999C397.383 511.999 511.998 397.384 511.998 256C511.998 114.616 397.383 0.000976562 255.999 0.000976562C114.615 0.000976562 0 114.616 0 256C0 397.384 114.615 511.999 255.999 511.999Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.001 0.00201416C172.249 0.00201416 97.8954 40.225 51.1904 102.402H460.811C414.107 40.224 339.752 0.00201416 256.001 0.00201416Z"
          fill="#0052B4"
        />
        <path
          d="M256.001 511.999C339.753 511.999 414.107 471.776 460.812 409.599H51.1904C97.8944 471.777 172.249 511.999 256.001 511.999Z"
          fill="#0052B4"
        />
        <path
          d="M0.000976562 256.001C0.000976562 273.536 1.76898 290.658 5.12798 307.201H506.875C510.234 290.658 512.001 273.536 512.001 256.001C512.001 238.466 510.233 221.344 506.875 204.801H5.12798C1.76898 221.344 0.000976562 238.466 0.000976562 256.001Z"
          fill="#0052B4"
        />
        <path
          d="M74.9807 74.982C-24.9923 174.955 -24.9923 337.046 74.9807 437.021C116.294 395.708 156.026 355.975 256 256.002L74.9807 74.982Z"
          fill="#D80027"
        />
        <path
          d="M103.611 189.219L120.185 240.234H173.831L130.434 271.766L147.008 322.782L103.611 291.252L60.2116 322.782L76.7896 271.766L33.3916 240.234H87.0336L103.611 189.219Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7133">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cv.tsx
================================================
import React from "react";

const CV = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7118)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C333.591 512 403.114 477.476 450.061 422.957H61.9395C108.886 477.476 178.409 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M512 256C512 114.616 397.384 0 256 0C114.616 0 0 114.616 0 256C0 279.107 3.08 301.489 8.819 322.783H503.182C508.92 301.489 512 279.107 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M20.3477 356.174C25.2827 367.77 31.0517 378.922 37.5747 389.565H474.427C480.948 378.921 486.717 367.769 491.654 356.174H20.3477Z"
          fill="#D80027"
        />
        <path
          d="M182.99 272.696L187.134 285.45H200.545L189.696 293.333L193.84 306.087L182.99 298.204L172.14 306.087L176.285 293.333L165.436 285.45H178.847L182.99 272.696Z"
          fill="#FFDA44"
        />
        <path
          d="M182.99 439.652L187.134 452.407H200.545L189.696 460.289L193.84 473.043L182.99 465.161L172.14 473.043L176.285 460.289L165.436 452.407H178.847L182.99 439.652Z"
          fill="#FFDA44"
        />
        <path
          d="M105.274 383.189L109.418 395.942H122.829L111.98 403.824L116.124 416.58L105.274 408.697L94.4237 416.58L98.5697 403.824L87.7197 395.942H101.13L105.274 383.189Z"
          fill="#FFDA44"
        />
        <path
          d="M134.958 289.391L139.102 302.146H152.512L141.664 310.028L145.808 322.783L134.958 314.9L124.108 322.783L128.254 310.028L117.403 302.146H130.814L134.958 289.391Z"
          fill="#FFDA44"
        />
        <path
          d="M87.7197 341.915L101.128 341.916L105.273 329.159L109.418 341.915L122.829 341.914L111.979 349.797L116.124 362.552L105.273 354.669L94.4237 362.549L98.5677 349.796L87.7197 341.915Z"
          fill="#FFDA44"
        />
        <path
          d="M124.109 453.911L128.253 441.159L117.402 433.277H130.813L134.958 420.522L139.103 433.276H152.513L141.663 441.158L145.807 453.914L134.957 446.03L124.109 453.911Z"
          fill="#FFDA44"
        />
        <path
          d="M260.677 383.189L256.534 395.942H243.123L253.971 403.824L249.827 416.58L260.677 408.697L271.527 416.58L267.382 403.824L278.232 395.942H264.821L260.677 383.189Z"
          fill="#FFDA44"
        />
        <path
          d="M230.992 289.391L226.848 302.146H213.438L224.285 310.028L220.141 322.783L230.992 314.9L241.841 322.783L237.697 310.028L248.546 302.146H235.135L230.992 289.391Z"
          fill="#FFDA44"
        />
        <path
          d="M278.232 341.915L264.823 341.916L260.678 329.159L256.534 341.915L243.123 341.914L253.972 349.797L249.827 362.552L260.678 354.669L271.527 362.549L267.383 349.796L278.232 341.915Z"
          fill="#FFDA44"
        />
        <path
          d="M241.841 453.911L237.698 441.159L248.548 433.277H235.137L230.992 420.522L226.848 433.276H213.437L224.287 441.158L220.143 453.914L230.993 446.03L241.841 453.911Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7118">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CV;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cw.tsx
================================================
import React from "react";

const CW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7134)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512C340 512 414.549 471.542 461.229 409.051H50.7715C97.4515 471.542 172 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M512 256C512 114.616 397.384 0 256 0C114.616 0 0 114.616 0 256C0 286.273 5.269 315.312 14.916 342.269H497.083C506.731 315.312 512 286.273 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M175.222 164.182L189.035 206.694H233.739L197.574 232.972L211.387 275.486L175.222 249.21L139.057 275.486L152.872 232.972L116.707 206.694H161.409L175.222 164.182Z"
          fill="#F0F0F0"
        />
        <path
          d="M98.4537 119.66L106.742 145.168H133.565L111.866 160.934L120.154 186.443L98.4537 170.677L76.7547 186.443L85.0437 160.934L63.3457 145.168H90.1677L98.4537 119.66Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7134">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cy.tsx
================================================
import React from "react";

const CY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7135)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FCFCFC"
        />
        <path
          d="M400.696 222.609C392.905 222.609 383.258 222.609 367.305 222.609C367.305 284.081 317.471 333.913 256.001 333.913C194.528 333.913 144.697 284.081 144.697 222.609C133.937 222.609 122.064 222.609 111.306 222.609C111.306 288.824 155.782 344.651 216.492 361.844C209.836 374.488 210.85 390.407 220.358 402.272C232.846 392.263 245.775 381.902 256.743 373.114C267.711 381.903 280.641 392.264 293.128 402.272C302.73 390.289 303.675 374.168 296.798 361.463C356.843 343.848 400.696 288.353 400.696 222.609Z"
          fill="#6DA544"
        />
        <path
          d="M166.957 211.478C166.957 211.478 166.957 267.13 222.609 267.13L233.739 278.26H256C256 278.26 267.13 244.869 289.391 244.869C289.391 244.869 289.391 222.608 311.652 222.608C333.913 222.608 345.043 222.608 345.043 222.608C345.043 222.608 333.913 178.086 389.565 144.695L367.304 133.565C367.304 133.565 289.391 189.217 233.739 178.087V200.348H211.478L200.348 189.218L166.957 211.478Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7135">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/cz.tsx
================================================
import React from "react";

const CZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7136)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M233.739 256C233.739 256 75.1305 437.055 74.9805 437.019C121.306 483.346 185.307 512 256 512C397.384 512 512 397.384 512 256H233.739Z"
          fill="#D80027"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7136">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default CZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/de.tsx
================================================
import React from "react";

const DE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7162)">
        <path
          d="M15.9229 345.044C52.0939 442.528 145.929 512.001 256 512.001C366.071 512.001 459.906 442.528 496.077 345.044L256 322.784L15.9229 345.044Z"
          fill="#FFDA44"
        />
        <path
          d="M256 0.000976562C145.929 0.000976562 52.0939 69.473 15.9229 166.958L256 189.218L496.077 166.957C459.906 69.473 366.071 0.000976562 256 0.000976562Z"
          fill="black"
        />
        <path
          d="M15.923 166.958C5.633 194.691 0 224.687 0 256.001C0 287.315 5.633 317.311 15.923 345.044H496.078C506.368 317.311 512 287.315 512 256.001C512 224.687 506.368 194.691 496.077 166.958H15.923Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7162">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/dj.tsx
================================================
import React from "react";

const DJ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7139)">
        <path
          d="M233.739 278.261C233.739 278.261 75.1305 74.945 74.9805 74.981C121.306 28.654 185.307 0 256 0C397.384 0 512 114.616 512 256L233.739 278.261Z"
          fill="#338AF3"
        />
        <path
          d="M233.739 256C233.739 256 75.1305 437.055 74.9805 437.019C121.306 483.346 185.307 512 256 512C397.384 512 512 397.384 512 256H233.739Z"
          fill="#6DA544"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="#F0F0F0"
        />
        <path
          d="M103.61 189.217L120.185 240.233H173.831L130.433 271.765L147.007 322.783L103.61 291.252L60.2106 322.783L76.7886 271.765L33.3906 240.233H87.0326L103.61 189.217Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7139">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DJ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/dk.tsx
================================================
import React from "react";

const DK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7138)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M200.349 222.609H509.833C493.47 97.002 386.067 0 256 0C236.885 0 218.268 2.113 200.348 6.085V222.609H200.349Z"
          fill="#D80027"
        />
        <path
          d="M133.565 222.608V31.127C63.272 69.481 12.95 139.832 2.16699 222.609H133.565V222.608Z"
          fill="#D80027"
        />
        <path
          d="M133.564 289.391H2.16699C12.95 372.168 63.272 442.519 133.565 480.872L133.564 289.391Z"
          fill="#D80027"
        />
        <path
          d="M200.348 289.392V505.915C218.268 509.887 236.885 512 256 512C386.067 512 493.47 414.998 509.833 289.391H200.348V289.392Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7138">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/dm.tsx
================================================
import React from "react";

const DM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7140)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M306.087 508.076C407.29 488 487.011 408.278 507.087 307.076H306.087V508.076Z"
          fill="#496E2D"
        />
        <path
          d="M4.91309 307.076C24.9881 408.278 104.71 488 205.913 508.076V307.076H4.91309Z"
          fill="#496E2D"
        />
        <path
          d="M507.087 206.902C487.011 105.7 407.29 25.9783 306.087 5.90228V206.902H507.087Z"
          fill="#496E2D"
        />
        <path
          d="M205.913 5.90228C104.71 25.9783 24.9881 105.7 4.91309 206.902H205.913V5.90228Z"
          fill="#496E2D"
        />
        <path
          d="M239.304 307.076H205.913V508.076C216.81 510.237 227.957 511.701 239.304 512.432V307.076Z"
          fill="#FFDA44"
        />
        <path
          d="M239.304 206.902V1.54626C227.957 2.27626 216.809 3.74126 205.913 5.90226V206.902H239.304Z"
          fill="#FFDA44"
        />
        <path
          d="M272.696 1.54626C267.174 1.18926 261.611 0.989258 256 0.989258C250.389 0.989258 244.826 1.18926 239.304 1.54626V206.903H272.695V1.54626H272.696Z"
          fill="black"
        />
        <path
          d="M239.304 512.432C244.826 512.789 250.389 512.989 256 512.989C261.611 512.989 267.174 512.789 272.696 512.432V307.076H239.305V512.432H239.304Z"
          fill="black"
        />
        <path
          d="M205.913 240.293V206.902H4.91264C2.75064 217.8 1.28664 228.946 0.556641 240.293H205.913Z"
          fill="#FFDA44"
        />
        <path
          d="M306.087 240.293H511.444C510.714 228.946 509.249 217.8 507.088 206.902H306.088V240.293H306.087Z"
          fill="#FFDA44"
        />
        <path
          d="M306.087 273.685H511.444C511.8 268.164 512 262.6 512 256.989C512 251.378 511.8 245.814 511.443 240.293H306.087V273.685Z"
          fill="black"
        />
        <path
          d="M0.557 240.293C0.201 245.814 0 251.378 0 256.989C0 262.6 0.201 268.164 0.557 273.685H205.914V240.294H0.557V240.293Z"
          fill="black"
        />
        <path
          d="M256 379.424C323.619 379.424 378.435 324.608 378.435 256.989C378.435 189.37 323.619 134.554 256 134.554C188.381 134.554 133.565 189.37 133.565 256.989C133.565 324.608 188.381 379.424 256 379.424Z"
          fill="#D80027"
        />
        <path
          d="M283.894 270.649C274.787 252.436 262.95 233.976 262.95 233.976C262.95 233.976 263.244 225.571 263.244 220.563C263.244 213.019 257.128 206.903 249.584 206.903C242.437 206.903 236.581 212.394 235.984 219.385C230.364 219.752 225.917 224.414 225.917 230.126C225.917 234.279 228.27 237.878 231.714 239.677C233.426 235.673 236.778 232.547 240.924 231.122C241.6 231.675 242.326 232.169 243.101 232.588L244.851 233.426C244.851 233.426 238.362 251.717 238.362 261.543C238.362 289.167 256.576 297.686 256.576 297.686V297.971L247.469 307.077H265.682V288.863L274.789 297.97C274.869 297.799 292.039 286.94 283.894 270.649Z"
          fill="#496E2D"
        />
        <path
          d="M255.999 156.815L260.143 169.569H273.553L262.704 177.452L266.849 190.206L255.999 182.324L245.149 190.206L249.294 177.452L238.445 169.569H251.855L255.999 156.815Z"
          fill="#496E2D"
        />
        <path
          d="M197.119 175.947L207.967 183.83L218.817 175.946L214.673 188.702L225.523 196.583L212.112 196.584L207.968 209.338L203.823 196.584L190.413 196.583L201.262 188.7L197.119 175.947Z"
          fill="#496E2D"
        />
        <path
          d="M160.729 226.034H174.138L178.283 213.28L182.427 226.034L195.838 226.033L184.989 233.917L189.134 246.671L178.283 238.788L167.434 246.67L171.577 233.916L160.729 226.034Z"
          fill="#496E2D"
        />
        <path
          d="M160.729 287.944L171.577 280.063L167.433 267.308L178.283 275.191L189.133 267.308L184.989 280.062L195.839 287.945L182.427 287.946L178.283 300.699L174.138 287.944H160.729Z"
          fill="#496E2D"
        />
        <path
          d="M197.119 338.031L201.262 325.279L190.412 317.396H203.823L207.968 304.641L212.112 317.395H225.523L214.673 325.279L218.817 338.032L207.967 330.149L197.119 338.031Z"
          fill="#496E2D"
        />
        <path
          d="M255.999 357.163L251.855 344.411H238.445L249.294 336.527L245.149 323.773L255.999 331.654L266.848 323.772L262.704 336.527L273.553 344.41L260.143 344.411L255.999 357.163Z"
          fill="#496E2D"
        />
        <path
          d="M314.88 338.031L304.032 330.149L293.183 338.033L297.326 325.279L286.476 317.396L299.887 317.395L304.03 304.641L308.176 317.396H321.586L310.737 325.279L314.88 338.031Z"
          fill="#496E2D"
        />
        <path
          d="M351.27 287.944H337.861L333.716 300.699L329.572 287.946H316.16L327.01 280.062L322.865 267.309L333.716 275.191L344.564 267.309L340.422 280.063L351.27 287.944Z"
          fill="#496E2D"
        />
        <path
          d="M351.27 226.034L340.422 233.916L344.565 246.67L333.716 238.788L322.866 246.672L327.01 233.917L316.16 226.035L329.572 226.033L333.715 213.281L337.861 226.034H351.27Z"
          fill="#496E2D"
        />
        <path
          d="M314.88 175.947L310.737 188.7L321.586 196.583H308.176L304.032 209.338L299.887 196.584L286.476 196.585L297.326 188.7L293.182 175.948L304.032 183.829L314.88 175.947Z"
          fill="#496E2D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7140">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/do.tsx
================================================
import React from "react";

const DO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7141)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M8.81934 322.783C32.4573 410.486 101.514 479.544 189.218 503.182V322.783H8.81934Z"
          fill="#D80027"
        />
        <path
          d="M189.217 8.81897C101.514 32.456 32.4563 101.514 8.81934 189.217H189.218V8.81897H189.217Z"
          fill="#0052B4"
        />
        <path
          d="M503.181 189.217C479.544 101.514 410.486 32.456 322.783 8.81897V189.218H503.181V189.217Z"
          fill="#D80027"
        />
        <path
          d="M322.783 503.181C410.486 479.543 479.544 410.486 503.182 322.782H322.783V503.181Z"
          fill="#0052B4"
        />
        <path
          d="M322.783 256C322.783 292.884 292.884 322.783 256 322.783C219.117 322.783 189.217 292.884 189.217 256C189.217 219.116 256 189.217 256 189.217C256 189.217 322.783 219.116 322.783 256Z"
          fill="#496E2D"
        />
        <path
          d="M189.217 256C189.217 219.116 219.117 189.217 256 189.217C292.884 189.217 322.783 219.116 322.783 256"
          fill="#0052B4"
        />
        <path
          d="M218.435 222.609V264.348C218.435 285.095 235.253 301.913 256 301.913C276.747 301.913 293.565 285.095 293.565 264.348V222.609H218.435Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7141">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/dz.tsx
================================================
import React from "react";

const DZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7077)">
        <path
          d="M256 0C397.384 0 512 114.616 512 256C512 397.384 397.384 512 256 512C256 500.87 222.609 256 222.609 256L256 0Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C114.616 512 0 397.384 0 256C0 114.616 114.616 0 256 0"
          fill="#496E2D"
        />
        <path
          d="M311.003 206.896L289.999 235.841L255.982 224.809L277.02 253.729L256.018 282.674L290.022 271.603L311.06 300.522L311.038 264.761L345.043 253.689L311.027 242.659L311.003 206.896Z"
          fill="#D80027"
        />
        <path
          d="M277.237 328.348C237.281 328.348 204.889 295.956 204.889 256C204.889 216.044 237.281 183.652 277.237 183.652C289.695 183.652 301.418 186.802 311.652 192.348C295.596 176.647 273.64 166.956 249.411 166.956C200.233 166.956 160.368 206.822 160.368 255.999C160.368 305.176 200.234 345.042 249.411 345.042C273.641 345.042 295.597 335.351 311.652 319.65C301.418 325.198 289.695 328.348 277.237 328.348Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7077">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default DZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ec.tsx
================================================
import React from "react";

const EC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7143)">
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256L256 278.261L0 256Z"
          fill="#FFDA44"
        />
        <path
          d="M34.2559 384C78.5209 460.516 161.245 512 256 512C350.755 512 433.479 460.516 477.744 384L256 367.304L34.2559 384Z"
          fill="#D80027"
        />
        <path
          d="M477.744 384C499.526 346.346 512 302.631 512 256H0C0 302.631 12.474 346.346 34.256 384H477.744Z"
          fill="#0052B4"
        />
        <path
          d="M256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.177 166.957 256 166.957C206.823 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043Z"
          fill="#FFDA44"
        />
        <path
          d="M256 311.652C225.313 311.652 200.348 286.686 200.348 256V222.609C200.348 191.922 225.314 166.957 256 166.957C286.686 166.957 311.652 191.923 311.652 222.609V256C311.652 286.687 286.687 311.652 256 311.652Z"
          fill="#338AF3"
        />
        <path
          d="M345.043 122.435H278.26C278.26 110.141 268.293 100.174 255.999 100.174C243.705 100.174 233.738 110.141 233.738 122.435H166.955C166.955 134.73 177.664 144.696 189.957 144.696H189.216C189.216 156.991 199.182 166.957 211.477 166.957C211.477 179.252 221.443 189.218 233.738 189.218H278.26C290.555 189.218 300.521 179.252 300.521 166.957C312.816 166.957 322.782 156.991 322.782 144.696H322.041C334.335 144.696 345.043 134.729 345.043 122.435Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7143">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default EC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ee.tsx
================================================
import React from "react";

const EE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7149)">
        <path
          d="M0 256C0 287.314 5.633 317.31 15.923 345.043L256 356.174L496.077 345.044C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957L256 155.826L15.923 166.956C5.633 194.69 0 224.686 0 256H0Z"
          fill="black"
        />
        <path
          d="M256 0C145.929 0 52.0939 69.472 15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#0052B4"
        />
        <path
          d="M496.077 345.043H15.9229C52.0939 442.527 145.929 512 256 512C366.071 512 459.906 442.527 496.077 345.043Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7149">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default EE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/eg.tsx
================================================
import React from "react";

const EG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7144)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C145.929 0 52.0939 69.472 15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9229C52.0939 442.528 145.929 512 256 512Z"
          fill="black"
        />
        <path
          d="M345.043 228.174H278.26C278.26 215.88 268.293 205.913 255.999 205.913C243.705 205.913 233.738 215.88 233.738 228.174H166.955C166.955 240.469 177.664 250.435 189.958 250.435H189.216C189.216 262.73 199.182 272.696 211.477 272.696C211.477 284.991 221.443 294.957 233.738 294.957H278.26C290.555 294.957 300.521 284.991 300.521 272.696C312.816 272.696 322.782 262.73 322.782 250.435H322.041C334.335 250.435 345.043 240.469 345.043 228.174Z"
          fill="#FF9811"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7144">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default EG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/er.tsx
================================================
import React from "react";

const ER = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7148)">
        <path
          d="M233.739 233.739C233.739 233.739 75.1305 437.056 74.9805 437.019C121.306 483.346 185.307 512 256 512C397.384 512 512 397.384 512 256L233.739 233.739Z"
          fill="#338AF3"
        />
        <path
          d="M233.739 256C233.739 256 75.1305 74.945 74.9805 74.981C121.306 28.654 185.307 0 256 0C397.384 0 512 114.616 512 256H233.739Z"
          fill="#6DA544"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C74.9725 437.061 512 256 512 256L74.9795 74.98Z"
          fill="#D80027"
        />
        <path
          d="M133.565 150.261C84.4665 150.261 44.5225 190.206 44.5225 239.304V272.695C44.5225 321.794 84.4675 361.738 133.565 361.738C182.663 361.738 222.608 321.793 222.608 272.695V239.304C222.609 190.206 182.664 150.261 133.565 150.261ZM189.217 272.696C189.217 297.568 172.815 318.677 150.26 325.786V289.392L173.884 265.768L150.273 242.157L150.26 233.754V222.61H116.87V256L93.2625 279.607L116.87 303.214V325.787C94.3155 318.678 77.9135 297.569 77.9135 272.697V239.306C77.9135 208.619 102.879 183.654 133.565 183.654C164.251 183.654 189.217 208.62 189.217 239.306V272.696Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7148">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ER;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/es.tsx
================================================
import React from "react";

const ES = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7292)">
        <path
          d="M0 256C0 287.314 5.633 317.31 15.923 345.043L256 367.304L496.077 345.043C506.367 317.31 512 287.314 512 256C512 224.686 506.367 194.69 496.077 166.957L256 144.696L15.923 166.957C5.633 194.69 0 224.686 0 256H0Z"
          fill="#FFDA44"
        />
        <path
          d="M496.077 166.957C459.906 69.473 366.071 0 256 0C145.929 0 52.094 69.473 15.923 166.957H496.077Z"
          fill="#D80027"
        />
        <path
          d="M15.923 345.043C52.094 442.527 145.929 512 256 512C366.071 512 459.906 442.527 496.077 345.043H15.923Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7292">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ES;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/et.tsx
================================================
import React from "react";

const ET = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7150)">
        <path
          d="M0 256.989C0 288.305 5.633 318.301 15.924 346.035L256 368.293L496.076 346.034C506.368 318.301 512 288.304 512 256.989C512 226.104 506.529 196.497 496.506 169.084L256 145.685L15.494 169.085C5.471 196.497 0 226.104 0 256.989H0Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512.989C366.071 512.989 459.906 443.517 496.077 346.032H15.9229C52.0939 443.517 145.929 512.989 256 512.989Z"
          fill="#D80027"
        />
        <path
          d="M256 0.989258C145.929 0.989258 52.0939 70.4613 15.9229 167.946H496.078C459.906 70.4613 366.071 0.989258 256 0.989258Z"
          fill="#6DA544"
        />
        <path
          d="M256 379.424C323.619 379.424 378.435 324.608 378.435 256.989C378.435 189.37 323.619 134.554 256 134.554C188.381 134.554 133.565 189.37 133.565 256.989C133.565 324.608 188.381 379.424 256 379.424Z"
          fill="#0052B4"
        />
        <path
          d="M255.974 162.18L278.076 230.202H349.713L291.735 272.243L314.011 340.467L255.974 298.226L198.026 340.389L220.212 272.243L162.287 230.202H233.872L255.974 162.18Z"
          fill="#FFDA44"
        />
        <path
          d="M344.124 273.919L274.008 251.135L317.341 191.495L299.333 178.409L255.998 238.053L212.667 178.41L194.657 191.494L237.989 251.139L167.876 273.918L174.754 295.091L244.87 272.31V346.032H267.13V272.309L337.243 295.091L344.124 273.919Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7150">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ET;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/eu.tsx
================================================
import React from "react";

const EU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clip-path="url(#clip0_312_7693)">
        <path
          d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24Z"
          fill="#0052B4"
        />
        <path
          d="M11.9993 4.69568L12.3878 5.89141H13.645L12.6279 6.6304L13.0164 7.82613L11.9993 7.0871L10.9821 7.82613L11.3707 6.6304L10.3535 5.89141H11.6107L11.9993 4.69568Z"
          fill="#FFDA44"
        />
        <path
          d="M6.83377 6.83503L7.95408 7.40578L8.84306 6.51685L8.64633 7.75856L9.76659 8.32936L8.52483 8.52605L8.32814 9.76786L7.75734 8.6476L6.51562 8.84433L7.40461 7.95535L6.83377 6.83503Z"
          fill="#FFDA44"
        />
        <path
          d="M4.69531 12L5.89105 11.6115V10.3542L6.62998 11.3714L7.82577 10.9829L7.08669 12L7.82577 13.0172L6.62998 12.6287L5.89105 13.6458V12.3886L4.69531 12Z"
          fill="#FFDA44"
        />
        <path
          d="M6.83377 17.165L7.40456 16.0446L6.51562 15.1557L7.75739 15.3524L8.32809 14.2322L8.52483 15.4739L9.76655 15.6706L8.64642 16.2414L8.84306 17.4831L7.95408 16.5942L6.83377 17.165Z"
          fill="#FFDA44"
        />
        <path
          d="M11.9993 19.3043L11.6107 18.1086H10.3535L11.3707 17.3696L10.9821 16.174L11.9993 16.9129L13.0164 16.174L12.6279 17.3696L13.645 18.1086H12.3878L11.9993 19.3043Z"
          fill="#FFDA44"
        />
        <path
          d="M17.1652 17.165L16.0449 16.5942L15.1559 17.4832L15.3526 16.2414L14.2324 15.6706L15.4741 15.4739L15.6708 14.2322L16.2416 15.3524L17.4833 15.1557L16.5943 16.0447L17.1652 17.165Z"
          fill="#FFDA44"
        />
        <path
          d="M19.3042 12L18.1085 12.3886V13.6458L17.3695 12.6286L16.1738 13.0172L16.9128 12L16.1738 10.9829L17.3695 11.3714L18.1085 10.3542V11.6115L19.3042 12Z"
          fill="#FFDA44"
        />
        <path
          d="M17.1652 6.83511L16.5944 7.95542L17.4833 8.84441L16.2415 8.64762L15.6708 9.76789L15.4741 8.52612L14.2324 8.32939L15.3526 7.75864L15.1559 6.51697L16.0449 7.40591L17.1652 6.83511Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_312_7693">
          <rect width="24" height="24" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default EU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fi.tsx
================================================
import React from "react";

const FI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7155)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M509.833 222.609H200.349H200.348V6.08502C176.69 11.331 154.261 19.834 133.565 31.127V222.607V222.608H2.167C0.742 233.539 0 244.683 0 256C0 267.317 0.742 278.461 2.167 289.391H133.564H133.565V480.872C154.261 492.164 176.69 500.669 200.348 505.914V289.394V289.392H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7155">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fj.tsx
================================================
import React from "react";

const FJ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7154)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#338AF3"
        />
        <path d="M256 122.435V208.778L166.957 122.435H256Z" fill="#0052B4" />
        <path
          d="M133.565 256H208.777L133.565 155.826L122.435 233.739L133.565 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.592 0.024 0 114.629 0 256H133.565V180.789L208.777 256H255.317C255.545 255.772 255.773 255.544 256.002 255.315C256.002 238.068 256.002 222.679 256.002 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.391C89.4756 56.19 56.1896 89.476 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.111 256 59.045 256 33.391H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.046 133.566H133.565V133.568L255.997 256H255.999C255.999 256 255.999 234.293 255.999 224.519Z"
          fill="#D80027"
        />
        <path
          d="M289.391 166.957V255.999C289.391 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.217 315.639 445.217 255.999V166.957L367.304 144.696L289.391 166.957Z"
          fill="#F3F3F3"
        />
        <path
          d="M445.217 166.957V133.566H289.391V166.957H356.172V233.741H289.391V256V256.002L356.172 256.003V330.5C362.89 332.876 367.304 333.914 367.304 333.914C367.304 333.914 371.716 332.878 378.433 330.5V256.002H445.217V256V233.74H378.433V166.956H445.217V166.957Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7154">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FJ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fk.tsx
================================================
import React from "react";

const FK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7153)">
        <path
          d="M512 256.001C512 397.385 397.384 512.001 256 512.001C114.616 512.001 0 397.385 0 256.001C0 256.062 256 0.0289766 256 0.000976562C397.384 0.000976562 512 114.617 512 256.001Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256.001H256C256 255.771 256 255.547 256 255.316C255.772 255.545 255.544 255.773 255.315 256.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.566C256 88.521 256 59.006 256 0.000976562H255.957C114.592 0.0249766 0 114.63 0 256.001H133.565V180.79L208.777 256.001H255.316L256.001 255.316C256.001 238.069 256.001 222.68 256.001 208.779L180.788 133.566H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.392C89.4761 56.191 56.1901 89.477 33.3911 129.516V256.001H100.174V100.177V100.175H256C256 79.112 256 59.046 256 33.392H129.515Z"
          fill="#D80027"
        />
        <path
          d="M256 224.52L165.047 133.567H133.566V133.569L255.998 256.001H256C256 256.001 256 234.294 256 224.52Z"
          fill="#D80027"
        />
        <path
          d="M411.826 300.523V311.653H322.783V300.523H289.391V345.044H311.652V356.175H422.957V345.044H445.217V300.523H411.826Z"
          fill="#FFDA44"
        />
        <path
          d="M289.391 133.566V256.001C289.391 315.64 367.304 333.914 367.304 333.914C367.304 333.914 445.217 315.64 445.217 256.001V133.566H289.391Z"
          fill="#338AF3"
        />
        <path
          d="M367.3 224.89C347.823 224.89 347.823 242.699 328.346 242.699C308.869 242.699 308.869 224.89 289.392 224.89V256.055C308.869 256.055 308.869 273.864 328.346 273.864C347.823 273.864 347.823 256.055 367.3 256.055C386.779 256.055 386.779 273.864 406.259 273.864C425.739 273.864 425.738 256.055 445.218 256.055V224.89C425.739 224.89 425.739 242.699 406.259 242.699C386.779 242.699 386.779 224.89 367.3 224.89Z"
          fill="#F3F3F3"
        />
        <path
          d="M367.3 162.505C347.823 162.505 347.823 180.314 328.346 180.314C308.869 180.314 308.869 162.505 289.392 162.505V193.67C308.869 193.67 308.869 211.479 328.346 211.479C347.823 211.479 347.823 193.67 367.3 193.67C386.779 193.67 386.779 211.479 406.259 211.479C425.739 211.479 425.738 193.67 445.218 193.67V162.505C425.739 162.505 425.739 180.314 406.259 180.314C386.779 180.314 386.779 162.505 367.3 162.505Z"
          fill="#F3F3F3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7153">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fm.tsx
================================================
import React from "react";

const FM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7222)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M255.999 111.304L267.049 145.316H302.813L273.881 166.337L284.931 200.348L255.999 179.328L227.066 200.348L238.119 166.337L209.186 145.316H244.949L255.999 111.304Z"
          fill="#F0F0F0"
        />
        <path
          d="M111.304 256.002L145.316 244.95V209.186L166.337 238.12L200.348 227.069L179.328 256.002L200.348 284.932L166.337 273.88L145.316 302.813V267.051L111.304 256.002Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.001 400.696L244.95 366.684H209.186L238.12 345.663L227.069 311.652L256.001 332.672L284.932 311.652L273.88 345.663L302.813 366.684H267.051L256.001 400.696Z"
          fill="#F0F0F0"
        />
        <path
          d="M400.696 255.999L366.684 267.05V302.813L345.663 273.88L311.652 284.931L332.672 255.999L311.652 227.068L345.663 238.12L366.684 209.186V244.949L400.696 255.999Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7222">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fo.tsx
================================================
import React from "react";

const FO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7152)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M500.87 256L509.829 222.609C508.341 211.228 506.109 200.08 503.182 189.218H233.739V0.973999C222.379 1.952 211.234 3.681 200.348 6.095L155.826 33.391L133.565 31.144C121.85 37.536 110.689 44.816 100.174 52.895V189.217H8.8189C5.8919 200.079 3.6599 211.227 2.1719 222.608L11.1299 256L2.1709 289.391C3.6589 300.772 5.8909 311.92 8.8179 322.782H100.173V459.104C110.688 467.184 121.85 474.463 133.564 480.855L166.955 478.608L200.346 505.904C211.233 508.317 222.378 510.046 233.737 511.025V322.783H503.179C506.106 311.921 508.338 300.773 509.826 289.392L500.87 256Z"
          fill="#0052B4"
        />
        <path
          d="M509.833 222.609H200.349H200.348V6.08502C176.69 11.331 154.261 19.834 133.565 31.127V222.608H2.167C0.744 233.539 0 244.683 0 256C0 267.317 0.744 278.461 2.167 289.391H133.564H133.565V480.872C154.261 492.164 176.69 500.669 200.348 505.914V289.394V289.392H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7152">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/fr.tsx
================================================
import React from "react";

const FR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7156)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 145.929 442.528 52.094 345.043 15.923V496.078C442.528 459.906 512 366.071 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.071 69.473 459.906 166.957 496.077V15.923C69.473 52.094 0 145.929 0 256Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7156">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default FR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ga.tsx
================================================
import React from "react";

const GA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7158)">
        <path
          d="M496.077 345.043C506.368 317.311 512 287.314 512 256C512 224.686 506.368 194.691 496.077 166.957L256 144.696L15.923 166.957C5.633 194.691 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512C366.07 512 459.906 442.528 496.076 345.043H15.9219C52.0939 442.528 145.928 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M256 0C145.928 0 52.0939 69.472 15.9219 166.957H496.077C459.906 69.472 366.07 0 256 0Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7158">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gb.tsx
================================================
import React from "react";

const GB = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7321)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M52.92 100.142C32.811 126.305 17.648 156.46 8.81897 189.219H141.997L52.92 100.142Z"
          fill="#0052B4"
        />
        <path
          d="M503.181 189.219C494.352 156.461 479.188 126.306 459.08 100.143L370.005 189.219H503.181Z"
          fill="#0052B4"
        />
        <path
          d="M8.81897 322.784C17.649 355.542 32.812 385.697 52.92 411.859L141.994 322.784H8.81897Z"
          fill="#0052B4"
        />
        <path
          d="M411.858 52.9211C385.695 32.8121 355.541 17.6491 322.782 8.81909V141.996L411.858 52.9211Z"
          fill="#0052B4"
        />
        <path
          d="M100.142 459.079C126.305 479.188 156.46 494.351 189.218 503.181V370.005L100.142 459.079Z"
          fill="#0052B4"
        />
        <path
          d="M189.217 8.81909C156.459 17.6491 126.304 32.8121 100.142 52.9201L189.217 141.995V8.81909Z"
          fill="#0052B4"
        />
        <path
          d="M322.783 503.181C355.541 494.351 385.696 479.188 411.858 459.08L322.783 370.005V503.181Z"
          fill="#0052B4"
        />
        <path
          d="M370.005 322.784L459.08 411.86C479.188 385.698 494.352 355.542 503.181 322.784H370.005Z"
          fill="#0052B4"
        />
        <path
          d="M509.833 222.609H289.393H289.392V2.167C278.461 0.744 267.317 0 256 0C244.681 0 233.539 0.744 222.609 2.167V222.607V222.608H2.167C0.744 233.539 0 244.683 0 256C0 267.319 0.744 278.461 2.167 289.391H222.607H222.608V509.833C233.539 511.256 244.681 512 256 512C267.317 512 278.461 511.257 289.391 509.833V289.393V289.392H509.833C511.256 278.461 512 267.319 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#D80027"
        />
        <path
          d="M322.783 322.784L437.019 437.02C442.273 431.768 447.285 426.277 452.067 420.585L354.265 322.783H322.783V322.784Z"
          fill="#D80027"
        />
        <path
          d="M189.217 322.784H189.215L74.98 437.019C80.232 442.273 85.723 447.285 91.415 452.067L189.217 354.263V322.784Z"
          fill="#D80027"
        />
        <path
          d="M189.217 189.219V189.217L74.981 74.98C69.727 80.232 64.715 85.723 59.933 91.415L157.736 189.218H189.217V189.219Z"
          fill="#D80027"
        />
        <path
          d="M322.783 189.219L437.02 74.9811C431.768 69.7271 426.277 64.7151 420.585 59.9341L322.783 157.737V189.219Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7321">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GB;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gd.tsx
================================================
import React from "react";

const GD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7167)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M111.713 44.522C152.798 16.436 202.476 0 256 0C309.524 0 359.202 16.436 400.287 44.522L256 55.652L111.713 44.522Z"
          fill="#A2001D"
        />
        <path d="M256 256L239.662 239.662L235.324 247.433L256 256Z" fill="#0052B4" />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="#496E2D"
        />
        <path
          d="M437.02 74.98C536.994 174.954 536.994 337.045 437.02 437.02C395.707 395.707 355.974 355.974 256 256L437.02 74.98Z"
          fill="#496E2D"
        />
        <path
          d="M256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.177 166.957 256 166.957C206.823 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043Z"
          fill="#A2001D"
        />
        <path
          d="M255.999 166.957L275.958 228.386H340.556L288.298 266.359L308.257 327.791L255.999 289.825L203.739 327.791L223.702 266.359L171.444 228.386H236.038L255.999 166.957Z"
          fill="#FFDA44"
        />
        <path
          d="M256 0C255.971 0 255.943 0.002 255.914 0.002H256.085C256.057 0.002 256.029 0 256 0Z"
          fill="#FFDA44"
        />
        <path
          d="M256.086 0H255.915C185.262 0.023 121.301 28.666 74.9941 74.968H437.007C390.699 28.666 326.738 0.023 256.086 0Z"
          fill="#A2001D"
        />
        <path
          d="M74.9951 437.033C121.321 483.352 185.315 512 256 512C326.685 512 390.679 483.352 437.005 437.033H74.9951Z"
          fill="#A2001D"
        />
        <path
          d="M256 27.826L260.145 40.5801H273.555L262.706 48.4631L266.851 61.217L256 53.335L245.151 61.217L249.296 48.4631L238.445 40.5801H251.855L256 27.826Z"
          fill="#FFDA44"
        />
        <path
          d="M193.923 27.826L198.068 40.5801H211.478L200.629 48.4631L204.774 61.217L193.923 53.335L183.075 61.217L187.219 48.4631L176.368 40.5801H189.778L193.923 27.826Z"
          fill="#FFDA44"
        />
        <path
          d="M318.077 27.826L322.222 40.5801H335.632L324.783 48.4631L328.928 61.217L318.077 53.335L307.228 61.217L311.373 48.4631L300.522 40.5801H313.932L318.077 27.826Z"
          fill="#FFDA44"
        />
        <path
          d="M256 450.783L260.145 463.537H273.555L262.706 471.42L266.851 484.174L256 476.291L245.151 484.174L249.296 471.42L238.445 463.537H251.855L256 450.783Z"
          fill="#FFDA44"
        />
        <path
          d="M193.923 450.783L198.068 463.537H211.478L200.629 471.42L204.774 484.174L193.923 476.291L183.075 484.174L187.219 471.42L176.368 463.537H189.778L193.923 450.783Z"
          fill="#FFDA44"
        />
        <path
          d="M318.077 450.783L322.222 463.537H335.632L324.783 471.42L328.928 484.174L318.077 476.291L307.228 484.174L311.373 471.42L300.522 463.537H313.932L318.077 450.783Z"
          fill="#FFDA44"
        />
        <path
          d="M78.003 251.772C84.578 262.161 81.488 275.912 71.099 282.488C60.711 289.064 46.959 285.974 40.383 275.585C28.478 256.777 35.381 226.06 35.381 226.06C35.381 226.06 66.097 232.963 78.003 251.772Z"
          fill="#FFDA44"
        />
        <path
          d="M65.1456 284.215C71.2926 284.215 76.2756 279.232 76.2756 273.085C76.2756 266.938 71.2926 261.955 65.1456 261.955C58.9987 261.955 54.0156 266.938 54.0156 273.085C54.0156 279.232 58.9987 284.215 65.1456 284.215Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7167">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ge.tsx
================================================
import React from "react";

const GE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7161)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M509.833 222.609H289.393H289.392V2.167C278.461 0.744 267.317 0 256 0C244.683 0 233.539 0.744 222.609 2.167V222.607V222.608H2.167C0.744 233.539 0 244.683 0 256C0 267.319 0.744 278.461 2.167 289.391H222.607H222.608V509.833C233.539 511.256 244.683 512 256 512C267.317 512 278.461 511.257 289.391 509.833V289.393V289.392H509.833C511.256 278.461 512 267.319 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#D80027"
        />
        <path
          d="M155.826 122.435V89.043H122.435V122.435H89.043V155.826H122.435V189.217H155.826V155.826H189.217V122.435H155.826Z"
          fill="#D80027"
        />
        <path
          d="M389.565 122.435V89.043H356.174V122.435H322.783V155.826H356.174V189.217H389.565V155.826H422.957V122.435H389.565Z"
          fill="#D80027"
        />
        <path
          d="M155.826 356.174V322.783H122.435V356.174H89.043V389.565H122.435V422.957H155.826V389.565H189.217V356.174H155.826Z"
          fill="#D80027"
        />
        <path
          d="M389.565 356.174V322.783H356.174V356.174H322.783V389.565H356.174V422.957H389.565V389.565H422.957V356.174H389.565Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7161">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gg.tsx
================================================
import React from "react";

const GG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7170)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M509.833 223.598H289.393H289.392V3.15626C278.461 1.73326 267.317 0.989258 256 0.989258C244.683 0.989258 233.539 1.73326 222.609 3.15626V223.598H2.167C0.744 234.528 0 245.672 0 256.989C0 268.306 0.744 279.45 2.167 290.38H222.607H222.608V510.822C233.539 512.245 244.683 512.989 256 512.989C267.317 512.989 278.461 512.246 289.391 510.822V290.383V290.381H509.833C511.256 279.45 512 268.306 512 256.989C512 245.672 511.256 234.528 509.833 223.598Z"
          fill="#D80027"
        />
        <path
          d="M328.348 268.119L345.043 279.25V234.728L328.348 245.859H267.13V184.641L278.261 167.946H233.739L244.87 184.641V245.859H183.652L166.957 234.728V279.25L183.652 268.119H244.87V329.337L233.739 346.032H278.261L267.13 329.337V268.119H328.348Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7170">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gh.tsx
================================================
import React from "react";

const GH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7163)">
        <path
          d="M0 256C0 287.314 5.633 317.31 15.923 345.043L256 356.174L496.077 345.044C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957L256 155.826L15.923 166.956C5.633 194.69 0 224.686 0 256H0Z"
          fill="#FFDA44"
        />
        <path
          d="M256 0C145.929 0 52.0939 69.472 15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M496.077 345.043H15.9229C52.0939 442.527 145.929 512 256 512C366.071 512 459.906 442.527 496.077 345.043Z"
          fill="#496E2D"
        />
        <path
          d="M255.998 166.957L278.098 234.977H349.626L291.763 277.02L313.863 345.043L255.998 303.003L198.133 345.043L220.237 277.02L162.374 234.977H233.898L255.998 166.957Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7163">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gi.tsx
================================================
import React from "react";

const GI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7164)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F9F9F9"
        />
        <path
          d="M256 512C366.07 512 459.906 442.528 496.076 345.043H15.9219C52.0939 442.528 145.928 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M356.173 211.478V178.087H367.303V155.826H345.042V166.957H322.782V155.826H300.521V178.087H311.651V211.478H289.39V133.567H300.521V111.307H278.26V122.435H267.129V111.307H244.869V122.435H233.738V111.307H211.477V133.567H222.608V211.478H200.347V178.087H211.477V155.826H189.216V166.957H166.956V155.826H144.695V178.087H155.825V211.478H133.564V300.522H378.434V211.478H356.173Z"
          fill="#D80027"
        />
        <path
          d="M256 289.391C237.559 289.391 222.609 304.341 222.609 322.782C222.609 337.318 231.903 349.682 244.87 354.266V400.696H211.479V445.218H267.131V354.267C280.098 349.683 289.392 337.32 289.392 322.783C289.391 304.342 274.441 289.391 256 289.391ZM256 333.913C249.853 333.913 244.87 328.929 244.87 322.783C244.87 316.636 249.853 311.653 256 311.653C262.147 311.653 267.13 316.636 267.13 322.783C267.13 328.929 262.147 333.913 256 333.913Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7164">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gl.tsx
================================================
import React from "react";

const GL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7166)">
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256C500.87 256 256 289.391 256 289.391L0 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256"
          fill="#D80027"
        />
        <path
          d="M178.087 378.435C245.706 378.435 300.522 323.619 300.522 256C300.522 188.381 245.706 133.565 178.087 133.565C110.468 133.565 55.6523 188.381 55.6523 256C55.6523 323.619 110.468 378.435 178.087 378.435Z"
          fill="#F0F0F0"
        />
        <path
          d="M55.6523 256C55.6523 188.383 110.468 133.565 178.087 133.565C245.707 133.565 300.522 188.382 300.522 256"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7166">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gm.tsx
================================================
import React from "react";

const GM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7160)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0.989258C150.165 0.989258 59.3367 65.2153 20.3477 156.815H491.653C452.664 65.2153 361.835 0.989258 256 0.989258Z"
          fill="#A2001D"
        />
        <path
          d="M256 512.989C361.835 512.989 452.664 448.763 491.652 357.163H20.3477C59.3367 448.763 150.165 512.989 256 512.989Z"
          fill="#496E2D"
        />
        <path
          d="M503.181 190.206H8.819C3.08 211.499 0 233.882 0 256.989C0 280.096 3.08 302.479 8.819 323.772H503.182C508.92 302.479 512 280.096 512 256.989C512 233.882 508.92 211.499 503.181 190.206Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7160">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gn.tsx
================================================
import React from "react";

const GN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7172)">
        <path
          d="M345.046 15.925C317.312 5.63398 287.315 0.000976562 256 0.000976562C224.687 0.000976562 194.691 5.63398 166.959 15.923L155.828 256.001L166.958 496.079C194.691 506.369 224.687 512.001 256 512.001C287.316 512.001 317.312 506.369 345.046 496.077L356.176 256.001L345.046 15.925Z"
          fill="#FFDA44"
        />
        <path
          d="M0 256.001C0 366.071 69.472 459.907 166.957 496.077V15.923C69.472 52.095 0 145.929 0 256.001Z"
          fill="#D80027"
        />
        <path
          d="M512 256.001C512 145.929 442.528 52.095 345.043 15.923V496.078C442.528 459.907 512 366.071 512 256.001Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7172">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gp.tsx
================================================
import React from "react";

const GP = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7156)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 145.929 442.528 52.094 345.043 15.923V496.078C442.528 459.906 512 366.071 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.071 69.473 459.906 166.957 496.077V15.923C69.473 52.094 0 145.929 0 256Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7156">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GP;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gq.tsx
================================================
import React from "react";

const GQ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7147)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M155.826 166.957H496.076C459.906 69.472 366.07 0 256 0C185.306 0 121.313 28.659 74.9893 74.989L155.826 166.957Z"
          fill="#6DA544"
        />
        <path
          d="M155.826 345.043H496.076C459.906 442.528 366.07 512 256 512C185.306 512 121.313 483.341 74.9893 437.011L155.826 345.043Z"
          fill="#D80027"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="#0052B4"
        />
        <path
          d="M300.522 211.478V267.13C300.522 301.21 345.044 311.653 345.044 311.653C345.044 311.653 389.566 301.21 389.566 267.13V211.478H300.522Z"
          fill="#DEDDE0"
        />
        <path d="M333.913 257.113H356.174V289.391H333.913V257.113Z" fill="#786145" />
        <path
          d="M367.304 244.87C367.304 232.575 357.338 222.609 345.043 222.609C332.748 222.609 322.782 232.575 322.782 244.87C316.635 244.87 311.652 249.853 311.652 256C311.652 262.147 316.635 267.13 322.782 267.13H367.304C373.451 267.13 378.434 262.147 378.434 256C378.434 249.853 373.452 244.87 367.304 244.87Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7147">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GQ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gr.tsx
================================================
import React from "react";

const GR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7165)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 189.217H503.181C496.762 165.403 487.006 142.962 474.426 122.434H256V189.217Z"
          fill="#338AF3"
        />
        <path
          d="M96.6432 456.348H415.356C438.719 437.74 458.755 415.138 474.425 389.565H37.5742C53.2452 415.137 73.2812 437.74 96.6432 456.348Z"
          fill="#338AF3"
        />
        <path
          d="M89.0432 61.939C68.9172 79.27 51.5182 99.679 37.5742 122.435H89.0432V61.939Z"
          fill="#338AF3"
        />
        <path
          d="M256 256C256 229.924 256 208.101 256 189.217H155.826V256H89.043V189.217H8.819C3.08 210.511 0 232.893 0 256C0 279.107 3.08 301.489 8.819 322.783H503.182C508.92 301.489 512 279.107 512 256H256Z"
          fill="#338AF3"
        />
        <path
          d="M256 0C220.451 0 186.596 7.253 155.826 20.348V122.435H256C256 99.123 256 79.296 256 55.652H415.357C371.626 20.824 316.249 0 256 0Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7165">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gt.tsx
================================================
import React from "react";

const GT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7169)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 154.506 452.935 66.81 367.304 25.402V486.597C452.935 445.19 512 357.493 512 256Z"
          fill="#338AF3"
        />
        <path
          d="M0 256C0 357.493 59.065 445.19 144.696 486.598V25.402C59.065 66.81 0 154.506 0 256Z"
          fill="#338AF3"
        />
        <path
          d="M322.898 299.288L279.612 256.002L320.815 214.797L318.948 193.035L307.152 181.237L256 232.389L204.848 181.237L193.052 193.035L191.185 214.797L232.388 256.002L189.101 299.288L212.713 322.898L256 279.613L299.287 322.898L322.898 299.288Z"
          fill="#ACABB1"
        />
        <path
          d="M318.963 193.037L295.352 216.648C305.423 226.719 311.653 240.632 311.653 256C311.653 286.736 286.736 311.652 256.001 311.652C225.266 311.652 200.348 286.736 200.348 256C200.348 240.632 206.578 226.719 216.649 216.648L193.038 193.037C176.923 209.149 166.957 231.41 166.957 256C166.957 305.178 206.823 345.043 256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 231.411 335.077 209.15 318.963 193.037Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7169">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gu.tsx
================================================
import React from "react";

const GU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7168)">
        <path
          d="M111.713 467.478C152.797 495.563 202.477 512 256 512C309.523 512 359.202 495.563 400.287 467.478L256 445.217L111.713 467.478Z"
          fill="#D80027"
        />
        <path
          d="M400.287 44.522C359.202 16.437 309.523 0 256 0C202.477 0 152.797 16.437 111.713 44.522L256 66.783L400.287 44.522Z"
          fill="#D80027"
        />
        <path
          d="M512 256C512 171.29 461.284 86.22 400.287 44.522H111.713C44.27 90.626 0 168.14 0 256C0 343.863 44.27 421.374 111.713 467.478H400.287C467.731 421.374 512 343.863 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M241.513 417.597C238.015 414.597 155.826 343.149 155.826 256C155.826 168.851 238.014 97.402 241.513 94.403L256 81.985L270.487 94.402C273.985 97.402 356.174 168.85 356.174 256C356.174 343.15 273.986 414.599 270.487 417.597L256 430.015L241.513 417.597Z"
          fill="#D80027"
        />
        <path
          d="M333.913 256C333.913 178.087 256 111.304 256 111.304C256 111.304 178.087 178.089 178.087 256C178.087 279.835 185.384 302.624 195.506 322.783H316.494C326.616 302.624 333.913 279.835 333.913 256Z"
          fill="#338AF3"
        />
        <path
          d="M333.913 256C333.913 279.835 326.616 302.624 316.494 322.783L256 333.913L195.506 322.783C185.384 302.625 178.087 279.835 178.087 256H333.913Z"
          fill="#0052B4"
        />
        <path
          d="M256 400.696C256 400.696 293.528 368.519 316.494 322.783H195.506C218.472 368.519 256 400.696 256 400.696Z"
          fill="#FFDA44"
        />
        <path d="M205.913 211.478H306.087L256 261.565L205.913 211.478Z" fill="#6DA544" />
        <path d="M239.304 244.87H272.695V345.044H239.304V244.87Z" fill="#A2001D" />
      </g>
      <defs>
        <clipPath id="clip0_4_7168">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gw.tsx
================================================
import React from "react";

const GW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7171)">
        <path
          d="M256 0C232.894 0 210.51 3.08 189.217 8.819L166.957 256L189.218 503.181C210.51 508.92 232.894 512 256 512C397.384 512 512 397.384 512 256C512 114.616 397.384 0 256 0Z"
          fill="#FFDA44"
        />
        <path
          d="M166.957 256L189.218 503.181C210.51 508.92 232.894 512 256 512C397.384 512 512 397.384 512 256H166.957Z"
          fill="#6DA544"
        />
        <path
          d="M0 256C0 353.035 53.99 437.455 133.565 480.873V31.127C53.99 74.545 0 158.965 0 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 374.279 80.221 473.805 189.217 503.181V8.81897C80.221 38.195 0 137.721 0 256Z"
          fill="#D80027"
        />
        <path
          d="M96.7356 189.217L113.311 240.233H166.957L123.559 271.765L140.133 322.783L96.7356 291.252L53.3366 322.783L69.9146 271.765L26.5166 240.233H80.1596L96.7356 189.217Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7171">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/gy.tsx
================================================
import React from "react";

const GY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7173)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C210.739 0 168.231 11.762 131.339 32.372V479.628C168.232 500.238 210.739 512 256 512C397.384 512 512 397.384 512 256C512 114.616 397.384 0 256 0Z"
          fill="#6DA544"
        />
        <path
          d="M132.092 31.9509C115.987 40.8759 100.949 51.4839 87.21 63.5439C88.599 62.3259 90.002 61.1219 91.416 59.9339L287.481 256L91.415 452.066C90 450.878 88.598 449.674 87.209 448.456C100.948 460.516 115.987 471.123 132.091 480.049L512 256L132.092 31.9509Z"
          fill="#F0F0F0"
        />
        <path
          d="M110.47 45.3821C102.663 50.7881 95.1646 56.6051 88.0196 62.8221L256 256L88.0186 449.178C95.1636 455.395 102.662 461.213 110.469 466.618L468.178 256L110.47 45.3821Z"
          fill="#FFDA44"
        />
        <path
          d="M91.4155 59.9341C85.7245 64.7161 80.2325 69.7291 74.9805 74.9801L233.739 256L74.9805 437.02C80.2325 442.272 85.7235 447.286 91.4155 452.066L287.481 256L91.4155 59.9341Z"
          fill="black"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C116.293 395.707 156.026 355.974 256 256L74.9795 74.98Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7173">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default GY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/hk.tsx
================================================
import React from "react";

const HK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7177)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M282.429 193.668C276.611 217.867 266.274 213.252 261.201 234.356C231.318 227.171 212.915 197.121 220.1 167.236C227.282 137.353 257.334 118.949 287.218 126.134C277.071 168.341 287.634 172.025 282.429 193.668Z"
          fill="#F0F0F0"
        />
        <path
          d="M204.887 211.6C226.104 224.61 218.52 233.017 237.022 244.364C220.954 270.565 186.689 278.78 160.487 262.713C134.286 246.646 126.069 212.379 142.137 186.178C179.143 208.87 185.908 199.963 204.887 211.6Z"
          fill="#F0F0F0"
        />
        <path
          d="M197.978 290.892C216.909 274.734 222.558 284.544 239.067 270.454C259.022 293.831 256.246 328.959 232.87 348.914C209.492 368.869 174.364 366.09 154.412 342.715C187.426 314.532 181.045 305.343 197.978 290.892Z"
          fill="#F0F0F0"
        />
        <path
          d="M271.254 321.965C261.734 298.968 272.81 296.624 264.511 276.571C292.91 264.818 325.462 278.312 337.216 306.711C348.969 335.11 335.473 367.661 307.074 379.415C290.477 339.306 279.768 342.535 271.254 321.965Z"
          fill="#F0F0F0"
        />
        <path
          d="M323.45 261.876C298.637 263.823 299.828 252.563 278.193 254.261C275.79 223.622 298.684 196.831 329.325 194.426C359.965 192.027 386.755 214.919 389.157 245.561C345.88 248.954 345.641 260.137 323.45 261.876Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7177">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default HK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/hn.tsx
================================================
import React from "react";

const HN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7176)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4023C66.8103 452.935 154.506 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M256 0C154.506 0 66.8103 59.065 25.4023 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="#338AF3"
        />
        <path
          d="M157.546 166.957L165.834 192.466H192.655L170.957 208.23L179.246 233.739L157.546 217.974L135.846 233.739L144.135 208.23L122.436 192.466H149.257L157.546 166.957Z"
          fill="#338AF3"
        />
        <path
          d="M157.546 278.261L165.834 303.771H192.655L170.957 319.535L179.246 345.043L157.546 329.278L135.846 345.043L144.135 319.535L122.436 303.771H149.257L157.546 278.261Z"
          fill="#338AF3"
        />
        <path
          d="M354.456 166.957L362.745 192.466H389.566L367.867 208.23L376.156 233.739L354.456 217.974L332.756 233.739L341.045 208.23L319.346 192.466H346.168L354.456 166.957Z"
          fill="#338AF3"
        />
        <path
          d="M354.456 278.261L362.745 303.771H389.566L367.867 319.535L376.156 345.043L354.456 329.278L332.756 345.043L341.045 319.535L319.346 303.771H346.168L354.456 278.261Z"
          fill="#338AF3"
        />
        <path
          d="M256.001 222.609L264.29 248.119H291.111L269.412 263.883L277.701 289.391L256.001 273.626L234.301 289.391L242.59 263.883L220.891 248.119H247.712L256.001 222.609Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7176">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default HN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/hr.tsx
================================================
import React from "react";

const HR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7132)">
        <path
          d="M512 256.001C512 224.687 506.367 194.69 496.077 166.958L256 155.827L15.923 166.957C5.633 194.69 0 224.687 0 256.001C0 287.315 5.633 317.312 15.923 345.044L256 356.175L496.077 345.045C506.367 317.312 512 287.315 512 256.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512.001C366.071 512.001 459.906 442.529 496.077 345.044H15.9229C52.0939 442.529 145.929 512.001 256 512.001Z"
          fill="#0052B4"
        />
        <path
          d="M15.9229 166.958H496.078C459.906 69.473 366.071 0.000976562 256 0.000976562C145.929 0.000976562 52.0939 69.473 15.9229 166.958Z"
          fill="#D80027"
        />
        <path
          d="M322.783 178.089H278.261L285.682 122.436L315.362 100.175L345.043 122.436V166.958L322.783 178.089Z"
          fill="#338AF3"
        />
        <path
          d="M189.217 178.089H233.739L226.318 122.436L196.637 100.175L166.957 122.436V166.958L189.217 178.089Z"
          fill="#338AF3"
        />
        <path
          d="M285.682 178.089H226.318V122.436L256 100.175L285.682 122.436V178.089Z"
          fill="#0052B4"
        />
        <path
          d="M166.957 166.959V289.393C166.957 318.546 181.039 344.472 202.759 360.725L218.342 356.826L238.006 376.608C243.821 377.806 249.838 378.437 256.001 378.437C262.131 378.437 268.118 377.814 273.902 376.628L296.349 357.938L309.241 360.689C330.952 344.437 345.044 318.538 345.044 289.393V166.959H166.957Z"
          fill="#F0F0F0"
        />
        <path d="M166.957 166.958H202.574V202.575H166.957V166.958Z" fill="#D80027" />
        <path d="M238.191 166.958H273.808V202.575H238.191V166.958Z" fill="#D80027" />
        <path d="M309.426 166.958H345.043V202.575H309.426V166.958Z" fill="#D80027" />
        <path d="M202.574 202.575H238.191V238.192H202.574V202.575Z" fill="#D80027" />
        <path d="M273.809 202.575H309.426V238.192H273.809V202.575Z" fill="#D80027" />
        <path d="M166.957 238.181H202.574V273.798H166.957V238.181Z" fill="#D80027" />
        <path d="M202.574 273.799H238.191V309.416H202.574V273.799Z" fill="#D80027" />
        <path d="M238.191 238.181H273.808V273.798H238.191V238.181Z" fill="#D80027" />
        <path d="M309.426 238.181H345.043V273.798H309.426V238.181Z" fill="#D80027" />
        <path d="M273.809 273.799H309.426V309.416H273.809V273.799Z" fill="#D80027" />
        <path d="M238.191 309.416H273.808V345.033H238.191V309.416Z" fill="#D80027" />
        <path
          d="M202.574 309.419H169.255C172.311 322.659 178.319 334.774 186.557 345.036H202.574V309.419Z"
          fill="#D80027"
        />
        <path
          d="M309.426 345.037H325.442C333.682 334.775 339.688 322.659 342.744 309.42H309.426V345.037Z"
          fill="#D80027"
        />
        <path
          d="M202.574 345.037V360.578C212.933 368.373 225.039 373.962 238.191 376.644V345.037H202.574Z"
          fill="#D80027"
        />
        <path
          d="M273.809 345.037V376.644C286.962 373.964 299.067 368.373 309.426 360.578V345.037H273.809Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7132">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default HR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ht.tsx
================================================
import React from "react";

const HT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7174)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 114.616 256 0 256 0C256 0 512 114.616 512 256Z"
          fill="#A2001D"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#0052B4"
        />
        <path
          d="M345.043 322.783L256 311.652L166.957 322.783V189.217H345.043V322.783Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 311.652C280.588 311.652 300.522 291.719 300.522 267.13C300.522 242.541 280.588 222.608 256 222.608C231.411 222.608 211.478 242.541 211.478 267.13C211.478 291.719 231.411 311.652 256 311.652Z"
          fill="#0052B4"
        />
        <path
          d="M256 289.391C268.295 289.391 278.261 279.424 278.261 267.13C278.261 254.835 268.295 244.869 256 244.869C243.706 244.869 233.739 254.835 233.739 267.13C233.739 279.424 243.706 289.391 256 289.391Z"
          fill="#A2001D"
        />
        <path d="M222.609 211.478H289.391L256 244.87L222.609 211.478Z" fill="#6DA544" />
        <path d="M244.87 233.739H267.131V300.522H244.87V233.739Z" fill="#FFDA44" />
        <path
          d="M291.617 293.843H220.381L166.957 322.783H345.043L291.617 293.843Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7174">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default HT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/hu.tsx
================================================
import React from "react";

const HU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7178)">
        <path
          d="M15.923 166.957C5.633 194.691 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 367.304L496.077 345.043C506.367 317.311 512 287.314 512 256C512 224.686 506.367 194.691 496.077 166.957L256 144.696L15.923 166.957Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C145.93 0 52.0938 69.472 15.9238 166.957H496.079C459.906 69.472 366.072 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C366.072 512 459.906 442.528 496.078 345.043H15.9238C52.0938 442.528 145.93 512 256 512Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7178">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default HU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/id.tsx
================================================
import React from "react";

const ID = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7181)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7181">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ID;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ie.tsx
================================================
import React from "react";

const IE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7184)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 145.93 442.528 52.0941 345.043 15.9241V496.079C442.528 459.906 512 366.072 512 256Z"
          fill="#FF9811"
        />
        <path
          d="M0 256C0 366.072 69.472 459.906 166.957 496.078V15.9241C69.472 52.0941 0 145.93 0 256Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7184">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/il.tsx
================================================
import React from "react";

const IL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7186)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M352.393 200.348H288.13L256 144.696L223.871 200.348H159.607L191.741 256L159.607 311.652H223.871L256 367.304L288.13 311.652H352.393L320.259 256L352.393 200.348ZM295.475 256L275.739 290.188H236.264L216.525 256L236.263 221.812H275.738L295.475 256ZM256 187.623L263.346 200.347H248.656L256 187.623ZM196.786 221.812H211.478L204.132 234.536L196.786 221.812ZM196.786 290.188L204.133 277.464L211.479 290.188H196.786ZM256 324.376L248.655 311.652H263.346L256 324.376ZM315.214 290.188H300.522L307.869 277.464L315.214 290.188ZM300.522 221.812H315.214L307.868 234.536L300.522 221.812Z"
          fill="#0052B4"
        />
        <path
          d="M415.357 55.6521H96.6432C73.2802 74.2601 53.2442 96.8621 37.5742 122.435H474.426C458.755 96.8631 438.719 74.2601 415.357 55.6521Z"
          fill="#0052B4"
        />
        <path
          d="M96.6432 456.348H415.356C438.719 437.74 458.755 415.138 474.425 389.565H37.5742C53.2452 415.137 73.2812 437.74 96.6432 456.348Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7186">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/im.tsx
================================================
import React from "react";

const IM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7185)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M350.787 171.612L332.693 236.183L278.403 226.158L243.457 154.123L149.05 187.624L141.605 166.644L116.905 163.601L135.516 216.05L200.485 199.435L218.948 251.464L174.036 317.746L250.253 382.752L235.807 399.689L245.521 422.603L281.639 380.259L234.765 332.302L270.592 290.299L350.45 296.053L368.639 197.543L390.53 201.586L405.519 181.716L350.787 171.612Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7185">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/in.tsx
================================================
import React from "react";

const IN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7180)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0.989258C154.506 0.989258 66.8103 60.0543 25.4023 145.685H486.597C445.19 60.0543 357.493 0.989258 256 0.989258Z"
          fill="#FF9811"
        />
        <path
          d="M256 512.989C357.493 512.989 445.19 453.924 486.598 368.293H25.4023C66.8103 453.924 154.506 512.989 256 512.989Z"
          fill="#6DA544"
        />
        <path
          d="M256 346.032C305.177 346.032 345.043 306.166 345.043 256.989C345.043 207.812 305.177 167.946 256 167.946C206.823 167.946 166.957 207.812 166.957 256.989C166.957 306.166 206.823 346.032 256 346.032Z"
          fill="#0052B4"
        />
        <path
          d="M256 312.641C286.735 312.641 311.652 287.725 311.652 256.989C311.652 226.253 286.735 201.337 256 201.337C225.264 201.337 200.348 226.253 200.348 256.989C200.348 287.725 225.264 312.641 256 312.641Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 188.315L273.169 227.253L315.473 222.652L290.337 256.989L315.473 291.326L273.169 286.725L256 325.663L238.831 286.725L196.527 291.325L221.663 256.989L196.527 222.652L238.831 227.253L256 188.315Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7180">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/index.ts
================================================
export { default as US } from "./us";
export { default as TW } from "./tw";
export { default as MU } from "./mu";
export { default as BZ } from "./bz";
export { default as BM } from "./bm";
export { default as CI } from "./ci";
export { default as CH } from "./ch";
export { default as AW } from "./aw";
export { default as MT } from "./mt";
export { default as NO } from "./no";
export { default as MC } from "./mc";
export { default as TV } from "./tv";
export { default as TC } from "./tc";
export { default as UG } from "./ug";
export { default as TT } from "./tt";
export { default as MA } from "./ma";
export { default as NZ } from "./nz";
export { default as LR } from "./lr";
export { default as MV } from "./mv";
export { default as BY } from "./by";
export { default as AU } from "./au";
export { default as BN } from "./bn";
export { default as BO } from "./bo";
export { default as AT } from "./at";
export { default as CK } from "./ck";
export { default as MW } from "./mw";
export { default as NL } from "./nl";
export { default as LS } from "./ls";
export { default as YE } from "./ye";
export { default as VN } from "./vn";
export { default as ZM } from "./zm";
export { default as MS } from "./ms";
export { default as MD } from "./md";
export { default as CO } from "./co";
export { default as AG } from "./ag";
export { default as AF } from "./af";
export { default as CY } from "./cy";
export { default as BJ } from "./bj";
export { default as CN } from "./cn";
export { default as ME } from "./me";
export { default as LA } from "./la";
export { default as MR } from "./mr";
export { default as NI } from "./ni";
export { default as LV } from "./lv";
export { default as OM } from "./om";
export { default as TG } from "./tg";
export { default as TR } from "./tr";
export { default as UA } from "./ua";
export { default as MP } from "./mp";
export { default as LT } from "./lt";
export { default as MG } from "./mg";
export { default as LC } from "./lc";
export { default as AS } from "./as";
export { default as BH } from "./bh";
export { default as CL } from "./cl";
export { default as AD } from "./ad";
export { default as CZ } from "./cz";
export { default as AE } from "./ae";
export { default as CM } from "./cm";
export { default as BI } from "./bi";
export { default as AR } from "./ar";
export { default as LB } from "./lb";
export { default as LU } from "./lu";
export { default as MQ } from "./mq";
export { default as TD } from "./td";
export { default as SG } from "./sg";
export { default as PK } from "./pk";
export { default as JE } from "./je";
export { default as GB } from "./gb";
export { default as GU } from "./gu";
export { default as DO } from "./do";
export { default as GT } from "./gt";
export { default as KW } from "./kw";
export { default as RU } from "./ru";
export { default as SD } from "./sd";
export { default as RW } from "./rw";
export { default as PH } from "./ph";
export { default as SS } from "./ss";
export { default as HN } from "./hn";
export { default as DZ } from "./dz";
export { default as GA } from "./ga";
export { default as FR } from "./fr";
export { default as DM } from "./dm";
export { default as GW } from "./gw";
export { default as JP } from "./jp";
export { default as SR } from "./sr";
export { default as SE } from "./se";
export { default as SV } from "./sv";
export { default as SA } from "./sa";
export { default as IO } from "./io";
export { default as HK } from "./hk";
export { default as KP } from "./kp";
export { default as KG } from "./kg";
export { default as GD } from "./gd";
export { default as GE } from "./ge";
export { default as GR } from "./gr";
export { default as IN } from "./in";
export { default as PL } from "./pl";
export { default as RS } from "./rs";
export { default as PN } from "./pn";
export { default as SB } from "./sb";
export { default as PY } from "./py";
export { default as IL } from "./il";
export { default as DK } from "./dk";
export { default as GG } from "./gg";
export { default as DJ } from "./dj";
export { default as GQ } from "./gq";
export { default as KE } from "./ke";
export { default as IM } from "./im";
export { default as KR } from "./kr";
export { default as SC } from "./sc";
export { default as ST } from "./st";
export { default as SY } from "./sy";
export { default as SN } from "./sn";
export { default as KH } from "./kh";
export { default as EC } from "./ec";
export { default as ET } from "./et";
export { default as FO } from "./fo";
export { default as HR } from "./hr";
export { default as KI } from "./ki";
export { default as JM } from "./jm";
export { default as PT } from "./pt";
export { default as SO } from "./so";
export { default as SX } from "./sx";
export { default as PA } from "./pa";
export { default as SZ } from "./sz";
export { default as SM } from "./sm";
export { default as JO } from "./jo";
export { default as IT } from "./it";
export { default as GH } from "./gh";
export { default as FM } from "./fm";
export { default as GI } from "./gi";
export { default as DE } from "./de";
export { default as PW } from "./pw";
export { default as SL } from "./sl";
export { default as PS } from "./ps";
export { default as HU } from "./hu";
export { default as IQ } from "./iq";
export { default as KY } from "./ky";
export { default as GM } from "./gm";
export { default as ER } from "./er";
export { default as FI } from "./fi";
export { default as EE } from "./ee";
export { default as ES } from "./es";
export { default as GL } from "./gl";
export { default as HT } from "./ht";
export { default as QA } from "./qa";
export { default as PE } from "./pe";
export { default as PR } from "./pr";
export { default as SI } from "./si";
export { default as RO } from "./ro";
export { default as SK } from "./sk";
export { default as PG } from "./pg";
export { default as IR } from "./ir";
export { default as KM } from "./km";
export { default as IE } from "./ie";
export { default as KZ } from "./kz";
export { default as FJ } from "./fj";
export { default as GN } from "./gn";
export { default as GY } from "./gy";
export { default as EG } from "./eg";
export { default as FK } from "./fk";
export { default as ID } from "./id";
export { default as IS } from "./is";
export { default as PF } from "./pf";
export { default as VA } from "./va";
export { default as UZ } from "./uz";
export { default as NG } from "./ng";
export { default as MK } from "./mk";
export { default as NP } from "./np";
export { default as BD } from "./bd";
export { default as CW } from "./cw";
export { default as BS } from "./bs";
export { default as AI } from "./ai";
export { default as BR } from "./br";
export { default as CV } from "./cv";
export { default as BE } from "./be";
export { default as CA } from "./ca";
export { default as NF } from "./nf";
export { default as LY } from "./ly";
export { default as WS } from "./ws";
export { default as TH } from "./th";
export { default as UY } from "./uy";
export { default as VU } from "./vu";
export { default as TJ } from "./tj";
export { default as ZA } from "./za";
export { default as MH } from "./mh";
export { default as BG } from "./bg";
export { default as CC } from "./cc";
export { default as CU } from "./cu";
export { default as BF } from "./bf";
export { default as NR } from "./nr";
export { default as NE } from "./ne";
export { default as ZW } from "./zw";
export { default as TK } from "./tk";
export { default as VC } from "./vc";
export { default as TO } from "./to";
export { default as VG } from "./vg";
export { default as MM } from "./mm";
export { default as LI } from "./li";
export { default as NA } from "./na";
export { default as MZ } from "./mz";
export { default as BB } from "./bb";
export { default as CF } from "./cf";
export { default as CG } from "./cg";
export { default as AX } from "./ax";
export { default as AO } from "./ao";
export { default as BT } from "./bt";
export { default as ML } from "./ml";
export { default as TN } from "./tn";
export { default as TL } from "./tl";
export { default as MN } from "./mn";
export { default as NU } from "./nu";
export { default as MY } from "./my";
export { default as CR } from "./cr";
export { default as AM } from "./am";
export { default as AZ } from "./az";
export { default as BA } from "./ba";
export { default as CD } from "./cd";
export { default as AL } from "./al";
export { default as BW } from "./bw";
export { default as MX } from "./mx";
export { default as MO } from "./mo";
export { default as LK } from "./lk";
export { default as VE } from "./ve";
export { default as TZ } from "./tz";
export { default as TM } from "./tm";
export { default as BL } from "./bl";
export { default as BQ } from "./bq";
export { default as GP } from "./gp";
export { default as XK } from "./xk";
export { default as EU } from "./eu";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/io.tsx
================================================
import React from "react";

const IO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7108)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M469.33 286.637C447.997 286.637 447.997 267.131 426.663 267.131C405.33 267.131 405.33 286.637 383.998 286.637C362.666 286.637 362.665 267.131 341.333 267.131C320 267.131 320 286.637 298.666 286.637C277.332 286.637 277.331 267.131 255.996 267.131C234.663 267.131 234.663 286.637 213.331 286.637C192.001 286.637 192.001 267.131 170.668 267.131C149.333 267.131 149.333 286.637 127.998 286.637C106.663 286.637 106.663 267.131 85.328 267.131C63.998 267.131 63.998 286.637 42.665 286.637C21.447 286.637 21.324 267.346 0.333008 267.14C0.924008 278.849 2.32201 290.346 4.43601 301.589C21.44 304.086 22.929 320.769 42.667 320.769C64 320.769 64 301.265 85.33 301.265C106.665 301.265 106.665 320.769 128 320.769C149.335 320.769 149.335 301.265 170.67 301.265C192.003 301.265 192.003 320.769 213.333 320.769C234.666 320.769 234.666 301.265 255.998 301.265C277.333 301.265 277.333 320.769 298.668 320.769C320.003 320.769 320.003 301.265 341.335 301.265C362.668 301.265 362.668 320.769 384 320.769C405.333 320.769 405.333 301.265 426.665 301.265C448 301.265 448 320.769 469.332 320.769C489.071 320.769 490.56 304.087 507.565 301.589C509.68 290.345 511.076 278.85 511.67 267.14C490.674 267.347 490.549 286.637 469.33 286.637Z"
          fill="#0052B4"
        />
        <path
          d="M426.663 333.913C405.33 333.913 405.33 353.419 383.998 353.419C362.666 353.419 362.665 333.913 341.333 333.913C320 333.913 320 353.419 298.666 353.419C277.331 353.419 277.331 333.913 255.996 333.913C234.663 333.913 234.663 353.419 213.331 353.419C192.001 353.419 192.001 333.913 170.668 333.913C149.333 333.913 149.333 353.419 127.998 353.419C106.663 353.419 106.663 333.913 85.3277 333.913C63.9977 333.913 63.9977 353.419 42.6647 353.419C26.9497 353.419 22.8007 342.841 13.1777 337.269C19.0057 354.688 26.6607 371.267 35.9057 386.791C37.9077 387.274 40.1337 387.552 42.6637 387.552C63.9967 387.552 63.9967 368.048 85.3267 368.048C106.662 368.048 106.662 387.552 127.997 387.552C149.332 387.552 149.332 368.048 170.667 368.048C192 368.048 192 387.552 213.33 387.552C234.663 387.552 234.663 368.048 255.995 368.048C277.33 368.048 277.33 387.552 298.665 387.552C320 387.552 320 368.048 341.332 368.048C362.665 368.048 362.665 387.552 383.997 387.552C405.329 387.552 405.33 368.048 426.662 368.048C447.997 368.048 447.997 387.552 469.329 387.552C471.861 387.552 474.089 387.274 476.092 386.79C485.338 371.267 492.992 354.688 498.819 337.27C489.196 342.842 485.046 353.42 469.329 353.42C447.998 353.419 447.998 333.913 426.663 333.913Z"
          fill="#0052B4"
        />
        <path
          d="M506.044 200.941C490.45 204.178 488.462 219.854 469.33 219.854C447.997 219.854 447.997 200.348 426.663 200.348C405.33 200.348 405.33 219.854 383.998 219.854C362.666 219.854 362.665 200.348 341.333 200.348C320 200.348 320 219.854 298.666 219.854C277.332 219.854 277.331 200.348 255.996 200.348C244.469 200.348 239.169 206.042 233.368 211.278V245.411C239.169 240.176 244.468 234.483 255.996 234.483C277.331 234.483 277.331 253.987 298.666 253.987C320.001 253.987 320.001 234.483 341.333 234.483C362.666 234.483 362.666 253.987 383.998 253.987C405.33 253.987 405.331 234.483 426.663 234.483C447.998 234.483 447.998 253.987 469.33 253.987C489.069 253.987 490.558 237.305 507.563 234.807C508.653 234.807 509.871 234.796 511.118 234.781C510.173 223.268 508.463 211.972 506.044 200.941Z"
          fill="#0052B4"
        />
        <path
          d="M487.344 146.274C482.923 149.987 477.813 153.071 469.331 153.071C447.998 153.071 447.998 133.565 426.664 133.565C405.331 133.565 405.331 153.071 383.999 153.071C362.667 153.071 362.666 133.565 341.334 133.565C320.001 133.565 320.001 153.071 298.667 153.071C277.333 153.071 277.332 133.565 255.997 133.565C244.47 133.565 239.17 139.259 233.369 144.495V178.628C239.17 173.393 244.469 167.7 255.997 167.7C277.332 167.7 277.332 187.204 298.667 187.204C320 187.204 320 167.7 341.333 167.7C362.666 167.7 362.666 187.204 383.998 187.204C405.33 187.204 405.33 167.7 426.663 167.7C447.998 167.7 447.998 187.204 469.33 187.204C484.467 187.204 488.876 177.399 497.776 171.697C494.743 163 491.26 154.515 487.344 146.274Z"
          fill="#0052B4"
        />
        <path
          d="M428.485 66.835C427.893 66.803 427.29 66.783 426.663 66.783C405.33 66.783 405.33 86.289 383.998 86.289C362.665 86.289 362.665 66.783 341.333 66.783C320 66.783 320 86.289 298.665 86.289C277.33 86.289 277.33 66.783 255.995 66.783C244.468 66.783 239.168 72.477 233.367 77.713V111.846C239.168 106.611 244.467 100.918 255.995 100.918C277.33 100.918 277.33 120.422 298.665 120.422C320 120.422 320 100.918 341.332 100.918C362.665 100.918 362.665 120.422 383.997 120.422C405.329 120.422 405.33 100.918 426.662 100.918C447.997 100.918 447.997 120.422 469.329 120.422C470.643 120.422 471.87 120.344 473.032 120.205C460.641 100.441 445.637 82.484 428.485 66.835Z"
          fill="#0052B4"
        />
        <path
          d="M321.432 8.45395C315.576 13.722 310.284 19.508 298.665 19.508C277.33 19.508 277.33 0.00395313 255.996 0.00195312H255.992C244.96 0.00295313 239.634 5.21995 234.11 10.259V44.393C239.633 39.354 244.961 34.136 255.996 34.136C277.331 34.136 277.331 53.64 298.666 53.64C320 53.64 320 34.136 341.333 34.136C362.666 34.136 362.666 53.64 383.998 53.64C392.949 53.64 398.141 50.204 402.733 46.218C378.397 29.163 350.959 16.237 321.432 8.45395Z"
          fill="#0052B4"
        />
        <path
          d="M298.665 486.984C277.33 486.984 277.33 467.478 255.995 467.478C234.662 467.478 234.662 486.984 213.33 486.984C192 486.984 192 467.478 170.667 467.478C154.326 467.478 150.493 478.912 140.013 484.27C168.913 498.984 200.98 508.363 234.92 511.13C240.169 506.334 245.501 501.612 255.995 501.612C266.492 501.612 271.824 506.334 277.074 511.131C311.015 508.365 343.084 498.985 371.985 484.271C361.503 478.914 357.671 467.477 341.332 467.477C320 467.478 320 486.984 298.665 486.984Z"
          fill="#0052B4"
        />
        <path
          d="M383.998 420.202C362.665 420.202 362.665 400.696 341.333 400.696C320 400.696 320 420.202 298.666 420.202C277.331 420.202 277.331 400.696 255.996 400.696C234.663 400.696 234.663 420.202 213.331 420.202C192.001 420.202 192.001 400.696 170.668 400.696C149.333 400.696 149.333 420.202 127.998 420.202C106.663 420.202 106.663 400.696 85.3282 400.696C69.9872 400.696 65.6792 410.786 56.5342 416.451C62.2662 423.569 68.3602 430.383 74.8092 436.843C77.6982 435.609 81.0882 434.83 85.3272 434.83C106.662 434.83 106.662 454.334 127.997 454.334C149.332 454.334 149.332 434.83 170.667 434.83C192 434.83 192 454.334 213.33 454.334C234.663 454.334 234.663 434.83 255.995 434.83C277.33 434.83 277.33 454.334 298.665 454.334C320 454.334 320 434.83 341.332 434.83C362.664 434.83 362.665 454.334 383.997 454.334C405.329 454.334 405.33 434.83 426.662 434.83C430.906 434.83 434.296 435.609 437.187 436.845C443.637 430.384 449.731 423.57 455.463 416.452C446.317 410.788 442.009 400.697 426.663 400.697C405.33 400.696 405.33 420.202 383.998 420.202Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path d="M256 133.565V208.778L166.957 122.435L256 133.565Z" fill="#0052B4" />
        <path
          d="M133.566 256H208.776L133.565 155.826L122.435 233.739L133.566 256Z"
          fill="#0052B4"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.592 0.024 0 114.629 0 256H133.566V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1896 89.4761 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.044 133.566H133.564V133.568L255.997 256H255.999C255.999 256 255.999 234.293 255.999 224.519Z"
          fill="#D80027"
        />
        <path d="M333.913 133.565H434.087L384 183.652L333.913 133.565Z" fill="#6DA544" />
        <path d="M372.87 172.522H395.131V233.739H372.87V172.522Z" fill="#A2001D" />
        <path d="M372.87 333.913H395.131V395.13H372.87V333.913Z" fill="#A2001D" />
        <path
          d="M450.783 300.522C450.783 282.081 435.833 267.131 417.392 267.131C408.838 267.131 401.04 270.351 395.131 275.64V256H406.261V233.739H395.131V222.609H372.87V233.739H361.74V256H372.87V275.64C366.961 270.351 359.163 267.131 350.609 267.131C332.168 267.131 317.218 282.081 317.218 300.522C317.218 310.409 321.519 319.289 328.348 325.404V345.044H439.652V325.404C446.482 319.289 450.783 310.409 450.783 300.522Z"
          fill="#FFDA44"
        />
        <path
          d="M417.391 289.391C413.88 289.391 411.422 290.933 409.977 292.225L395.13 305.516H372.87L358.023 292.225C356.578 290.933 354.12 289.391 350.609 289.391C344.472 289.391 339.479 294.384 339.479 300.521C339.479 304.844 341.81 307.575 343.199 308.82L350.609 315.456V322.782H417.393V315.456L424.803 308.82C426.192 307.576 428.523 304.844 428.523 300.521C428.521 294.384 423.529 289.391 417.391 289.391Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7108">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/iq.tsx
================================================
import React from "react";

const IQ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7183)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C145.929 0 52.0939 69.472 15.9229 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#A2001D"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9229C52.0939 442.528 145.929 512 256 512Z"
          fill="black"
        />
        <path
          d="M194.783 239.304C194.643 239.304 194.506 239.313 194.366 239.315V239.304H145.429C147.91 229.718 156.608 222.608 166.957 222.608V189.217C136.27 189.217 111.305 214.183 111.305 244.869V272.139V272.696H194.366H194.783C197.852 272.696 200.348 275.193 200.348 278.261V289.391H89.043V322.782H233.739V278.26C233.739 256.78 216.263 239.304 194.783 239.304Z"
          fill="#496E2D"
        />
        <path
          d="M278.261 289.391V189.217H244.87V322.783H300.522V289.391H278.261Z"
          fill="#496E2D"
        />
        <path
          d="M389.565 289.392V189.217H356.174V289.392H345.043V256.001H311.652V322.784H411.826V289.392H389.565Z"
          fill="#496E2D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7183">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IQ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ir.tsx
================================================
import React from "react";

const IR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7182)">
        <path
          d="M256 512.001C397.385 512.001 512 397.386 512 256.001C512 114.616 397.385 0.000976562 256 0.000976562C114.615 0.000976562 0 114.616 0 256.001C0 397.386 114.615 512.001 256 512.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M339.147 189.218H305.653C305.93 192.899 306.087 196.613 306.087 200.348C306.087 225.112 299.897 249.115 289.106 266.201C285.777 271.471 280.183 278.913 272.695 283.933V189.217H239.304V283.933C231.817 278.913 226.222 271.472 222.893 266.201C212.101 249.115 205.912 225.112 205.912 200.348C205.912 196.613 206.07 192.898 206.346 189.218H172.852C172.637 192.881 172.52 196.591 172.52 200.348C172.52 269.004 209.188 322.783 255.998 322.783C302.808 322.783 339.476 269.004 339.476 200.348C339.478 196.591 339.361 192.881 339.147 189.218Z"
          fill="#D80027"
        />
        <path
          d="M105.739 122.436H139.13V144.697H172.521V122.436H205.912V144.697H239.303V122.436H272.694V144.697H306.085V122.436H339.476V144.697H372.867V122.436H406.258V144.697H486.595C445.19 59.066 357.493 0.000976562 256 0.000976562C154.507 0.000976562 66.8099 59.066 25.4019 144.697H105.739V122.436Z"
          fill="#6DA544"
        />
        <path
          d="M406.261 367.305V389.566H372.87V367.305H339.479V389.566H306.088V367.305H272.697V389.566H239.306V367.305H205.915V389.566H172.524V367.305H139.13V389.566H105.739V367.305H25.4019C66.8099 452.936 154.506 512.001 256 512.001C357.494 512.001 445.19 452.936 486.598 367.305H406.261Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7182">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/is.tsx
================================================
import React from "react";

const IS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7179)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M8.81934 322.783C23.6313 377.742 56.2763 425.376 100.174 459.105V322.783H8.81934Z"
          fill="#0052B4"
        />
        <path
          d="M233.739 511.026C241.077 511.658 248.498 512 256 512C374.279 512 473.805 431.779 503.181 322.783H233.739V511.026Z"
          fill="#0052B4"
        />
        <path
          d="M503.181 189.217C473.805 80.221 374.279 0 256 0C248.498 0 241.077 0.342 233.739 0.974V189.217H503.181Z"
          fill="#0052B4"
        />
        <path
          d="M100.174 52.895C56.2763 86.625 23.6313 134.258 8.81934 189.217H100.174V52.895Z"
          fill="#0052B4"
        />
        <path
          d="M509.833 222.609H200.349H200.348V6.08496C176.69 11.331 154.261 19.834 133.565 31.127V222.608H2.167C0.742 233.539 0 244.683 0 256C0 267.317 0.742 278.461 2.167 289.391H133.564H133.565V480.872C154.261 492.164 176.69 500.669 200.348 505.914V289.394V289.392H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7179">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/it.tsx
================================================
import React from "react";

const IT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7187)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 145.929 442.528 52.0941 345.043 15.9231V496.078C442.528 459.906 512 366.071 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.071 69.472 459.906 166.957 496.077V15.9231C69.472 52.0941 0 145.929 0 256Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7187">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default IT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/je.tsx
================================================
import React from "react";

const JE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7191)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M459.098 411.875L303.223 256.001H303.222L459.098 100.124C452.375 91.3881 445.021 82.9831 437.02 74.9801C429.017 66.9781 420.613 59.6231 411.876 52.9021L256.001 208.777L256 208.778L100.125 52.9021C91.3903 59.6241 82.9843 66.9771 74.9813 74.9801C66.9783 82.9831 59.6243 91.3881 52.9033 100.124L208.778 255.998L208.779 255.999L52.9023 411.876C59.6253 420.612 66.9793 429.017 74.9803 437.02C82.9833 445.022 91.3873 452.377 100.124 459.098L256 303.223L256.001 303.222L411.876 459.097C420.611 452.375 429.017 445.021 437.02 437.019C445.023 429.016 452.376 420.611 459.098 411.875Z"
          fill="#D80027"
        />
        <path
          d="M211.478 77.913L256 89.043L300.522 77.913V40.07L282.713 48.974L256 22.261L229.287 48.974L211.478 40.07V77.913Z"
          fill="#FFDA44"
        />
        <path
          d="M211.478 77.9131V105.741C211.478 139.821 256 150.263 256 150.263C256 150.263 300.522 139.82 300.522 105.741V77.9131H211.478Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7191">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default JE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/jm.tsx
================================================
import React from "react";

const JM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7190)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M411.856 52.92C368.689 19.739 314.654 0 256 0C197.346 0 143.31 19.74 100.143 52.92L256 208.776L411.856 52.92Z"
          fill="#6DA544"
        />
        <path
          d="M52.919 100.144C19.74 143.311 0 197.346 0 256C0 314.654 19.74 368.69 52.92 411.858L208.777 256L52.919 100.144Z"
          fill="black"
        />
        <path
          d="M100.143 459.08C143.311 492.261 197.346 512 256 512C314.654 512 368.689 492.26 411.857 459.08L256 303.224L100.143 459.08Z"
          fill="#6DA544"
        />
        <path
          d="M459.08 411.856C492.261 368.689 512 314.654 512 256C512 197.346 492.261 143.311 459.08 100.144L303.224 256L459.08 411.856Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7190">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default JM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/jo.tsx
================================================
import React from "react";

const JO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7192)">
        <path
          d="M256 512.001C397.385 512.001 512 397.386 512 256.001C512 114.616 397.385 0.000976562 256 0.000976562C114.615 0.000976562 0 114.616 0 256.001C0 397.386 114.615 512.001 256 512.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M155.826 166.958H496.076C459.906 69.473 366.07 0.000976562 256 0.000976562C185.306 0.000976562 121.313 28.66 74.9888 74.99L155.826 166.958Z"
          fill="black"
        />
        <path
          d="M155.826 345.044H496.076C459.906 442.529 366.07 512.001 256 512.001C185.306 512.001 121.313 483.342 74.9888 437.012L155.826 345.044Z"
          fill="#6DA544"
        />
        <path
          d="M74.98 74.981C-24.994 174.955 -24.994 337.046 74.98 437.021C116.293 395.708 156.026 355.975 256 256.001L74.98 74.981Z"
          fill="#D80027"
        />
        <path
          d="M101.605 200.349L115.654 229.728L147.383 222.395L133.173 251.696L158.688 271.93L126.921 279.089L127.009 311.653L101.605 291.28L76.2 311.653L76.289 279.089L44.522 271.93L70.036 251.696L55.828 222.395L87.555 229.728L101.605 200.349Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7192">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default JO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/jp.tsx
================================================
import React from "react";

const JP = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7189)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 368.293C317.472 368.293 367.304 318.461 367.304 256.989C367.304 195.518 317.472 145.685 256 145.685C194.529 145.685 144.696 195.518 144.696 256.989C144.696 318.461 194.529 368.293 256 368.293Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7189">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default JP;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ke.tsx
================================================
import React from "react";

const KE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7194)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C154.506 0 66.8103 59.065 25.4023 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="black"
        />
        <path
          d="M256 512C154.506 512 66.8103 452.935 25.4023 367.304H486.597C445.19 452.935 357.493 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M499.911 178.087H12.089C4.247 202.656 0 228.831 0 256C0 283.169 4.247 309.344 12.089 333.913H499.91C507.753 309.344 512 283.169 512 256C512 228.831 507.753 202.656 499.911 178.087Z"
          fill="#A2001D"
        />
        <path
          d="M335.715 118.301L305.398 104.308L256 216.159L206.602 104.308L176.285 118.301L237.613 256L176.285 393.699L206.602 407.692L256 295.841L305.398 407.692L335.715 393.699L274.387 256L335.715 118.301Z"
          fill="#F0F0F0"
        />
        <path
          d="M276.591 131.489C264.855 118.672 256 111.304 256 111.304C256 111.304 247.145 118.671 235.409 131.489V380.509C247.145 393.328 256 400.696 256 400.696C256 400.696 264.855 393.329 276.591 380.51V131.489Z"
          fill="#F0F0F0"
        />
        <path
          d="M200.348 179.243V332.755C212.75 354.73 227.929 372.742 239.305 384.684V127.315C227.929 139.256 212.749 157.269 200.348 179.243Z"
          fill="#A2001D"
        />
        <path
          d="M311.651 179.243C299.248 157.268 284.07 139.256 272.694 127.315V384.684C284.069 372.742 299.248 354.73 311.651 332.755V179.243Z"
          fill="#A2001D"
        />
        <path
          d="M311.652 179.243V332.755C324.207 310.506 333.913 284.197 333.913 256C333.913 227.803 324.207 201.493 311.652 179.243Z"
          fill="black"
        />
        <path
          d="M200.348 179.243V332.755C187.793 310.506 178.087 284.197 178.087 256C178.087 227.803 187.793 201.493 200.348 179.243Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7194">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kg.tsx
================================================
import React from "react";

const KG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7198)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M381.197 256L330.042 280.062L357.283 329.609L301.73 318.98L294.694 375.096L255.999 333.826L217.307 375.096L210.268 318.98L154.72 329.607L181.96 280.06L130.803 256L181.96 231.939L154.72 182.391L210.266 193.021L217.309 136.904L255.999 178.175L294.696 136.904L301.73 193.021L357.285 182.391L330.043 231.942L381.197 256Z"
          fill="#FFDA44"
        />
        <path
          d="M256 333.913C299.03 333.913 333.913 299.03 333.913 256C333.913 212.97 299.03 178.087 256 178.087C212.97 178.087 178.087 212.97 178.087 256C178.087 299.03 212.97 333.913 256 333.913Z"
          fill="#D80027"
        />
        <path
          d="M217.043 256C215.166 256 213.313 256.096 211.484 256.278C211.551 267.069 215.455 276.946 221.903 284.619C225.343 275.362 230.479 266.921 236.956 259.697C230.77 257.318 224.059 256 217.043 256Z"
          fill="#FFDA44"
        />
        <path
          d="M241.025 297.933C245.705 299.605 250.744 300.522 256 300.522C261.256 300.522 266.295 299.605 270.975 297.933C268.424 287.921 263.157 278.983 256 271.959C248.843 278.982 243.576 287.921 241.025 297.933Z"
          fill="#FFDA44"
        />
        <path
          d="M294.555 233.746C286.857 220.44 272.48 211.478 256 211.478C239.52 211.478 225.143 220.439 217.445 233.746C231.479 233.817 244.639 237.633 256 244.222C267.361 237.633 280.519 233.817 294.555 233.746Z"
          fill="#FFDA44"
        />
        <path
          d="M275.042 259.698C281.519 266.921 286.655 275.362 290.095 284.62C296.543 276.947 300.447 267.07 300.514 256.279C298.684 256.096 296.831 256.001 294.955 256.001C287.941 256 281.23 257.318 275.042 259.698Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7198">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kh.tsx
================================================
import React from "react";

const KH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7114)">
        <path
          d="M0 256C0 300.35 11.283 342.064 31.127 378.435L256 400.696L480.873 378.435C500.717 342.064 512 300.35 512 256C512 211.65 500.717 169.936 480.873 133.565L256 111.304L31.127 133.565C11.283 169.936 0 211.65 0 256H0Z"
          fill="#D80027"
        />
        <path
          d="M31.127 133.565H480.872C437.454 53.989 353.035 0 256 0C158.965 0 74.546 53.989 31.127 133.565Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C353.035 512 437.454 458.011 480.873 378.435H31.127C74.546 458.011 158.965 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M345.043 306.087V272.696H322.783V228.174L300.522 205.913L278.261 228.174V183.652L256 161.391L233.739 183.652V228.174L211.478 205.913L189.217 228.174V272.696H166.957V306.087H144.696V339.478H367.304V306.087H345.043Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7114">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ki.tsx
================================================
import React from "react";

const KI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7195)">
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#D80027"
        />
        <path
          d="M345.043 238.078L308.658 255.191L328.034 290.43L288.525 282.871L283.519 322.783L256 293.428L228.48 322.783L223.475 282.871L183.966 290.428L203.341 255.191L166.957 238.078L203.341 220.962L183.966 185.727L223.474 193.283L228.481 153.373L256 182.726L283.52 153.373L288.525 193.283L328.035 185.727L308.661 220.965L345.043 238.078Z"
          fill="#FFDA44"
        />
        <path
          d="M322.783 83.4782H272.696C272.696 74.2592 265.22 66.7822 256 66.7822C246.78 66.7822 239.304 74.2582 239.304 83.4782H189.217C189.217 92.6982 197.249 100.174 206.469 100.174H205.912C205.912 109.394 213.386 116.87 222.608 116.87C222.608 126.09 230.082 133.566 239.304 133.566H272.695C281.914 133.566 289.391 126.091 289.391 116.87C298.61 116.87 306.087 109.395 306.087 100.174H305.53C314.751 100.174 322.783 92.6992 322.783 83.4782Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256H512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C336.022 512 407.456 475.276 454.402 417.772C445.958 412.015 441.399 402.709 426.663 402.709C405.33 402.709 405.33 422.215 383.998 422.215C362.666 422.215 362.665 402.709 341.333 402.709C320 402.709 320 422.215 298.666 422.215C277.332 422.215 277.331 402.709 255.996 402.709C234.663 402.709 234.663 422.215 213.331 422.215C192.001 422.215 192.001 402.709 170.668 402.709C149.333 402.709 149.333 422.215 127.998 422.215C106.663 422.215 106.663 402.709 85.3277 402.709C70.5937 402.709 66.0347 412.013 57.5947 417.77C104.539 475.276 175.977 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M469.33 288.65C447.997 288.65 447.997 269.144 426.663 269.144C405.33 269.144 405.33 288.65 383.998 288.65C362.666 288.65 362.665 269.144 341.333 269.144C320 269.144 320 288.65 298.666 288.65C277.332 288.65 277.331 269.144 255.996 269.144C234.663 269.144 234.663 288.65 213.331 288.65C192.001 288.65 192.001 269.144 170.668 269.144C149.333 269.144 149.333 288.65 127.998 288.65C106.663 288.65 106.663 269.144 85.328 269.144C63.998 269.144 63.998 288.65 42.665 288.65C21.447 288.65 21.324 269.359 0.333008 269.153C0.924008 280.863 2.32201 292.359 4.43601 303.601C21.44 306.1 22.929 322.783 42.666 322.783C63.999 322.783 63.999 303.279 85.329 303.279C106.664 303.279 106.664 322.783 127.999 322.783C149.334 322.783 149.334 303.279 170.669 303.279C192.002 303.279 192.002 322.783 213.332 322.783C234.665 322.783 234.665 303.279 255.997 303.279C277.332 303.279 277.332 322.783 298.667 322.783C320.002 322.783 320.002 303.279 341.334 303.279C362.667 303.279 362.667 322.783 383.999 322.783C405.331 322.783 405.332 303.279 426.664 303.279C447.999 303.279 447.999 322.783 469.331 322.783C489.07 322.783 490.559 306.101 507.564 303.602C509.679 292.359 511.075 280.864 511.669 269.154C490.674 269.361 490.549 288.65 469.33 288.65Z"
          fill="#0052B4"
        />
        <path
          d="M426.663 335.927C405.33 335.927 405.33 355.433 383.998 355.433C362.666 355.433 362.665 335.927 341.333 335.927C320 335.927 320 355.433 298.666 355.433C277.331 355.433 277.331 335.927 255.996 335.927C234.663 335.927 234.663 355.433 213.331 355.433C192.001 355.433 192.001 335.927 170.668 335.927C149.333 335.927 149.333 355.433 127.998 355.433C106.663 355.433 106.663 335.927 85.328 335.927C63.998 335.927 63.998 355.433 42.665 355.433C27.422 355.433 23.068 345.477 14.043 339.789C20.051 357.148 27.867 373.661 37.28 389.097C38.917 389.399 40.699 389.566 42.665 389.566C63.998 389.566 63.998 370.062 85.328 370.062C106.663 370.062 106.663 389.566 127.998 389.566C149.333 389.566 149.333 370.062 170.668 370.062C192.001 370.062 192.001 389.566 213.331 389.566C234.664 389.566 234.664 370.062 255.996 370.062C277.331 370.062 277.331 389.566 298.666 389.566C320.001 389.566 320.001 370.062 341.333 370.062C362.666 370.062 362.666 389.566 383.998 389.566C405.33 389.566 405.331 370.062 426.663 370.062C447.998 370.062 447.998 389.566 469.33 389.566C471.298 389.566 473.08 389.399 474.717 389.096C484.13 373.661 491.945 357.148 497.956 339.79C488.93 345.475 484.575 355.433 469.33 355.433C447.998 355.433 447.998 335.927 426.663 335.927Z"
          fill="#0052B4"
        />
        <path
          d="M511.206 235.775C490.676 236.26 490.393 255.259 469.33 255.259C447.997 255.259 447.997 235.753 426.663 235.753C405.33 235.753 405.33 255.259 383.998 255.259C362.666 255.259 362.665 235.753 341.333 235.753C320 235.753 320 255.259 298.666 255.259C277.332 255.259 277.331 235.753 255.996 235.753C234.663 235.753 234.663 255.259 213.331 255.259C192.001 255.259 192.001 235.753 170.668 235.753C149.333 235.753 149.333 255.259 127.998 255.259C106.663 255.259 106.663 235.753 85.328 235.753C63.998 235.753 63.998 255.259 42.665 255.259C21.606 255.259 21.321 236.262 0.793 235.775C0.272 242.449 0 249.193 0 256C0 260.663 0.132 265.296 0.381 269.897C21.324 270.132 21.463 289.391 42.666 289.391C63.999 289.391 63.999 269.887 85.329 269.887C106.664 269.887 106.664 289.391 127.999 289.391C149.334 289.391 149.334 269.887 170.669 269.887C192.002 269.887 192.002 289.391 213.332 289.391C234.665 289.391 234.665 269.887 255.997 269.887C277.332 269.887 277.332 289.391 298.667 289.391C320.002 289.391 320.002 269.887 341.334 269.887C362.667 269.887 362.667 289.391 383.999 289.391C405.331 289.391 405.332 269.887 426.664 269.887C447.999 269.887 447.999 289.391 469.331 289.391C490.536 289.391 490.675 270.132 511.622 269.897C511.868 265.295 512 260.663 512 256C512 249.193 511.728 242.449 511.206 235.775Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7195">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/km.tsx
================================================
import React from "react";

const KM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7128)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.991 255.259H234.481C179.384 310.357 146.066 352.894 112.046 386.914L256.742 399.954L481.276 377.693C500.871 341.498 512 300.049 512 256C512 255.752 511.991 255.507 511.991 255.259Z"
          fill="#D80027"
        />
        <path
          d="M112.047 132.824H480.459C436.921 53.656 352.731 0 256 0C185.495 0 121.659 28.511 75.3643 74.624L112.047 132.824Z"
          fill="#FFDA44"
        />
        <path
          d="M123.177 377.693C100.163 400.707 91.2692 419.989 74.6182 436.639C120.973 483.186 185.118 512 256 512C353.336 512 437.98 457.675 481.277 377.693H123.177Z"
          fill="#0052B4"
        />
        <path
          d="M74.9795 74.239C-24.9945 174.213 -24.9945 336.304 74.9795 436.279C116.293 394.966 156.026 355.233 256 255.259L74.9795 74.239Z"
          fill="#6DA544"
        />
        <path
          d="M67.5248 255.259C67.5248 217.961 93.7378 186.802 128.742 179.158C123.362 177.983 117.78 177.346 112.046 177.346C69.0148 177.346 34.1328 212.228 34.1328 255.259C34.1328 298.29 69.0148 333.172 112.046 333.172C117.779 333.172 123.361 332.535 128.742 331.36C93.7378 323.715 67.5248 292.557 67.5248 255.259Z"
          fill="#F0F0F0"
        />
        <path
          d="M127.883 188.476L132.028 201.23H145.438L134.588 209.113L138.733 221.867L127.883 213.985L117.033 221.867L121.178 209.113L110.328 201.23H123.738L127.883 188.476Z"
          fill="#F0F0F0"
        />
        <path
          d="M127.883 221.867L132.028 234.622H145.438L134.588 242.504L138.733 255.259L127.883 247.376L117.033 255.259L121.178 242.504L110.328 234.622H123.738L127.883 221.867Z"
          fill="#F0F0F0"
        />
        <path
          d="M127.883 255.259L132.028 268.013H145.438L134.588 275.896L138.733 288.65L127.883 280.767L117.033 288.65L121.178 275.896L110.328 268.013H123.738L127.883 255.259Z"
          fill="#F0F0F0"
        />
        <path
          d="M127.883 288.65L132.028 301.404H145.438L134.588 309.287L138.733 322.041L127.883 314.159L117.033 322.041L121.178 309.287L110.328 301.404H123.738L127.883 288.65Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7128">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kp.tsx
================================================
import React from "react";

const KP = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7242)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 0C179.397 0 109.874 34.524 62.9272 89.043H451.048C404.102 34.524 334.579 0 256.988 0Z"
          fill="#0052B4"
        />
        <path
          d="M451.049 422.957H62.9272C109.874 477.476 179.397 512 256.988 512C334.579 512 404.102 477.476 451.049 422.957Z"
          fill="#0052B4"
        />
        <path
          d="M475.414 122.435H38.5623C14.7333 161.32 0.988281 207.053 0.988281 256C0.988281 304.947 14.7333 350.681 38.5623 389.565H475.414C499.243 350.681 512.988 304.947 512.988 256C512.988 207.053 499.243 161.32 475.414 122.435Z"
          fill="#D80027"
        />
        <path
          d="M158.484 354.504C212.886 354.504 256.988 310.402 256.988 256C256.988 201.598 212.886 157.496 158.484 157.496C104.082 157.496 59.9802 201.598 59.9802 256C59.9802 310.402 104.082 354.504 158.484 354.504Z"
          fill="#F0F0F0"
        />
        <path
          d="M158.484 157.496L180.585 225.517H252.223L194.246 267.559L216.52 335.783L158.484 293.541L100.536 335.704L122.722 267.559L64.7972 225.517H136.382L158.484 157.496Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7242">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KP;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kr.tsx
================================================
import React from "react";

const KR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7290)">
        <path
          d="M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z"
          fill="#F0F0F0"
        />
        <path
          d="M345.043 255.999C345.043 278.26 305.177 333.912 256 333.912C206.823 333.912 166.957 278.26 166.957 255.999C166.957 206.821 206.823 166.956 256 166.956C305.177 166.956 345.043 206.821 345.043 255.999Z"
          fill="#D80027"
        />
        <path
          d="M345.043 255.999C345.043 305.177 305.177 345.042 256 345.042C206.823 345.042 166.957 305.177 166.957 255.999"
          fill="#0052B4"
        />
        <path
          d="M350.375 334.707L373.982 311.099L389.721 326.838L366.113 350.445L350.375 334.707Z"
          fill="black"
        />
        <path
          d="M311.017 374.054L334.625 350.447L350.363 366.185L326.756 389.793L311.017 374.054Z"
          fill="black"
        />
        <path
          d="M397.593 381.92L421.201 358.312L436.939 374.051L413.332 397.658L397.593 381.92Z"
          fill="black"
        />
        <path
          d="M358.237 421.273L381.844 397.666L397.583 413.404L373.976 437.012L358.237 421.273Z"
          fill="black"
        />
        <path
          d="M373.983 358.315L397.59 334.708L413.329 350.447L389.721 374.054L373.983 358.315Z"
          fill="black"
        />
        <path
          d="M334.636 397.662L358.244 374.055L373.982 389.793L350.375 413.401L334.636 397.662Z"
          fill="black"
        />
        <path
          d="M397.698 177.334L334.744 114.381L350.483 98.6423L413.436 161.596L397.698 177.334Z"
          fill="black"
        />
        <path
          d="M334.732 161.602L311.125 137.995L326.863 122.257L350.47 145.864L334.732 161.602Z"
          fill="black"
        />
        <path
          d="M374.078 200.958L350.471 177.35L366.209 161.613L389.816 185.22L374.078 200.958Z"
          fill="black"
        />
        <path
          d="M381.943 114.379L358.335 90.7714L374.074 75.0328L397.681 98.6403L381.943 114.379Z"
          fill="black"
        />
        <path
          d="M421.31 153.739L397.703 130.132L413.441 114.393L437.049 138.001L421.31 153.739Z"
          fill="black"
        />
        <path
          d="M90.7545 358.271L153.708 421.224L137.969 436.963L75.0159 374.009L90.7545 358.271Z"
          fill="black"
        />
        <path
          d="M153.705 373.997L177.312 397.604L161.574 413.342L137.967 389.735L153.705 373.997Z"
          fill="black"
        />
        <path
          d="M114.355 334.658L137.963 358.266L122.224 374.004L98.6166 350.397L114.355 334.658Z"
          fill="black"
        />
        <path
          d="M137.965 311.044L200.919 373.998L185.18 389.736L122.227 326.783L137.965 311.044Z"
          fill="black"
        />
        <path
          d="M153.701 90.7226L90.7478 153.676L75.0093 137.937L137.963 74.9841L153.701 90.7226Z"
          fill="black"
        />
        <path
          d="M177.309 114.328L114.355 177.281L98.6169 161.542L161.57 98.589L177.309 114.328Z"
          fill="black"
        />
        <path
          d="M200.939 137.949L137.985 200.903L122.247 185.165L185.201 122.212L200.939 137.949Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7290">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kw.tsx
================================================
import React from "react";

const KW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7197)">
        <path
          d="M496.077 345.043C506.367 317.31 512 287.314 512 256C512 224.686 506.367 194.69 496.077 166.957L256 144.696L15.923 166.957C5.633 194.69 0 224.686 0 256C0 287.314 5.633 317.31 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C366.07 512 459.906 442.528 496.076 345.043H15.9219C52.0939 442.528 145.928 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M256 0C145.928 0 52.0939 69.472 15.9219 166.957H496.077C459.906 69.472 366.07 0 256 0Z"
          fill="#6DA544"
        />
        <path
          d="M74.9795 74.98C-24.9945 174.954 -24.9945 337.045 74.9795 437.02C101.075 410.925 126.545 385.455 166.956 345.044V166.957L74.9795 74.98Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7197">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ky.tsx
================================================
import React from "react";

const KY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7119)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M367.304 189.218C391.893 189.218 411.826 169.285 411.826 144.696C411.826 120.107 391.893 100.174 367.304 100.174C342.715 100.174 322.782 120.107 322.782 144.696C322.782 169.285 342.715 189.218 367.304 189.218Z"
          fill="#6DA544"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1886 89.4761 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M255.999 224.519L165.044 133.566H133.564V133.568L255.997 256H255.999C255.999 256 255.999 234.293 255.999 224.519Z"
          fill="#D80027"
        />
        <path d="M289.391 133.565H445.217V200.348H289.391V133.565Z" fill="#D80027" />
        <path
          d="M289.391 300.522V345.044H312.815C326.86 358.808 346.085 367.305 367.304 367.305C388.523 367.305 407.748 358.808 421.793 345.044H422.956H445.217V300.522H289.391Z"
          fill="#FFDA44"
        />
        <path
          d="M289.391 189.217V256C289.391 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.217 315.639 445.217 256V189.217H289.391Z"
          fill="#338AF3"
        />
        <path
          d="M367.3 224.889C347.823 224.889 347.823 242.698 328.346 242.698C308.869 242.698 308.869 224.889 289.392 224.889V256.054C308.869 256.054 308.869 273.863 328.346 273.863C347.823 273.863 347.823 256.054 367.3 256.054C386.779 256.054 386.779 273.863 406.259 273.863C425.739 273.863 425.738 256.054 445.218 256.054V224.889C425.739 224.889 425.739 242.698 406.259 242.698C386.779 242.698 386.779 224.889 367.3 224.889Z"
          fill="#F3F3F3"
        />
        <path
          d="M367.3 162.504C347.823 162.504 347.823 180.313 328.346 180.313C308.869 180.313 308.869 162.504 289.392 162.504V193.669C308.869 193.669 308.869 211.478 328.346 211.478C347.823 211.478 347.823 193.669 367.3 193.669C386.779 193.669 386.779 211.478 406.259 211.478C425.739 211.478 425.738 193.669 445.218 193.669V162.504C425.739 162.504 425.739 180.313 406.259 180.313C386.779 180.313 386.779 162.504 367.3 162.504Z"
          fill="#F3F3F3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7119">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/kz.tsx
================================================
import React from "react";

const KZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7193)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M400.696 258.783H111.304C111.304 278.762 128.705 294.957 148.682 294.957H147.478C147.478 314.936 163.673 331.131 183.652 331.131C183.652 351.11 199.847 367.305 219.826 367.305H292.174C312.153 367.305 328.348 351.11 328.348 331.131C348.327 331.131 364.522 314.936 364.522 294.957H363.318C383.293 294.957 400.696 278.762 400.696 258.783Z"
          fill="#FFDA44"
        />
        <path
          d="M356.174 211.478C356.174 266.802 311.324 311.652 256 311.652C200.675 311.652 155.826 266.802 155.826 211.478"
          fill="#338AF3"
        />
        <path
          d="M332.515 211.478L301.25 226.185L317.899 256.465L283.949 249.97L279.647 284.266L256 259.041L232.352 284.266L228.051 249.97L194.101 256.463L210.749 226.184L179.485 211.478L210.75 196.772L194.101 166.493L228.05 172.987L232.353 138.691L256 163.916L279.648 138.691L283.949 172.987L317.9 166.493L301.251 196.773L332.515 211.478Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7193">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default KZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/la.tsx
================================================
import React from "react";

const LA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7199)">
        <path
          d="M486.598 144.696C445.19 59.065 357.494 0 256 0C154.506 0 66.8103 59.065 25.4023 144.696L256 166.957L486.598 144.696Z"
          fill="#D80027"
        />
        <path
          d="M25.4023 367.304C66.8103 452.935 154.506 512 256 512C357.494 512 445.19 452.935 486.598 367.304L256 345.043L25.4023 367.304Z"
          fill="#D80027"
        />
        <path
          d="M486.598 144.696H25.402C9.128 178.351 0 216.109 0 256C0 295.891 9.128 333.649 25.402 367.304H486.597C502.873 333.649 512 295.891 512 256C512 216.109 502.873 178.351 486.598 144.696Z"
          fill="#0052B4"
        />
        <path
          d="M256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.177 166.957 256 166.957C206.823 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7199">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lb.tsx
================================================
import React from "react";

const LB = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7201)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C154.506 0 66.8103 59.065 25.4023 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4023C66.8103 452.935 154.506 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M322.783 300.522L256 178.087L189.217 300.522H239.304V333.913H272.696V300.522H322.783Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7201">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LB;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lc.tsx
================================================
import React from "react";

const LC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7295)">
        <path
          d="M256.578 512C397.963 512 512.578 397.385 512.578 256C512.578 114.615 397.963 0 256.578 0C115.193 0 0.578125 114.615 0.578125 256C0.578125 397.385 115.193 512 256.578 512Z"
          fill="#338AF3"
        />
        <path d="M161.969 345.043H351.187L256.578 122.435L161.969 345.043Z" fill="#F3F3F3" />
        <path d="M194.849 322.783L256.578 182.374L318.307 322.783H194.849Z" fill="#333333" />
        <path d="M161.969 345.043H351.187L256.578 256L161.969 345.043Z" fill="#FFDA44" />
      </g>
      <defs>
        <clipPath id="clip0_4_7295">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/li.tsx
================================================
import React from "react";

const LI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7205)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C11.13 256 256 222.609 256 222.609L512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#0052B4"
        />
        <path
          d="M189.217 178.087C189.217 159.646 174.267 144.696 155.826 144.696C147.271 144.696 139.474 147.916 133.565 153.205V133.565H144.695V111.304H133.565V100.174H111.304V111.304H100.174V133.565H111.304V153.205C105.395 147.916 97.5979 144.696 89.0429 144.696C70.6019 144.696 55.6519 159.646 55.6519 178.087C55.6519 187.974 59.9529 196.854 66.7819 202.969V222.609H178.086V202.969C184.917 196.854 189.217 187.974 189.217 178.087Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7205">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lk.tsx
================================================
import React from "react";

const LK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7293)">
        <path d="M0.001 44.522H0V467.477H0.001V256.001V44.522Z" fill="#FF9811" />
        <path
          d="M255.999 511.998C397.383 511.998 511.998 397.383 511.998 255.999C511.998 114.615 397.383 0 255.999 0C114.615 0 0 114.615 0 255.999C0 397.383 114.615 511.998 255.999 511.998Z"
          fill="#FFDA44"
        />
        <path
          d="M200.349 44.522H111.714C107.786 47.207 103.942 50.002 100.175 52.895L77.9141 255.999L100.175 459.103C103.942 461.997 107.786 464.792 111.714 467.476H200.349V44.522Z"
          fill="#FF9811"
        />
        <path
          d="M0.000976562 256.001C0.000976562 338.746 39.269 412.308 100.175 459.105V52.896C39.269 99.694 0.000976562 173.256 0.000976562 256.001Z"
          fill="#6DA544"
        />
        <path d="M411.826 156.064V162.469L412.064 162.505L411.826 156.064Z" fill="#FFDA44" />
        <path
          d="M491.595 322.782H443.362L422.957 345.043V389.565H378.435V367.304H400.696V322.782H300.522V350.608H278.261V297.577C271.431 291.463 267.131 282.582 267.131 272.695V128C267.131 109.559 282.081 94.609 300.522 94.609V300.522H345.044L360.32 287.791C357.652 281.436 356.174 274.457 356.174 267.131V233.74H322.783V166.958H389.565C389.565 155.828 406.261 144.697 406.261 144.697C406.261 144.697 422.957 155.827 422.957 166.958V183.654V233.741C435.34 233.888 455.014 233.567 476.269 233.741C470.685 223.981 467.478 212.4 467.478 200.35C467.478 180.709 475.958 163.051 489.456 150.831C470 107.716 438.954 70.954 400.287 44.522H233.74V467.478H400.288C447.307 435.337 483.056 387.926 500.4 332.388L491.595 322.782Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7293">
          <rect width="511.999" height="511.999" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lr.tsx
================================================
import React from "react";

const LR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7203)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M58.5161 93.0919H453.484C438.896 75.4269 421.976 59.7619 403.207 46.5469H108.793C90.0241 59.7599 73.1051 75.4259 58.5161 93.0919Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 263.847 0.373 271.605 1.064 279.273H510.936C511.627 271.605 512 263.847 512 256C512 248.153 511.627 240.395 510.936 232.728H1.064C0.373 240.395 0 248.153 0 256H0Z"
          fill="#F0F0F0"
        />
        <path
          d="M27.9161 372.363H484.084C491.622 357.617 497.77 342.046 502.36 325.819H9.64014C14.2291 342.046 20.3791 357.618 27.9161 372.363Z"
          fill="#F0F0F0"
        />
        <path
          d="M108.793 465.455H403.206C421.975 452.24 438.895 436.575 453.483 418.91H58.5161C73.1051 436.573 90.0241 452.24 108.793 465.455Z"
          fill="#F0F0F0"
        />
        <path
          d="M9.63916 186.182H502.361C497.771 169.954 491.622 154.382 484.084 139.637H27.9162C20.3792 154.382 14.2292 169.954 9.63916 186.182Z"
          fill="#F0F0F0"
        />
        <path
          d="M122.435 46.545H403.207C361.567 17.227 310.797 0 256 0C222.609 0 164.075 17.227 122.435 46.545Z"
          fill="#D80027"
        />
        <path
          d="M244.87 139.637H484.084C475.571 122.984 465.289 107.385 453.484 93.0918H244.87V139.637Z"
          fill="#D80027"
        />
        <path
          d="M244.87 232.728H510.936C509.496 216.746 506.602 201.182 502.361 186.183H244.87V232.728Z"
          fill="#D80027"
        />
        <path
          d="M9.63997 325.819H502.36C506.602 310.821 509.496 295.256 510.936 279.274H1.06396C2.50396 295.256 5.39796 310.82 9.63997 325.819Z"
          fill="#D80027"
        />
        <path
          d="M58.516 418.908H453.484C465.289 404.613 475.571 389.015 484.084 372.363H27.916C36.429 389.016 46.711 404.615 58.516 418.908Z"
          fill="#D80027"
        />
        <path
          d="M256 512C310.797 512 361.567 494.773 403.207 465.455H108.793C150.433 494.773 201.203 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M9.63896 186.182C5.39696 201.182 2.50396 216.745 1.06396 232.727H256V0C138.82 0 40.031 78.732 9.63896 186.182Z"
          fill="#0052B4"
        />
        <path
          d="M152.388 66.7832L168.963 117.798H222.609L179.211 149.33L195.785 200.348L152.388 168.818L108.989 200.348L125.567 149.33L82.1689 117.798H135.812L152.388 66.7832Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7203">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ls.tsx
================================================
import React from "react";

const LS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7202)">
        <path
          d="M0 256.001C0 295.891 9.127 333.649 25.402 367.305L256 378.436L486.598 367.306C502.873 333.649 512 295.891 512 256.001C512 216.111 502.873 178.353 486.598 144.697L256 133.566L25.402 144.696C9.127 178.353 0 216.111 0 256.001H0Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512.001C357.493 512.001 445.19 452.936 486.598 367.305H25.4019C66.8099 452.936 154.506 512.001 256 512.001Z"
          fill="#6DA544"
        />
        <path
          d="M256 0.000976562C154.506 0.000976562 66.8099 59.066 25.4019 144.697H486.597C445.19 59.066 357.493 0.000976562 256 0.000976562Z"
          fill="#0052B4"
        />
        <path
          d="M272.696 250.436V189.219H239.305V250.436L198.975 290.767C210.704 309.967 231.855 322.784 256.001 322.784C280.147 322.784 301.297 309.967 313.027 290.767L272.696 250.436Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7202">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lt.tsx
================================================
import React from "react";

const LT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7206)">
        <path
          d="M496.077 345.043C506.368 317.311 512 287.314 512 256C512 224.686 506.368 194.689 496.077 166.957L256 144.696L15.923 166.957C5.632 194.689 0 224.686 0 256C0 287.314 5.632 317.311 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#6DA544"
        />
        <path
          d="M496.077 166.957C459.906 69.472 366.071 0 256 0C145.929 0 52.0941 69.472 15.9231 166.957H496.077Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9231C52.0941 442.528 145.929 512 256 512Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7206">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lu.tsx
================================================
import React from "react";

const LU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7207)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C145.929 0 52.0941 69.472 15.9231 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9231C52.0941 442.528 145.929 512 256 512Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7207">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/lv.tsx
================================================
import React from "react";

const LV = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7200)">
        <path
          d="M256 512.989C397.385 512.989 512 398.374 512 256.989C512 115.604 397.385 0.989258 256 0.989258C114.615 0.989258 0 115.604 0 256.989C0 398.374 114.615 512.989 256 512.989Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0.989258C137.721 0.989258 38.1953 81.2103 8.81934 190.206H503.182C473.805 81.2103 374.279 0.989258 256 0.989258Z"
          fill="#A2001D"
        />
        <path
          d="M256 512.989C374.279 512.989 473.805 432.768 503.181 323.772H8.81934C38.1953 432.767 137.721 512.989 256 512.989Z"
          fill="#A2001D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7200">
          <rect width="512" height="512" fill="white" transform="translate(0 0.989258)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LV;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ly.tsx
================================================
import React from "react";

const LY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7204)">
        <path
          d="M25.402 144.696C9.128 178.352 0 216.109 0 256C0 295.891 9.128 333.648 25.402 367.304L256 389.565L486.598 367.304C502.872 333.648 512 295.891 512 256C512 216.109 502.872 178.352 486.598 144.696L256 122.435L25.402 144.696Z"
          fill="black"
        />
        <path
          d="M25.4111 367.304C66.8171 452.935 154.506 512 256 512C357.493 512 445.183 452.935 486.589 367.304H25.4111Z"
          fill="#496E2D"
        />
        <path
          d="M25.4111 144.696H486.589C445.183 59.065 357.493 0 256 0C154.506 0 66.8171 59.065 25.4111 144.696Z"
          fill="#D80027"
        />
        <path
          d="M315.586 209.186L336.59 238.131L370.607 227.101L349.569 256.021L370.571 284.965L336.567 273.893L315.529 302.813L315.551 267.052L281.545 255.98L315.563 244.95L315.586 209.186Z"
          fill="#F0F0F0"
        />
        <path
          d="M258.261 328.348C218.305 328.348 185.913 295.956 185.913 256C185.913 216.044 218.305 183.652 258.261 183.652C270.719 183.652 282.442 186.802 292.676 192.348C276.62 176.647 254.664 166.956 230.435 166.956C181.257 166.956 141.392 206.822 141.392 255.999C141.392 305.176 181.258 345.042 230.435 345.042C254.665 345.042 276.621 335.351 292.676 319.65C282.441 325.198 270.72 328.348 258.261 328.348Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7204">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default LY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ma.tsx
================================================
import React from "react";

const MA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7228)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M407.288 210.09H291.714L256 100.174L220.286 210.09H104.712L198.213 278.022L162.498 387.941L256 320.008L349.502 387.942L313.787 278.023L407.288 210.09ZM224.382 269.519L236.459 232.35H275.54L287.618 269.519V269.52L256 292.491L224.383 269.52L224.382 269.519ZM268.308 210.09H243.693L256 172.21L268.308 210.09ZM306.553 255.762L298.946 232.351H338.775L306.553 255.762ZM213.053 232.351L205.446 255.762L173.223 232.351H213.053ZM204.841 329.661L217.149 291.782L237.064 306.25L204.841 329.661ZM274.936 306.251L294.851 291.783L307.159 329.662L274.936 306.251Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7228">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mc.tsx
================================================
import React from "react";

const MC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7224)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7224">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/md.tsx
================================================
import React from "react";

const MD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7223)">
        <path
          d="M367.304 25.402C333.648 9.128 295.89 0 256 0C216.11 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598C178.352 502.872 216.11 512 256 512C295.89 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402Z"
          fill="#FFDA44"
        />
        <path
          d="M144.696 25.4111C59.066 66.8181 0 154.507 0 256C0 357.493 59.066 445.182 144.696 486.589V25.4111Z"
          fill="#0052B4"
        />
        <path
          d="M367.304 25.4111V486.589C452.934 445.182 512 357.493 512 256C512 154.507 452.934 66.8181 367.304 25.4111Z"
          fill="#D80027"
        />
        <path
          d="M345.043 201.419H283.826C283.826 186.051 271.368 173.593 256 173.593C240.632 173.593 228.174 186.051 228.174 201.419H166.957C166.957 216.55 180.138 228.815 195.267 228.815H194.355C194.355 243.947 206.621 256.214 221.753 256.214C221.753 269.611 231.375 280.743 244.083 283.123L222.493 331.865C232.838 336.07 244.144 338.407 256 338.407C267.855 338.407 279.162 336.07 289.506 331.865L267.917 283.123C280.625 280.743 290.247 269.611 290.247 256.214C305.379 256.214 317.645 243.947 317.645 228.815H316.732C331.863 228.815 345.043 216.549 345.043 201.419Z"
          fill="#FF9811"
        />
        <path
          d="M256 239.304L219.826 256V289.391L256 311.652L292.174 289.391V256L256 239.304Z"
          fill="#0052B4"
        />
        <path d="M219.826 222.609H292.174V256H219.826V222.609Z" fill="#D80027" />
      </g>
      <defs>
        <clipPath id="clip0_4_7223">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/me.tsx
================================================
import React from "react";

const ME = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7226)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 168.139 467.731 90.625 400.287 44.522H111.713C44.27 90.625 0 168.139 0 256C0 343.863 44.27 421.375 111.713 467.478H400.287C467.731 421.375 512 343.863 512 256Z"
          fill="#A2001D"
        />
        <path
          d="M200.348 189.217H311.652V144.696L289.391 155.826L256 122.435L222.609 155.826L200.348 144.696V189.217Z"
          fill="#FFDA44"
        />
        <path
          d="M356.174 256H300.543C302.725 252.226 303.993 247.859 303.993 243.187C303.993 229 292.492 217.501 278.307 217.501C268.506 217.501 259.994 222.993 255.663 231.063C251.332 222.992 242.82 217.501 233.019 217.501C218.834 217.501 207.333 229 207.333 243.187C207.333 247.86 208.603 252.227 210.783 256H155.824C155.824 273.023 170.651 286.822 187.673 286.822H186.647C186.647 300.785 195.934 312.575 208.667 316.362L183.65 341.381L207.261 364.992L240.754 331.499C242.066 331.98 243.423 332.364 244.826 332.628L224.588 378.323C234.286 382.267 244.885 384.456 256 384.456C267.114 384.456 277.713 382.267 287.412 378.323L267.174 332.628C268.576 332.365 269.933 331.98 271.244 331.499L304.737 364.992L328.347 341.381L303.329 316.363C316.061 312.574 325.349 300.786 325.349 286.823H324.322C341.346 286.822 356.174 273.023 356.174 256Z"
          fill="#FFDA44"
        />
        <path
          d="M256 272.696L219.826 289.391V322.783L256 345.043L292.174 322.783V289.391L256 272.696Z"
          fill="#6DA544"
        />
        <path d="M219.826 256H292.174V300.522H219.826V256Z" fill="#0052B4" />
      </g>
      <defs>
        <clipPath id="clip0_4_7226">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ME;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mg.tsx
================================================
import React from "react";

const MG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7209)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M166.957 256V496.077C194.689 506.368 224.686 512 256 512C397.384 512 512 397.384 512 256C512 114.616 166.957 256 166.957 256Z"
          fill="#6DA544"
        />
        <path
          d="M256 0C224.686 0 194.689 5.633 166.957 15.923V256H512C512 114.616 397.384 0 256 0Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7209">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mh.tsx
================================================
import React from "react";

const MH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7216)">
        <path
          d="M256 512C397.384 512 512 397.384 512 256C512 213.037 501.4 172.554 482.698 137L255.699 256.3L375 29.302C339.446 10.6 298.963 0 256 0C114.616 0 0 114.616 0 256C0 326.693 28.654 390.693 74.98 437.02C121.307 483.347 185.307 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M482.428 137.279C470.71 114.975 455.475 94.0342 436.721 75.2802C417.966 56.5262 397.028 41.2912 374.722 29.5742L74.6809 437.319L482.428 137.279Z"
          fill="#F0F0F0"
        />
        <path
          d="M74.6809 437.319L482.428 137.279C470.71 114.975 455.475 94.0338 436.721 75.2798L74.6809 437.319Z"
          fill="#FF9811"
        />
        <path
          d="M222.308 150.122L191.044 164.828L207.693 195.108L173.743 188.613L169.441 222.909L145.793 197.684L122.145 222.909L117.845 188.613L83.8951 195.106L100.542 164.827L69.2781 150.122L100.543 135.415L83.8951 105.137L117.843 111.63L122.146 77.334L145.793 102.559L169.441 77.334L173.743 111.63L207.694 105.137L191.045 135.416L222.308 150.122Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7216">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mk.tsx
================================================
import React from "react";

const MK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7263)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M294.932 509.057C336.568 502.705 374.894 486.309 407.388 462.439L256 256L294.932 509.057Z"
          fill="#D80027"
        />
        <path
          d="M217.067 2.94299C175.432 9.29499 137.106 25.691 104.61 49.56L256 256L217.067 2.94299Z"
          fill="#D80027"
        />
        <path
          d="M104.61 462.439C137.104 486.308 175.43 502.704 217.065 509.058L256 256L104.61 462.439Z"
          fill="#D80027"
        />
        <path
          d="M49.5599 104.61C25.6899 137.106 9.29587 175.431 2.94287 217.067L256 256L49.5599 104.61Z"
          fill="#D80027"
        />
        <path
          d="M2.94287 294.932C9.29487 336.568 25.6909 374.894 49.5609 407.388L256 256L2.94287 294.932Z"
          fill="#D80027"
        />
        <path
          d="M509.057 217.067C502.704 175.432 486.309 137.106 462.439 104.611L256 256L509.057 217.067Z"
          fill="#D80027"
        />
        <path
          d="M407.388 49.559C374.893 25.69 336.568 9.29499 294.932 2.94299L256 256L407.388 49.559Z"
          fill="#D80027"
        />
        <path
          d="M462.441 407.389C486.31 374.894 502.705 336.567 509.059 294.933L256 256L462.441 407.389Z"
          fill="#D80027"
        />
        <path
          d="M256 345.043C305.177 345.043 345.043 305.177 345.043 256C345.043 206.823 305.177 166.957 256 166.957C206.823 166.957 166.957 206.823 166.957 256C166.957 305.177 206.823 345.043 256 345.043Z"
          fill="#D80027"
        />
        <path
          d="M256 322.783C292.883 322.783 322.783 292.883 322.783 256C322.783 219.117 292.883 189.217 256 189.217C219.117 189.217 189.217 219.117 189.217 256C189.217 292.883 219.117 322.783 256 322.783Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7263">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ml.tsx
================================================
import React from "react";

const ML = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7214)">
        <path
          d="M345.043 15.923C317.31 5.633 287.314 0 256 0C224.686 0 194.69 5.633 166.957 15.923L144.696 256L166.957 496.077C194.69 506.368 224.686 512 256 512C287.314 512 317.31 506.368 345.043 496.077L367.304 256L345.043 15.923Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 145.93 442.528 52.0938 345.043 15.9238V496.079C442.528 459.906 512 366.072 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.072 69.472 459.906 166.957 496.078V15.9238C69.472 52.0938 0 145.93 0 256Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7214">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ML;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mm.tsx
================================================
import React from "react";

const MM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7230)">
        <path
          d="M496.077 345.043C506.368 317.311 512 287.314 512 256C512 224.686 506.368 194.689 496.077 166.957L256 144.696L15.923 166.957C5.633 194.689 0 224.686 0 256C0 287.314 5.633 317.311 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#6DA544"
        />
        <path
          d="M496.077 166.957C459.906 69.472 366.071 0 256 0C145.929 0 52.094 69.472 15.923 166.957H496.077Z"
          fill="#FFDA44"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.923C52.094 442.528 145.929 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M431.549 216.586H297.442L256 89.043L214.558 216.586H80.451L188.946 295.412L147.504 422.957L256 345.043L364.496 422.956L323.055 295.411L431.549 216.586Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7230">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mn.tsx
================================================
import React from "react";

const MN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7225)">
        <path
          d="M256 512C287.314 512 317.311 506.368 345.043 496.077L356.174 256L345.044 15.923C317.311 5.633 287.314 0 256 0C224.686 0 194.689 5.633 166.957 15.923L155.826 256L166.956 496.077C194.689 506.368 224.686 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M0 256C0 366.071 69.472 459.906 166.957 496.077V15.9229C69.472 52.0939 0 145.929 0 256Z"
          fill="#A2001D"
        />
        <path
          d="M345.043 15.9229V496.078C442.528 459.906 512 366.071 512 256C512 145.929 442.528 52.0939 345.043 15.9229Z"
          fill="#A2001D"
        />
        <path d="M122.435 256H144.696V345.043H122.435V256Z" fill="#FFDA44" />
        <path d="M33.3911 256H55.6521V345.043H33.3911V256Z" fill="#FFDA44" />
        <path
          d="M89.0432 311.652C101.338 311.652 111.304 301.685 111.304 289.391C111.304 277.096 101.338 267.13 89.0432 267.13C76.7488 267.13 66.7822 277.096 66.7822 289.391C66.7822 301.685 76.7488 311.652 89.0432 311.652Z"
          fill="#FFDA44"
        />
        <path
          d="M89.0431 222.608C95.19 222.608 100.173 217.625 100.173 211.478C100.173 205.331 95.19 200.348 89.0431 200.348C82.8962 200.348 77.9131 205.331 77.9131 211.478C77.9131 217.625 82.8962 222.608 89.0431 222.608Z"
          fill="#FFDA44"
        />
        <path d="M66.7832 322.783H111.305V345.044H66.7832V322.783Z" fill="#FFDA44" />
        <path d="M66.7832 233.739H111.305V256H66.7832V233.739Z" fill="#FFDA44" />
        <path
          d="M89.0433 133.565L96.9273 157.825H122.435L101.8 172.819L109.678 197.079L89.0433 182.085L68.4093 197.079L76.2873 172.819L55.6523 157.825H81.1603L89.0433 133.565Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7225">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mo.tsx
================================================
import React from "react";

const MO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7208)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M300.522 245.325C294.238 245.325 288.272 246.578 282.732 248.572C285.767 241.808 287.802 234.282 287.802 226.245C287.802 194.444 256.001 170.593 256.001 170.593C256.001 170.593 224.2 194.444 224.2 226.245C224.2 234.281 226.235 241.808 229.27 248.572C223.729 246.58 217.763 245.325 211.48 245.325C179.679 245.325 155.828 277.126 155.828 277.126C155.828 277.126 179.679 308.928 211.48 308.928C230.125 308.928 246.027 298 256.002 288.954C265.977 297.999 281.879 308.928 300.524 308.928C332.325 308.928 356.176 277.126 356.176 277.126C356.176 277.126 332.323 245.325 300.522 245.325Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 100.174L262.569 120.39H283.826L266.631 132.886L273.195 153.102L256 140.606L238.805 153.102L245.369 132.886L228.174 120.39H249.431L256 100.174Z"
          fill="#FFDA44"
        />
        <path
          d="M175.167 135.533L187.805 146.911L202.532 138.409L195.616 153.944L208.253 165.324L191.341 163.546L184.425 179.081L180.887 162.448L163.976 160.67L178.702 152.166L175.167 135.533Z"
          fill="#FFDA44"
        />
        <path
          d="M115.994 194.707L132.628 198.242L141.131 183.515L142.909 200.426L159.541 203.964L144.007 210.881L145.785 227.791L134.404 215.156L118.87 222.072L127.373 207.344L115.994 194.707Z"
          fill="#FFDA44"
        />
        <path
          d="M336.833 135.533L324.196 146.911L309.469 138.409L316.384 153.944L303.748 165.324L320.66 163.546L327.576 179.081L331.114 162.448L348.025 160.67L333.299 152.166L336.833 135.533Z"
          fill="#FFDA44"
        />
        <path
          d="M396.007 194.707L379.373 198.242L370.871 183.515L369.092 200.426L352.46 203.964L367.994 210.881L366.216 227.791L377.597 215.156L393.131 222.072L384.628 207.344L396.007 194.707Z"
          fill="#FFDA44"
        />
        <path
          d="M256 397.972C281.261 397.972 304.545 389.544 323.223 375.363H188.778C207.456 389.543 230.739 397.972 256 397.972Z"
          fill="#F0F0F0"
        />
        <path
          d="M153.967 331.189C157.5 339.275 161.98 346.848 167.242 353.798H344.76C350.022 346.849 354.502 339.275 358.035 331.189H153.967Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7208">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mp.tsx
================================================
import React from "react";

const MP = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7244)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M247.93 417.19C241.029 416.856 235.319 412.371 233.082 406.282C229.131 411.435 222.341 414.029 215.652 412.304C208.951 410.579 204.266 405.036 203.297 398.602C198.377 402.853 191.209 404.01 185.01 400.973C178.799 397.923 175.327 391.544 175.683 385.055C170.018 388.238 162.761 387.927 157.296 383.697C151.842 379.467 149.716 372.533 151.363 366.244C145.174 368.225 138.14 366.467 133.632 361.224C129.124 355.993 128.433 348.769 131.306 342.948C124.85 343.637 118.306 340.499 114.944 334.467C111.571 328.434 112.351 321.211 116.346 316.078C109.879 315.455 104.091 311.058 102.021 304.469C99.9402 297.88 102.166 290.957 107.119 286.738C100.908 284.822 96.1442 279.346 95.4432 272.48C94.7422 265.613 98.3042 259.302 103.991 256.163C98.3031 253.046 94.7192 246.736 95.3982 239.879H95.4091C96.0881 233 100.852 227.514 107.051 225.576C102.098 221.369 99.8501 214.457 101.909 207.867C103.968 201.267 109.744 196.859 116.212 196.213C112.216 191.093 111.415 183.868 114.765 177.826C118.115 171.793 124.66 168.643 131.127 169.322C128.233 163.501 128.912 156.277 133.409 151.024C137.895 145.782 144.929 144.012 151.129 145.971C149.459 139.693 151.574 132.748 157.028 128.508C162.471 124.266 169.728 123.943 175.393 127.104C175.026 120.616 178.487 114.237 184.687 111.176C190.876 108.126 198.055 109.262 202.985 113.513C203.931 107.081 208.617 101.516 215.306 99.778C221.984 98.042 228.774 100.613 232.736 105.755C234.973 99.667 240.672 95.17 247.573 94.825C254.463 94.47 260.584 98.342 263.434 104.165C266.84 98.644 273.318 95.372 280.141 96.407C286.975 97.431 292.218 102.461 293.843 108.751C298.295 104.008 305.307 102.128 311.785 104.509C318.274 106.902 322.392 112.89 322.704 119.39C328.013 115.651 335.27 115.216 341.136 118.867C347.002 122.507 349.818 129.196 348.816 135.618C354.771 133.025 361.961 134.06 366.97 138.801C371.979 143.554 373.403 150.666 371.133 156.754C377.488 155.407 384.323 157.856 388.285 163.521C392.247 169.175 392.214 176.432 388.775 181.942C395.264 181.897 401.464 185.682 404.213 192.015C406.951 198.359 405.448 205.472 400.963 210.18C407.341 211.449 412.65 216.402 414.052 223.169C415.443 229.936 412.538 236.581 407.207 240.288C413.173 242.816 417.38 248.725 417.391 255.626V255.849V255.994C417.391 262.894 413.206 268.816 407.24 271.365C412.583 275.05 415.51 281.694 414.119 288.461C412.739 295.228 407.441 300.193 401.063 301.484C405.56 306.181 407.085 313.282 404.358 319.638C401.631 325.982 395.431 329.778 388.931 329.744C392.381 335.254 392.437 342.511 388.486 348.176C384.535 353.843 377.712 356.313 371.356 354.977C373.638 361.054 372.224 368.178 367.227 372.942C362.218 377.696 355.039 378.741 349.084 376.17C350.097 382.581 347.292 389.282 341.437 392.944C335.582 396.606 328.325 396.182 323.005 392.454C322.704 398.954 318.608 404.954 312.131 407.358C305.654 409.762 312.131 407.358 312.12 407.358C305.642 409.751 298.63 407.882 294.167 403.152C292.564 409.452 287.333 414.493 280.499 415.54C273.676 416.575 267.187 413.325 263.77 407.804C261.054 413.403 255.311 417.209 248.766 417.209C248.487 417.213 248.209 417.202 247.93 417.19Z"
          fill="#F3F3F3"
        />
        <path
          d="M256 367.304C317.471 367.304 367.304 317.472 367.304 256C367.304 194.529 317.471 144.696 256 144.696C194.528 144.696 144.696 194.529 144.696 256C144.696 317.472 194.528 367.304 256 367.304Z"
          fill="#338AF3"
        />
        <path
          d="M280.363 218.219C285.831 214.163 289.391 207.68 289.391 200.348V189.218C289.391 176.923 279.425 166.957 267.13 166.957H244.87C232.575 166.957 222.609 176.923 222.609 189.218V200.348C222.609 207.68 226.169 214.163 231.637 218.219L211.479 422.956C211.479 422.956 222.609 434.088 256.001 434.088C289.393 434.088 300.523 422.956 300.523 422.956L280.363 218.219Z"
          fill="#BDBCC1"
        />
        <path
          d="M255.999 166.957L275.337 226.475H337.922L287.292 263.263L306.629 322.783L255.999 285.998L205.367 322.783L224.708 263.263L174.077 226.475H236.66L255.999 166.957Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7244">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MP;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mq.tsx
================================================
import React from "react";

const MQ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7217)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M509.806 222.608C502.744 168.622 478.494 116.456 437.019 74.9809C395.544 33.5059 343.377 9.25487 289.391 2.19287L289.392 222.608H509.806Z"
          fill="#0052B4"
        />
        <path
          d="M222.608 2.19287C168.622 9.25487 116.455 33.5049 74.9801 74.9799C33.5061 116.456 9.25512 168.623 2.19312 222.61L222.609 222.609L222.608 2.19287Z"
          fill="#0052B4"
        />
        <path
          d="M2.19312 289.392C9.25512 343.378 33.5061 395.546 74.9801 437.02C116.455 478.494 168.621 502.744 222.609 509.809L222.608 289.394L2.19312 289.392Z"
          fill="#0052B4"
        />
        <path
          d="M289.392 509.806C343.378 502.744 395.544 478.494 437.019 437.019C478.494 395.544 502.744 343.378 509.806 289.392H289.392V509.806Z"
          fill="#0052B4"
        />
        <path
          d="M343.389 162.438C343.389 159.034 346.156 156.267 349.561 156.267H362.785C383.689 156.267 400.696 139.261 400.696 118.358C400.696 97.4552 383.69 80.4482 362.785 80.4482H350.227C346.128 77.3692 340.629 75.4702 334.563 75.4702C321.91 75.4702 311.653 83.6752 311.653 93.7972C311.653 103.821 321.714 111.953 334.198 112.111L334.192 112.184H362.785C366.19 112.184 368.957 114.952 368.957 118.356C368.957 121.76 366.19 124.527 362.785 124.527H349.561C328.657 124.527 311.652 141.533 311.652 162.436C311.652 183.339 328.656 200.346 349.561 200.346H400.695V168.608H349.561C346.156 168.609 343.389 165.842 343.389 162.438Z"
          fill="#F0F0F0"
        />
        <path
          d="M143.042 162.438C143.042 159.034 145.809 156.267 149.214 156.267H162.438C183.342 156.267 200.349 139.261 200.349 118.358C200.349 97.4552 183.343 80.4482 162.438 80.4482H149.88C145.781 77.3692 140.282 75.4702 134.216 75.4702C121.563 75.4702 111.306 83.6752 111.306 93.7972C111.306 103.821 121.367 111.953 133.851 112.111L133.845 112.184H162.439C165.844 112.184 168.611 114.952 168.611 118.356C168.611 121.76 165.844 124.527 162.439 124.527H149.215C128.311 124.527 111.306 141.533 111.306 162.436C111.306 183.339 128.31 200.346 149.215 200.346H200.348V168.608H149.214C145.809 168.609 143.042 165.842 143.042 162.438Z"
          fill="#F0F0F0"
        />
        <path
          d="M343.389 398.62C343.389 395.216 346.156 392.449 349.561 392.449H362.785C383.689 392.449 400.696 375.443 400.696 354.54C400.696 333.637 383.69 316.63 362.785 316.63H350.227C346.128 313.551 340.629 311.652 334.563 311.652C321.909 311.652 311.652 319.858 311.652 329.979C311.652 340.003 321.713 348.135 334.197 348.293L334.191 348.366H362.784C366.189 348.366 368.956 351.134 368.956 354.538C368.956 357.942 366.189 360.709 362.784 360.709H349.56C328.656 360.709 311.651 377.715 311.651 398.618C311.651 419.521 328.655 436.528 349.56 436.528H400.695V404.791H349.561C346.156 404.792 343.389 402.023 343.389 398.62Z"
          fill="#F0F0F0"
        />
        <path
          d="M143.042 398.62C143.042 395.216 145.809 392.449 149.214 392.449H162.438C183.342 392.449 200.349 375.443 200.349 354.54C200.349 333.637 183.343 316.63 162.438 316.63H149.88C145.781 313.551 140.282 311.652 134.216 311.652C121.562 311.652 111.305 319.858 111.305 329.979C111.305 340.003 121.366 348.135 133.85 348.293L133.844 348.366H162.438C165.843 348.366 168.61 351.134 168.61 354.538C168.61 357.942 165.843 360.709 162.438 360.709H149.214C128.31 360.709 111.305 377.715 111.305 398.618C111.305 419.521 128.309 436.528 149.214 436.528H200.348V404.791H149.214C145.809 404.792 143.042 402.023 143.042 398.62Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7217">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MQ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mr.tsx
================================================
import React from "react";

const MR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7218)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M256 295.751C213.374 295.751 177.764 265.793 169.027 225.788C167.685 231.938 166.957 238.315 166.957 244.869C166.957 294.048 206.822 333.912 256 333.912C305.178 333.912 345.043 294.047 345.043 244.869C345.043 238.315 344.315 231.938 342.973 225.787C334.236 265.794 298.626 295.751 256 295.751Z"
          fill="#FFDA44"
        />
        <path
          d="M255.999 178.087L264.287 203.596H291.11L269.411 219.361L277.699 244.87L255.999 229.104L234.3 244.87L242.589 219.361L220.89 203.596H247.711L255.999 178.087Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7218">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ms.tsx
================================================
import React from "react";

const MS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7227)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4761 56.1901 56.1891 89.4761 33.3911 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M256 224.519L165.045 133.566H133.565V133.568L255.998 256H256C256 256 256 234.293 256 224.519Z"
          fill="#D80027"
        />
        <path
          d="M289.391 133.565V255.999C289.391 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.217 315.639 445.217 255.999V133.565H289.391Z"
          fill="#338AF3"
        />
        <path
          d="M289.391 255.999C289.391 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.217 315.639 445.217 255.999H289.391Z"
          fill="#A2001D"
        />
        <path
          d="M400.696 189.219H378.434V166.957H356.173V189.219H333.913V211.479H356.173V278.261H378.434V211.479H400.696V189.219Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7227">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mt.tsx
================================================
import React from "react";

const MT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7215)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C397.384 0 512 114.616 512 256C512 397.384 397.384 512 256 512"
          fill="#D80027"
        />
        <path
          d="M178.087 100.174V66.7832H144.696V100.174H111.304V133.565H144.696V166.957H178.087V133.565H211.478V100.174H178.087Z"
          fill="#ACABB1"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7215">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mu.tsx
================================================
import React from "react";

const MU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7219)">
        <path
          d="M31.127 133.565L256 155.826L480.873 133.565C437.454 53.989 353.035 0 256 0C158.965 0 74.546 53.989 31.127 133.565Z"
          fill="#D80027"
        />
        <path
          d="M31.127 378.435L256 400.696L480.873 378.435C500.717 342.064 512 300.35 512 256L256 233.739L0 256C0 300.35 11.283 342.064 31.127 378.435Z"
          fill="#FFDA44"
        />
        <path
          d="M31.127 133.565C11.283 169.936 0 211.65 0 256H512C512 211.65 500.717 169.936 480.873 133.565H256H31.127Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C353.035 512 437.454 458.011 480.873 378.435H31.127C74.546 458.011 158.965 512 256 512Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7219">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mv.tsx
================================================
import React from "react";

const MV = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7213)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path d="M89.043 133.565H422.956V378.435H89.043V133.565Z" fill="#6DA544" />
        <path
          d="M297.227 328.348C257.271 328.348 224.879 295.956 224.879 256C224.879 216.044 257.271 183.652 297.227 183.652C309.685 183.652 321.408 186.802 331.642 192.348C315.587 176.647 293.632 166.956 269.401 166.956C220.225 166.956 180.358 206.822 180.358 255.999C180.358 305.176 220.225 345.042 269.401 345.042C293.632 345.042 315.588 335.351 331.642 319.65C321.408 325.198 309.685 328.348 297.227 328.348Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7213">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MV;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mw.tsx
================================================
import React from "react";

const MW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7211)">
        <path
          d="M0 256C0 287.314 5.633 317.31 15.923 345.043L256 356.174L496.077 345.044C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957L256 155.826L15.923 166.956C5.633 194.69 0 224.686 0 256H0Z"
          fill="#D80027"
        />
        <path
          d="M256 0C145.929 0 52.094 69.472 15.923 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="black"
        />
        <path
          d="M496.077 345.043H15.923C52.094 442.527 145.929 512 256 512C366.071 512 459.906 442.527 496.077 345.043Z"
          fill="#496E2D"
        />
        <path
          d="M332.515 122.435L301.251 107.729L317.9 77.45L283.95 83.945L279.648 49.647L256 74.872L232.353 49.647L228.05 83.945L194.101 77.45L210.75 107.729L179.485 122.435H332.515Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7211">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mx.tsx
================================================
import React from "react";

const MX = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7221)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 154.506 452.935 66.8099 367.304 25.4019V486.597C452.935 445.19 512 357.494 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 357.494 59.065 445.19 144.696 486.598V25.4019C59.065 66.8099 0 154.506 0 256Z"
          fill="#6DA544"
        />
        <path
          d="M189.217 256C189.217 292.883 219.117 322.783 256 322.783C292.883 322.783 322.783 292.883 322.783 256V233.739H189.217V256Z"
          fill="#6DA544"
        />
        <path
          d="M345.043 211.478H278.26C278.26 199.184 268.293 189.217 255.999 189.217C243.705 189.217 233.738 199.184 233.738 211.478H166.955C166.955 223.773 177.664 233.739 189.957 233.739H189.216C189.216 246.034 199.182 256 211.477 256C211.477 268.295 221.443 278.261 233.738 278.261H278.26C290.555 278.261 300.521 268.295 300.521 256C312.816 256 322.782 246.034 322.782 233.739H322.04C334.335 233.739 345.043 223.773 345.043 211.478Z"
          fill="#FF9811"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7221">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MX;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/my.tsx
================================================
import React from "react";

const MY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7212)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M244.87 256H512C512 232.893 508.92 210.511 503.181 189.217H244.87V256Z"
          fill="#D80027"
        />
        <path
          d="M244.87 122.435H474.426C458.755 96.8629 438.72 74.2599 415.357 55.6519H244.87V122.435Z"
          fill="#D80027"
        />
        <path
          d="M256 512C316.249 512 371.626 491.176 415.357 456.348H96.6429C140.374 491.176 195.751 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M37.574 389.565H474.426C487.007 369.037 496.763 346.596 503.181 322.782H8.81897C15.236 346.596 24.993 369.037 37.574 389.565Z"
          fill="#D80027"
        />
        <path
          d="M256 256C256 114.616 256 97.948 256 0C114.616 0 0 114.616 0 256H256Z"
          fill="#0052B4"
        />
        <path
          d="M170.234 219.13C135.272 219.13 106.93 190.787 106.93 155.826C106.93 120.865 135.273 92.5221 170.234 92.5221C181.135 92.5221 191.392 95.2791 200.347 100.131C186.299 86.3941 167.087 77.9141 145.886 77.9141C102.857 77.9141 67.973 112.797 67.973 155.827C67.973 198.857 102.857 233.74 145.886 233.74C167.087 233.74 186.299 225.26 200.347 211.523C191.392 216.373 181.136 219.13 170.234 219.13Z"
          fill="#FFDA44"
        />
        <path
          d="M188.073 111.304L199.312 134.806L224.693 128.942L213.327 152.381L233.739 168.568L208.325 174.297L208.396 200.348L188.073 184.05L167.749 200.348L167.819 174.297L142.405 168.568L162.817 152.381L151.45 128.942L176.833 134.806L188.073 111.304Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7212">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/mz.tsx
================================================
import React from "react";

const MZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7229)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M138.371 356.174L74.989 437.011C121.313 483.341 185.306 512 256 512C361.83 512 452.644 447.771 491.631 356.174H138.371Z"
          fill="#FFDA44"
        />
        <path
          d="M492.029 156.753C453.26 64.662 362.188 0 256 0C185.306 0 121.313 28.659 74.989 74.989L139.099 156.753H492.029Z"
          fill="#496E2D"
        />
        <path
          d="M55.652 188.29V322.782H503.182C508.924 301.491 512 279.107 512 256C512 232.558 508.842 209.858 502.939 188.29H55.652Z"
          fill="black"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#A2001D"
        />
        <path
          d="M103.61 189.217L120.185 240.233H173.831L130.433 271.765L147.007 322.783L103.61 291.252L60.211 322.783L76.789 271.765L33.391 240.233H87.033L103.61 189.217Z"
          fill="#FFDA44"
        />
        <path d="M55.1071 256H152.131V300.522H55.1071V256Z" fill="#F0F0F0" />
        <path
          d="M170.5 204.959L154.759 189.217L103.611 240.365L52.463 189.217L36.722 204.959L87.915 256.061L36.722 307.255L52.463 322.783L103.611 271.727L154.759 322.783L170.5 307.255L119.307 256.061L170.5 204.959Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7229">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default MZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/na.tsx
================================================
import React from "react";

const NA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7231)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M74.981 437.02C85.72 447.759 97.178 457.336 109.197 465.768L465.766 109.198C457.335 97.1789 447.758 85.7209 437.018 74.9819C426.279 64.2429 414.821 54.6669 402.802 46.2349L46.234 402.805C54.665 414.822 64.242 426.281 74.981 437.02Z"
          fill="#A2001D"
        />
        <path
          d="M74.981 74.9801C-5.78297 155.744 -21.287 277.036 28.436 373.378L373.378 28.4371C277.036 -21.2859 155.743 -5.77988 74.981 74.9801Z"
          fill="#0052B4"
        />
        <path
          d="M437.019 437.02C517.781 356.258 533.285 234.965 483.564 138.622L138.622 483.564C234.963 533.287 356.256 517.783 437.019 437.02Z"
          fill="#496E2D"
        />
        <path
          d="M211.478 144.696L182.792 158.189L198.068 185.971L166.919 180.013L162.971 211.478L141.275 188.335L119.578 211.478L115.632 180.013L84.482 185.97L99.757 158.188L71.072 144.696L99.758 131.202L84.482 103.422L115.631 109.38L119.579 77.9131L141.275 101.057L162.972 77.9131L166.919 109.38L198.068 103.422L182.794 131.203L211.478 144.696Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7231">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ne.tsx
================================================
import React from "react";

const NE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7238)">
        <path
          d="M26.3903 144.696C10.1163 178.352 0.988281 216.109 0.988281 256C0.988281 295.891 10.1163 333.648 26.3903 367.304L256.988 389.565L487.586 367.304C503.86 333.648 512.988 295.891 512.988 256C512.988 216.109 503.86 178.352 487.586 144.696L256.988 122.435L26.3903 144.696Z"
          fill="#F0F0F0"
        />
        <path
          d="M26.3992 367.304C67.8052 452.935 155.494 512 256.988 512C358.482 512 446.171 452.935 487.577 367.304H26.3992Z"
          fill="#6DA544"
        />
        <path
          d="M26.3992 144.696H487.577C446.171 59.065 358.481 0 256.988 0C155.495 0 67.8052 59.065 26.3992 144.696Z"
          fill="#FF9811"
        />
        <path
          d="M256.988 345.043C306.165 345.043 346.031 305.177 346.031 256C346.031 206.823 306.165 166.957 256.988 166.957C207.811 166.957 167.945 206.823 167.945 256C167.945 305.177 207.811 345.043 256.988 345.043Z"
          fill="#FF9811"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7238">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/nf.tsx
================================================
import React from "react";

const NF = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7241)">
        <path
          d="M368.292 25.402C334.636 9.128 296.879 0 256.988 0C217.097 0 179.34 9.128 145.684 25.402L123.423 256L145.684 486.598C179.34 502.872 217.097 512 256.988 512C296.879 512 334.636 502.872 368.292 486.598L390.553 256L368.292 25.402Z"
          fill="#F0F0F0"
        />
        <path
          d="M145.684 25.4109C60.0533 66.8169 0.988281 154.506 0.988281 256C0.988281 357.494 60.0533 445.183 145.684 486.589V25.4109Z"
          fill="#6DA544"
        />
        <path
          d="M368.292 25.4109V486.589C453.923 445.183 512.988 357.493 512.988 256C512.988 154.507 453.923 66.8169 368.292 25.4109Z"
          fill="#6DA544"
        />
        <path
          d="M323.771 333.913L256.988 122.435L190.205 333.913H240.292V389.565H273.684V333.913H323.771Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7241">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NF;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ng.tsx
================================================
import React from "react";

const NG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7239)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0.988281 256C0.988281 366.072 70.4603 459.906 167.945 496.078V15.9241C70.4603 52.0941 0.988281 145.93 0.988281 256Z"
          fill="#6DA544"
        />
        <path
          d="M512.988 256C512.988 145.93 443.516 52.0941 346.031 15.9241V496.079C443.516 459.906 512.988 366.072 512.988 256Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7239">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ni.tsx
================================================
import React from "react";

const NI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7237)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 0C155.494 0 67.7984 59.065 26.3904 144.696H487.585C446.178 59.065 358.481 0 256.988 0Z"
          fill="#338AF3"
        />
        <path
          d="M256.988 512C358.481 512 446.178 452.935 487.586 367.304H26.3904C67.7984 452.935 155.494 512 256.988 512Z"
          fill="#338AF3"
        />
        <path
          d="M256.988 178.087C213.958 178.087 179.075 212.97 179.075 256C179.075 299.03 213.958 333.913 256.988 333.913C300.018 333.913 334.901 299.03 334.901 256C334.901 212.97 300.018 178.087 256.988 178.087ZM256.988 300.522C232.4 300.522 212.466 280.59 212.466 256C212.466 231.41 232.399 211.478 256.988 211.478C281.577 211.478 301.51 231.41 301.51 256C301.51 280.59 281.576 300.522 256.988 300.522Z"
          fill="#FFDA44"
        />
        <path
          d="M295.546 267.13L256.988 256L218.43 267.13L205.578 289.391H308.397L295.546 267.13Z"
          fill="#0052B4"
        />
        <path
          d="M256.988 200.348L231.283 244.87L256.988 256L282.693 244.87L256.988 200.348Z"
          fill="#338AF3"
        />
        <path d="M218.43 267.13H295.546L282.693 244.87H231.283L218.43 267.13Z" fill="#6DA544" />
      </g>
      <defs>
        <clipPath id="clip0_4_7237">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/nl.tsx
================================================
import React from "react";

const NL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7235)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 0C146.917 0 53.0821 69.472 16.9111 166.957H497.066C460.894 69.472 367.059 0 256.988 0Z"
          fill="#A2001D"
        />
        <path
          d="M256.988 512C367.059 512 460.894 442.528 497.065 345.043H16.9111C53.0821 442.528 146.917 512 256.988 512Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7235">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/no.tsx
================================================
import React from "react";

const NO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7245)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M8.81885 322.783C23.6308 377.742 56.2759 425.376 100.174 459.105V322.783H8.81885Z"
          fill="#D80027"
        />
        <path
          d="M233.739 511.026C241.077 511.658 248.498 512 256 512C374.279 512 473.805 431.779 503.181 322.783H233.739V511.026Z"
          fill="#D80027"
        />
        <path
          d="M503.181 189.217C473.805 80.221 374.279 0 256 0C248.498 0 241.077 0.342 233.739 0.974V189.217H503.181Z"
          fill="#D80027"
        />
        <path
          d="M100.174 52.895C56.2759 86.625 23.6308 134.258 8.81885 189.217H100.174V52.895Z"
          fill="#D80027"
        />
        <path
          d="M509.833 222.609H200.349H200.348V6.08496C176.69 11.331 154.261 19.834 133.565 31.127V222.607V222.608H2.167C0.742 233.539 0 244.683 0 256C0 267.317 0.742 278.461 2.167 289.391H133.564H133.565V480.872C154.261 492.164 176.69 500.669 200.348 505.914V289.394V289.392H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7245">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/np.tsx
================================================
import React from "react";

const NP = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7234)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#F0F0F0"
        />
        <path d="M511.486 283.826L511.48 283.818L511.479 283.826H511.486Z" fill="#0052B4" />
        <path
          d="M511.478 283.826C511.478 283.824 511.479 283.822 511.479 283.818L230.734 1.33105C218.069 2.62205 205.676 4.83606 193.625 7.90506C82.8863 36.1001 0.988281 256 0.988281 256C0.988281 256 359.386 495.835 400.273 468.164C408.454 462.628 416.298 456.631 423.766 450.211L257.383 283.826H511.478Z"
          fill="#0052B4"
        />
        <path
          d="M446.205 256L197.233 7.02905C84.6763 33.9461 0.988281 135.192 0.988281 256C0.988281 397.384 115.604 512 256.988 512C310.617 512 360.385 495.498 401.517 467.311L190.205 256H446.205Z"
          fill="#D80027"
        />
        <path
          d="M244.46 377.993L213.195 363.287L229.844 333.008L195.894 339.503L191.592 305.205L167.945 330.43L144.298 305.205L139.995 339.503L106.046 333.007L122.695 363.287L91.4292 377.993L122.695 392.698L106.046 422.978L139.997 416.484L144.297 450.78L167.945 425.555L191.592 450.78L195.894 416.484L229.843 422.979L213.194 392.7L244.46 377.993Z"
          fill="#F0F0F0"
        />
        <path
          d="M223.597 141.983L200.857 131.288L212.966 109.265L188.273 113.989L185.144 89.043L167.945 107.39L150.746 89.043L147.616 113.989L122.923 109.265L135.033 131.288L112.292 141.983L167.945 153.115L223.597 141.983Z"
          fill="#F0F0F0"
        />
        <path
          d="M234.727 141.983C234.727 178.866 204.827 208.766 167.944 208.766C131.061 208.766 101.161 178.866 101.161 141.983"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7234">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NP;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/nr.tsx
================================================
import React from "react";

const NR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7233)">
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#0052B4"
        />
        <path
          d="M256.988 512C398.373 512 512.988 397.385 512.988 256C512.988 114.615 398.373 0 256.988 0C115.603 0 0.988281 114.615 0.988281 256C0.988281 397.385 115.603 512 256.988 512Z"
          fill="#FFDA44"
        />
        <path
          d="M256.988 0C123.104 0 13.2464 102.781 1.96338 233.739H512.014C500.73 102.781 390.872 0 256.988 0Z"
          fill="#0052B4"
        />
        <path
          d="M256.988 512C390.872 512 500.73 409.219 512.014 278.261H1.96338C13.2464 409.219 123.104 512 256.988 512Z"
          fill="#0052B4"
        />
        <path
          d="M212.467 345.043L183.781 358.537L199.056 386.318L167.907 380.359L163.96 411.826L142.263 388.683L120.567 411.826L116.62 380.359L85.4701 386.317L100.746 358.536L72.0601 345.043L100.747 331.55L85.4701 303.77L116.619 309.728L120.568 278.261L142.263 301.404L163.961 278.261L167.907 309.728L199.057 303.77L183.782 331.551L212.467 345.043Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7233">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/nu.tsx
================================================
import React from "react";

const NU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7240)">
        <path
          d="M512.988 256C512.988 397.384 398.372 512 256.988 512C115.604 512 0.988281 397.384 0.988281 256C0.988281 256.061 256.988 0.028 256.988 0C398.372 0 512.988 114.616 512.988 256Z"
          fill="#FFDA44"
        />
        <path d="M256.988 122.435V208.778L167.945 122.435H256.988Z" fill="#0052B4" />
        <path
          d="M134.553 256H209.764L134.553 155.826L123.423 233.739L134.553 256Z"
          fill="#0052B4"
        />
        <path
          d="M256.303 256H256.988C256.988 255.77 256.988 255.546 256.988 255.315C256.76 255.544 256.532 255.772 256.303 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 133.565C256.988 88.52 256.988 59.005 256.988 0H256.945C115.579 0.024 0.988281 114.629 0.988281 256H134.553V180.789L209.764 256H256.304C256.532 255.772 256.76 255.544 256.989 255.315C256.989 238.068 256.989 222.679 256.989 208.778L181.776 133.565H256.988Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 224.519L166.033 133.566H134.553V133.568L256.986 256H256.988C256.988 256 256.988 234.293 256.988 224.519Z"
          fill="#D80027"
        />
        <path
          d="M130.503 33.3911C120.634 39.0111 111.179 45.2741 102.187 52.1111H112.691L84.9293 72.2851L95.5313 104.922L67.7693 84.7521L64.8153 86.8991C53.2883 99.9891 43.0683 114.257 34.3793 129.515V256H101.162V100.176V100.174H256.988C256.988 79.1111 256.988 59.0451 256.988 33.3911H130.503Z"
          fill="#D80027"
        />
        <path
          d="M110.348 46.1521C107.587 48.0851 104.865 50.0721 102.184 52.1111L84.9293 72.2851L67.7693 84.7511L64.7903 86.9151C58.5043 94.0551 52.6093 101.547 47.1393 109.36C53.3743 112.386 60.3733 114.087 67.7693 114.087C93.8953 114.087 115.073 92.9091 115.073 66.7831C115.075 59.3851 113.375 52.3881 110.348 46.1521Z"
          fill="#0052B4"
        />
        <path
          d="M64.7913 86.9151L67.7703 84.7511L95.5323 104.922L84.9293 72.2851L112.689 52.1111H102.183C88.5893 62.4501 76.0623 74.1141 64.7913 86.9151Z"
          fill="#FFDA44"
        />
        <path
          d="M177.93 44.522L183.456 61.527H201.336L186.871 72.038L192.394 89.043L177.93 78.533L163.465 89.043L168.987 72.038L154.522 61.527H172.403L177.93 44.522Z"
          fill="#FFDA44"
        />
        <path
          d="M67.7713 155.826L73.2973 172.831H91.1773L76.7133 183.343L82.2363 200.348L67.7713 189.837L53.3053 200.348L58.8283 183.343L44.3643 172.831H62.2443L67.7713 155.826Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7240">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/nz.tsx
================================================
import React from "react";

const NZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7236)">
        <path
          d="M512.988 256C512.988 397.384 398.372 512 256.988 512C115.604 512 0.988281 397.384 0.988281 256C0.988281 256.061 256.988 0.028 256.988 0C398.372 0 512.988 114.616 512.988 256Z"
          fill="#0052B4"
        />
        <path
          d="M256.303 256H256.988C256.988 255.77 256.988 255.546 256.988 255.315C256.76 255.544 256.532 255.772 256.303 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.988 133.565C256.988 88.52 256.988 59.005 256.988 0H256.945C115.58 0.024 0.988281 114.629 0.988281 256H134.553V180.789L209.765 256H256.304C256.532 255.772 256.761 255.544 256.989 255.315C256.989 238.068 256.989 222.679 256.989 208.778L181.776 133.565H256.988Z"
          fill="#F0F0F0"
        />
        <path
          d="M130.503 33.3911C90.4644 56.1901 57.1784 89.4761 34.3794 129.515V256H101.162V100.176V100.174H256.988C256.988 79.1111 256.988 59.0451 256.988 33.3911H130.503Z"
          fill="#D80027"
        />
        <path
          d="M256.988 224.519L166.035 133.566C166.035 133.566 134.554 133.568 134.554 133.566V133.568L256.987 256H256.988C256.988 256 256.988 234.293 256.988 224.519Z"
          fill="#D80027"
        />
        <path
          d="M444.318 189.959L449.843 206.965H467.724L453.258 217.475L458.784 234.48L444.318 223.971L429.851 234.48L435.377 217.475L420.91 206.965H438.791L444.318 189.959Z"
          fill="#D80027"
        />
        <path
          d="M380.399 312.393L388.688 337.903H415.509L393.809 353.667L402.099 379.176L380.399 363.411L358.699 379.176L366.989 353.667L345.289 337.903H372.11L380.399 312.393Z"
          fill="#D80027"
        />
        <path
          d="M382.813 112.046L389.721 133.305H412.072L393.988 146.44L400.896 167.698L382.813 154.559L364.731 167.698L371.638 146.44L353.556 133.305H375.906L382.813 112.046Z"
          fill="#D80027"
        />
        <path
          d="M321.31 189.217L329.598 214.727H356.42L334.72 230.491L343.01 256L321.31 240.235L299.61 256L307.9 230.491L286.2 214.727H313.021L321.31 189.217Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7236">
          <rect width="512" height="512" fill="white" transform="translate(0.988281)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default NZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/om.tsx
================================================
import React from "react";

const OM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7246)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 353.035 53.99 437.455 133.565 480.873V31.127C53.99 74.545 0 158.965 0 256Z"
          fill="#D80027"
        />
        <path
          d="M496.078 345.043C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.689 496.078 166.957H15.924C5.633 194.689 0 224.686 0 256C0 287.314 5.633 317.31 15.924 345.043L256 367.304L496.078 345.043Z"
          fill="#D80027"
        />
        <path
          d="M256 512C366.072 512 459.906 442.528 496.078 345.043H15.9241C52.0941 442.528 145.93 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M0 256C0 374.279 80.221 473.805 189.217 503.181V8.81909C80.221 38.1951 0 137.721 0 256Z"
          fill="#D80027"
        />
        <path
          d="M156.617 112.654L133.006 89.043L117.266 104.785L101.526 89.043L77.9151 112.654L93.6561 128.395L77.9131 144.137L101.524 167.748L117.265 152.006L133.006 167.748L156.617 144.137L140.876 128.395L156.617 112.654Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7246">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default OM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pa.tsx
================================================
import React from "react";

const PA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7252)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 397.384 114.616 512 256 512C256 414.645 256 256 256 256C256 256 89.043 256 0 256Z"
          fill="#0052B4"
        />
        <path
          d="M256 0C397.384 0 512 114.616 512 256C414.645 256 256 256 256 256C256 256 256 89.043 256 0Z"
          fill="#D80027"
        />
        <path
          d="M152.389 89.043L168.966 140.061H222.609L179.211 171.591L195.787 222.609L152.389 191.078L108.991 222.609L125.567 171.591L82.1689 140.061H135.812L152.389 89.043Z"
          fill="#0052B4"
        />
        <path
          d="M359.611 289.391L376.188 340.409H429.831L386.432 371.939L403.009 422.957L359.611 391.426L316.213 422.957L332.789 371.939L289.391 340.409H343.034L359.611 289.391Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7252">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pe.tsx
================================================
import React from "react";

const PE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7255)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 145.93 442.528 52.0939 345.043 15.924V496.079C442.528 459.906 512 366.072 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 366.072 69.472 459.906 166.957 496.078V15.924C69.472 52.0939 0 145.93 0 256Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7255">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pf.tsx
================================================
import React from "react";

const PF = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7157)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M31.127 133.565H480.872C437.454 53.989 353.035 0 256 0C158.965 0 74.546 53.989 31.127 133.565Z"
          fill="#D80027"
        />
        <path
          d="M256 512C353.035 512 437.454 458.011 480.873 378.435H31.127C74.546 458.011 158.965 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M345.043 256C345.043 305.178 305.177 333.913 256 333.913C206.823 333.913 166.957 305.178 166.957 256C166.957 206.822 206.823 166.957 256 166.957C305.177 166.957 345.043 206.822 345.043 256Z"
          fill="#FFDA44"
        />
        <path
          d="M345.043 256C345.043 305.178 305.177 345.043 256 345.043C206.823 345.043 166.957 305.178 166.957 256"
          fill="#0052B4"
        />
        <path d="M200.348 233.739H222.609V278.261H200.348V233.739Z" fill="#D80027" />
        <path d="M289.391 233.739H311.652V278.261H289.391V233.739Z" fill="#D80027" />
        <path d="M244.87 200.348H267.131V278.261H244.87V200.348Z" fill="#D80027" />
      </g>
      <defs>
        <clipPath id="clip0_4_7157">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PF;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pg.tsx
================================================
import React from "react";

const PG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7253)">
        <path
          d="M437.02 437.019C337.046 536.993 174.956 536.993 74.9799 437.019C-24.9941 337.045 -24.9941 174.954 74.9809 74.979C174.955 -24.995 321.304 -9.25404 421.278 90.721C521.251 190.695 536.993 337.045 437.02 437.019Z"
          fill="black"
        />
        <path
          d="M74.981 74.98C174.955 -24.994 337.044 -24.992 437.02 74.981C536.994 174.955 536.994 337.045 437.02 437.02"
          fill="#A2001D"
        />
        <path
          d="M195.642 345.044L199.786 357.799H213.197L202.347 365.681L206.492 378.436L195.642 370.553L184.792 378.436L188.936 365.681L178.087 357.799H191.497L195.642 345.044Z"
          fill="#F0F0F0"
        />
        <path
          d="M161.391 222.609L168.3 243.867H190.65L172.567 257.004L179.474 278.262L161.391 265.123L143.309 278.262L150.217 257.004L132.133 243.867H154.485L161.391 222.609Z"
          fill="#F0F0F0"
        />
        <path
          d="M161.391 378.436L168.298 399.694H190.65L172.565 412.83L179.474 434.088L161.391 420.949L143.309 434.088L150.215 412.83L132.133 399.694H154.482L161.391 378.436Z"
          fill="#F0F0F0"
        />
        <path
          d="M226.741 278.262L233.65 299.52H256L237.917 312.656L244.824 333.914L226.741 320.775L208.659 333.914L215.567 312.656L197.484 299.52H219.835L226.741 278.262Z"
          fill="#F0F0F0"
        />
        <path
          d="M96.0402 278.262L102.949 299.52H125.298L107.216 312.656L114.122 333.914L96.0402 320.775L77.9572 333.914L84.8662 312.656L66.7822 299.52H89.1332L96.0402 278.262Z"
          fill="#F0F0F0"
        />
        <path
          d="M428.549 189.561C417.108 178.12 402.242 171.361 386.267 170.2L434.087 133.007C415.042 113.962 389.516 105.361 364.608 107.18C361.626 96.464 355.941 86.342 347.514 77.915L328.625 115.693C327.386 113.435 325.817 111.31 323.903 109.397C313.035 98.53 295.417 98.53 284.551 109.397C273.685 120.264 273.683 137.882 284.551 148.749C286.464 150.662 288.59 152.231 290.848 153.471L253.07 172.36C261.499 180.79 271.628 186.479 282.35 189.459C280.525 214.367 289.117 239.889 308.163 258.935L349.943 205.217C353.086 202.122 357.237 200.413 361.653 200.413C366.113 200.413 370.305 202.149 373.458 205.304C376.612 208.457 378.349 212.65 378.349 217.109C378.349 221.569 376.612 225.761 373.458 228.915L389.2 244.657C396.557 237.299 400.61 227.516 400.61 217.11C400.61 208.596 397.894 200.502 392.88 193.81C400.186 195.761 407.091 199.583 412.811 205.304C430.171 222.663 430.171 250.909 412.811 268.267L428.553 284.009C441.166 271.395 448.113 254.625 448.113 236.786C448.11 218.945 441.162 202.175 428.549 189.561Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7253">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ph.tsx
================================================
import React from "react";

const PH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7256)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0V256L74.98 437.02C121.307 483.346 185.307 512 256 512C397.384 512 512 397.384 512 256C512 114.616 256 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 0C185.307 0 121.307 28.654 74.98 74.98C137.79 137.79 160.087 160.088 256 256H512C512 114.616 397.384 0 256 0Z"
          fill="#0052B4"
        />
        <path
          d="M175.291 256L144.027 241.294L160.676 211.015L126.726 217.51L122.424 183.213L98.776 208.437L75.129 183.213L70.826 217.51L36.877 211.014L53.526 241.294L22.261 256L53.526 270.706L36.877 300.985L70.829 294.491L75.128 328.787L98.776 303.563L122.424 328.787L126.726 294.491L160.674 300.986L144.026 270.707L175.291 256Z"
          fill="#FFDA44"
        />
        <path
          d="M68.273 100.174L78.677 114.717L95.722 109.318L85.104 123.706L95.508 138.249L78.542 132.598L67.925 146.985L68.058 129.105L51.093 123.453L68.141 118.054L68.273 100.174Z"
          fill="#FFDA44"
        />
        <path
          d="M68.273 365.015L78.677 379.558L95.722 374.158L85.104 388.547L95.508 403.09L78.542 397.439L67.925 411.826L68.058 393.946L51.093 388.294L68.141 382.895L68.273 365.015Z"
          fill="#FFDA44"
        />
        <path
          d="M216.666 232.595L206.263 247.138L189.217 241.737L199.835 256.126L189.431 270.67L206.397 265.018L217.015 279.405L216.881 261.526L233.846 255.874L216.799 250.475L216.666 232.595Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7256">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pk.tsx
================================================
import React from "react";

const PK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7249)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256C0 353.035 53.989 437.454 133.565 480.873V31.127C53.989 74.546 0 158.965 0 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C211.65 0 169.936 11.283 133.565 31.127V480.872C169.936 500.717 211.65 512 256 512C397.384 512 512 397.384 512 256C512 114.616 397.384 0 256 0Z"
          fill="#496E2D"
        />
        <path
          d="M365.453 298.337C333.066 321.738 287.84 314.454 264.44 282.068C241.038 249.68 248.323 204.455 280.71 181.055C290.808 173.759 302.154 169.446 313.697 167.947C291.49 164.626 268.015 169.63 248.378 183.819C208.518 212.621 199.551 268.282 228.352 308.144C257.153 348.003 312.815 356.971 352.677 328.167C372.316 313.978 384.437 293.265 388.255 271.136C383.209 281.622 375.552 291.04 365.453 298.337Z"
          fill="#F0F0F0"
        />
        <path
          d="M364.066 166.959L382.31 186.62L406.646 175.348L393.583 198.772L411.826 218.435L385.51 213.25L372.448 236.676L369.247 210.046L342.931 204.861L367.268 193.589L364.066 166.959Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7249">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pl.tsx
================================================
import React from "react";

const PL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7258)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7258">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pn.tsx
================================================
import React from "react";

const PN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7257)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.391C89.4761 56.19 56.1891 89.476 33.3911 129.515V256H100.174V100.176V100.174H256C256 79.111 256 59.045 256 33.391H129.515Z"
          fill="#D80027"
        />
        <path
          d="M256 224.519L165.045 133.566H133.565V133.568L255.998 256H256C256 256 256 234.293 256 224.519Z"
          fill="#D80027"
        />
        <path
          d="M400.696 155.826L367.304 166.957L333.913 155.826L322.783 128L333.913 100.174H400.696L389.565 128L400.696 155.826Z"
          fill="#ACABB1"
        />
        <path
          d="M289.391 155.826V278.26C289.391 337.9 367.304 356.174 367.304 356.174C367.304 356.174 445.217 337.9 445.217 278.26V155.826H289.391Z"
          fill="#338AF3"
        />
        <path
          d="M296.415 307.266C315.567 344.035 367.305 356.174 367.305 356.174C367.305 356.174 419.043 344.035 438.195 307.266L367.305 189.218L296.415 307.266Z"
          fill="#6DA544"
        />
        <path
          d="M445.217 277.023L367.304 155.826L289.391 277.024V278.26C289.391 289.298 292.065 298.916 296.414 307.266L367.304 196.991L438.194 307.265C442.543 298.914 445.217 289.297 445.217 278.259V277.023Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7257">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pr.tsx
================================================
import React from "react";

const PR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7260)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C172.248 0 97.893 40.223 51.189 102.4H460.811C414.107 40.223 339.752 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C339.752 512 414.107 471.777 460.811 409.6H51.189C97.893 471.777 172.248 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 273.535 1.768 290.657 5.127 307.2H506.875C510.234 290.657 512 273.535 512 256C512 238.465 510.232 221.343 506.874 204.8H5.127C1.768 221.343 0 238.465 0 256H0Z"
          fill="#D80027"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#0052B4"
        />
        <path
          d="M103.61 189.217L120.185 240.233H173.831L130.433 271.765L147.007 322.783L103.61 291.252L60.211 322.783L76.789 271.765L33.391 240.233H87.033L103.61 189.217Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7260">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ps.tsx
================================================
import React from "react";

const PS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7251)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M155.826 166.957H496.076C459.906 69.472 366.07 0 256 0C185.306 0 121.313 28.659 74.989 74.989L155.826 166.957Z"
          fill="black"
        />
        <path
          d="M155.826 345.043H496.076C459.906 442.528 366.07 512 256 512C185.306 512 121.313 483.341 74.989 437.011L155.826 345.043Z"
          fill="#6DA544"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7251">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pt.tsx
================================================
import React from "react";

const PT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7259)">
        <path
          d="M0 256C0 366.07 69.472 459.905 166.955 496.076L189.217 255.999L166.955 15.923C69.472 52.095 0 145.929 0 256Z"
          fill="#6DA544"
        />
        <path
          d="M512 256C512 114.616 397.384 0 256 0C224.686 0 194.689 5.633 166.955 15.923V496.077C194.689 506.368 224.686 512 256 512C397.384 512 512 397.384 512 256Z"
          fill="#D80027"
        />
        <path
          d="M166.957 345.043C216.134 345.043 256 305.177 256 256C256 206.823 216.134 166.957 166.957 166.957C117.78 166.957 77.9141 206.823 77.9141 256C77.9141 305.177 117.78 345.043 166.957 345.043Z"
          fill="#FFDA44"
        />
        <path
          d="M116.87 211.478V267.13C116.87 294.792 139.294 317.217 166.957 317.217C194.62 317.217 217.044 294.793 217.044 267.13V211.478H116.87Z"
          fill="#D80027"
        />
        <path
          d="M166.957 283.826C157.751 283.826 150.261 276.336 150.261 267.13V244.87H183.652V267.131C183.652 276.336 176.162 283.826 166.957 283.826Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7259">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/pw.tsx
================================================
import React from "react";

const PW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7250)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M200.348 367.304C261.82 367.304 311.652 317.472 311.652 256C311.652 194.529 261.82 144.696 200.348 144.696C138.877 144.696 89.044 194.529 89.044 256C89.044 317.472 138.877 367.304 200.348 367.304Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7250">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/py.tsx
================================================
import React from "react";

const PY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7254)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C154.506 0 66.8099 59.065 25.4019 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4019C66.8099 452.935 154.506 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M318.963 181.907L295.352 205.518C305.423 215.589 311.653 229.502 311.653 244.87C311.653 275.606 286.736 300.522 256.001 300.522C225.266 300.522 200.349 275.605 200.349 244.87C200.349 229.502 206.579 215.589 216.65 205.518L193.039 181.907C176.924 198.019 166.958 220.28 166.958 244.87C166.958 294.048 206.824 333.913 256.001 333.913C305.178 333.913 345.044 294.047 345.044 244.87C345.043 220.28 335.077 198.019 318.963 181.907Z"
          fill="#6DA544"
        />
        <path
          d="M256 211.478L264.289 236.988H291.11L269.411 252.752L277.7 278.261L256 262.496L234.3 278.261L242.589 252.752L220.89 236.988H247.711L256 211.478Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7254">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default PY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/qa.tsx
================================================
import React from "react";

const QA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7261)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M512 256C512 114.616 397.384 0 256 0C205.92 0 159.206 14.395 119.748 39.251L175.861 63.092L100.174 95.25L175.861 127.407L100.174 159.563L175.861 191.718L100.174 223.869L175.861 256.018L100.174 288.174L175.861 320.328L100.174 352.479L175.861 384.633L100.174 416.789L175.861 448.94L119.773 472.768C159.226 497.612 205.93 512 256 512C397.384 512 512 397.384 512 256Z"
          fill="#751A46"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7261">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default QA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ro.tsx
================================================
import React from "react";

const RO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7265)">
        <path
          d="M345.043 15.922C317.309 5.633 287.314 1.33097e-07 256 1.33097e-07C224.686 -0.000999867 194.69 5.633 166.957 15.922L144.696 255.999L166.957 496.076C194.689 506.368 224.685 512 256 512C287.313 512 317.31 506.368 345.043 496.076L367.303 256L345.043 15.922Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256C512 145.93 442.528 52.093 345.043 15.923V496.079C442.528 459.905 511.999 366.072 512 256Z"
          fill="#D80027"
        />
        <path
          d="M0 255.999C0 366.072 69.472 459.905 166.955 496.078L166.956 15.924C69.472 52.094 0 145.928 0 255.999H0Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7265">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default RO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/rs.tsx
================================================
import React from "react";

const RS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7278)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C114.616 0 0 114.616 0 256C0 287.314 5.633 317.311 15.923 345.043H496.078C506.368 317.311 512 287.314 512 256C512 114.616 397.384 0 256 0Z"
          fill="#0052B4"
        />
        <path
          d="M256 0C145.929 0 52.0941 69.472 15.9231 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#D80027"
        />
        <path
          d="M66.198 144.696V272.402C66.198 345.046 161.099 367.305 161.099 367.305C161.099 367.305 255.999 345.046 255.999 272.402V144.696H66.198Z"
          fill="#D80027"
        />
        <path
          d="M105.446 166.957H216.751V122.435L194.49 133.565L161.099 100.174L127.707 133.565L105.446 122.435V166.957Z"
          fill="#FFDA44"
        />
        <path
          d="M233.739 290.183L161.391 217.835L89.043 290.183L112.654 313.794L161.391 265.057L210.128 313.794L233.739 290.183Z"
          fill="#FFDA44"
        />
        <path
          d="M233.739 222.609H199.983C201.881 219.333 202.985 215.539 202.985 211.481C202.985 199.185 193.018 189.22 180.724 189.22C172.229 189.22 164.852 193.978 161.099 200.973C157.346 193.979 149.969 189.22 141.474 189.22C129.18 189.22 119.213 199.185 119.213 211.481C119.213 215.539 120.317 219.334 122.215 222.609H89.043C89.043 234.904 99.752 244.87 112.045 244.87H111.304C111.304 257.165 121.27 267.131 133.565 267.131C133.565 278.017 141.383 287.061 151.708 288.997L134.168 328.599C142.574 332.016 151.76 333.914 161.392 333.914C171.024 333.914 180.21 332.016 188.616 328.599L171.076 288.997C181.401 287.063 189.219 278.018 189.219 267.131C201.514 267.131 211.48 257.165 211.48 244.87H210.739C223.031 244.87 233.739 234.903 233.739 222.609Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7278">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default RS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ru.tsx
================================================
import React from "react";

const RU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7266)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.077 345.043C506.368 317.31 512 287.314 512 256C512 224.686 506.368 194.69 496.077 166.957H15.923C5.633 194.69 0 224.686 0 256C0 287.314 5.633 317.31 15.923 345.043L256 367.304L496.077 345.043Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9231C52.0941 442.528 145.929 512 256 512Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7266">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default RU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/rw.tsx
================================================
import React from "react";

const RW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7267)">
        <path
          d="M0 256C0 300.35 11.283 342.064 31.127 378.435L256 400.696L480.873 378.435C500.717 342.064 512 300.35 512 256L256 233.739L0 256Z"
          fill="#FFDA44"
        />
        <path
          d="M480.873 133.565C437.454 53.989 353.035 0 256 0C158.965 0 74.546 53.989 31.127 133.565C11.283 169.936 0 211.65 0 256H512C512 211.65 500.717 169.936 480.873 133.565Z"
          fill="#338AF3"
        />
        <path
          d="M256 512C353.035 512 437.454 458.011 480.873 378.435H31.127C74.546 458.011 158.965 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M289.391 149.821L320.657 164.528L304.008 194.808L337.958 188.314L342.26 222.609L365.906 197.385L389.554 222.609L393.855 188.314L427.805 194.806L411.157 164.527L442.421 149.821L411.156 135.116L427.805 104.836L393.856 111.33L389.553 77.035L365.906 102.259L342.259 77.035L337.958 111.33L304.007 104.836L320.656 135.117L289.391 149.821Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7267">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default RW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sa.tsx
================================================
import React from "react";

const SA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7275)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M144.696 306.087C144.696 324.528 159.646 339.478 178.087 339.478H278.261C278.261 354.846 290.719 367.304 306.087 367.304H339.478C354.846 367.304 367.304 354.846 367.304 339.478V306.087H144.696Z"
          fill="#F0F0F0"
        />
        <path
          d="M370.087 144.696V222.609C370.087 234.884 360.101 244.87 347.826 244.87V278.261C378.513 278.261 403.478 253.295 403.478 222.609V144.696H370.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M130.783 222.609C130.783 234.884 120.797 244.87 108.522 244.87V278.261C139.209 278.261 164.174 253.295 164.174 222.609V144.696H130.783V222.609Z"
          fill="#F0F0F0"
        />
        <path d="M320 144.696H353.391V222.609H320V144.696Z" fill="#F0F0F0" />
        <path
          d="M269.913 189.217C269.913 192.286 267.416 194.782 264.348 194.782C261.28 194.782 258.783 192.285 258.783 189.217V144.695H225.392V189.217C225.392 192.286 222.895 194.782 219.827 194.782C216.759 194.782 214.262 192.285 214.262 189.217V144.695H180.87V189.217C180.87 210.698 198.346 228.174 219.827 228.174C228.1 228.174 235.772 225.574 242.088 221.158C248.403 225.573 256.076 228.174 264.349 228.174C266.015 228.174 267.653 228.057 269.264 227.852C266.898 237.601 258.118 244.869 247.653 244.869V278.26C278.34 278.26 303.305 253.294 303.305 222.608V189.217V144.695H269.914V189.217H269.913Z"
          fill="#F0F0F0"
        />
        <path d="M180.87 244.87H230.957V278.261H180.87V244.87Z" fill="#F0F0F0" />
      </g>
      <defs>
        <clipPath id="clip0_4_7275">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sb.tsx
================================================
import React from "react";

const SB = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7286)">
        <path
          d="M437.027 437.027C533.038 341.016 536.829 187.731 448.44 87.172L256 255.999L87.1719 448.44C187.731 536.829 341.015 533.038 437.027 437.027Z"
          fill="#496E2D"
        />
        <path
          d="M74.974 74.974C170.985 -21.037 324.27 -24.828 424.829 63.561L256 256.003L63.562 424.829C-24.828 324.27 -21.036 170.985 74.974 74.974Z"
          fill="#0052B4"
        />
        <path
          d="M424.827 63.56L63.5601 424.828C67.2121 428.983 71.0041 433.059 74.9731 437.026C78.9411 440.994 83.0181 444.786 87.1741 448.44L448.439 87.172C444.787 83.016 440.994 78.94 437.025 74.971C433.059 71.005 428.982 67.212 424.827 63.56Z"
          fill="#FFDA44"
        />
        <path
          d="M107.861 89.036L113.388 106.043H131.269L116.803 116.552L122.328 133.559L107.861 123.048L93.3941 133.559L98.9211 116.552L84.4541 106.043H102.336L107.861 89.036Z"
          fill="#F0F0F0"
        />
        <path
          d="M199.2 89.036L204.727 106.043H222.607L208.141 116.552L213.667 133.559L199.2 123.048L184.733 133.559L190.26 116.552L175.793 106.043H193.674L199.2 89.036Z"
          fill="#F0F0F0"
        />
        <path
          d="M107.861 178.083L113.388 195.09H131.269L116.803 205.6L122.328 222.607L107.861 212.096L93.3941 222.607L98.9211 205.6L84.4541 195.09H102.336L107.861 178.083Z"
          fill="#F0F0F0"
        />
        <path
          d="M199.2 178.083L204.727 195.09H222.607L208.141 205.6L213.667 222.607L199.2 212.096L184.733 222.607L190.26 205.6L175.793 195.09H193.674L199.2 178.083Z"
          fill="#F0F0F0"
        />
        <path
          d="M153.531 133.559L159.058 150.566H176.938L162.472 161.076L167.998 178.083L153.531 167.572L139.064 178.083L144.59 161.076L130.123 150.566H148.005L153.531 133.559Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7286">
          <rect width="512.001" height="512.001" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SB;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sc.tsx
================================================
import React from "react";

const SC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7279)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M428.809 67.137C383.269 25.445 322.608 0 256 0C245.096 0 234.351 0.687 223.805 2.01L100.174 144.696L8.10095 320.131C14.049 343.192 23.143 364.986 34.876 385.048L256 256L428.809 67.137Z"
          fill="#FFDA44"
        />
        <path
          d="M469.131 397.838L110.963 466.958C152.192 495.359 202.15 512 256 512C344.921 512 423.24 466.657 469.131 397.838Z"
          fill="#6DA544"
        />
        <path
          d="M428.845 67.171L35.022 385.296C45.323 402.864 57.656 419.095 71.703 433.664L512 256C512 181.241 479.949 113.973 428.845 67.171Z"
          fill="#D80027"
        />
        <path
          d="M0 256C0 278.147 2.814 299.636 8.101 320.131L223.805 2.01C97.618 17.844 0 125.52 0 256Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7279">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sd.tsx
================================================
import React from "react";

const SD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7297)">
        <path
          d="M25.9801 144.696C9.70613 178.352 0.578125 216.109 0.578125 256C0.578125 295.891 9.70613 333.648 25.9801 367.304L256.578 389.565L487.176 367.304C503.45 333.648 512.578 295.891 512.578 256C512.578 216.109 503.45 178.352 487.176 144.696L256.578 122.435L25.9801 144.696Z"
          fill="#F0F0F0"
        />
        <path
          d="M25.989 367.304C67.395 452.935 155.084 512 256.578 512C358.072 512 445.761 452.935 487.167 367.304H25.989Z"
          fill="black"
        />
        <path
          d="M25.989 144.696H487.167C445.761 59.065 358.072 0 256.578 0C155.084 0 67.395 59.065 25.989 144.696Z"
          fill="#D80027"
        />
        <path
          d="M75.5581 74.98C-24.4159 174.954 -24.4159 337.045 75.5581 437.02C116.871 395.707 156.604 355.974 256.578 256L75.5581 74.98Z"
          fill="#496E2D"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7297">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/se.tsx
================================================
import React from "react";

const SE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7300)">
        <path
          d="M256.578 511.999C397.963 511.999 512.578 397.384 512.578 255.999C512.578 114.614 397.963 -0.000976562 256.578 -0.000976562C115.193 -0.000976562 0.578125 114.614 0.578125 255.999C0.578125 397.384 115.193 511.999 256.578 511.999Z"
          fill="#FFDA44"
        />
        <path
          d="M200.927 222.608H510.411C494.048 97.001 386.645 -0.000976562 256.578 -0.000976562C237.464 -0.000976562 218.845 2.11202 200.926 6.08402V222.608H200.927Z"
          fill="#0052B4"
        />
        <path
          d="M134.143 222.607V31.126C63.8491 69.48 13.5281 139.831 2.74512 222.608H134.143V222.607Z"
          fill="#0052B4"
        />
        <path
          d="M134.142 289.39H2.74512C13.5281 372.167 63.8491 442.518 134.143 480.871L134.142 289.39Z"
          fill="#0052B4"
        />
        <path
          d="M200.926 289.391V505.914C218.845 509.886 237.464 511.999 256.578 511.999C386.645 511.999 494.048 414.997 510.411 289.39H200.926V289.391Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7300">
          <rect
            width="512"
            height="512"
            fill="white"
            transform="translate(0.578125 -0.000976562)"
          />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sg.tsx
================================================
import React from "react";

const SG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7281)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M0 256.001C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256.001"
          fill="#D80027"
        />
        <path
          d="M155.826 133.564C155.826 96.266 182.039 65.108 217.043 57.463C211.663 56.289 206.082 55.652 200.347 55.652C157.316 55.652 122.434 90.534 122.434 133.565C122.434 176.596 157.316 211.478 200.347 211.478C206.08 211.478 211.662 210.841 217.043 209.666C182.039 202.021 155.826 170.863 155.826 133.564Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 61.217L261.526 78.222H279.407L264.94 88.733L270.466 105.738L256 95.229L241.534 105.738L247.06 88.733L232.594 78.222H250.474L256 61.217Z"
          fill="#F0F0F0"
        />
        <path
          d="M212.625 94.608L218.15 111.614H236.031L221.565 122.124L227.091 139.129L212.625 128.62L198.157 139.129L203.684 122.124L189.217 111.614H207.098L212.625 94.608Z"
          fill="#F0F0F0"
        />
        <path
          d="M299.376 94.608L304.903 111.614H322.783L308.316 122.124L313.843 139.129L299.376 128.62L284.91 139.129L290.436 122.124L275.97 111.614H293.85L299.376 94.608Z"
          fill="#F0F0F0"
        />
        <path
          d="M282.681 144.695L288.207 161.701H306.087L291.621 172.211L297.147 189.216L282.681 178.707L268.215 189.216L273.741 172.211L259.275 161.701H277.154L282.681 144.695Z"
          fill="#F0F0F0"
        />
        <path
          d="M229.32 144.695L234.845 161.701H252.727L238.26 172.211L243.787 189.216L229.32 178.707L214.853 189.216L220.379 172.211L205.913 161.701H223.794L229.32 144.695Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7281">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/si.tsx
================================================
import React from "react";

const SI = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7285)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.077 166.957H222.609V100.174H89.043V166.957H15.923C5.633 194.689 0 224.686 0 256C0 287.314 5.633 317.31 15.923 345.043L256 367.304L496.077 345.043C506.367 317.31 512 287.314 512 256C512 224.686 506.367 194.689 496.077 166.957Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.9229C52.0939 442.528 145.929 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M89.043 166.957V189.217C89.043 240.338 155.826 256.001 155.826 256.001C155.826 256.001 222.609 240.338 222.609 189.217V166.957L200.348 189.218L155.826 155.827L111.304 189.218L89.043 166.957Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7285">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sk.tsx
================================================
import React from "react";

const SK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7284)">
        <path
          d="M256 512.001C397.385 512.001 512 397.386 512 256.001C512 114.616 397.385 0.000976562 256 0.000976562C114.615 0.000976562 0 114.616 0 256.001C0 397.386 114.615 512.001 256 512.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512.001C397.384 512.001 512 397.385 512 256.001C512 224.687 506.368 194.69 496.077 166.958H15.923C5.633 194.69 0 224.687 0 256.001C0 397.385 114.616 512.001 256 512.001Z"
          fill="#0052B4"
        />
        <path
          d="M256 512.001C366.071 512.001 459.906 442.529 496.077 345.044H15.9229C52.0939 442.529 145.929 512.001 256 512.001Z"
          fill="#D80027"
        />
        <path
          d="M66.1982 144.697V272.403C66.1982 345.047 161.099 367.306 161.099 367.306C161.099 367.306 255.999 345.047 255.999 272.403V144.697H66.1982Z"
          fill="#F0F0F0"
        />
        <path
          d="M88.459 144.697V272.403C88.459 280.931 90.353 288.985 94.105 296.536H228.092C231.844 288.986 233.738 280.931 233.738 272.403V144.697H88.459Z"
          fill="#D80027"
        />
        <path
          d="M205.62 233.74H172.23V211.479H194.491V189.218H172.23V166.958H149.969V189.218H127.709V211.479H149.969V233.74H116.577V256.001H149.969V278.262H172.23V256.001H205.62V233.74Z"
          fill="#F0F0F0"
        />
        <path
          d="M124.471 327.611C138.816 336.626 153.554 341.86 161.099 344.188C168.644 341.861 183.382 336.626 197.727 327.611C212.193 318.519 222.334 308.121 228.092 296.536C221.741 292.043 213.992 289.393 205.621 289.393C202.573 289.393 199.612 289.754 196.765 290.417C190.732 276.709 177.037 267.132 161.1 267.132C145.163 267.132 131.467 276.709 125.435 290.417C122.588 289.754 119.626 289.393 116.579 289.393C108.208 289.393 100.459 292.043 94.1079 296.536C99.8629 308.12 110.004 318.518 124.471 327.611Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7284">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sl.tsx
================================================
import React from "react";

const SL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7280)">
        <path
          d="M496.077 345.042C506.368 317.309 512 287.313 512 255.999C512 224.685 506.368 194.689 496.077 166.956L256 144.695L15.923 166.956C5.632 194.689 0 224.685 0 255.999C0 287.313 5.632 317.309 15.923 345.042L256 367.303L496.077 345.042Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 511.999C366.07 511.999 459.906 442.527 496.076 345.042H15.922C52.094 442.527 145.928 511.999 256 511.999Z"
          fill="#338AF3"
        />
        <path
          d="M256 -0.000976562C145.928 -0.000976562 52.094 69.471 15.922 166.956H496.077C459.906 69.471 366.07 -0.000976562 256 -0.000976562Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7280">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sm.tsx
================================================
import React from "react";

const SM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7272)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C11.13 256 256 222.609 256 222.609L512 256Z"
          fill="#338AF3"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#F0F0F0"
        />
        <path
          d="M357.616 176.644L256 278.261L154.384 176.644C141.243 196.151 133.566 219.63 133.566 244.869V278.26C133.566 331.876 168.211 377.549 216.288 394.08C209.871 406.656 210.953 422.351 220.356 434.086C232.844 424.077 245.773 413.716 256.741 404.928C267.709 413.717 280.639 424.078 293.126 434.086C302.639 422.214 303.643 406.284 296.973 393.634C344.393 376.744 378.434 331.406 378.434 278.26V244.87C378.435 219.63 370.757 196.152 357.616 176.644Z"
          fill="#6DA544"
        />
        <path
          d="M256 367.304C206.901 367.304 166.957 327.359 166.957 278.261V244.87C166.957 195.771 206.902 155.827 256 155.827C305.098 155.827 345.043 195.772 345.043 244.87V278.261C345.043 327.359 305.099 367.304 256 367.304Z"
          fill="#FFDA44"
        />
        <path
          d="M311.652 278.261V244.87C311.652 214.183 286.686 189.218 256 189.218C225.314 189.218 200.348 214.184 200.348 244.87V278.261L256 289.391L311.652 278.261Z"
          fill="#338AF3"
        />
        <path
          d="M200.348 278.261C200.348 308.948 225.314 333.913 256 333.913C286.686 333.913 311.652 308.947 311.652 278.261H200.348Z"
          fill="#6DA544"
        />
        <path
          d="M322.783 155.826C322.783 137.385 307.833 122.435 289.392 122.435C280.837 122.435 273.04 125.655 267.131 130.944V111.304H278.261V89.043H267.131V77.913H244.87V89.043H233.74V111.304H244.87V130.944C238.961 125.655 231.163 122.435 222.609 122.435C204.168 122.435 189.218 137.385 189.218 155.826C189.218 165.713 193.519 174.593 200.348 180.708V200.348H311.652V180.708C318.482 174.593 322.783 165.713 322.783 155.826Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7272">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sn.tsx
================================================
import React from "react";

const SN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7277)">
        <path
          d="M367.304 25.402C333.648 9.128 295.89 0 256 0C216.11 0 178.352 9.128 144.696 25.402L122.435 256L144.696 486.598C178.352 502.872 216.11 512 256 512C295.89 512 333.648 502.872 367.304 486.598L389.565 256L367.304 25.402Z"
          fill="#FFDA44"
        />
        <path
          d="M255.998 166.957L278.098 234.977H349.626L291.762 277.02L313.863 345.043L255.998 303.003L198.133 345.043L220.238 277.02L162.374 234.977H233.897L255.998 166.957Z"
          fill="#496E2D"
        />
        <path
          d="M144.696 25.411C59.066 66.818 0 154.507 0 256C0 357.493 59.066 445.182 144.696 486.589V25.411Z"
          fill="#496E2D"
        />
        <path
          d="M367.304 25.411V486.589C452.934 445.182 512 357.493 512 256C512 154.507 452.934 66.818 367.304 25.411Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7277">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/so.tsx
================================================
import React from "react";

const SO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7287)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#338AF3"
        />
        <path
          d="M256 133.565L283.628 218.594H373.032L300.702 271.144L328.33 356.174L256 303.623L183.67 356.174L211.298 271.144L138.967 218.594H228.372L256 133.565Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7287">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sr.tsx
================================================
import React from "react";

const SR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7298)">
        <path
          d="M256.578 512C397.963 512 512.578 397.385 512.578 256C512.578 114.615 397.963 0 256.578 0C115.193 0 0.578125 114.615 0.578125 256C0.578125 397.385 115.193 512 256.578 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.654 166.957H16.5001C6.21113 194.691 0.578125 224.686 0.578125 256C0.578125 287.314 6.21113 317.311 16.5001 345.043H496.655C506.946 317.311 512.578 287.314 512.578 256C512.578 224.686 506.946 194.691 496.654 166.957Z"
          fill="#A2001D"
        />
        <path
          d="M257.319 512C345.001 512 422.377 467.908 468.515 400.696H46.124C92.262 467.908 169.636 512 257.319 512Z"
          fill="#6DA544"
        />
        <path
          d="M257.319 0.00195312C345.001 0.00195312 422.377 44.094 468.515 111.306H46.124C92.262 44.094 169.636 0.00195312 257.319 0.00195312Z"
          fill="#6DA544"
        />
        <path
          d="M256.578 166.957L278.679 234.977H350.204L292.34 277.021L314.443 345.043L256.578 303.004L198.713 345.043L220.817 277.021L162.952 234.977H234.477L256.578 166.957Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7298">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ss.tsx
================================================
import React from "react";

const SS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7291)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M492.029 156.753C453.26 64.662 362.188 0 256 0C185.306 0 121.313 28.659 74.989 74.989L139.099 156.753H492.029Z"
          fill="black"
        />
        <path
          d="M139.826 354.32L74.989 437.011C121.313 483.341 185.306 512 256 512C362.546 512 453.878 446.906 492.424 354.32H139.826Z"
          fill="#496E2D"
        />
        <path
          d="M55.652 188.29V322.782H503.182C508.924 301.491 512 279.107 512 256C512 232.558 508.842 209.858 502.939 188.29H55.652Z"
          fill="#A2001D"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#0052B4"
        />
        <path
          d="M83.386 192.352L114.631 235.953L165.759 219.708L133.948 262.901L165.193 306.504L114.285 289.597L82.473 332.789L82.823 279.146L31.913 262.237L83.037 245.993L83.386 192.352Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7291">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/st.tsx
================================================
import React from "react";

const ST = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7273)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M155.826 166.957H496.076C459.906 69.472 366.07 0 256 0C185.306 0 121.313 28.659 74.9888 74.989L155.826 166.957Z"
          fill="#6DA544"
        />
        <path
          d="M155.826 345.043H496.076C459.906 442.528 366.07 512 256 512C185.306 512 121.313 483.341 74.9888 437.011L155.826 345.043Z"
          fill="#6DA544"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#D80027"
        />
        <path
          d="M325.074 211.478L336.125 245.49H371.887L342.955 266.51L354.006 300.522L325.074 279.501L296.142 300.522L307.192 266.51L278.261 245.49H314.023L325.074 211.478Z"
          fill="black"
        />
        <path
          d="M436.379 211.478L447.429 245.49H483.191L454.26 266.51L465.31 300.522L436.379 279.501L407.446 300.522L418.497 266.51L389.565 245.49H425.327L436.379 211.478Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7273">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ST;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sv.tsx
================================================
import React from "react";

const SV = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7145)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 0C154.506 0 66.8103 59.065 25.4023 144.696H486.597C445.19 59.065 357.493 0 256 0Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4023C66.8103 452.935 154.506 512 256 512Z"
          fill="#0052B4"
        />
        <path d="M204.59 267.13L256 178.087L307.41 267.13H204.59Z" fill="#FFDA44" />
        <path
          d="M322.783 296.531L256 329.923L189.217 296.531V252.01H322.783V296.531Z"
          fill="#6DA544"
        />
        <path
          d="M318.963 181.907L295.352 205.518C305.423 215.589 311.653 229.502 311.653 244.87C311.653 275.606 286.736 300.522 256.001 300.522C225.266 300.522 200.349 275.605 200.349 244.87C200.349 229.502 206.579 215.589 216.65 205.518L193.039 181.907C176.924 198.019 166.958 220.28 166.958 244.87C166.958 294.048 206.824 333.913 256.001 333.913C305.178 333.913 345.044 294.047 345.044 244.87C345.043 220.28 335.077 198.019 318.963 181.907Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7145">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SV;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sx.tsx
================================================
import React from "react";

const SX = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7283)">
        <path
          d="M233.739 278.261C233.739 278.261 75.13 74.945 74.98 74.981C121.306 28.654 185.307 0 256 0C397.384 0 512 114.616 512 256L233.739 278.261Z"
          fill="#D80027"
        />
        <path
          d="M233.739 256C233.739 256 75.13 437.055 74.98 437.019C121.306 483.346 185.307 512 256 512C397.384 512 512 397.384 512 256H233.739Z"
          fill="#0052B4"
        />
        <path
          d="M74.98 74.98C-24.994 174.954 -24.994 337.045 74.98 437.02C116.293 395.707 156.026 355.974 256 256L74.98 74.98Z"
          fill="#F0F0F0"
        />
        <path
          d="M28.0612 256.001C27.9212 257.839 27.8262 259.691 27.8262 261.565C27.8262 301.521 60.2182 333.913 100.174 333.913C140.13 333.913 172.522 301.521 172.522 261.565C172.522 259.691 172.427 257.838 172.287 256.001H28.0612Z"
          fill="#FFDA44"
        />
        <path
          d="M100.174 222.609C112.468 222.609 122.435 212.642 122.435 200.348C122.435 188.054 112.468 178.087 100.174 178.087C87.8797 178.087 77.9131 188.054 77.9131 200.348C77.9131 212.642 87.8797 222.609 100.174 222.609Z"
          fill="#FFDA44"
        />
        <path
          d="M50.0869 194.783V267.131C50.0869 305.471 100.174 317.218 100.174 317.218C100.174 317.218 150.261 305.471 150.261 267.131V194.783H50.0869Z"
          fill="#D80027"
        />
        <path
          d="M100.198 293.92C90.9062 290.576 72.3472 282.03 72.3472 267.13V217.043H128V267.13C128 282.079 109.443 290.604 100.198 293.92Z"
          fill="#338AF3"
        />
        <path
          d="M111.304 244.87V233.739L100.174 228.174L89.043 233.739V244.87L83.478 250.435V272.696H116.87V250.435L111.304 244.87Z"
          fill="#F3F3F3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7283">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SX;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sy.tsx
================================================
import React from "react";

const SY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7302)">
        <path
          d="M256.578 512C397.963 512 512.578 397.385 512.578 256C512.578 114.615 397.963 0 256.578 0C115.193 0 0.578125 114.615 0.578125 256C0.578125 397.385 115.193 512 256.578 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.578 0C146.507 0 52.6721 69.472 16.5011 166.957H496.656C460.484 69.472 366.649 0 256.578 0Z"
          fill="#D80027"
        />
        <path
          d="M256.578 512C366.649 512 460.484 442.528 496.655 345.043H16.5011C52.6721 442.528 146.507 512 256.578 512Z"
          fill="black"
        />
        <path
          d="M153.54 194.783L167.353 237.295H212.056L175.891 263.573L189.705 306.087L153.54 279.812L117.375 306.087L131.189 263.573L95.0242 237.295H139.727L153.54 194.783Z"
          fill="#6DA544"
        />
        <path
          d="M359.616 194.783L373.429 237.295H418.133L381.967 263.573L395.781 306.087L359.616 279.812L323.451 306.087L337.265 263.573L301.1 237.295H345.803L359.616 194.783Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7302">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/sz.tsx
================================================
import React from "react";

const SZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7299)">
        <path
          d="M487.176 367.304C503.45 333.649 512.578 295.89 512.578 256C512.578 216.11 503.45 178.351 487.176 144.696L256.578 133.565L25.9801 144.695C9.70613 178.351 0.578125 216.11 0.578125 256C0.578125 295.89 9.70613 333.649 25.9801 367.304L256.578 378.435L487.176 367.304Z"
          fill="#FFDA44"
        />
        <path
          d="M256.578 0C155.084 0 67.3881 59.065 25.9801 144.696H487.175C445.768 59.065 358.071 0 256.578 0Z"
          fill="black"
        />
        <path
          d="M256.578 512C155.084 512 67.3881 452.935 25.9801 367.304H487.175C445.768 452.935 358.071 512 256.578 512Z"
          fill="#0052B4"
        />
        <path
          d="M500.489 178.087H12.6671C4.82512 202.656 0.578125 228.831 0.578125 256C0.578125 283.169 4.82512 309.344 12.6671 333.913H500.488C508.331 309.344 512.578 283.169 512.578 256C512.578 228.831 508.331 202.656 500.489 178.087Z"
          fill="#A2001D"
        />
        <path d="M89.6211 244.87H423.534V267.131H89.6211V244.87Z" fill="#FFDA44" />
        <path d="M134.143 200.348H379.013V222.609H134.143V200.348Z" fill="#FFDA44" />
        <path
          d="M380.603 256C380.603 256 323.36 322.783 256.578 322.783C189.796 322.783 189.795 256 189.795 256C189.795 256 189.795 189.217 256.578 189.217C323.361 189.217 380.603 256 380.603 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.578 322.783C189.795 322.783 132.553 256 132.553 256C132.553 256 189.795 189.217 256.578 189.217"
          fill="black"
        />
        <path d="M212.056 233.739H234.317V278.261H212.056V233.739Z" fill="#F0F0F0" />
        <path d="M278.839 233.739H301.1V278.261H278.839V233.739Z" fill="black" />
        <path
          d="M89.6211 278.261C101.916 278.261 111.882 268.294 111.882 256C111.882 243.706 101.916 233.739 89.6211 233.739C77.3267 233.739 67.3601 243.706 67.3601 256C67.3601 268.294 77.3267 278.261 89.6211 278.261Z"
          fill="#0052B4"
        />
        <path
          d="M423.535 278.261C435.83 278.261 445.796 268.294 445.796 256C445.796 243.706 435.83 233.739 423.535 233.739C411.241 233.739 401.274 243.706 401.274 256C401.274 268.294 411.241 278.261 423.535 278.261Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7299">
          <rect width="512" height="512" fill="white" transform="translate(0.578125)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default SZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tc.tsx
================================================
import React from "react";

const TC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7316)">
        <path
          d="M512 256.001C512 397.385 397.384 512.001 256 512.001C114.616 512.001 0 397.385 0 256.001C0 256.062 256 0.0289766 256 0.000976562C397.384 0.000976562 512 114.617 512 256.001Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256.001H256C256 255.771 256 255.547 256 255.316C255.772 255.545 255.544 255.773 255.315 256.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.566C256 88.521 256 59.006 256 0.000976562H255.957C114.591 0.0249766 0 114.63 0 256.001H133.565V180.79L208.776 256.001H255.316C255.544 255.773 255.772 255.545 256.001 255.316C256.001 238.069 256.001 222.68 256.001 208.779L180.788 133.566H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3921C89.4761 56.1911 56.1891 89.4771 33.3911 129.516V256.001H100.174V100.177V100.175H256C256 79.1121 256 59.0461 256 33.3921H129.515Z"
          fill="#D80027"
        />
        <path
          d="M256 224.52L165.045 133.567H133.565V133.569L255.998 256.001H256C256 256.001 256 234.294 256 224.52Z"
          fill="#D80027"
        />
        <path
          d="M289.391 133.566V256C289.391 315.64 367.304 333.914 367.304 333.914C367.304 333.914 445.217 315.64 445.217 256V133.566H289.391Z"
          fill="#FFDA44"
        />
        <path
          d="M356.174 178.088C356.174 190.383 346.208 222.61 333.913 222.61C321.618 222.61 311.652 190.383 311.652 178.088C311.652 165.793 333.913 155.827 333.913 155.827C333.913 155.827 356.174 165.793 356.174 178.088Z"
          fill="#FF9811"
        />
        <path
          d="M415.245 202.333C418.837 193.568 421.631 180.756 421.631 174.378C421.631 164.132 408.274 155.827 408.274 155.827C408.274 155.827 394.917 164.133 394.917 174.378C394.917 180.756 397.711 193.568 401.303 202.333L393.592 219.743C398.124 221.585 403.078 222.609 408.273 222.609C413.468 222.609 418.422 221.585 422.954 219.743L415.245 202.333Z"
          fill="#A2001D"
        />
        <path
          d="M350.609 256.001C350.609 256.001 339.479 278.262 339.479 300.523H395.131C395.13 278.262 384 256.001 384 256.001L367.304 244.871L350.609 256.001Z"
          fill="#6DA544"
        />
        <path
          d="M384 256.001V250.436C384 241.216 376.525 233.74 367.304 233.74C358.084 233.74 350.608 241.215 350.608 250.436V256.001H384Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7316">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/td.tsx
================================================
import React from "react";

const TD = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7122)">
        <path
          d="M256 0.000976562C224.686 0.000976562 194.689 5.63398 166.957 15.924L155.826 256.001L166.956 496.078C194.689 506.369 224.686 512.001 256 512.001C287.314 512.001 317.311 506.369 345.043 496.078L356.174 256.001L345.044 15.924C317.311 5.63398 287.314 0.000976563 256 0.000976563V0.000976562Z"
          fill="#FFDA44"
        />
        <path
          d="M512 256.001C512 145.93 442.528 52.0951 345.043 15.9241V496.079C442.528 459.907 512 366.072 512 256.001Z"
          fill="#D80027"
        />
        <path
          d="M166.957 496.078V15.9241C69.472 52.0951 0 145.93 0 256.001C0 366.072 69.472 459.907 166.957 496.078Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7122">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tg.tsx
================================================
import React from "react";

const TG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7308)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M256 0C255.814 0.002 244.87 102.4 244.87 102.4H460.812C414.107 40.223 339.752 0 256 0Z"
          fill="#496E2D"
        />
        <path
          d="M256 512C339.752 512 414.107 471.777 460.811 409.6H51.189C97.893 471.777 172.248 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M506.874 204.8H244.87L256 307.2H506.874C510.234 290.657 512 273.535 512 256C512 238.465 510.232 221.343 506.874 204.8Z"
          fill="#496E2D"
        />
        <path
          d="M256 307.2C256 253.774 256 60.104 256 0C114.616 0 0 114.616 0 256C0 273.535 1.768 290.657 5.126 307.2H256Z"
          fill="#D80027"
        />
        <path
          d="M141.257 122.435L157.833 173.45H211.478L168.081 204.983L184.655 256L141.257 224.47L97.8591 256L114.436 204.983L71.0391 173.45H124.682L141.257 122.435Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7308">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/th.tsx
================================================
import React from "react";

const TH = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7306)">
        <path
          d="M256 512.001C397.385 512.001 512 397.386 512 256.001C512 114.616 397.385 0.000976562 256 0.000976562C114.615 0.000976562 0 114.616 0 256.001C0 397.386 114.615 512.001 256 512.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M496.077 166.958H15.923C5.632 194.691 0 224.687 0 256.001C0 287.315 5.632 317.311 15.923 345.044H496.078C506.368 317.311 512 287.315 512 256.001C512 224.687 506.368 194.691 496.077 166.958Z"
          fill="#0052B4"
        />
        <path
          d="M256 0.000976562C178.409 0.000976562 108.886 34.525 61.939 89.044H450.06C403.114 34.525 333.591 0.000976562 256 0.000976562Z"
          fill="#D80027"
        />
        <path
          d="M450.061 422.958H61.939C108.886 477.477 178.409 512.001 256 512.001C333.591 512.001 403.114 477.477 450.061 422.958Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7306">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tj.tsx
================================================
import React from "react";

const TJ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7304)">
        <path
          d="M25.402 145.277C9.128 178.933 0 216.691 0 256.581C0 296.471 9.128 334.229 25.402 367.885L256 390.146L486.598 367.885C502.872 334.229 512 296.471 512 256.581C512 216.691 502.872 178.933 486.598 145.277L256 123.016L25.402 145.277Z"
          fill="#F0F0F0"
        />
        <path
          d="M25.4111 367.885C66.8181 453.515 154.507 512.581 256 512.581C357.493 512.581 445.183 453.515 486.589 367.885H25.4111Z"
          fill="#6DA544"
        />
        <path
          d="M25.4111 145.277H486.589C445.183 59.6471 357.493 0.581055 256 0.581055C154.507 0.581055 66.8181 59.6471 25.4111 145.277Z"
          fill="#D80027"
        />
        <path
          d="M211.478 323.364H300.522V285.52L282.713 294.424L256 267.711L229.287 294.424L211.478 285.52V323.364Z"
          fill="#FFDA44"
        />
        <path
          d="M160.532 278.842L164.677 291.596H178.087L167.237 299.479L171.382 312.233L160.532 304.351L149.682 312.233L153.827 299.479L142.977 291.596H156.387L160.532 278.842Z"
          fill="#FFDA44"
        />
        <path
          d="M173.381 234.32L177.526 247.074H190.936L180.086 254.957L184.23 267.711L173.381 259.829L162.531 267.711L166.676 254.957L155.826 247.074H169.236L173.381 234.32Z"
          fill="#FFDA44"
        />
        <path
          d="M210.113 200.929L214.258 213.683H227.667L216.819 221.566L220.962 234.32L210.113 226.438L199.264 234.32L203.408 221.566L192.558 213.683H205.969L210.113 200.929Z"
          fill="#FFDA44"
        />
        <path
          d="M351.468 278.842L347.323 291.596H333.913L344.763 299.479L340.618 312.233L351.468 304.351L362.317 312.233L358.173 299.479L369.023 291.596H355.613L351.468 278.842Z"
          fill="#FFDA44"
        />
        <path
          d="M338.619 234.32L334.474 247.074H321.064L331.914 254.957L327.769 267.711L338.619 259.829L349.469 267.711L345.324 254.957L356.174 247.074H342.764L338.619 234.32Z"
          fill="#FFDA44"
        />
        <path
          d="M301.887 200.929L297.742 213.683H284.333L295.181 221.566L291.037 234.32L301.887 226.438L312.736 234.32L308.592 221.566L319.441 213.683H306.031L301.887 200.929Z"
          fill="#FFDA44"
        />
        <path
          d="M256 184.232L260.145 196.986H273.555L262.705 204.869L266.85 217.623L256 209.741L245.15 217.623L249.295 204.869L238.445 196.986H251.855L256 184.232Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7304">
          <rect width="512" height="512" fill="white" transform="translate(0 0.581055)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TJ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tk.tsx
================================================
import React from "react";

const TK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7309)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M411.826 122.435C409.53 133.47 408.487 145.223 408.487 156.939C408.487 224.473 448.746 282.924 506.441 309.237C510.074 292.061 512 274.256 512 256C512 114.616 397.384 0 256 0C114.616 0 0 114.616 0 256C0 397.384 114.616 512 256 512C343.682 512 421.058 467.908 467.196 400.696H144.696V367.305H486.598C490.097 360.069 493.258 352.64 496.078 345.044H144.696L411.826 122.435Z"
          fill="#0052B4"
        />
        <path
          d="M188.072 133.565L193.598 150.571H211.478L197.013 161.082L202.539 178.087L188.072 167.578L173.607 178.087L179.132 161.082L164.665 150.571H182.546L188.072 133.565Z"
          fill="#F0F0F0"
        />
        <path
          d="M115.438 256L122.346 277.259H144.696L126.613 290.394L133.521 311.652L115.438 298.514L97.356 311.652L104.263 290.394L86.181 277.259H108.531L115.438 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M115.438 77.9131L122.346 99.1721H144.696L126.613 112.307L133.521 133.565L115.438 120.427L97.356 133.565L104.263 112.307L86.181 99.1721H108.531L115.438 77.9131Z"
          fill="#F0F0F0"
        />
        <path
          d="M59.7861 178.087L66.6941 199.346H89.0431L70.9611 212.481L77.8691 233.739L59.7861 220.601L41.7041 233.739L48.6111 212.481L30.5291 199.346H52.8781L59.7861 178.087Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7309">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tl.tsx
================================================
import React from "react";

const TL = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7142)">
        <path
          d="M256 512.001C397.385 512.001 512 397.386 512 256.001C512 114.616 397.385 0.000976562 256 0.000976562C114.615 0.000976562 0 114.616 0 256.001C0 397.386 114.615 512.001 256 512.001Z"
          fill="#FFDA44"
        />
        <path
          d="M256 0.000976562C193.323 0.000976562 135.917 22.538 91.415 59.935L367.304 256.001L91.415 452.067C135.917 489.464 193.323 512.001 256 512.001C397.384 512.001 512 397.385 512 256.001C512 114.617 397.384 0.000976562 256 0.000976562Z"
          fill="#D80027"
        />
        <path
          d="M74.98 74.981C-24.994 174.955 -24.994 337.046 74.98 437.021C116.293 395.708 156.026 355.975 256 256.001L74.98 74.981Z"
          fill="black"
        />
        <path
          d="M70.9792 197.356L109.939 234.228L157.047 208.564L134.022 257.014L172.983 293.887L119.789 286.959L96.7612 335.408L86.9142 282.676L33.7202 275.746L80.8262 250.085L70.9792 197.356Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7142">
          <rect width="512" height="512" fill="white" transform="translate(0 0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TL;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tm.tsx
================================================
import React from "react";

const TM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7315)">
        <path
          d="M255.999 0C236.885 0 218.266 2.113 200.348 6.085L189.218 255.999L200.348 505.914C218.267 509.886 236.886 512 255.999 512C397.384 512 511.999 397.384 511.999 255.999C511.998 114.615 397.384 0 255.999 0V0Z"
          fill="#496E2D"
        />
        <path
          d="M66.783 83.571C25.299 129.067 0.000976562 189.577 0.000976562 255.999C0.000976562 322.421 25.3 382.931 66.784 428.429L77.914 255.999L66.783 83.571Z"
          fill="#496E2D"
        />
        <path
          d="M374.421 193.099C387.016 157.993 372.866 119.812 342.499 100.796C347.961 101.507 353.429 102.793 358.825 104.728C399.328 119.26 420.382 163.872 405.85 204.374C391.318 244.879 346.706 265.931 306.203 251.399C300.806 249.463 295.767 246.978 291.1 244.055C326.63 248.682 361.826 228.205 374.421 193.099Z"
          fill="#F0F0F0"
        />
        <path
          d="M304.564 91.1731L293.619 105.315L276.79 99.2761L286.856 114.054L275.913 128.194L293.078 123.188L303.146 137.964L303.686 120.092L320.852 115.085L304.023 109.048L304.564 91.1731Z"
          fill="#F0F0F0"
        />
        <path
          d="M334.116 137.252L323.171 151.393L306.341 145.354L316.408 160.132L305.464 174.272L322.629 169.264L332.697 184.043L333.239 166.17L350.404 161.162L333.574 155.124L334.116 137.252Z"
          fill="#F0F0F0"
        />
        <path
          d="M252.46 107.955L241.515 122.095L224.686 116.058L234.753 130.835L223.809 144.976L240.973 139.969L251.041 154.746L251.583 136.874L268.748 131.867L251.919 125.828L252.46 107.955Z"
          fill="#F0F0F0"
        />
        <path
          d="M251.26 160.737L240.316 174.878L223.486 168.84L233.554 183.618L222.608 197.758L239.775 192.752L249.842 207.528L250.383 189.656L267.549 184.649L250.718 178.61L251.26 160.737Z"
          fill="#F0F0F0"
        />
        <path
          d="M301.486 178.758L290.541 192.898L273.712 186.86L283.78 201.638L272.834 215.777L290.001 210.771L300.068 225.549L300.609 207.675L317.775 202.669L300.944 196.631L301.486 178.758Z"
          fill="#F0F0F0"
        />
        <path
          d="M66.7832 83.571V428.428C101.663 466.682 147.993 494.307 200.348 505.913V6.08496C147.992 17.691 101.664 45.316 66.7832 83.571Z"
          fill="#D80027"
        />
        <path
          d="M117.753 134.785L95.3921 118.127V94.5701L117.753 77.9131H149.378L171.739 94.5701V118.127L149.378 134.785H117.753Z"
          fill="#F0F0F0"
        />
        <path
          d="M133.566 77.9131H117.753L95.3921 94.5701V106.087H133.566V77.9131Z"
          fill="#FF9811"
        />
        <path
          d="M133.566 134.785H149.378L171.739 118.127V106.11H133.566V134.785Z"
          fill="#FF9811"
        />
        <path
          d="M117.753 434.085L95.3921 417.427V393.871L117.753 377.213H149.378L171.739 393.871V417.427L149.378 434.085H117.753Z"
          fill="#F0F0F0"
        />
        <path
          d="M133.566 377.213H117.753L95.3921 393.871V405.388H133.566V377.213Z"
          fill="#FF9811"
        />
        <path
          d="M133.566 434.085H149.378L171.739 417.427V405.411H133.566V434.085Z"
          fill="#FF9811"
        />
        <path
          d="M117.753 284.435L95.3921 267.777V244.221L117.753 227.563H149.378L171.739 244.221V267.777L149.378 284.435H117.753Z"
          fill="#496E2D"
        />
        <path
          d="M172.522 321.085H162.782V311.346H145.667L133.565 299.244L121.464 311.346H104.349V321.085H94.6099V340.563H104.349V350.302H121.463L133.566 362.405L145.667 350.302H162.782V340.563H172.522V321.085Z"
          fill="#496E2D"
        />
        <path
          d="M172.522 171.434H162.782V161.694H145.667L133.565 149.592L121.464 161.694H104.349V171.434H94.6099V190.912H104.349V200.651H121.463L133.566 212.755L145.667 200.651H162.782V190.912H172.522V171.434Z"
          fill="#496E2D"
        />
        <path d="M122.434 244.868H144.695V267.129H122.434V244.868Z" fill="#D80027" />
        <path
          d="M133.564 192.299C139.711 192.299 144.694 187.316 144.694 181.169C144.694 175.022 139.711 170.039 133.564 170.039C127.417 170.039 122.434 175.022 122.434 181.169C122.434 187.316 127.417 192.299 133.564 192.299Z"
          fill="#D80027"
        />
        <path
          d="M133.564 341.958C139.711 341.958 144.694 336.975 144.694 330.828C144.694 324.681 139.711 319.698 133.564 319.698C127.417 319.698 122.434 324.681 122.434 330.828C122.434 336.975 127.417 341.958 133.564 341.958Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7315">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tn.tsx
================================================
import React from "react";

const TN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7313)">
        <path
          d="M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z"
          fill="#D80027"
        />
        <path
          d="M256 378.434C323.619 378.434 378.435 323.618 378.435 255.999C378.435 188.38 323.619 133.564 256 133.564C188.381 133.564 133.565 188.38 133.565 255.999C133.565 323.618 188.381 378.434 256 378.434Z"
          fill="#F0F0F0"
        />
        <path
          d="M271.083 209.185L292.087 238.13L326.104 227.1L305.067 256.02L326.069 284.964L292.063 273.892L271.026 302.812L271.048 267.051L237.043 255.979L271.061 244.949L271.083 209.185Z"
          fill="#D80027"
        />
        <path
          d="M283.826 328.347C243.87 328.347 211.478 295.955 211.478 255.999C211.478 216.043 243.87 183.651 283.826 183.651C296.284 183.651 308.007 186.801 318.241 192.347C302.186 176.646 280.231 166.955 256 166.955C206.824 166.955 166.957 206.821 166.957 255.998C166.957 305.175 206.824 345.041 256 345.041C280.231 345.041 302.187 335.35 318.241 319.649C308.007 325.197 296.284 328.347 283.826 328.347Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7313">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/to.tsx
================================================
import React from "react";

const TO = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7310)">
        <path
          d="M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z"
          fill="#F0F0F0"
        />
        <path
          d="M166.957 133.564V100.173H133.565V133.564H100.174V166.956H133.565V200.347H166.957V166.956H200.348V133.564H166.957Z"
          fill="#D80027"
        />
        <path
          d="M256 -0.000976562V255.999C114.616 256 58.425 255.999 0 256C0 397.383 114.616 511.999 256 511.999C397.384 511.999 512 397.383 512 255.999C512 114.615 397.384 -0.000976562 256 -0.000976562Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7310">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TO;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tr.tsx
================================================
import React from "react";

const TR = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7314)">
        <path
          d="M256 512.581C397.385 512.581 512 397.966 512 256.581C512 115.196 397.385 0.581055 256 0.581055C114.615 0.581055 0 115.196 0 256.581C0 397.966 114.615 512.581 256 512.581Z"
          fill="#D80027"
        />
        <path
          d="M245.518 209.767L266.523 238.712L300.54 227.682L279.502 256.602L300.504 285.546L266.499 274.474L245.462 303.394L245.484 267.633L211.478 256.561L245.496 245.531L245.518 209.767Z"
          fill="#F0F0F0"
        />
        <path
          d="M188.194 328.929C148.238 328.929 115.846 296.537 115.846 256.581C115.846 216.625 148.238 184.233 188.194 184.233C200.652 184.233 212.374 187.384 222.608 192.929C206.553 177.227 184.596 167.537 160.368 167.537C111.19 167.537 71.3252 207.403 71.3252 256.58C71.3252 305.757 111.191 345.623 160.368 345.623C184.598 345.623 206.554 335.932 222.608 320.231C212.374 325.778 200.652 328.929 188.194 328.929Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7314">
          <rect width="512" height="512" fill="white" transform="translate(0 0.581055)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TR;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tt.tsx
================================================
import React from "react";

const TT = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7312)">
        <path
          d="M138.616 28.426C115.698 40.255 94.185 55.76 74.973 74.972C55.76 94.185 40.255 115.698 28.427 138.616L193.034 318.965L373.383 483.572C396.302 471.743 417.815 456.238 437.027 437.027C456.24 417.814 471.744 396.301 483.573 373.383L318.966 193.033L138.616 28.426Z"
          fill="#F0F0F0"
        />
        <path
          d="M437.027 437.027C447.766 426.288 457.344 414.829 465.776 402.81L109.191 46.2241C97.172 54.6551 85.713 64.2331 74.974 74.9721C64.235 85.7111 54.657 97.1701 46.225 109.19L402.81 465.774C414.828 457.343 426.288 447.766 437.027 437.027Z"
          fill="black"
        />
        <path
          d="M74.972 437.027C155.739 517.794 277.036 533.298 373.382 483.572L28.427 138.616C-21.298 234.962 -5.79095 356.26 74.972 437.027Z"
          fill="#D80027"
        />
        <path
          d="M437.027 74.973C356.26 -5.79304 234.963 -21.297 138.617 28.426L483.572 373.384C533.298 277.038 517.794 155.739 437.027 74.973Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7312">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tv.tsx
================================================
import React from "react";

const TV = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7317)">
        <path
          d="M512 256C512 397.384 397.384 512 256.001 512C114.616 512 0 397.384 0 256C0 256.061 256.001 0.028 256.001 0C397.384 0 512 114.616 512 256Z"
          fill="#338AF3"
        />
        <path d="M122.435 256H208.777L133.565 166.957L122.435 200.348V256Z" fill="#0052B4" />
        <path d="M256.001 208.778L166.957 122.435H256L256.001 208.778Z" fill="#0052B4" />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256.001 133.565C256.001 88.52 256.001 59.004 256.001 0H255.958C114.592 0.024 0 114.629 0 256H133.566V180.789L208.777 256H255.317C255.545 255.772 255.773 255.544 256.002 255.315C256.002 238.068 256.002 222.679 256.002 208.778L180.788 133.565H256.001Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4761 56.1901 56.1901 89.4761 33.3911 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M256.001 224.519L165.046 133.566H133.566V133.568L255.999 256H256.001C256.001 256 256.001 234.293 256.001 224.519Z"
          fill="#D80027"
        />
        <path
          d="M279.406 422.957L284.932 439.963H302.813L288.348 450.473L293.874 467.478L279.406 456.969L264.941 467.478L270.467 450.473L256 439.963H273.88L279.406 422.957Z"
          fill="#FFDA44"
        />
        <path
          d="M421.811 311.652L427.336 328.658H445.217L430.752 339.169L436.279 356.174L421.811 345.665L407.346 356.174L412.872 339.169L398.404 328.658H416.285L421.811 311.652Z"
          fill="#FFDA44"
        />
        <path
          d="M457.493 144.696L463.019 161.702H480.9L466.435 172.212L471.96 189.217L457.493 178.708L443.028 189.217L448.554 172.212L434.087 161.702H451.968L457.493 144.696Z"
          fill="#FFDA44"
        />
        <path
          d="M466.333 267.13L471.858 284.137H489.739L475.274 294.647L480.8 311.652L466.333 301.143L451.868 311.652L457.394 294.647L442.926 284.137H460.807L466.333 267.13Z"
          fill="#FFDA44"
        />
        <path
          d="M305.046 382.959L320.981 391.078L333.624 378.435L330.828 396.094L346.759 404.212L329.097 407.01L326.3 424.671L318.184 408.738L300.522 411.537L313.165 398.894L305.046 382.959Z"
          fill="#FFDA44"
        />
        <path
          d="M305.046 316.177L320.981 324.295L333.624 311.652L330.828 329.312L346.759 337.429L329.097 340.227L326.3 357.888L318.184 341.956L300.522 344.754L313.165 332.111L305.046 316.177Z"
          fill="#FFDA44"
        />
        <path
          d="M360.698 358.984L376.633 367.103L389.276 354.46L386.48 372.119L402.411 380.237L384.749 383.035L381.952 400.696L373.836 384.762L356.174 387.562L368.817 374.919L360.698 358.984Z"
          fill="#FFDA44"
        />
        <path
          d="M360.698 216.003L376.633 224.121L389.276 211.478L386.48 229.138L402.411 237.255L384.749 240.053L381.952 257.714L373.836 241.782L356.174 244.58L368.817 231.937L360.698 216.003Z"
          fill="#FFDA44"
        />
        <path
          d="M414.635 214.289L430.57 222.407L443.213 209.764L440.416 227.424L456.348 235.541L438.686 238.339L435.889 256L427.773 240.068L410.111 242.866L422.754 230.223L414.635 214.289Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7317">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TV;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tw.tsx
================================================
import React from "react";

const TW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7303)">
        <path
          d="M512 255.999C512 397.383 397.384 511.999 256 511.999C114.616 511.999 0 397.383 0 255.999C87.93 168.069 162.504 93.495 256 -0.000976562C397.384 -0.000976562 512 114.615 512 255.999Z"
          fill="#D80027"
        />
        <path
          d="M256 255.999C256 114.615 256 97.947 256 -0.000976562C114.616 -0.000976562 0 114.615 0 255.999H256Z"
          fill="#0052B4"
        />
        <path
          d="M222.609 149.82L191.344 164.528L207.992 194.807L174.043 188.311L169.74 222.608L146.094 197.384L122.446 222.608L118.145 188.311L84.1951 194.805L100.843 164.526L69.5791 149.82L100.844 135.115L84.1951 104.835L118.144 111.33L122.447 77.0339L146.094 102.258L169.741 77.0339L174.043 111.33L207.993 104.835L191.344 135.116L222.609 149.82Z"
          fill="#F0F0F0"
        />
        <path
          d="M146.098 197.468C172.416 197.468 193.751 176.133 193.751 149.815C193.751 123.497 172.416 102.162 146.098 102.162C119.78 102.162 98.4448 123.497 98.4448 149.815C98.4448 176.133 119.78 197.468 146.098 197.468Z"
          fill="#0052B4"
        />
        <path
          d="M146.094 175.212C132.093 175.212 120.703 163.821 120.703 149.82C120.703 135.819 132.094 124.428 146.094 124.428C160.095 124.428 171.486 135.819 171.486 149.82C171.485 163.821 160.093 175.212 146.094 175.212Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7303">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/tz.tsx
================================================
import React from "react";

const TZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7305)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M74.9799 437.02C85.7189 447.759 97.1769 457.336 109.196 465.768L465.766 109.197C457.336 97.1779 447.758 85.7199 437.019 74.9809C426.279 64.2419 414.822 54.6659 402.803 46.2339L46.2339 402.805C54.6639 414.821 64.2419 426.28 74.9799 437.02Z"
          fill="black"
        />
        <path
          d="M74.9799 74.9801C-5.78213 155.744 -21.2871 277.035 28.4359 373.378L373.378 28.4371C277.035 -21.2859 155.743 -5.77988 74.9799 74.9801Z"
          fill="#6DA544"
        />
        <path
          d="M437.019 437.02C517.781 356.258 533.285 234.965 483.564 138.622L138.622 483.564C234.963 533.287 356.256 517.782 437.019 437.02Z"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7305">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default TZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ua.tsx
================================================
import React from "react";

const UA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7319)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#FFDA44"
        />
        <path
          d="M0 256C0 114.616 114.616 0 256 0C397.384 0 512 114.616 512 256"
          fill="#338AF3"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7319">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default UA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ug.tsx
================================================
import React from "react";

const UG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7318)">
        <path
          d="M446.793 426.666C487.336 381.374 512 321.572 512 256C512 190.428 487.335 130.625 446.792 85.333L256 66.783L65.208 85.333C24.665 130.625 0 190.428 0 256C0 321.572 24.664 381.374 65.207 426.666L256 445.217L446.793 426.666Z"
          fill="#FFDA44"
        />
        <path
          d="M65.208 85.333H446.793C399.918 32.966 331.813 0 256 0C180.187 0 112.082 32.966 65.208 85.333Z"
          fill="black"
        />
        <path
          d="M0 256L256 278.261L512 256C512 226.076 506.849 197.358 497.412 170.666H14.588C5.151 197.358 0 226.076 0 256H0Z"
          fill="#D80027"
        />
        <path
          d="M14.588 341.333H497.414C506.849 314.641 512 285.924 512 256H0C0 285.924 5.151 314.641 14.588 341.333Z"
          fill="black"
        />
        <path
          d="M446.793 426.666H65.207C112.081 479.034 180.186 512 256 512C331.814 512 399.919 479.034 446.793 426.666Z"
          fill="#D80027"
        />
        <path
          d="M341.426 256C341.426 303.183 303.183 341.426 256 341.426C208.817 341.426 170.574 303.183 170.574 256C170.574 208.817 208.817 170.574 256 170.574C303.183 170.574 341.426 208.817 341.426 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M287.295 260.356L256 246.795C256 246.795 263.322 222.492 263.712 220.829C263.997 219.614 264.149 218.347 264.149 217.045C264.149 212.434 262.28 208.26 259.258 205.24L267.128 197.37C262.093 192.335 255.136 189.22 247.452 189.22C239.768 189.22 232.811 192.334 227.776 197.37L235.646 205.24C232.624 208.261 230.756 212.435 230.756 217.045C230.756 218.731 231.011 220.356 231.476 221.891L219.627 233.739H241.163C241.163 233.739 232.259 247.113 227.398 258.096C222.537 269.078 227.465 282.485 238.699 287.479L245.195 290.366L256 300.522V311.652L244.87 322.782H267.131V300.521L277.288 290.364H298.296C298.397 290.155 298.503 289.951 298.599 289.737C303.59 278.504 298.53 265.348 287.295 260.356Z"
          fill="black"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7318">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default UG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/us.tsx
================================================
import React from "react";

const US = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7323)">
        <path
          d="M256 511.999C397.385 511.999 512 397.384 512 255.999C512 114.614 397.385 -0.000976562 256 -0.000976562C114.615 -0.000976562 0 114.614 0 255.999C0 397.384 114.615 511.999 256 511.999Z"
          fill="#F0F0F0"
        />
        <path
          d="M244.87 255.999H512C512 232.893 508.92 210.509 503.181 189.216H244.87V255.999Z"
          fill="#D80027"
        />
        <path
          d="M244.87 122.434H474.426C458.755 96.8619 438.718 74.2589 415.356 55.6509H244.87V122.434Z"
          fill="#D80027"
        />
        <path
          d="M256 511.999C316.249 511.999 371.626 491.175 415.356 456.347H96.644C140.374 491.175 195.751 511.999 256 511.999Z"
          fill="#D80027"
        />
        <path
          d="M37.5738 389.564H474.426C487.007 369.035 496.764 346.595 503.181 322.781H8.81885C15.2358 346.595 24.9928 369.035 37.5738 389.564Z"
          fill="#D80027"
        />
        <path
          d="M118.584 39.977H141.913L120.213 55.742L128.502 81.251L106.803 65.486L85.104 81.251L92.264 59.214C73.158 75.129 56.412 93.775 42.612 114.551H50.087L36.274 124.586C34.122 128.176 32.058 131.823 30.08 135.524L36.676 155.825L24.37 146.884C21.311 153.365 18.513 159.992 15.998 166.757L23.265 189.125H50.087L28.387 204.89L36.676 230.399L14.977 214.634L1.979 224.078C0.678 234.536 0 245.188 0 255.999H256C256 114.615 256 97.947 256 -0.000976562C205.428 -0.000976562 158.285 14.669 118.584 39.977ZM128.502 230.399L106.803 214.634L85.104 230.399L93.393 204.89L71.693 189.125H98.515L106.803 163.616L115.091 189.125H141.913L120.213 204.89L128.502 230.399ZM120.213 130.316L128.502 155.825L106.803 140.06L85.104 155.825L93.393 130.316L71.693 114.551H98.515L106.803 89.042L115.091 114.551H141.913L120.213 130.316ZM220.328 230.399L198.629 214.634L176.93 230.399L185.219 204.89L163.519 189.125H190.341L198.629 163.616L206.917 189.125H233.739L212.039 204.89L220.328 230.399ZM212.039 130.316L220.328 155.825L198.629 140.06L176.93 155.825L185.219 130.316L163.519 114.551H190.341L198.629 89.042L206.917 114.551H233.739L212.039 130.316ZM212.039 55.742L220.328 81.251L198.629 65.486L176.93 81.251L185.219 55.742L163.519 39.977H190.341L198.629 14.468L206.917 39.977H233.739L212.039 55.742Z"
          fill="#0052B4"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7323">
          <rect width="512" height="512" fill="white" transform="translate(0 -0.000976562)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default US;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/uy.tsx
================================================
import React from "react";

const UY = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="513"
      viewBox="0 0 512 513"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7324)">
        <path
          d="M256 512.581C397.385 512.581 512 397.966 512 256.581C512 115.196 397.385 0.581055 256 0.581055C114.615 0.581055 0 115.196 0 256.581C0 397.966 114.615 512.581 256 512.581Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 189.798H503.181C496.762 165.984 487.006 143.543 474.426 123.015H256V189.798Z"
          fill="#338AF3"
        />
        <path
          d="M96.6432 456.929H415.356C438.719 438.321 458.755 415.719 474.425 390.146H37.5742C53.2452 415.718 73.2812 438.321 96.6432 456.929Z"
          fill="#338AF3"
        />
        <path
          d="M256 0.581055V56.2331H415.357C371.627 21.4051 316.249 0.581055 256 0.581055Z"
          fill="#338AF3"
        />
        <path
          d="M256 189.798H503.181C496.762 165.984 487.006 143.543 474.426 123.015H256V189.798Z"
          fill="#338AF3"
        />
        <path
          d="M0 256.581C0 279.688 3.08 302.07 8.819 323.364H503.182C508.92 302.07 512 279.688 512 256.581H0Z"
          fill="#338AF3"
        />
        <path
          d="M222.609 150.402L191.343 165.109L207.992 195.389L174.042 188.895L169.74 223.19L146.094 197.966L122.446 223.19L118.145 188.895L84.1951 195.387L100.843 165.108L69.5791 150.402L100.844 135.697L84.1951 105.417L118.144 111.911L122.447 77.6162L146.094 102.84L169.741 77.6162L174.042 111.911L207.993 105.417L191.344 135.698L222.609 150.402Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7324">
          <rect width="512" height="512" fill="white" transform="translate(0 0.581055)" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default UY;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/uz.tsx
================================================
import React from "react";

const UZ = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7325)">
        <path
          d="M12.088 178.088C4.246 202.656 -0.000999823 228.829 1.76555e-07 255.998C-0.000999823 283.168 4.247 309.343 12.089 333.911L256 345.043L499.911 333.913C507.752 309.344 512.001 283.168 512.001 256C512 228.83 507.753 202.656 499.911 178.087L256 166.957L12.088 178.088Z"
          fill="#F0F0F0"
        />
        <path
          d="M499.91 178.088L255.999 166.958L12.087 178.088C9.76296 185.372 7.76196 192.799 6.08496 200.349H505.909C504.234 192.798 502.234 185.37 499.91 178.088Z"
          fill="#D80027"
        />
        <path
          d="M6.08789 311.651C7.76289 319.201 9.76389 326.627 12.0879 333.911L12.1119 333.912L255.998 345.042L499.909 333.912C502.233 326.628 504.234 319.201 505.91 311.651H6.08789Z"
          fill="#D80027"
        />
        <path
          d="M255.999 511.999C370.215 511.999 466.945 437.196 499.91 333.912H12.0889C45.0539 437.195 141.786 511.999 255.999 511.999Z"
          fill="#6DA544"
        />
        <path
          d="M255.999 0.000976573C141.785 0.00197657 45.0549 74.805 12.0879 178.088L499.909 178.089C466.946 74.804 370.215 -2.34275e-05 255.999 0.000976573Z"
          fill="#338AF3"
        />
        <path
          d="M116.986 105.74C116.986 81.7628 133.837 61.7328 156.34 56.8188C152.882 56.0628 149.293 55.6538 145.607 55.6538C117.945 55.6538 95.52 78.0778 95.52 105.741C95.52 133.404 117.943 155.828 145.607 155.828C149.293 155.828 152.881 155.418 156.34 154.663C133.838 149.747 116.986 129.717 116.986 105.74Z"
          fill="#F0F0F0"
        />
        <path
          d="M185.944 128.507L189.334 138.942H200.306L191.43 145.392L194.82 155.827L185.944 149.378L177.066 155.827L180.457 145.392L171.58 138.942H182.552L185.944 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M220.964 128.507L224.355 138.942H235.327L226.45 145.392L229.841 155.827L220.964 149.378L212.087 155.827L215.478 145.392L206.602 138.942H217.573L220.964 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 128.507L259.375 138.942H270.348L261.471 145.392L264.861 155.827L255.985 149.378L247.107 155.827L250.499 145.392L241.621 138.942H252.594L255.985 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 128.507L294.397 138.942H305.368L296.492 145.392L299.883 155.827L291.006 149.378L282.128 155.827L285.52 145.392L276.642 138.942H287.614L291.006 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 128.507L329.417 138.942H340.389L331.513 145.392L334.904 155.827L326.026 149.378L317.149 155.827L320.54 145.392L311.664 138.942H322.635L326.026 128.507Z"
          fill="#F0F0F0"
        />
        <path
          d="M220.964 92.0801L224.355 102.514H235.327L226.45 108.965L229.841 119.399L220.964 112.95L212.087 119.399L215.478 108.965L206.602 102.514H217.573L220.964 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 92.0801L259.375 102.514H270.348L261.471 108.965L264.861 119.399L255.985 112.95L247.107 119.399L250.499 108.965L241.621 102.514H252.594L255.985 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 92.0801L294.397 102.514H305.368L296.492 108.965L299.883 119.399L291.006 112.95L282.128 119.399L285.52 108.965L276.642 102.514H287.614L291.006 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 92.0801L329.417 102.514H340.389L331.513 108.965L334.904 119.399L326.026 112.95L317.149 119.399L320.54 108.965L311.664 102.514H322.635L326.026 92.0801Z"
          fill="#F0F0F0"
        />
        <path
          d="M255.985 55.6519L259.375 66.0879H270.348L261.471 72.5369L264.861 82.9729L255.985 76.5239L247.107 82.9729L250.499 72.5369L241.621 66.0879H252.594L255.985 55.6519Z"
          fill="#F0F0F0"
        />
        <path
          d="M291.006 55.6519L294.397 66.0879H305.368L296.492 72.5369L299.883 82.9729L291.006 76.5239L282.128 82.9729L285.52 72.5369L276.642 66.0879H287.614L291.006 55.6519Z"
          fill="#F0F0F0"
        />
        <path
          d="M326.026 55.6519L329.417 66.0879H340.389L331.513 72.5369L334.904 82.9729L326.026 76.5239L317.149 82.9729L320.54 72.5369L311.664 66.0879H322.635L326.026 55.6519Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7325">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default UZ;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/va.tsx
================================================
import React from "react";

const VA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7327)">
        <path
          d="M256 0C397.384 0 512 114.616 512 256C512 397.384 397.384 512 256 512C256 500.87 222.609 256 222.609 256L256 0Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C114.616 512 0 397.384 0 256C0 114.616 114.616 0 256 0"
          fill="#FFDA44"
        />
        <path
          d="M354.03 222.765L402.141 286.411C394.561 297.889 394.601 313.353 403.368 324.95C414.488 339.661 435.429 342.573 450.141 331.452C464.852 320.332 467.764 299.391 456.642 284.68C447.877 273.083 433.009 268.827 419.899 272.989L344.918 173.796L327.16 187.22L300.52 207.354L327.368 242.869L354.03 222.765ZM423.293 295.935C428.197 292.227 435.178 293.199 438.885 298.101C442.591 303.005 441.622 309.986 436.718 313.694C431.815 317.399 424.834 316.431 421.128 311.526C417.419 306.622 418.39 299.641 423.293 295.935Z"
          fill="#ACABB1"
        />
        <path
          d="M436.55 242.868L463.398 207.353L436.76 187.217L419.002 173.793L344.021 272.986C330.913 268.824 316.044 273.081 307.278 284.677C296.156 299.389 299.068 320.329 313.779 331.449C328.491 342.569 349.431 339.658 360.551 324.947C369.317 313.35 369.357 297.886 361.778 286.408L409.889 222.762L436.55 242.868ZM342.793 311.525C339.087 316.43 332.107 317.399 327.203 313.693C322.299 309.985 321.329 303.004 325.036 298.1C328.742 293.198 335.723 292.226 340.628 295.934C345.531 299.641 346.5 306.622 342.793 311.525Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7327">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/vc.tsx
================================================
import React from "react";

const VC = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="513"
      height="512"
      viewBox="0 0 513 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7296)">
        <path
          d="M379.013 31.128C342.642 11.284 300.928 0.000976562 256.578 0.000976562C212.228 0.000976562 170.514 11.284 134.143 31.128L111.882 256.001L134.143 480.874C170.514 500.718 212.228 512.001 256.578 512.001C300.928 512.001 342.642 500.718 379.013 480.874L401.274 256.001L379.013 31.128Z"
          fill="#FFDA44"
        />
        <path
          d="M134.143 480.872V31.127C54.5671 74.547 0.578125 158.966 0.578125 256.001C0.578125 353.036 54.5671 437.455 134.143 480.872Z"
          fill="#338AF3"
        />
        <path
          d="M512.578 256.001C512.578 158.966 458.589 74.547 379.013 31.127V480.872C458.589 437.455 512.578 353.036 512.578 256.001Z"
          fill="#6DA544"
        />
        <path
          d="M200.926 322.784L156.403 256.001L200.925 189.218L245.449 256.001L200.926 322.784Z"
          fill="#6DA544"
        />
        <path
          d="M312.23 322.784L267.708 256.001L312.23 189.218L356.752 256.001L312.23 322.784Z"
          fill="#6DA544"
        />
        <path
          d="M256.578 411.827L212.056 345.044L256.578 278.262L301.1 345.044L256.578 411.827Z"
          fill="#6DA544"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7296">
          <rect
            width="512"
            height="512"
            fill="white"
            transform="translate(0.578125 0.000976562)"
          />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ve.tsx
================================================
import React from "react";

const VE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7328)">
        <path
          d="M486.598 367.304C502.873 333.648 512 295.891 512 256C512 216.109 502.873 178.352 486.598 144.696L256 122.435L25.402 144.696C9.127 178.352 0 216.109 0 256C0 295.891 9.127 333.648 25.402 367.304L256 389.565L486.598 367.304Z"
          fill="#0052B4"
        />
        <path
          d="M256 512C357.493 512 445.19 452.935 486.598 367.304H25.4021C66.8101 452.935 154.506 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M443.367 306.252L429.846 316.818L435.714 332.939L421.487 323.346L407.965 333.91L412.693 317.415L398.468 307.819L415.617 307.221L420.349 290.726L426.219 306.85L443.367 306.252Z"
          fill="#F0F0F0"
        />
        <path
          d="M408.741 246.282L399.65 260.835L410.681 273.977L394.03 269.831L384.936 284.38L383.737 267.263L367.088 263.11L383 256.681L381.804 239.563L392.833 252.71L408.741 246.282Z"
          fill="#F0F0F0"
        />
        <path
          d="M355.694 201.769L352.128 218.554L366.988 227.134L349.923 228.933L346.355 245.713L339.375 230.039L322.308 231.83L335.062 220.348L328.083 204.674L342.943 213.252L355.694 201.769Z"
          fill="#F0F0F0"
        />
        <path
          d="M290.622 178.087L293.013 195.08L309.91 198.058L294.488 205.584L296.877 222.576L284.957 210.232L269.531 217.754L277.589 202.601L265.668 190.259L282.568 193.238L290.622 178.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M221.377 178.087L229.434 193.238L246.33 190.257L234.413 202.604L242.466 217.756L227.044 210.232L215.122 222.573L217.513 205.584L202.09 198.062L218.989 195.08L221.377 178.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M156.305 201.769L169.059 213.252L183.916 204.674L176.939 220.354L189.69 231.834L172.625 230.039L165.643 245.713L162.08 228.93L145.014 227.138L159.874 218.556L156.305 201.769Z"
          fill="#F0F0F0"
        />
        <path
          d="M103.258 246.282L119.171 252.71L130.197 239.566L129.004 256.687L144.912 263.116L128.263 267.265L127.064 284.38L117.974 269.831L101.323 273.98L112.353 260.835L103.258 246.282Z"
          fill="#F0F0F0"
        />
        <path
          d="M68.634 306.252L85.786 306.85L91.652 290.728L96.387 307.224L113.534 307.823L99.308 317.419L104.036 333.913L90.516 323.349L76.289 332.942L82.158 316.818L68.634 306.252Z"
          fill="#F0F0F0"
        />
        <path
          d="M486.598 144.696C445.19 59.065 357.493 0 256 0C154.506 0 66.8101 59.065 25.4021 144.696H486.598Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7328">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/vg.tsx
================================================
import React from "react";

const VG = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7109)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C0 256.061 256 0.028 256 0C397.384 0 512 114.616 512 256Z"
          fill="#0052B4"
        />
        <path
          d="M255.315 256H256C256 255.77 256 255.546 256 255.315C255.772 255.544 255.544 255.772 255.315 256Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 133.565C256 88.52 256 59.005 256 0H255.957C114.591 0.024 0 114.629 0 256H133.565V180.789L208.776 256H255.316C255.544 255.772 255.772 255.544 256.001 255.315C256.001 238.068 256.001 222.679 256.001 208.778L180.788 133.565H256Z"
          fill="#F0F0F0"
        />
        <path
          d="M129.515 33.3911C89.4756 56.1901 56.1886 89.4761 33.3906 129.515V256H100.174V100.176V100.174H256C256 79.1111 256 59.0451 256 33.3911H129.515Z"
          fill="#D80027"
        />
        <path
          d="M367.304 256L298.111 325.193C311.079 350.204 337.187 367.304 367.304 367.304C397.421 367.304 423.529 350.204 436.497 325.193L367.304 256Z"
          fill="#FFDA44"
        />
        <path
          d="M256 224.519L165.045 133.566H133.565V133.568L255.998 256H256C256 256 256 234.293 256 224.519Z"
          fill="#D80027"
        />
        <path
          d="M289.391 133.565V255.999V256C289.392 315.639 367.304 333.913 367.304 333.913C367.304 333.913 445.216 315.639 445.217 256V255.999V133.565H289.391Z"
          fill="#6DA544"
        />
        <path d="M350.609 189.217H384V278.26H350.609V189.217Z" fill="#F0F0F0" />
        <path
          d="M367.304 205.913C376.525 205.913 384 198.438 384 189.217C384 179.996 376.525 172.521 367.304 172.521C358.083 172.521 350.608 179.996 350.608 189.217C350.608 198.438 358.083 205.913 367.304 205.913Z"
          fill="#A2001D"
        />
        <path d="M311.652 155.826H333.913V178.087H311.652V155.826Z" fill="#FFDA44" />
        <path d="M311.652 205.913H333.913V228.174H311.652V205.913Z" fill="#FFDA44" />
        <path d="M311.652 256H333.913V278.261H311.652V256Z" fill="#FFDA44" />
        <path d="M400.696 155.826H422.957V178.087H400.696V155.826Z" fill="#FFDA44" />
        <path d="M400.696 205.913H422.957V228.174H400.696V205.913Z" fill="#FFDA44" />
        <path d="M400.696 256H422.957V278.261H400.696V256Z" fill="#FFDA44" />
      </g>
      <defs>
        <clipPath id="clip0_4_7109">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VG;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/vn.tsx
================================================
import React from "react";

const VN = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7329)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#D80027"
        />
        <path
          d="M256 133.565L283.628 218.594H373.033L300.702 271.144L328.33 356.174L256 303.623L183.67 356.174L211.298 271.144L138.968 218.594H228.372L256 133.565Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7329">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VN;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/vu.tsx
================================================
import React from "react";

const VU = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7326)">
        <path
          d="M512 256.002C512 244.685 511.257 233.541 509.833 222.611H222.606C170.305 170.313 74.976 74.9899 74.98 74.9819C-24.994 174.956 -24.994 337.046 74.98 437.022L222.609 289.394H509.833C511.256 278.463 512 267.319 512 256.002Z"
          fill="black"
        />
        <path
          d="M511.927 261.824C511.916 262.318 511.905 262.814 511.891 263.308C511.903 262.812 511.915 262.318 511.927 261.824Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.681 268.82C511.658 269.309 511.624 269.796 511.598 270.284C511.624 269.797 511.656 269.309 511.681 268.82Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.336 274.4C511.285 275.119 511.235 275.838 511.177 276.555C511.235 275.838 511.284 275.119 511.336 274.4Z"
          fill="#F0F0F0"
        />
        <path
          d="M510.481 228.1C510.575 228.956 510.669 229.811 510.754 230.669C510.669 229.81 510.574 228.956 510.481 228.1Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.597 241.719C511.624 242.207 511.657 242.694 511.68 243.183C511.656 242.694 511.624 242.206 511.597 241.719Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.89 248.697C511.904 249.191 511.914 249.687 511.926 250.181C511.915 249.685 511.903 249.191 511.89 248.697Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.177 235.448C511.235 236.165 511.285 236.884 511.336 237.603C511.284 236.884 511.235 236.165 511.177 235.448Z"
          fill="#F0F0F0"
        />
        <path
          d="M509.833 222.61C509.948 223.487 510.05 224.369 510.155 225.248C494.961 98.3659 386.975 0.00195312 256 0.00195312C185.306 0.00195312 121.305 28.657 74.978 74.986L222.602 222.611H509.833V222.61Z"
          fill="#D80027"
        />
        <path
          d="M509.833 289.393H222.602L74.978 437.018C121.305 483.346 185.306 512.002 256 512.002C386.975 512.002 494.962 413.638 510.155 286.755C510.05 287.634 509.946 288.516 509.833 289.393Z"
          fill="#6DA544"
        />
        <path
          d="M510.753 281.334C510.668 282.192 510.574 283.047 510.48 283.903C510.574 283.047 510.669 282.193 510.753 281.334Z"
          fill="#F0F0F0"
        />
        <path
          d="M511.336 237.603C511.433 238.972 511.521 240.344 511.596 241.719C511.52 240.344 511.433 238.972 511.336 237.603Z"
          fill="black"
        />
        <path
          d="M510.155 225.248C510.27 226.197 510.379 227.148 510.481 228.1C510.377 227.148 510.268 226.198 510.155 225.248Z"
          fill="black"
        />
        <path
          d="M510.753 230.669C510.909 232.258 511.05 233.851 511.177 235.45C511.051 233.851 510.91 232.257 510.753 230.669Z"
          fill="black"
        />
        <path
          d="M512 256.002C512 257.949 511.97 259.888 511.927 261.823C511.97 259.887 512 257.948 512 256.002Z"
          fill="black"
        />
        <path
          d="M511.597 270.284C511.521 271.659 511.433 273.031 511.337 274.4C511.433 273.031 511.52 271.659 511.597 270.284Z"
          fill="black"
        />
        <path
          d="M511.177 276.555C511.05 278.152 510.909 279.746 510.753 281.334C510.91 279.746 511.051 278.152 511.177 276.555Z"
          fill="black"
        />
        <path
          d="M510.481 283.903C510.379 284.855 510.27 285.805 510.155 286.755C510.268 285.806 510.377 284.855 510.481 283.903Z"
          fill="black"
        />
        <path
          d="M511.927 250.18C511.97 252.116 512 254.056 512 256.001C512 254.056 511.97 252.116 511.927 250.18Z"
          fill="black"
        />
        <path
          d="M511.681 243.183C511.771 245.015 511.839 246.854 511.891 248.696C511.839 246.853 511.772 245.015 511.681 243.183Z"
          fill="black"
        />
        <path
          d="M511.89 263.308C511.838 265.15 511.77 266.989 511.68 268.821C511.772 266.988 511.839 265.15 511.89 263.308Z"
          fill="black"
        />
        <path
          d="M511.756 244.779H213.201L59.8441 91.4448C54.8871 96.6728 49.5141 103.973 46.1911 109.172L192.85 255.908L46.0681 402.693C48.9741 407.863 55.3051 415.515 59.7501 420.494L213.204 267.04H511.792C511.951 263.348 512.001 259.64 512.001 255.91C512 250.912 511.862 247.227 511.756 244.779Z"
          fill="#FFDA44"
        />
        <path
          d="M62.1871 310.574V289.131C83.5851 289.131 100.992 271.722 100.992 250.326C100.992 235.187 88.6751 222.871 73.5371 222.871C63.2241 222.871 54.8331 231.261 54.8331 241.576C54.8331 248.171 60.1981 253.537 66.7941 253.537C70.5221 253.537 73.5551 250.502 73.5551 246.774H94.9971C94.9971 262.327 82.3451 274.979 66.7951 274.979C48.3761 274.98 33.3931 259.994 33.3931 241.578C33.3931 219.441 51.4031 201.432 73.5381 201.432C100.5 201.432 122.436 223.368 122.436 250.329C122.435 283.546 95.4081 310.574 62.1871 310.574Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7326">
          <rect
            width="512.001"
            height="512.001"
            fill="white"
            transform="translate(0 0.000976562)"
          />
        </clipPath>
      </defs>
    </svg>
  );
};

export default VU;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ws.tsx
================================================
import React from "react";

const WS = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7271)">
        <path
          d="M512 256C512 397.384 397.384 512 256 512C114.616 512 0 397.384 0 256C87.93 168.07 162.504 93.496 256 0C397.384 0 512 114.616 512 256Z"
          fill="#D80027"
        />
        <path
          d="M256 256C256 114.616 256 97.948 256 0C114.616 0 0 114.616 0 256H256Z"
          fill="#0052B4"
        />
        <path
          d="M205.054 166.957L209.199 179.712H222.609L211.759 187.593L215.904 200.348L205.054 192.465L194.204 200.348L198.349 187.593L187.499 179.712H200.909L205.054 166.957Z"
          fill="#F0F0F0"
        />
        <path
          d="M137.698 66.783L144.605 88.042H166.957L148.873 101.177L155.782 122.435L137.698 109.296L119.615 122.435L126.523 101.177L108.44 88.042H130.79L137.698 66.783Z"
          fill="#F0F0F0"
        />
        <path
          d="M204.481 89.043L211.388 110.303H233.739L215.656 123.438L222.563 144.696L204.481 131.557L186.398 144.696L193.306 123.438L175.223 110.303H197.573L204.481 89.043Z"
          fill="#F0F0F0"
        />
        <path
          d="M151.693 178.087L158.601 199.346H180.951L162.868 212.481L169.776 233.739L151.693 220.601L133.61 233.739L140.518 212.481L122.435 199.346H144.786L151.693 178.087Z"
          fill="#F0F0F0"
        />
        <path
          d="M93.176 122.435L100.084 143.694H122.435L104.351 156.829L111.259 178.087L93.176 164.949L75.094 178.087L82.001 156.829L63.919 143.694H86.269L93.176 122.435Z"
          fill="#F0F0F0"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7271">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default WS;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/xk.tsx
================================================
import React from "react";

const XK = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7196)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#0052B4"
        />
        <path
          d="M112.449 155.827L117.975 172.835H135.855L121.39 183.344L126.915 200.349L112.449 189.84L97.982 200.349L103.509 183.344L89.043 172.835H106.922L112.449 155.827Z"
          fill="#F0F0F0"
        />
        <path
          d="M168.101 139.132L173.627 156.139H191.507L177.042 166.648L182.567 183.653L168.101 173.144L153.635 183.653L159.161 166.648L144.696 156.139H162.576L168.101 139.132Z"
          fill="#F0F0F0"
        />
        <path
          d="M223.753 122.436L229.279 139.443H247.159L232.694 149.953L238.219 166.958L223.753 156.448L209.287 166.958L214.813 149.953L200.348 139.443H218.228L223.753 122.436Z"
          fill="#F0F0F0"
        />
        <path
          d="M399.551 155.827L394.025 172.835H376.145L390.611 183.344L385.085 200.349L399.551 189.84L414.018 200.349L408.491 183.344L422.957 172.835H405.077L399.551 155.827Z"
          fill="#F0F0F0"
        />
        <path
          d="M343.899 139.132L338.373 156.139H320.493L334.959 166.648L329.433 183.653L343.899 173.144L358.365 183.653L352.839 166.648L367.304 156.139H349.424L343.899 139.132Z"
          fill="#F0F0F0"
        />
        <path
          d="M288.247 122.436L282.721 139.443H264.841L279.306 149.953L273.781 166.958L288.247 156.448L302.713 166.958L297.187 149.953L311.652 139.443H293.772L288.247 122.436Z"
          fill="#F0F0F0"
        />
        <path
          d="M300.522 267.13L256 211.478L233.739 222.608V244.869L200.348 267.13H178.087V295.889C210.715 309.101 233.739 341.07 233.739 378.435H256V356.174L278.261 333.913L300.522 356.174L322.783 333.913V311.652L345.044 278.261L300.522 267.13Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7196">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default XK;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/ye.tsx
================================================
import React from "react";

const YE = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7332)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M256 512C366.071 512 459.906 442.528 496.077 345.043H15.923C52.094 442.528 145.929 512 256 512Z"
          fill="black"
        />
        <path
          d="M256 0C145.929 0 52.094 69.472 15.923 166.957H496.078C459.906 69.472 366.071 0 256 0Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7332">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default YE;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/za.tsx
================================================
import React from "react";

const ZA = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7289)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M74.98 437.02C-24.994 337.045 -24.994 174.955 74.98 74.98C74.973 74.991 222.609 256 222.609 256L74.98 437.02Z"
          fill="black"
        />
        <path
          d="M222.609 256L33.953 128.513C28.104 138.68 22.946 149.292 18.514 160.276L114.023 256.001L18.517 351.731C22.945 362.707 28.098 373.312 33.943 383.472L222.609 256Z"
          fill="#FFDA44"
        />
        <path
          d="M509.833 222.609H222.602L74.978 74.984C59.07 90.892 45.249 108.883 33.953 128.514L161.192 256L33.943 383.47C45.239 403.106 59.066 421.103 74.978 437.015L222.602 289.391H509.833C511.256 278.461 512 267.317 512 256C512 244.683 511.256 233.539 509.833 222.609Z"
          fill="#6DA544"
        />
        <path
          d="M100.138 459.077C143.307 492.259 197.344 512 256 512C374.279 512 473.805 431.779 503.181 322.783H236.433L100.138 459.077Z"
          fill="#0052B4"
        />
        <path
          d="M503.181 189.217C473.805 80.221 374.279 0 256 0C197.344 0 143.307 19.741 100.138 52.923L236.432 189.217H503.181Z"
          fill="#D80027"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7289">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ZA;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/zm.tsx
================================================
import React from "react";

const ZM = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7333)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#496E2D"
        />
        <path
          d="M356.174 256H256V512C285.924 512 314.641 506.849 341.333 497.414L356.174 256Z"
          fill="#D80027"
        />
        <path
          d="M426.666 446.793C479.034 399.919 512 331.813 512 256H411.826L426.666 446.793Z"
          fill="#FF9811"
        />
        <path
          d="M341.333 256V497.414C373.13 486.173 402.044 468.834 426.667 446.794V256H341.333Z"
          fill="black"
        />
        <path
          d="M473.043 166.957H406.26C406.26 154.663 396.293 144.696 383.999 144.696C371.705 144.696 361.738 154.663 361.738 166.957H294.955C294.955 179.252 305.664 189.218 317.957 189.218H317.216C317.216 201.513 327.181 211.479 339.477 211.479C339.477 223.774 349.442 233.74 361.738 233.74H406.26C418.554 233.74 428.521 223.774 428.521 211.479C440.815 211.479 450.782 201.513 450.782 189.218H450.041C462.335 189.217 473.043 179.251 473.043 166.957Z"
          fill="#FF9811"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7333">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ZM;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Flag/flag-components/zw.tsx
================================================
import React from "react";

const ZW = (props: React.SVGProps<SVGSVGElement>) => {
  return (
    <svg
      width="512"
      height="512"
      viewBox="0 0 512 512"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <g clipPath="url(#clip0_4_7334)">
        <path
          d="M256 512C397.385 512 512 397.385 512 256C512 114.615 397.385 0 256 0C114.615 0 0 114.615 0 256C0 397.385 114.615 512 256 512Z"
          fill="#F0F0F0"
        />
        <path
          d="M487.497 146.603C474.491 119.129 456.74 94.346 435.3 73.301L256 55.652L76.6999 73.302C76.1279 73.863 75.5699 74.437 75.0039 75.004L146.604 146.604L256 149.945L487.497 146.603Z"
          fill="#FFDA44"
        />
        <path
          d="M75.001 436.999C75.943 437.941 76.883 438.884 77.839 439.812L256 456.348L434.159 439.812C455.82 418.812 473.788 394.027 486.977 366.51L155.825 356.174C127.332 384.668 94.468 417.53 75.001 436.999Z"
          fill="#FFDA44"
        />
        <path
          d="M509.454 219.905L211.478 211.478L256 256C242.813 269.187 223.127 288.873 211.478 300.522L509.298 293.208C511.068 281.059 512 268.639 512 256C512 243.746 511.12 231.7 509.454 219.905Z"
          fill="black"
        />
        <path
          d="M256 0C186.172 0 122.886 27.97 76.7002 73.302H435.3C389.114 27.97 325.828 0 256 0Z"
          fill="#6DA544"
        />
        <path
          d="M219.906 219.905H509.455C505.802 194.026 498.286 169.392 487.498 146.603H146.604L219.906 219.905Z"
          fill="#D80027"
        />
        <path
          d="M145.49 366.51H486.978C497.892 343.738 505.528 319.101 509.299 293.208H218.792C190.405 321.595 166.347 345.653 145.49 366.51Z"
          fill="#D80027"
        />
        <path
          d="M256 512C325.255 512 388.075 484.488 434.159 439.811H77.8408C123.925 484.488 186.745 512 256 512Z"
          fill="#6DA544"
        />
        <path
          d="M91.4155 59.934C85.7245 64.716 80.2335 69.729 74.9805 74.98L256 256L74.9805 437.02C80.2325 442.272 85.7245 447.284 91.4155 452.066L287.481 256L91.4155 59.934Z"
          fill="black"
        />
        <path
          d="M102.925 189.217L119.5 240.233H173.145L129.747 271.765L146.323 322.783L102.925 291.252L59.526 322.783L76.104 271.765L32.707 240.233H86.349L102.925 189.217Z"
          fill="#D80027"
        />
        <path
          d="M148.519 260.174L105.321 244.87C105.321 244.87 102.129 214.927 101.936 213.912C100.47 206.189 93.683 200.348 85.533 200.348C76.313 200.348 68.837 207.823 68.837 217.044C68.837 218.573 69.06 220.046 69.445 221.454L57.333 233.647H78.869C78.869 256 62.189 256 62.189 278.261L71.442 300.522H127.094L136.37 278.261H136.366C137.295 276.125 137.859 273.922 138.092 271.721C146.088 268.487 148.519 260.174 148.519 260.174Z"
          fill="#FFDA44"
        />
      </g>
      <defs>
        <clipPath id="clip0_4_7334">
          <rect width="512" height="512" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
};

export default ZW;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Form/Form.tsx
================================================
import { cn } from "@/lib/utils";
import type { FormProps as RadixFormProps } from "@radix-ui/react-form";
import * as RadixForm from "@radix-ui/react-form";
import { forwardRef } from "react";

import { typographyVariants } from "../Typography";

export type FormProps = RadixFormProps;
export const Root = RadixForm.Root;
export const Field = RadixForm.Field;
export const Control = RadixForm.Control;
export const Message = forwardRef<
  React.ElementRef<typeof RadixForm.Message>,
  React.ComponentPropsWithoutRef<typeof RadixForm.Message> & {
    error?: boolean;
    textAlign?: "left" | "center" | "right";
  }
>(({ className, error, textAlign = "left", ...props }, ref) => (
  <div
    className={cn(
      " px-2 flex items-center justify-center",
      textAlign === "left" && "justify-start",
      textAlign === "center" && "justify-center",
      textAlign === "right" && "justify-end",
    )}
  >
    <RadixForm.Message
      ref={ref}
      className={cn(
        "h-[1.625rem] mt-1 flex items-center",
        typographyVariants({
          variant: "body",
          level: 4,
        }),
        error ? "text-error-600" : "text-gray-500",
      )}
      {...props}
    />
  </div>
));
export const ValidityState: typeof RadixForm.ValidityState = RadixForm.ValidityState;
export const Submit: typeof RadixForm.Submit = RadixForm.Submit;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Form/index.ts
================================================
export * as Form from "./Form";
export type { FormProps } from "./Form";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/ArrowDown.tsx
================================================
import React from "react";

export function ArrowDown(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="18"
      height="18"
      viewBox="0 0 18 18"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M4.5 6.75L9 11.25L13.5 6.75"
        stroke="currentColor"
        strokeWidth="1.35"
        strokeLinecap="square"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/Eye.tsx
================================================
import { cn } from "../../lib/utils";

interface EyeProps {
  /**
   * Additional CSS classes to apply to the Eye icon
   */
  className?: string;
}

export function Eye({ className }: EyeProps) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6", className)}
    >
      <path
        d="M3 13C6.6 5 17.4 5 21 13"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="square"
        strokeLinejoin="round"
      />
      <path
        d="M12 17C10.3431 17 9 15.6569 9 14C9 12.3431 10.3431 11 12 11C13.6569 11 15 12.3431 15 14C15 15.6569 13.6569 17 12 17Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="square"
        strokeLinejoin="round"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/EyeClosed.tsx
================================================
import { cn } from "../../lib/utils";

interface EyeProps {
  /**
   * Additional CSS classes to apply to the Eye icon
   */
  className?: string;
}

export function EyeClosed({ className }: EyeProps) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6", className)}
    >
      <path
        d="M19.5001 16L17.0249 12.6038"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M12 17.5V14"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M4.5 16L6.96895 12.6124"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M3 8C6.6 16 17.4 16 21 8"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/Fail.tsx
================================================
import { cn } from "../../lib/utils";

interface FailProps {
  /**
   * Additional CSS classes to apply to the icon
   */
  className?: string;
}

export const Fail = ({ className }: FailProps) => {
  return (
    <svg
      width="25"
      height="24"
      viewBox="0 0 25 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6 text-error-600", className)}
    >
      <rect x="0.5" width="24" height="24" rx="12" fill="currentColor" />
      <rect
        opacity="0.2"
        x="0.5"
        width="24"
        height="24"
        rx="12"
        fill="url(#paint0_radial_578_338)"
      />
      <rect
        x="0.636364"
        y="0.136364"
        width="23.7273"
        height="23.7273"
        rx="11.8636"
        stroke="url(#paint1_linear_578_338)"
        strokeWidth="0.272727"
      />
      <path
        d="M9.50403 14.7233L12.3637 11.8636M15.2233 9.00403L12.3637 11.8636M12.3637 11.8636L9.50403 9.00403M12.3637 11.8636L15.2233 14.7233"
        stroke="white"
        strokeWidth="1.5"
      />
      <defs>
        <radialGradient
          id="paint0_radial_578_338"
          cx="0"
          cy="0"
          r="1"
          gradientUnits="userSpaceOnUse"
          gradientTransform="translate(5.95455) rotate(63.4349) scale(26.8328 26.7171)"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </radialGradient>
        <linearGradient
          id="paint1_linear_578_338"
          x1="12.5"
          y1="0"
          x2="12.5"
          y2="24"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="white" stopOpacity="0.3" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  );
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/MagicWand.tsx
================================================
import { cn } from "../../lib/utils";

interface MagicWandProps {
  /**
   * Additional CSS classes to apply to the icon
   */
  className?: string;
}

export function MagicWand({ className }: MagicWandProps) {
  return (
    <svg
      width="20"
      height="20"
      viewBox="0 0 20 20"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-5", className)}
    >
      <path
        d="M14.0774 3.8389L3.82886 14.0874L4.48362 14.7421L5.25751 15.516L5.91227 16.1707L16.1607 5.92225L15.506 5.26752L14.7321 4.49363L14.0774 3.8389Z"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
      />
      <path
        d="M11.2844 6.63257L13.3678 8.7159"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M10.2313 3.98142C10.6148 3.98142 10.9258 3.6705 10.9258 3.28697C10.9258 2.90344 10.6148 2.59253 10.2313 2.59253C9.84778 2.59253 9.53687 2.90344 9.53687 3.28697C9.53687 3.6705 9.84778 3.98142 10.2313 3.98142Z"
        fill="currentColor"
      />
      <path
        d="M6.87508 3.125L7.43777 4.64564L8.95841 5.20833L7.43777 5.77102L6.87508 7.29167L6.31239 5.77102L4.79175 5.20833L6.31239 4.64564L6.87508 3.125Z"
        fill="currentColor"
      />
      <path
        d="M15 10.8333L15.6752 12.658L17.5 13.3333L15.6752 14.0085L15 15.8333L14.3248 14.0085L12.5 13.3333L14.3248 12.658L15 10.8333Z"
        fill="currentColor"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/Magnifier.tsx
================================================
import { cn } from "../../lib/utils";

interface MagnifierProps {
  /**
   * Additional CSS classes to apply to the icon
   */
  className?: string;
}

export function Magnifier({ className }: MagnifierProps) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6", className)}
    >
      <path
        d="M17 17L21 21"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="square"
        strokeLinejoin="round"
      />
      <path
        d="M3 11C3 15.4183 6.58172 19 11 19C13.213 19 15.2161 18.1015 16.6644 16.6493C18.1077 15.2022 19 13.2053 19 11C19 6.58172 15.4183 3 11 3C6.58172 3 3 6.58172 3 11Z"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/Success.tsx
================================================
import { cn } from "../../lib/utils";

interface SuccessProps {
  /**
   * Additional CSS classes to apply to the icon
   */
  className?: string;
}

export const Success = ({ className }: SuccessProps) => {
  return (
    <svg
      width="25"
      height="24"
      viewBox="0 0 25 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("size-6 text-success-600", className)}
    >
      <rect x="0.5" width="24" height="24" rx="12" fill="currentColor" />
      <rect
        opacity="0.2"
        x="0.5"
        width="24"
        height="24"
        rx="12"
        fill="url(#paint0_radial_578_332)"
      />
      <rect
        x="0.636364"
        y="0.136364"
        width="23.7273"
        height="23.7273"
        rx="11.8636"
        stroke="url(#paint1_linear_578_332)"
        strokeWidth="0.272727"
      />
      <path
        d="M8.54541 12.4091L10.7272 14.5909L16.1818 9.13633"
        stroke="white"
        strokeWidth="1.5"
      />
      <defs>
        <radialGradient
          id="paint0_radial_578_332"
          cx="0"
          cy="0"
          r="1"
          gradientUnits="userSpaceOnUse"
          gradientTransform="translate(5.95455) rotate(63.4349) scale(26.8328 26.7171)"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </radialGradient>
        <linearGradient
          id="paint1_linear_578_332"
          x1="12.5"
          y1="0"
          x2="12.5"
          y2="24"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="white" stopOpacity="0.3" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  );
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/Tick.tsx
================================================
import { cn } from "../../lib/utils";

interface TickProps {
  /**
   * Additional CSS classes to apply to the tick icon
   */
  className?: string;
}

export function Tick({ className }: TickProps) {
  return (
    <svg
      width="16"
      height="16"
      viewBox="0 0 16 16"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("h-4 w-4", className)}
      data-testid="tick-icon"
    >
      <path
        d="M3.33334 8.66669L6.00001 11.3334L12.6667 4.66669"
        stroke="currentColor"
        strokeWidth="1.5"
        strokeLinecap="square"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Icons/XMark.tsx
================================================
import { cn } from "../../lib/utils";

interface XMarkProps {
  /**
   * Additional CSS classes to apply to the icon
   */
  className?: string;
}

export function XMark({ className }: XMarkProps) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("h-6 w-6", className)}
    >
      <path
        d="M6.75729 17.2426L11.9999 12M17.2426 6.75736L11.9999 12M11.9999 12L6.75729 6.75736M11.9999 12L17.2426 17.2426"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="square"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Input/index.ts
================================================
export * from "./Input";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Input/Input.tsx
================================================
import type { VariantProps } from "class-variance-authority";
import { cva } from "class-variance-authority";
import * as React from "react";

import { cn } from "../../lib/utils";
import { Tick } from "../Icons/Tick";
import { typographyVariants } from "../Typography";

const DEFAULT_ADORNMENT_WIDTH = 1.5;

export const inputVariants = cva(
  cn(
    "peer h-[3.5rem] w-full rounded-[0.625rem] border border-gray-100 bg-gray-100 px-4 outline-none transition duration-300",
    "file:hidden",
    "invalid:border-error-600 invalid:focus:border-error-600 invalid:bg-gray-0",
    "placeholder:text-gray-500",
    "focus:border-gray-300 focus:bg-gray-0 focus-visible:outline-none",
    "disabled:cursor-not-allowed disabled:opacity-50",
  ),
  {
    variants: {
      error: {
        true: "border-error-600 focus:border-error-600 bg-gray-0",
      },
      isLabel: {
        true: "pt-6 pb-2 placeholder:text-transparent",
        false: "",
      },
      isFocused: {
        true: "focus:border-gray-300 focus:bg-gray-0 focus-visible:outline-none",
        false: "",
      },
      variant: {
        "floating-label": "pt-6 pb-2 placeholder:text-transparent",
        default: "",
      },
    },
    defaultVariants: {
      error: false,
      isFocused: false,
      variant: "default",
    },
  },
);

export const iconVariants = cva(
  "absolute top-1 bottom-1 flex items-center justify-center overflow-hidden text-gray-400",
  {
    variants: {
      disabled: {
        true: "text-gray-300 cursor-not-allowed",
      },
      position: {
        start: "left-0",
        end: "right-0",
      },
    },
  },
);

const dividerVariants = cva("border-r  h-[1.625rem] absolute", {
  variants: {
    position: {
      start: "left-0",
      end: "right-0",
    },
    error: {
      true: "border-error-600",
      false: "border-gray-300",
    },
  },
  defaultVariants: {
    error: false,
  },
});

export interface InputProps
  extends Omit<
      React.InputHTMLAttributes<HTMLInputElement>,
      "className" | "style" | "placeholder"
    >,
    VariantProps<typeof inputVariants> {
  /**
   * If true, the input will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the input will display in a valid state with success styling
   */
  isValid?: boolean;
  /**
   * Element to be rendered at the start (left side) of the input.
   * The component passed to this prop must accept a `style` prop.
   * The component should use currentColor to match the Input's styling.
   * To change styles based on input focus, use Tailwind's `group-*` modifiers
   * since the input is wrapped in a group class.
   */
  startAdornment?: React.ReactNode;
  /**
   * Element to be rendered at the end (right side) of the input.
   * The component passed to this prop must accept a `style` prop.
   * The component should use currentColor to match the Input's styling.
   * To change styles based on input focus, use Tailwind's `group-*` modifiers
   * since the input is wrapped in a group class.
   */
  endAdornment?: React.ReactNode;
  /**
   * Width of the start adornment in rem
   * @default 1.25
   */
  startAdornmentWidth?: number;
  /**
   * Width of the end adornment in rem
   * @default 1.25
   */
  endAdornmentWidth?: number;
  /**
   * If true, the input will display in a focused state with focus styling
   * @default false
   */
  isFocused?: boolean;
  /**
   * Additional class name for the input
   */
  className?: string;
  /**
   * Label text to be displayed above the input
   */
  label?: string;
  /**
   * Variant of the input
   * @default "default"
   */
  variant?: "default" | "floating-label";
  /**
   * If true, the dividers will be shown
   * @default true
   */
  showStartDivider?: boolean;
  /**
   * If true, the end divider will be shown
   * @default true
   */
  showEndDivider?: boolean;
}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  (
    {
      type = "text",
      error,
      startAdornment,
      endAdornment,
      isValid,
      startAdornmentWidth = DEFAULT_ADORNMENT_WIDTH,
      endAdornmentWidth = DEFAULT_ADORNMENT_WIDTH,
      disabled,
      className,
      label,
      id,
      showStartDivider,
      showEndDivider,
      variant = "default",
      ...props
    },
    ref,
  ) => {
    return (
      <div className="relative flex w-full items-center group">
        {startAdornment && (
          <div
            className={cn(iconVariants({ disabled, position: "start" }))}
            style={{ width: `${startAdornmentWidth + 1}rem` }}
          >
            {startAdornment}
            {showStartDivider && (
              <div className={dividerVariants({ position: "end", error })} />
            )}
          </div>
        )}
        <input
          ref={ref}
          id={id}
          type={type}
          placeholder={label}
          disabled={disabled}
          className={cn(
            inputVariants({ error, isLabel: variant === "floating-label" }),
            typographyVariants({ variant: "body", level: 3 }),
            className,
          )}
          {...props}
          style={{
            ...(startAdornment && {
              paddingLeft: `${(showStartDivider ? 1.6 : 1) + startAdornmentWidth}rem`,
            }),
            ...(endAdornment && {
              paddingRight: `${(showEndDivider ? 1.6 : 1) + endAdornmentWidth}rem`,
            }),
            ...(isValid && { paddingRight: `${1 + DEFAULT_ADORNMENT_WIDTH}rem` }),
          }}
        />
        {(isValid || endAdornment) && (
          <div
            className={cn(iconVariants({ disabled, position: "end" }))}
            style={{ width: `${endAdornmentWidth + 1}rem` }}
          >
            {isValid ? <Tick className="text-success-700" /> : endAdornment}
            {showEndDivider && (
              <div className={dividerVariants({ position: "start", error })} />
            )}
          </div>
        )}
        {variant === "floating-label" && (
          <label
            htmlFor={id}
            className={cn(
              typographyVariants({ variant: "body", level: 3 }),
              cn(
                // Initial state
                "peer-placeholder-shown:text-sm peer-placeholder-shown:translate-y-0",
                "peer-focus:-translate-y-[0.6rem] peer-focus:text-xs",
                // End state
                "absolute text-gray-500 duration-300 transform text-xs",
                "-translate-y-[0.6rem] z-10 pl-4",
              ),
            )}
            style={{
              ...(startAdornment && {
                paddingLeft: `${1 + startAdornmentWidth}rem`,
              }),
            }}
          >
            {label}
          </label>
        )}
      </div>
    );
  },
);

Input.displayName = "Input";

export default Input;



================================================
File: packages/mini-apps-ui-kit-react/src/components/ListItem/index.ts
================================================
export * from "./ListItem";



================================================
File: packages/mini-apps-ui-kit-react/src/components/ListItem/ListItem.tsx
================================================
import { cn } from "@/lib/utils";
import { cva } from "class-variance-authority";
import { forwardRef } from "react";

import { Typography } from "../Typography";

const listItemStyles = cva(
  "h-[4.75rem] bg-gray-50 p-4 rounded-2xl flex items-center text-gray-900 w-full disabled:text-gray-400 disabled:cursor-not-allowed",
);

/**
 * Props for the ListItem component
 * @extends {Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "className" | "style">}
 */
interface ListItemProps
  extends Omit<React.ButtonHTMLAttributes<HTMLButtonElement>, "className" | "style"> {
  /** The main text label to display */
  label?: string;
  /** Secondary descriptive text to show below the label */
  description?: string;
  /** Content to render at the start/left of the list item */
  startAdornment?: React.ReactNode;
  /** Content to render at the end/right of the list item */
  endAdornment?: React.ReactNode;
  /** Child content to render inside the list item */
  children?: React.ReactNode;
  /** Whether the list item is disabled */
  disabled?: boolean;
}

export const ListItem = forwardRef<HTMLButtonElement, ListItemProps>(
  ({ children, label, description, startAdornment, endAdornment, disabled, ...props }, ref) => {
    return (
      <button ref={ref} className={listItemStyles()} {...props} disabled={disabled}>
        {startAdornment && <div className="mr-3 flex-shrink-0">{startAdornment}</div>}
        <div className="flex flex-col flex-grow min-w-0 items-start gap-0.5">
          {label && (
            <Typography variant="subtitle" level={2} className="truncate grow w-full text-left">
              {label}
            </Typography>
          )}
          {description && (
            <Typography
              level={4}
              className={cn(
                "truncate grow w-full text-left",
                disabled ? "text-gray-400" : "text-gray-500",
              )}
            >
              {description}
            </Typography>
          )}
        </div>
        {endAdornment && <div className="ml-4 flex-shrink-0">{endAdornment}</div>}
      </button>
    );
  },
);

ListItem.displayName = "ListItem";

export default ListItem;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Marble/index.ts
================================================
export * from "./Marble";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Marble/Marble.tsx
================================================
import { cn } from "@/lib/utils";
import { ComponentProps, forwardRef } from "react";

export const Marble = forwardRef<HTMLImageElement, ComponentProps<"img">>((props, ref) => {
  const { className, ...rest } = props;

  return (
    <img
      ref={ref}
      alt="Marble"
      className={cn(
        "rounded-full border-2 border-gray-100 p-[3px] aspect-square w-[7.5rem] object-cover",
        className,
      )}
      {...rest}
    />
  );
});

Marble.displayName = "Marble";

export default Marble;



================================================
File: packages/mini-apps-ui-kit-react/src/components/NumberPad/Delete.tsx
================================================
export function Delete(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M15 6L9 12L15 18"
        stroke="currentColor"
        strokeWidth="2.5"
        strokeLinecap="square"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/NumberPad/index.ts
================================================
export * from "./NumberPad";



================================================
File: packages/mini-apps-ui-kit-react/src/components/NumberPad/NumberPad.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import { LongPressOptions, useLongPress } from "@uidotdev/usehooks";

import { typographyVariants } from "../Typography";
import { Delete } from "./Delete";

interface NumberPadProps {
  /**
   * The current value displayed in the number pad
   */
  value?: string;
  /**
   * Whether the number pad is disabled
   */
  disabled?: boolean;
  /**
   * Callback fired when the value changes
   */
  onChange?: (value: string) => void;
  /**
   * Callback fired on long press of the delete button
   */
  onLongDeletePress?: () => void;
  /**
   * Options for the long press
   * @type LongPressOptions
   * @property { number } threshold - The time in milliseconds before the long press is triggered
   * @property { (e: Event) => void } onStart - Callback fired when the long press starts
   * @property { (e: Event) => void } onFinish - Callback fired when the long press finishes
   * @property { (e: Event) => void } onCancel - Callback fired when the long press is cancelled
   * @default { threshold: 1500 }
   */
  longPressOptions?: LongPressOptions;
}

const buttons = [
  { value: "1" },
  { value: "2" },
  { value: "3" },
  { value: "4" },
  { value: "5" },
  { value: "6" },
  { value: "7" },
  { value: "8" },
  { value: "9" },
  { value: "." },
  { value: "0" },
  { value: "del", label: <Delete className="size-6" /> },
];

export const NumberPad = ({
  value = "",
  onChange,
  disabled = false,
  onLongDeletePress = () => {},
  longPressOptions = {
    threshold: 1500,
  },
}: NumberPadProps) => {
  // Validate that value is a valid number or empty string
  if (value !== "" && isNaN(Number(value))) {
    console.error("NumberPad value must be a valid number or empty string");
  }

  const handleButtonClick = (buttonValue: string) => {
    if (!onChange || disabled) return;

    if (buttonValue === "del") {
      onChange(value.slice(0, -1));
    } else if (buttonValue === "." && value.includes(".")) {
      // Don't add another decimal point if one already exists
      return;
    } else {
      const newValue = value + buttonValue;
      // Allow trailing decimal point for partial number input
      if (buttonValue === "." || !isNaN(Number(newValue))) {
        onChange(newValue);
      }
    }
  };

  const longPressAttributes = useLongPress(onLongDeletePress, longPressOptions);

  return (
    <div className="grid grid-cols-3 grid-rows-4 gap-1 w-full">
      {buttons.map((button) => (
        <button
          type="button"
          key={button.value}
          onClick={() => handleButtonClick(button.value)}
          disabled={disabled}
          className={cn(
            typographyVariants({ variant: "heading", level: 3 }),
            "h-12 min-w-28 flex items-center justify-center select-none group",
            "disabled:text-gray-300 disabled:cursor-not-allowed disabled:active:bg-transparent",
          )}
          {...(button.value === "del" ? longPressAttributes : {})}
        >
          <span className="duration-200 transition-colors size-12 flex items-center justify-center rounded-full group-active:bg-gray-50">
            {button.label || button.value}
          </span>
        </button>
      ))}
    </div>
  );
};

export default NumberPad;



================================================
File: packages/mini-apps-ui-kit-react/src/components/OTPField/index.ts
================================================
export * from "./OTPField";



================================================
File: packages/mini-apps-ui-kit-react/src/components/OTPField/OTPField.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import type { OTPInputProps } from "input-otp";
import {
  OTPInput,
  REGEXP_ONLY_CHARS,
  REGEXP_ONLY_DIGITS,
  REGEXP_ONLY_DIGITS_AND_CHARS,
} from "input-otp";
import * as React from "react";

import { inputVariants } from "../Input/Input";
import { typographyVariants } from "../Typography";

const patternDictionary = {
  digits: REGEXP_ONLY_DIGITS,
  chars: REGEXP_ONLY_CHARS,
  digitsAndChars: REGEXP_ONLY_DIGITS_AND_CHARS,
};

const inputModeDictionary = {
  digits: "numeric",
  chars: "text",
  digitsAndChars: "text",
} as const;

type OTPFieldProps = Omit<
  OTPInputProps,
  | "render"
  | "className"
  | "containerClassName"
  | "textAlign"
  | "inputMode"
  | "pushPasswordManagerStrategy"
  | "noScriptCSSFallback"
  | "maxLength"
  | "placeholder"
> & {
  /**
   * The number of input slots/characters in the OTP field.
   * Defaults to 6 if not specified.
   */
  maxLength?: number;

  /**
   * Whether the OTP field is in an error state.
   * When true, displays error styling.
   */
  error?: boolean;

  /**
   * Custom regex pattern to validate the input.
   * If not provided, uses the pattern from the selected mode.
   */
  pattern?: string;

  /**
   * The input mode that determines allowed characters.
   * - digits: Only numbers 0-9
   * - chars: Only letters A-Z
   * - digitsAndChars: Both numbers and letters
   * Defaults to "digits" if not specified.
   */
  mode?: keyof typeof patternDictionary;

  /**
   * The current value of the OTP input.
   * Used for controlled component behavior.
   */
  value?: string;

  /**
   * Callback fired when the input value changes.
   * @param newValue The new input value
   */
  onChange?: (newValue: string) => unknown;

  /**
   * Callback fired when all slots are filled.
   * Called with the complete OTP value.
   */
  onComplete?: (...args: any[]) => unknown;

  /**
   * Function to transform pasted text before inserting.
   * Useful for handling formatted strings, e.g. "123-456" -> "123456"
   * @param pastedText The text being pasted
   * @returns The transformed text to insert
   */
  pasteTransformer?: (pastedText: string) => string;
};

export const OTPField = React.forwardRef<React.ElementRef<typeof OTPInput>, OTPFieldProps>(
  ({ maxLength = 6, error, children, mode = "digits", pattern, ...props }, ref) => {
    return (
      <OTPInput
        ref={ref}
        {...props}
        maxLength={maxLength}
        inputMode={inputModeDictionary[mode]}
        pattern={pattern || patternDictionary[mode]}
        containerClassName="flex items-center gap-2 has-[:disabled]:opacity-50"
        render={({ slots }) => (
          <>
            {slots.map(({ isActive, char }, idx) => (
              <div
                key={idx}
                ref={ref}
                role="textbox"
                className={cn(
                  inputVariants({ error }),
                  typographyVariants({ variant: "body", level: 2 }),
                  "w-12 h-[4.25rem] rounded-lg flex items-center justify-center",
                  (isActive || error) && "z-10 bg-gray-0",
                )}
              >
                {char}
              </div>
            ))}
          </>
        )}
      />
    );
  },
);

export default OTPField;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PasswordField/index.ts
================================================
export * from "./PasswordField";



================================================
File: packages/mini-apps-ui-kit-react/src/components/PasswordField/PasswordField.tsx
================================================
"use client";

import { forwardRef, useState } from "react";

import { Eye } from "../Icons/Eye";
import { EyeClosed } from "../Icons/EyeClosed";
import { Input, InputProps } from "../Input";

export interface PasswordFieldProps
  extends Omit<InputProps, "startAdornment" | "startAdornmentWidth"> {
  /**
   * If true, the input will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the input will display in a valid state with success styling
   */
  isValid?: boolean;
}

export const PasswordField = forwardRef<HTMLInputElement, PasswordFieldProps>(
  (
    {
      isValid,
      disabled,
      type = "password",
      autoComplete = "current-password",
      spellCheck = "false",
      inputMode = "text",
      autoCapitalize = "off",
      autoCorrect = "off",
      endAdornment: endAdornmentProp,
      endAdornmentWidth: endAdornmentWidthProp,
      ...props
    },
    ref,
  ) => {
    const [showPassword, setShowPassword] = useState(false);
    return (
      <Input
        {...props}
        ref={ref}
        isValid={isValid}
        disabled={disabled}
        endAdornmentWidth={2.4}
        endAdornment={
          <button type="button" onClick={() => setShowPassword(!showPassword)}>
            {showPassword ? <EyeClosed /> : <Eye />}
          </button>
        }
        type={showPassword ? "text" : "password"}
        autoComplete={autoComplete}
        spellCheck={spellCheck}
        inputMode={inputMode}
        autoCapitalize={autoCapitalize}
        autoCorrect={autoCorrect}
      />
    );
  },
);

PasswordField.displayName = "PasswordField";

export default PasswordField;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PasteButton/index.ts
================================================
export { default } from "./PasteButton";



================================================
File: packages/mini-apps-ui-kit-react/src/components/PasteButton/PasteButton.tsx
================================================
import type { ButtonHTMLAttributes } from "react";
import * as React from "react";

import { cn } from "../../lib/utils";
import { MagicWand } from "../Icons/MagicWand";
import { Typography } from "../Typography";

interface PasteButtonProps extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, "onPaste"> {
  /**
   * Reference to an input element that will receive the pasted text
   */
  inputRef: React.ForwardedRef<HTMLInputElement>;
  /**
   * Text to display on the paste button
   * @default "Paste"
   */
  label?: string;
  /**
   * Optional callback function that will be called after a successful paste
   */
  onPaste?: (value: string) => void;
}

export const PASTE_BUTTON_WIDTH = 5;

const PasteButton = React.forwardRef<HTMLButtonElement, PasteButtonProps>(
  ({ children, inputRef, label = "Paste", className, onPaste, ...props }, ref) => {
    const handlePaste = async () => {
      try {
        if (inputRef && "current" in inputRef && inputRef.current) {
          const text = await navigator.clipboard.readText();
          inputRef.current.value = text;
          onPaste?.(text);
        }
      } catch (error) {
        console.error("Failed to read clipboard:", error);
      }
    };

    return (
      <button
        type="button"
        ref={ref}
        className={cn(
          className,
          "flex h-full w-full items-center justify-center px-4 gap-1 text-gray-900 transition duration-300 bg-transparent disabled:cursor-not-allowed",
        )}
        onClick={handlePaste}
        {...props}
      >
        <Typography variant="subtitle" level={3}>
          {label}
        </Typography>
        <MagicWand />
      </button>
    );
  },
);

PasteButton.displayName = "PasteButton";

export default PasteButton;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/constants.ts
================================================
import { countries } from "countries-list";
import { CountryData, defaultCountries, parseCountry } from "react-international-phone";

import { countryCodes as uiKitSupportedCountryCodes } from "../Flag/constants";

const supportedCountryCodesSet = new Set(
  uiKitSupportedCountryCodes.map((c) => c.toLowerCase()),
);

const supportedDefaultCountryCodes = defaultCountries.filter((defaultCountry) =>
  supportedCountryCodesSet.has(parseCountry(defaultCountry).iso2),
);

const defaultCountryCodesSet = new Set(defaultCountries.map((c) => parseCountry(c).iso2));

const unsupportedCountryCodes = Array.from(supportedCountryCodesSet).filter(
  (iso2) => !defaultCountryCodesSet.has(iso2),
);

const customCountries: CountryData[] = Object.entries(countries)
  .filter(([iso2]) => unsupportedCountryCodes.includes(iso2.toLowerCase()))
  .map(([iso2, country]): CountryData => {
    const { name, phone } = country;
    const dialCode = phone[0].toString();
    const iso2Lower = iso2.toLowerCase();

    return [name, iso2Lower, dialCode]; // CountryData is [name, iso2, dialCode, format, priority, areaCodes]
  });

export const extendedCountryDataList: CountryData[] = [
  ...supportedDefaultCountryCodes,
  ...customCountries,
].sort((a, b) => a[0].localeCompare(b[0])); // sorted by country name

export const DIAL_CODE_PREFIX = "+";

export const startAdornmentWidthByDialCodeLength: Record<string, number> = {
  "1": 5.5,
  "2": 6,
  "3": 6.5,
  "4": 7,
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/CountryListItem.tsx
================================================
import { CountryCode, LazyFlag } from "../Flag";
import { Typography } from "../Typography";

interface CountryListItemProps {
  countryCode: CountryCode;
  countryName: string;
  isSelected?: boolean;
  onClick?: (value: CountryCode) => void;
}

// TODO: Implement selected state

const CountryListItem = ({
  countryCode,
  countryName,
  onClick,
  isSelected,
}: CountryListItemProps) => {
  return (
    <button
      type="button"
      data-country={countryCode}
      className="h-[3.75rem] flex items-center w-full gap-2 cursor-pointer"
      onClick={() => onClick?.(countryCode)}
      {...(isSelected && { "data-selected": true })}
    >
      <LazyFlag countryCode={countryCode} size={32} />
      <Typography
        variant="subtitle"
        level={2}
        className="mx-2 overflow-hidden text-ellipsis whitespace-nowrap"
      >
        {countryName}
      </Typography>
    </button>
  );
};

CountryListItem.displayName = "CountryListItem";

export default CountryListItem;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/CountrySelectorButton.tsx
================================================
import { cn } from "@/lib/utils";
import { cva } from "class-variance-authority";
import { forwardRef } from "react";

import { CountryCode, Flag } from "../Flag";
import { ArrowDown } from "../Icons/ArrowDown";
import { Typography } from "../Typography";

const triggerVariants = cva(
  "flex items-center bg-transparent focus:outline-none cursor-pointer text-gray-900",
  {
    variants: {
      disabled: {
        true: "cursor-not-allowed opacity-20",
        false: "",
      },
    },
    defaultVariants: {
      disabled: false,
    },
  },
);

interface CountrySelectorButtonProps extends React.HTMLAttributes<HTMLDivElement> {
  disabled?: boolean;
  value: CountryCode;
  label: string;
}

const CountrySelectorButton = forwardRef<HTMLDivElement, CountrySelectorButtonProps>(
  ({ disabled, className, value, label, ...props }, ref) => {
    return (
      <div
        ref={ref}
        {...props}
        className={cn(triggerVariants({ disabled, className }))}
        data-testid="country-selector-button"
      >
        <div className="mr-2">
          <Flag countryCode={value} size={24} />
        </div>
        <Typography variant="subtitle" level={3} className="mr-2">
          {label}
        </Typography>
        <ArrowDown />
      </div>
    );
  },
);

CountrySelectorButton.displayName = "CountrySelectorButton";

export default CountrySelectorButton;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/GroupedCountryList.tsx
================================================
import { DrawerClose } from "../Drawer";
import { CountryCode } from "../Flag";
import { Magnifier } from "../Icons/Magnifier";
import { Typography } from "../Typography";
import CountryListItem from "./CountryListItem";

interface GroupedCountries {
  [key: string]: {
    countryCode: CountryCode;
    name: string;
  }[];
}

interface GroupedCountryListProps {
  groupedCountries: GroupedCountries;
  value: CountryCode;
  onSelect: (countryCode: CountryCode) => void;
}

export function GroupedCountryList({
  groupedCountries,
  onSelect,
  value,
}: GroupedCountryListProps) {
  if (Object.keys(groupedCountries).length === 0) {
    return (
      <div className="flex flex-col items-center justify-center grow text-gray-400 gap-2 h-full">
        <Magnifier className="size-8" />
        <Typography variant="body" level={3}>
          No search results
        </Typography>
      </div>
    );
  }

  return (
    <>
      {Object.entries(groupedCountries)
        .sort(([a], [b]) => a.localeCompare(b))
        .map(([letter, countries]) => (
          <div key={letter} className="group">
            <Typography variant="subtitle" level={3} className="text-gray-400 mb-2">
              {letter}
            </Typography>
            {countries.map((country) => (
              <DrawerClose key={country.countryCode} asChild>
                <CountryListItem
                  countryCode={country.countryCode}
                  countryName={country.name}
                  onClick={onSelect}
                  isSelected={value === country.countryCode}
                />
              </DrawerClose>
            ))}
            <div className="h-[1px] bg-gray-200 my-4 group-last:hidden" />
          </div>
        ))}
    </>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/index.tsx
================================================
export * from "./PhoneField";
export { getValidatedCountryCode } from "./utils";



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/PhoneField.tsx
================================================
"use client";

import { forwardRef, useImperativeHandle } from "react";
import { usePhoneInput } from "react-international-phone";

import { CountryDrawer } from "../CountryDrawer/CountryDrawer";
import { CountryCode } from "../Flag/Flag";
import { Input, InputProps } from "../Input";
import CountrySelectorButton from "./CountrySelectorButton";
import { DIAL_CODE_PREFIX, startAdornmentWidthByDialCodeLength } from "./constants";
import { getCountryDataListByCodes, getValidatedCountryCode } from "./utils";

export interface PhoneFieldProps
  extends Omit<
    InputProps,
    "onChange" | "startAdornment" | "startAdornmentWidth" | "placeholder"
  > {
  /**
   * Current phone number value.
   */
  value?: string;
  /**
   * Callback triggered when the phone number changes.
   */
  onChange?: (phone: string, countryCode: CountryCode) => void;
  /**
   * List of countries to display in the country selector.
   * If not provided, all countries will be displayed.
   */
  countries?: CountryCode[];
  /**
   * Disable dial code prefill on initialization.
   * Dial code prefill works only when empty phone value have been provided.
   * @default true
   */
  disableDialCodePrefill?: boolean;
  /**
   * If true, the input will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the input will display in a valid state with success styling
   */
  isValid?: boolean;
  /**
   * The label text to display
   */
  label?: string;
  /**
   * When true, prevents the user from interacting with phone field.
   * @default false
   */
  disabled?: boolean;
  /**
   * Default ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')
   * @default "US"
   */
  defaultCountryCode?: CountryCode;
  /**
   * Element to be rendered at the end (right side) of the input.
   * The component passed to this prop must accept a `style` prop.
   * The component should use currentColor to match the Input's styling.
   */
  endAdornment?: React.ReactNode;
  /**
   * Width of the end adornment in rem
   * @default 1.25
   */
  endAdornmentWidth?: number;
}

export const PhoneField = forwardRef<HTMLDivElement, PhoneFieldProps>(
  (
    {
      value,
      onChange,
      countries,
      label = "Phone",
      defaultCountryCode = "US",
      disableDialCodePrefill = true,
      disabled = false,
      error = false,
      isValid,
      endAdornment,
      endAdornmentWidth,
      type = "tel",
      inputMode = "tel",
      autoComplete = "tel",
      autoCapitalize = "off",
      autoCorrect = "off",
      ...props
    },
    ref,
  ) => {
    const { inputValue, country, inputRef, handlePhoneValueChange, setCountry } = usePhoneInput(
      {
        defaultCountry: defaultCountryCode.toLowerCase(),
        disableDialCodePrefill,
        disableDialCodeAndPrefix: true,
        value,
        countries: getCountryDataListByCodes(countries),
        onChange: (data) => {
          onChange?.(
            data.phone,
            getValidatedCountryCode(data.country.iso2, defaultCountryCode),
          );
        },
      },
    );

    const selectedCountryCode = getValidatedCountryCode(country.iso2, defaultCountryCode);
    const currentDialCode = `${DIAL_CODE_PREFIX}${country.dialCode}`;
    const startAdornmentWidth = startAdornmentWidthByDialCodeLength[country.dialCode.length];

    // This allows the parent component to interact with the input element directly
    useImperativeHandle(ref, () => inputRef.current as HTMLDivElement);

    const handleCountrySelect = (selectedCountry: string) => {
      setCountry(selectedCountry.toLowerCase());
    };

    const handleDrawerAnimationEnd = (open: boolean) => {
      if (!open) {
        // This allow to schedule focus on the input element during the next repaint cycle
        requestAnimationFrame(() => {
          inputRef.current?.focus();
        });
      }
    };

    return (
      <Input
        {...props}
        ref={inputRef}
        type={type}
        inputMode={inputMode}
        autoComplete={autoComplete}
        autoCapitalize={autoCapitalize}
        autoCorrect={autoCorrect}
        value={inputValue}
        onChange={handlePhoneValueChange}
        label={label}
        disabled={disabled}
        error={error}
        isValid={isValid}
        endAdornment={endAdornment}
        endAdornmentWidth={endAdornmentWidth}
        startAdornmentWidth={startAdornmentWidth}
        showStartDivider
        startAdornment={
          <CountryDrawer
            value={selectedCountryCode}
            defaultValue={defaultCountryCode}
            countries={countries}
            onAnimationEnd={handleDrawerAnimationEnd}
            onChange={handleCountrySelect}
            disabled={disabled}
          >
            <CountrySelectorButton value={selectedCountryCode} label={currentDialCode} />
          </CountryDrawer>
        }
      />
    );
  },
);

PhoneField.displayName = "PhoneField";

export default PhoneField;



================================================
File: packages/mini-apps-ui-kit-react/src/components/PhoneField/utils.ts
================================================
import { CountryData, parseCountry } from "react-international-phone";

import { CountryCode } from "../Flag";
import { isSupportedCountryCode } from "../Flag/utils";
import { DIAL_CODE_PREFIX, extendedCountryDataList } from "./constants";

export const getValidatedCountryCode = (
  code: string,
  defaultCountryCode: CountryCode,
): CountryCode => {
  const upperCaseCode = code.toUpperCase() as CountryCode;

  return isSupportedCountryCode(upperCaseCode) ? upperCaseCode : defaultCountryCode;
};

export const getCountryDataListByCodes = (
  countryCodes: CountryCode[] | undefined,
): CountryData[] => {
  if (!countryCodes?.length) {
    return extendedCountryDataList;
  }

  const countryCodeSet = new Set(countryCodes);

  return extendedCountryDataList.filter((country) => {
    const countryCode = parseCountry(country).iso2.toUpperCase();

    return countryCodeSet.has(countryCode as CountryCode);
  });
};

export const filterCountries = (countries: CountryData[], searchText: string) => {
  if (!searchText) {
    return countries;
  }

  return countries.filter((country) => {
    const parsedCountry = parseCountry(country);
    const countryName = parsedCountry.name.toLowerCase();
    const dialCode = `${DIAL_CODE_PREFIX}${parsedCountry.dialCode.toLowerCase()}`;
    const searchLower = searchText.toLowerCase();

    return countryName.includes(searchLower) || dialCode.includes(searchLower);
  });
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Pill/index.ts
================================================
export * from "./Pill";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Pill/Pill.tsx
================================================
"use client";

import { Slot } from "@radix-ui/react-slot";
import { type VariantProps, cva } from "class-variance-authority";
import { ButtonHTMLAttributes, forwardRef } from "react";

import { cn } from "../../lib/utils";
import { typographyVariants } from "../Typography";

const pillVariants = cva(
  "inline-flex h-9 items-center rounded-full px-4 transition-colors duration-200",
  {
    variants: {
      checked: {
        true: "bg-gray-100",
        false: "bg-transparent",
      },
    },
    defaultVariants: {
      checked: false,
    },
  },
);

export interface PillProps
  extends Omit<ButtonHTMLAttributes<HTMLButtonElement>, "className" | "style">,
    VariantProps<typeof pillVariants> {
  /**
   * Whether the pill is checked
   * @default false
   */
  checked?: boolean;
  /**
   * Whether the pill is rendered as a child component
   * @default false
   */
  asChild?: boolean;
}

export const Pill = forwardRef<HTMLButtonElement, PillProps>(
  ({ checked, children, asChild, ...props }, ref) => {
    const Comp = asChild ? Slot : "button";
    return (
      <Comp
        ref={ref}
        className={cn(
          pillVariants({ checked }),
          typographyVariants({ variant: "label", level: 2 }),
        )}
        {...props}
      >
        {children}
      </Comp>
    );
  },
);

Pill.displayName = "Pill";

export default Pill;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Progress/index.ts
================================================
export * from "./Progress";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Progress/Progress.tsx
================================================
import { cn } from "@/lib/utils";
import * as RadixProgress from "@radix-ui/react-progress";

interface ProgressProps {
  /** Value between 0 and 100 representing the progress percentage */
  value: number;
  /** Whether to use the child element as the progress indicator */
  asChild?: boolean;
  /** Maximum value of the progress bar */
  max?: number;
  /** A function to get the accessible label text representing the current value in a human-readable format. If not provided, the value label will be read as the numeric value as a percentage of the max value. */
  getValueLabel?: (value: number) => string;
  /** The class name of the progress bar. To customize the background color of the progress bar, use background utility classes. To customize the indicator color, use text color utility classes. */
  className?: string;
}

export const Progress = ({ value, asChild, max, getValueLabel, className }: ProgressProps) => {
  return (
    <RadixProgress.Root
      className={cn(
        "relative h-1.5 w-full overflow-hidden rounded-full bg-gray-100",
        className,
      )}
      style={{
        // Fix overflow clipping in Safari
        // https://gist.github.com/domske/b66047671c780a238b51c51ffde8d3a0
        transform: "translateZ(0)",
      }}
      value={value}
      max={max}
      asChild={asChild}
      getValueLabel={getValueLabel}
    >
      <RadixProgress.Indicator
        className="ease-[cubic-bezier(0.65, 0, 0.35, 1)] size-full bg-current transition-transform duration-[660ms]"
        style={{ transform: `translateX(-${100 - Math.min(value, 100)}%)` }}
      />
    </RadixProgress.Root>
  );
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/RadioGroup/index.ts
================================================
export * from "./RadioGroup";
export * from "./RadioGroupItem";



================================================
File: packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroup.tsx
================================================
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { RadioGroupProps as RadixRadioGroupProps } from "@radix-ui/react-radio-group";
import { cva } from "class-variance-authority";
import { forwardRef } from "react";

export interface RadioGroupProps
  extends Omit<RadixRadioGroupProps, "onValueChange" | "onChange" | "className"> {
  /**
   * The value of the radio item that should be checked when initially rendered.
   * Use when you do not need to control the state of the radio items.
   */
  defaultValue?: string;
  /**
   * The controlled value of the radio item to check.
   * Should be used in conjunction with onChange.
   */
  value?: string;
  /**
   * Callback function that is triggered when the value of the radio group changes.
   * @param value - The new value of the selected radio group item.
   */
  onChange?: (value: string) => void;
  /**
   * When true, prevents the user from interacting with radio items.
   * @default false
   */
  disabled?: boolean;
  /**
   * The orientation of the radio group.
   * @default "vertical"
   */
  orientation?: "horizontal" | "vertical";
  /**
   * The name of the group. Submitted with its owning form as part of a name/value pair.
   */
  name?: string;
}

const radioGroupVariants = cva(`flex disabled:cursor-not-allowed disabled:opacity-20`, {
  variants: {
    orientation: {
      vertical: "flex-col",
      horizontal: "flex-row",
    },
  },
  defaultVariants: {
    orientation: "vertical",
  },
});

export const RadioGroup = forwardRef<HTMLDivElement, RadioGroupProps>(
  (
    {
      defaultValue,
      onChange: onValueChange,
      orientation = "vertical",
      disabled = false,
      name,
      ...rest
    },
    ref,
  ) => {
    return (
      <RadioGroupPrimitive.Root
        ref={ref}
        defaultValue={defaultValue}
        onValueChange={onValueChange}
        className={radioGroupVariants({ orientation })}
        disabled={disabled}
        orientation={orientation}
        name={name}
        {...rest}
      />
    );
  },
);

RadioGroup.displayName = "RadioGroup";

export default RadioGroup;



================================================
File: packages/mini-apps-ui-kit-react/src/components/RadioGroup/RadioGroupItem.tsx
================================================
import * as RadioGroupPrimitive from "@radix-ui/react-radio-group";
import { RadioGroupItemProps as RadixRadioGroupItemProps } from "@radix-ui/react-radio-group";
import { forwardRef } from "react";

import { Tick } from "../Icons/Tick";

export interface RadioGroupItemProps extends Omit<RadixRadioGroupItemProps, "className"> {
  /**
   * The value of the radio group item.
   */
  value: string;
  /**
   * When true, prevents the user from interacting with the radio item.
   */
  disabled?: boolean;
}

export const RadioGroupItem = forwardRef<HTMLButtonElement, RadioGroupItemProps>(
  ({ value, disabled, ...rest }, ref) => {
    return (
      <RadioGroupPrimitive.Item
        ref={ref}
        value={value}
        className="size-6 rounded-full border-[0.09375rem] transition-all data-[state=checked]:border-gray-900 data-[state=unchecked]:border-gray-200 data-[state=checked]:bg-gray-900 data-[state=unchecked]:bg-transparent disabled:cursor-not-allowed disabled:opacity-50"
        disabled={disabled}
        {...rest}
      >
        <RadioGroupPrimitive.Indicator className="flex items-center justify-center">
          <Tick className="text-gray-0" />
        </RadioGroupPrimitive.Indicator>
      </RadioGroupPrimitive.Item>
    );
  },
);

RadioGroupItem.displayName = "RadioGroupItem";

export default RadioGroupItem;



================================================
File: packages/mini-apps-ui-kit-react/src/components/SearchField/index.ts
================================================
export * from "./SearchField";



================================================
File: packages/mini-apps-ui-kit-react/src/components/SearchField/SearchField.tsx
================================================
"use client";

import { createChangeEvent } from "@/lib/utils";
import { forwardRef, useImperativeHandle, useRef, useState } from "react";

import ClearButton from "../ClearButton";
import { Magnifier } from "../Icons/Magnifier";
import { Input, InputProps } from "../Input";
import PasteButton, { PASTE_BUTTON_WIDTH } from "../PasteButton/PasteButton";

export interface SearchFieldProps
  extends Omit<InputProps, "startAdornment" | "startAdornmentWidth" | "placeholder"> {
  /**
   * If true, the input will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the input will display in a valid state with success styling
   */
  isValid?: boolean;
  /**
   * If true, displays a paste button as an end adornment
   * @default false
   */
  showPasteButton?: boolean;
  /**
   * Label for the paste button
   * @default "Paste"
   */
  pasteButtonLabel?: string;
  /**
   * Label for the input
   * @default "Search"
   */
  label?: string;
}

export const SearchField = forwardRef<HTMLInputElement, SearchFieldProps>(
  (
    {
      showPasteButton,
      pasteButtonLabel,
      isValid,
      disabled,
      type = "search",
      autoComplete = "off",
      spellCheck = "false",
      endAdornment: endAdornmentProp,
      endAdornmentWidth: endAdornmentWidthProp,
      label = "Search",
      ...props
    },
    forwardedRef,
  ) => {
    const inputRef = useRef<HTMLInputElement>(null);
    const [isFocused, setIsFocused] = useState(false);
    const [isPasted, setIsPasted] = useState(false);
    useImperativeHandle(forwardedRef, () => inputRef.current!);

    let endAdornment = endAdornmentProp;
    let endAdornmentWidth = endAdornmentWidthProp;
    if (showPasteButton && !disabled && !isPasted) {
      endAdornment = (
        <PasteButton
          inputRef={inputRef}
          label={pasteButtonLabel}
          onPaste={() => {
            if (inputRef.current) {
              const event = createChangeEvent(inputRef.current);
              props.onChange?.(event);
              setIsPasted(true);
            }
          }}
        />
      );
      endAdornmentWidth = PASTE_BUTTON_WIDTH;
    } else if (isFocused && !disabled) {
      endAdornment = (
        <ClearButton
          inputRef={inputRef}
          onClear={() => {
            if (inputRef.current) {
              const event = createChangeEvent(inputRef.current);
              props.onChange?.(event);
            }
          }}
        />
      );
      endAdornmentWidth = 2.3;
    }

    return (
      <Input
        {...props}
        ref={inputRef}
        startAdornment={<Magnifier />}
        isValid={isValid}
        disabled={disabled}
        startAdornmentWidth={2.3}
        endAdornmentWidth={endAdornmentWidth}
        endAdornment={endAdornment}
        type={type}
        autoComplete={autoComplete}
        spellCheck={spellCheck}
        onFocus={(e) => {
          setIsFocused(true);
          props.onFocus?.(e);
        }}
        label={label}
        onBlur={(e) => {
          setIsFocused(false);
          props.onBlur?.(e);
        }}
        className="rounded-full h-[3.125rem]"
      />
    );
  },
);

SearchField.displayName = "SearchField";

export default SearchField;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Select/index.tsx
================================================
export * from "./Select";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Select/Select.tsx
================================================
"use client";

import { DROPDOWN_CONTAINER_STYLES } from "@/lib/constants/dropdownStyles";
import * as RadixSelect from "@radix-ui/react-select";
import { forwardRef, useEffect, useState } from "react";

import { cn } from "../../lib/utils";
import { ArrowDown } from "../Icons/ArrowDown";
import { inputVariants } from "../Input";
import { typographyVariants } from "../Typography";

export interface SelectOption {
  /**
   * The value of the option.
   */
  value: string;
  /**
   * The label to display for the option.
   */
  label: string;
}

export interface SelectProps
  extends Omit<RadixSelect.SelectProps, "className" | "onValueChange" | "style"> {
  /**
   * The value of the select item that should be selected by default.
   * Use when you do not need to control the state of the select items.
   */
  defaultValue?: string;
  /**
   * The controlled value of the select.
   * Should be used in conjunction with onChange.
   */
  value?: string;
  /**
   * Callback triggered when the selected value changes.
   */
  onChange?: (value: string) => void;
  /**
   * The options to display in the select dropdown.
   */
  options: SelectOption[];
  /**
   * The placeholder text to display when no value is selected.
   */
  placeholder?: string;
  /**
   * If true, the select will display in an error state with error styling
   * @default false
   */
  error?: boolean;
  /**
   * The open state of the select when it is initially rendered.
   * Use when you do not need to control its open state.
   * @default false
   */
  defaultOpen?: boolean;
  /**
   * The controlled open state of the select. Must be used in conjunction with onOpenChange.
   */
  open?: boolean;
  /**
   * Callback triggered when the open state changes
   */
  onOpenChange?: (open: boolean) => void;
  /**
   * When true, prevents the user from interacting with select.
   * @default false
   */
  disabled?: boolean;
  /**
   * The name of the select. Submitted with its owning form as part of a name/value pair.
   */
  name?: string;
}

export const Select = forwardRef<HTMLButtonElement, SelectProps>(
  (
    {
      options = [],
      placeholder = "Select...",
      value,
      onChange,
      open,
      onOpenChange,
      error = false,
      defaultOpen = false,
      disabled = false,
      name,
      defaultValue,
      ...rest
    },
    ref,
  ) => {
    const [isOpen, setIsOpen] = useState(open ?? defaultOpen);

    const handleOpenChange = (open: boolean) => {
      setIsOpen(open);
      onOpenChange?.(open);
    };

    useEffect(() => {
      if (open !== undefined) {
        setIsOpen(open);
      }
    }, [open]);

    if (!Array.isArray(options)) {
      console.error("`options` must be an array of objects with `value` and `label` keys.");
    }

    return (
      <RadixSelect.Root
        value={value}
        open={isOpen}
        onValueChange={onChange}
        defaultOpen={defaultOpen}
        onOpenChange={handleOpenChange}
        name={name}
        disabled={disabled}
        defaultValue={defaultValue}
        {...rest}
      >
        <RadixSelect.Trigger
          ref={ref}
          className={cn(
            typographyVariants({ variant: "body", level: 3 }),
            inputVariants({ error, isFocused: isOpen }),
            "flex items-center justify-between whitespace-nowrap [&>span:first-of-type]:line-clamp-1",
            "data-[placeholder]:text-gray-500",
            "data-[state=closed]:bg-gray-100 data-[state=closed]:border-gray-100",
          )}
        >
          <RadixSelect.Value placeholder={placeholder} />
          <RadixSelect.Icon>
            <ArrowDown className="text-gray-400 size-6" />
          </RadixSelect.Icon>
        </RadixSelect.Trigger>

        <RadixSelect.Portal>
          <RadixSelect.Content position="popper" className={cn(DROPDOWN_CONTAINER_STYLES)}>
            <RadixSelect.Viewport
              className={cn(
                "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)] p-2",
                options.length === 0 && "hidden",
              )}
            >
              {options.map((option) => (
                <RadixSelect.Item
                  key={`${option.value}/${option.label}`}
                  value={option.value}
                  className={cn(
                    "w-full cursor-pointer select-none rounded-md p-2 font-sans outline-none hover:bg-gray-50",
                    value === option.value && "bg-gray-100",
                    typographyVariants({ variant: "body", level: 2 }),
                  )}
                >
                  <RadixSelect.ItemText>{option.label}</RadixSelect.ItemText>
                </RadixSelect.Item>
              ))}
            </RadixSelect.Viewport>
          </RadixSelect.Content>
        </RadixSelect.Portal>
      </RadixSelect.Root>
    );
  },
);

Select.displayName = "Select";

export default Select;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Spinner/index.ts
================================================
export * from "./Spinner";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Spinner/Spinner.tsx
================================================
import { cn } from "../../lib/utils";

interface SpinnerProps {
  /**
   * Additional CSS classes to apply to the spinner
   */
  className?: string;
}

export const Spinner = ({ className }: SpinnerProps) => {
  return (
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      className={cn("h-6 w-6 animate-spin text-gray-900", className)}
    >
      <circle
        cx="12"
        cy="12"
        r="10.75"
        stroke="currentColor"
        strokeOpacity="0.16"
        strokeWidth="2.5"
      />
      <path
        d="M17.8921 1.54613C16.1312 0.553676 14.1482 0.0220795 12.1271 0.000672984C10.1059 -0.0207335 8.11211 0.468744 6.33065 1.42368L7.50987 3.62356C8.92079 2.86725 10.4999 2.47958 12.1007 2.49653C13.7014 2.51349 15.2719 2.93451 16.6665 3.72054L17.8921 1.54613Z"
        fill="currentColor"
      />
    </svg>
  );
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Switch/index.tsx
================================================
export * from "./Switch";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Switch/Switch.tsx
================================================
"use client";

import * as RadixSwitch from "@radix-ui/react-switch";
import { SwitchProps as RadixSwitchProps } from "@radix-ui/react-switch";
import { forwardRef } from "react";

export interface SwitchProps
  extends Omit<RadixSwitchProps, "onCheckedChange" | "onChange" | "className"> {
  /**
   * The checked state of the switch.
   * @default false
   */
  checked?: boolean;
  /**
   * Callback function that is triggered when the checked state changes.
   */
  onChange?: (checked: boolean) => void;
  /**
   * Disables the switch when set to true.
   * @default false
   */
  disabled?: boolean;
}

export const Switch = forwardRef<HTMLButtonElement, SwitchProps>(
  ({ checked, onChange: onCheckedChange, disabled = false, ...rest }, ref) => {
    return (
      <RadixSwitch.Root
        ref={ref}
        checked={checked}
        onCheckedChange={onCheckedChange}
        disabled={disabled}
        className="relative inline-flex h-6 w-10 items-center rounded-full border-2 transition-all data-[state=checked]:border-gray-900 data-[state=checked]:bg-gray-900 data-[state=unchecked]:border-gray-300 data-[state=unchecked]:bg-gray-300 disabled:cursor-not-allowed disabled:opacity-20"
        {...rest}
      >
        <RadixSwitch.Thumb className="bg-gray-0 block h-5 w-5 transform rounded-full transition-transform data-[state=checked]:translate-x-4 data-[state=unchecked]:translate-x-0" />
      </RadixSwitch.Root>
    );
  },
);

Switch.displayName = "Switch";

export default Switch;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Tabs/index.ts
================================================
export * from "./Tabs";
export * from "./types";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Tabs/Tabs.tsx
================================================
"use client";

import { Slot } from "@radix-ui/react-slot";
import * as ToggleGroup from "@radix-ui/react-toggle-group";
import * as React from "react";

import { cn } from "../../lib/utils";
import { Typography } from "../Typography";
import { TabItemProps, TabsProps } from "./types";

/**
 * A tab navigation component that allows users to switch between different views
 */
const Tabs = React.forwardRef<React.ElementRef<typeof ToggleGroup.Root>, TabsProps>(
  ({ children, ...props }, ref) => {
    return (
      <ToggleGroup.Root
        ref={ref}
        type="single"
        className="grid w-full px-5 items-center auto-cols-fr"
        style={{
          gridTemplateColumns: `repeat(${React.Children.count(children)}, 1fr)`,
        }}
        {...props}
      >
        {children}
      </ToggleGroup.Root>
    );
  },
);
Tabs.displayName = "Tabs";

/**
 * Individual tab item that can be selected
 */
const TabItem = React.forwardRef<React.ElementRef<typeof ToggleGroup.Item>, TabItemProps>(
  ({ icon, label, altIcon, ...props }, ref) => (
    <ToggleGroup.Item
      ref={ref}
      className={cn(
        "w-full flex-1 flex flex-col items-center justify-center gap-1 relative min-w-0 group",
        "focus:outline-none transition-colors duration-200",
        "text-gray-350 hover:text-gray-500 data-[state=on]:text-gray-900",
      )}
      {...props}
    >
      {/* Only show the outline icon when NOT alt */}
      <Slot className={cn("h-[1.625rem] shrink-0", altIcon && "group-data-[state=on]:hidden")}>
        {icon}
      </Slot>
      {/* Only show the solid icon when alt */}
      {altIcon && (
        <Slot className="h-[1.625rem] shrink-0 hidden group-data-[state=on]:block">
          {altIcon}
        </Slot>
      )}
      {label && (
        <Typography
          as="span"
          variant="subtitle"
          className="text-2xs truncate w-full text-center px-1 leading-none"
        >
          {label}
        </Typography>
      )}
    </ToggleGroup.Item>
  ),
);
TabItem.displayName = "TabItem";

export { Tabs, TabItem };



================================================
File: packages/mini-apps-ui-kit-react/src/components/Tabs/types.ts
================================================
import * as ToggleGroup from "@radix-ui/react-toggle-group";
import { ComponentPropsWithoutRef, ReactNode } from "react";

type BaseToggleGroupProps = ComponentPropsWithoutRef<typeof ToggleGroup.Root>;
type BaseToggleGroupItemProps = ComponentPropsWithoutRef<typeof ToggleGroup.Item>;

export interface TabsProps extends Omit<BaseToggleGroupProps, "type" | "size" | "orientation"> {
  /**
   * Whether the toggle group is disabled
   */
  disabled?: boolean;
  /**
   * Whether the toggle group should loop when navigating through items
   */
  loop?: boolean;
  /**
   * The default selected tab value
   */
  defaultValue?: string;
  /**
   * The selected tab value
   */
  value?: string;
  /**
   * Callback when tab selection changes
   */
  onValueChange?: (value: string) => void;
  /**
   * The tab items
   */
  children?: ReactNode;
}

export interface TabItemProps extends Omit<BaseToggleGroupItemProps, "className" | "children"> {
  /**
   * The icon to display
   */
  icon: ReactNode;
  /**
   * The icon to display when the tab item is active
   */
  altIcon?: ReactNode;
  /**
   * The label text
   */
  label?: string;
  /**
   * Whether the tab item is disabled
   */
  disabled?: boolean;
  /**
   * The value of the tab item
   */
  value: string;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/TextArea/index.ts
================================================
export { default } from "./TextArea";



================================================
File: packages/mini-apps-ui-kit-react/src/components/TextArea/TextArea.tsx
================================================
import { type VariantProps, cva } from "class-variance-authority";
import * as React from "react";

import { cn } from "../../lib/utils";
import { inputVariants } from "../Input/Input";
import { typographyVariants } from "../Typography";

export interface TextAreaProps
  extends Omit<
      React.TextareaHTMLAttributes<HTMLTextAreaElement>,
      "className" | "style" | "placeholder"
    >,
    VariantProps<typeof inputVariants> {
  /**
   * If true, the textarea will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the textarea will display in a focused state with focus styling
   * @default false
   */
  isFocused?: boolean;
  /**
   * The label text for the textarea
   */
  label?: string;
  /**
   * Variant of the input
   * @default "default"
   */
  variant?: "default" | "floating-label";
}

const textAreaVariants = cva("min-h-[7.5rem] resize-y", {
  variants: {
    variant: {
      "floating-label": "pt-8",
      default: "pt-4",
    },
  },
});

export const TextArea = React.forwardRef<HTMLTextAreaElement, TextAreaProps>(
  ({ error, isFocused = false, disabled, label, variant = "default", id, ...props }, ref) => {
    return (
      <div className="relative flex w-full items-center group">
        <textarea
          ref={ref}
          id={id}
          placeholder={label}
          disabled={disabled}
          className={cn(
            inputVariants({ error, isFocused, variant }),
            typographyVariants({ variant: "body", level: 3 }),
            textAreaVariants({ variant }),
          )}
          {...props}
        />
        {variant === "floating-label" && (
          <label
            htmlFor={id}
            className={cn(
              typographyVariants({ variant: "body", level: 3 }),
              cn(
                // Initial state
                "peer-placeholder-shown:text-sm",
                "peer-focus:text-xs peer-focus:border-gray-300 peer-focus:bg-gray-0",
                // End state
                "absolute text-gray-500 duration-300 transform text-xs top-0 pt-4 z-10 pl-4 w-full bg-gray-100 rounded-t-[0.625rem] border-t border-x border-gray-100",
              ),
            )}
          >
            {label}
          </label>
        )}
      </div>
    );
  },
);

TextArea.displayName = "TextArea";

export default TextArea;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Toast/index.ts
================================================
export * from "./Toast";
export * from "./Toaster";
export * from "./use-toast";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Toast/Toast.tsx
================================================
"use client";

import { cn } from "@/lib/utils";
import * as ToastPrimitives from "@radix-ui/react-toast";
import * as React from "react";

import { Fail } from "../Icons/Fail";
import { Success } from "../Icons/Success";
import { Typography } from "../Typography";

const ToastProvider = ToastPrimitives.Provider;

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full p-4 right-0 left-0 flex-col",
      className,
    )}
    {...props}
  />
));
ToastViewport.displayName = ToastPrimitives.Viewport.displayName;

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> & {
    variant: "success" | "error";
  }
>(({ className, title, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(
        "group pointer-events-auto relative flex w-full items-center justify-center",
        "transition-all",
        "data-[swipe=cancel]:translate-x-0",
        "data-[swipe=end]:animate-out",
        "data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]",
        "data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)]",
        "data-[swipe=move]:transition-none",
        "data-[state=closed]:animate-out",
        "data-[state=closed]:slide-out-to-top-full",
        "data-[state=closed]:fade-out-50",
        "data-[state=open]:animate-in",
        "data-[state=open]:slide-in-from-top-full",
      )}
      {...props}
    >
      <div className="grid grid-cols-[auto_1fr] items-center gap-2 rounded-full bg-gray-0 h-9 pl-2 pr-3 border border-gray-200 shrink-0 text-gray-900">
        {variant === "success" ? <Success /> : <Fail />}
        <div className="flex flex-1 items-center">
          <Typography variant="subtitle" level={3}>
            {title}
          </Typography>
        </div>
      </div>
    </ToastPrimitives.Root>
  );
});
Toast.displayName = ToastPrimitives.Root.displayName;

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>;

export { type ToastProps, ToastProvider, ToastViewport, Toast };



================================================
File: packages/mini-apps-ui-kit-react/src/components/Toast/Toaster.tsx
================================================
"use client";

import { Toast, ToastProvider, ToastViewport } from "./Toast";
import { useToast } from "./use-toast";

export function Toaster({ duration }: { duration?: number }) {
  const { toasts } = useToast();

  return (
    <ToastProvider duration={duration}>
      {toasts.map(({ id, ...props }) => (
        <Toast key={id} {...props} />
      ))}
      <ToastViewport />
    </ToastProvider>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Toast/use-toast.tsx
================================================
"use client";

import { useEffect, useState } from "react";

import type { ToastProps } from "./Toast";

const TOAST_LIMIT = 1;
const TOAST_REMOVE_DELAY = 1000000;

type ToasterToast = ToastProps & {
  id: string;
};

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const;

let count = 0;

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER;
  return count.toString();
}

type ActionType = typeof actionTypes;

type Action =
  | {
      type: ActionType["ADD_TOAST"];
      toast: ToasterToast;
    }
  | {
      type: ActionType["UPDATE_TOAST"];
      toast: Partial<ToasterToast>;
    }
  | {
      type: ActionType["DISMISS_TOAST"];
      toastId?: ToasterToast["id"];
    }
  | {
      type: ActionType["REMOVE_TOAST"];
      toastId?: ToasterToast["id"];
    };

interface State {
  toasts: ToasterToast[];
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>();

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return;
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId);
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    });
  }, TOAST_REMOVE_DELAY);

  toastTimeouts.set(toastId, timeout);
};

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      };

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t,
        ),
      };

    case "DISMISS_TOAST": {
      const { toastId } = action;

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId);
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id);
        });
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t,
        ),
      };
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        };
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      };
  }
};

const listeners: Array<(state: State) => void> = [];

let memoryState: State = { toasts: [] };

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action);
  listeners.forEach((listener) => {
    listener(memoryState);
  });
}

type Toast = Omit<ToasterToast, "id">;

const toast = ({ ...props }: Toast) => {
  const id = genId();

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    });
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id });

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss();
      },
    },
  });

  return {
    id: id,
    dismiss,
    update,
  };
};

function useToast() {
  const [state, setState] = useState<State>(memoryState);

  useEffect(() => {
    listeners.push(setState);
    return () => {
      const index = listeners.indexOf(setState);
      if (index > -1) {
        listeners.splice(index, 1);
      }
    };
  }, [state]);

  return {
    ...state,
    toast: {
      success: (props: Omit<Toast, "variant">) => toast({ ...props, variant: "success" }),
      error: (props: Omit<Toast, "variant">) => toast({ ...props, variant: "error" }),
    },
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  };
}

export { useToast, toast };



================================================
File: packages/mini-apps-ui-kit-react/src/components/ToggleGroup/index.ts
================================================
export { ToggleGroupRoot, ToggleGroupItem } from "./ToggleGroup";



================================================
File: packages/mini-apps-ui-kit-react/src/components/ToggleGroup/ToggleGroup.tsx
================================================
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import * as React from "react";

import { cn } from "../../lib/utils";
import { typographyVariants } from "../Typography";
import { ToggleGroupItemProps, ToggleGroupRootProps } from "./types";

const ToggleGroupRoot = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Root>,
  ToggleGroupRootProps
>(({ ...props }, ref) => (
  <ToggleGroupPrimitive.Root ref={ref} className={cn("inline-flex gap-5")} {...props} />
));
ToggleGroupRoot.displayName = "ToggleGroup";

const ToggleGroupItem = React.forwardRef<
  React.ElementRef<typeof ToggleGroupPrimitive.Item>,
  ToggleGroupItemProps
>(({ className, children, ...props }, ref) => (
  <ToggleGroupPrimitive.Item
    ref={ref}
    className={cn(
      typographyVariants({ variant: "subtitle", level: 4 }),
      "size-8 rounded-full transition-all text-gray-400 bg-gray-0 outline-none",
      "hover:bg-gray-50",
      "data-[state=on]:bg-gray-100 data-[state=on]:text-gray-900",
      "disabled:pointer-events-none disabled:opacity-50",
      className,
    )}
    {...props}
  >
    {children}
  </ToggleGroupPrimitive.Item>
));
ToggleGroupItem.displayName = "ToggleGroupItem";

export { ToggleGroupRoot, ToggleGroupItem };



================================================
File: packages/mini-apps-ui-kit-react/src/components/ToggleGroup/types.ts
================================================
import * as ToggleGroupPrimitive from "@radix-ui/react-toggle-group";
import * as React from "react";

/**
 * Props for the ToggleGroupItem component
 */
export interface ToggleGroupItemProps
  extends Omit<React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item>, "asChild"> {
  /**
   * Whether this item should be rendered as a child of another component
   * @default false
   */
  asChild?: boolean;

  /**
   * The value of the toggle group item
   */
  value: string;

  /**
   * When true, prevents the user from interacting with the toggle group item
   */
  disabled?: boolean;
}
/**
 * Props for single selection mode
 */
interface SingleToggleGroupProps {
  /**
   * The type of selection that should be used
   */
  type: "single";

  /**
   * The value of the toggle group when initially rendered
   * @default undefined
   */
  defaultValue?: string;

  /**
   * The controlled value of the toggle group
   * @default undefined
   */
  value?: string;

  /**
   * Event handler called when the value changes
   */
  onValueChange?: (value: string) => void;
}

/**
 * Props for multiple selection mode
 */
interface MultipleToggleGroupProps {
  /**
   * The type of selection that should be used
   */
  type: "multiple";

  /**
   * The value of the toggle group when initially rendered
   * @default undefined
   */
  defaultValue?: string[];

  /**
   * The controlled value of the toggle group
   * @default undefined
   */
  value?: string[];

  /**
   * Event handler called when the value changes
   */
  onValueChange?: (value: string[]) => void;
}

/**
 * Props for the ToggleGroupRoot component
 */
export type ToggleGroupRootProps = (SingleToggleGroupProps | MultipleToggleGroupProps) & {
  /**
   * Whether this component should be rendered as a child of another component
   * @default false
   */
  asChild?: boolean;

  /**
   * When true, prevents the user from interacting with the toggle group
   * @default false
   */
  disabled?: boolean;
  /**
   * When true and rovingFocus is true, keyboard navigation will loop from last item to first, and vice versa.
   * @default true
   */
  loop?: boolean;

  /**
   * When false, navigating through the items using arrow keys will be disabled.
   * @default false
   */
  rovingFocus?: boolean;

  /**
   * The reading direction of the toggle group. If omitted, inherits globally from DirectionProvider or assumes LTR (left-to-right) reading mode.
   * @default undefined
   */
  dir?: "ltr" | "rtl";
  /**
   * The children of the toggle group
   */
  children?: React.ReactNode;
};



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/index.ts
================================================
export * from "./Token";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/Token.tsx
================================================
import React from "react";

import * as tokens from "./icons";

/**
 * Props for the Token component
 */
interface TokenProps {
  /** The token symbol to display (BTC, ETH, USDC, or WLD) */
  value: keyof typeof tokens;
  /** Width and height in pixels of the token icon (default: 40) */
  size?: number;
  /** Variant of the token icon (default: "default") */
  variant?: "color" | "monochrome";
  /** Whether the token is disabled */
  disabled?: boolean;
}

export const Token: React.FC<TokenProps> = ({
  value,
  size = 40,
  variant = "color",
  disabled = false,
}) => {
  const Icon = tokens[value];
  return <Icon width={size} height={size} disabled={disabled} variant={variant} />;
};

export default Token;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/btc.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const BTC = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#FF5A00" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M41.9115 24.889H46.707V30.1736C51.5254 30.6529 54.6619 33.1054 54.6619 37.7023C54.6619 40.9261 53.0097 42.941 49.8664 44.1097V44.1903C52.9694 44.7947 55.6693 46.6484 55.6693 50.6782C55.6693 56.012 52.2208 58.3483 46.7071 58.7826L46.7071 64.162H41.9117L41.9117 58.8587H34.6741V30.086H41.9115V24.889ZM44.3456 54.4259H40.074V46.4469H45.0307C48.1336 46.4469 50.3097 47.4947 50.3097 50.3558C50.3097 53.4588 47.9724 54.4259 44.3456 54.4259ZM43.9829 42.1351H40.074V34.4784H44.265C47.4082 34.4784 49.3022 35.2038 49.3022 38.1456C49.3022 41.047 47.4485 42.1351 43.9829 42.1351Z"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default BTC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/dai.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const DAI = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#FFB833" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      d="M44.562 46.547H58.2374C58.529 46.547 58.6666 46.547 58.6877 46.1648C58.7994 44.7736 58.7994 43.3743 58.6877 41.9815C58.6877 41.7111 58.5532 41.5993 58.2601 41.5993H31.0437C30.7068 41.5993 30.6161 41.7111 30.6161 42.0269V46.0304C30.6161 46.547 30.6161 46.547 31.1554 46.547H44.562ZM57.1604 36.9205C57.1993 36.8184 57.1993 36.7067 57.1604 36.6063C56.9321 36.1091 56.6616 35.6345 56.3474 35.1892C55.8745 34.428 55.3174 33.7267 54.6825 33.0967C54.3829 32.7161 54.0363 32.3744 53.6477 32.0845C51.701 30.4277 49.3866 29.2552 46.899 28.6656C45.6439 28.3838 44.3612 28.2494 43.0753 28.2608H30.9967C30.6598 28.2608 30.6145 28.3952 30.6145 28.6883V36.6727C30.6145 37.0095 30.6145 37.1002 31.042 37.1002H56.9985C56.9985 37.1002 57.2236 37.0549 57.269 36.9205H57.1588H57.1604ZM57.1604 51.2259C56.7782 51.1838 56.3928 51.1838 56.0106 51.2259H31.0663C30.7295 51.2259 30.6161 51.2259 30.6161 51.6761V59.4823C30.6161 59.8419 30.6161 59.9326 31.0663 59.9326H42.5829C43.1336 59.9747 43.6842 59.9358 44.2235 59.8208C45.8949 59.701 47.5387 59.3382 49.1064 58.7406C49.6765 58.543 50.2272 58.2855 50.747 57.9762H50.9041C53.6039 56.572 55.7968 54.3662 57.1799 51.6583C57.1799 51.6583 57.337 51.3182 57.1604 51.2291V51.2259ZM26.096 63.9798V63.8454V58.6045V56.8279V51.5417C26.096 51.2486 26.096 51.2048 25.7364 51.2048H20.8551C20.5846 51.2048 20.4729 51.2048 20.4729 50.8453V46.5713H25.6911C25.9826 46.5713 26.096 46.5713 26.096 46.1891V41.9605C26.096 41.69 26.096 41.6236 25.7364 41.6236H20.8551C20.5846 41.6236 20.4729 41.6236 20.4729 41.2641V37.3059C20.4729 37.0581 20.4729 36.9917 20.8324 36.9917H25.6684C26.0053 36.9917 26.096 36.9917 26.096 36.5642V24.4403C26.096 24.0807 26.096 23.99 26.5462 23.99H43.4154C44.6397 24.0386 45.856 24.173 47.0593 24.3949C49.5389 24.8532 51.9212 25.7391 54.0995 27.004C55.5441 27.8543 56.8738 28.881 58.0577 30.0633C58.9484 30.9881 59.7517 31.989 60.4643 33.0546C61.1721 34.1348 61.76 35.2896 62.2215 36.4961C62.2782 36.8103 62.5794 37.0225 62.8936 36.9691H66.9198C67.4364 36.9691 67.4365 36.969 67.4591 37.4646V41.154C67.4591 41.5135 67.3247 41.6042 66.9635 41.6042H63.8589C63.5447 41.6042 63.454 41.6042 63.4767 42.0091C63.5998 43.3792 63.5998 44.7542 63.4767 46.1243C63.4767 46.5065 63.4767 46.5519 63.9058 46.5519H67.4575C67.6146 46.7543 67.4575 46.9568 67.4575 47.1608C67.4802 47.4216 67.4802 47.6856 67.4575 47.9463V50.6688C67.4575 51.051 67.3458 51.1644 67.0073 51.1644H62.756C62.4596 51.1077 62.1713 51.2972 62.1033 51.5919C61.0911 54.2237 59.4715 56.5833 57.3791 58.475C56.6147 59.1633 55.8114 59.8111 54.9724 60.4087C54.072 60.927 53.1958 61.4663 52.2727 61.8938C50.5738 62.6583 48.7923 63.2219 46.9638 63.5798C45.2276 63.8907 43.4672 64.0316 41.7003 64.0073H26.0895V63.9847L26.096 63.9798Z"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default DAI;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/eth.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const ETH = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#3385FF" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M44 51.5001L31 44.0001L44 24.0001L57 44.0001L44 51.5001ZM44 54.5001L31 47.0001L44 65.0001L57 47.0001L44 54.5001Z"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default ETH;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/index.ts
================================================
export { default as BTC } from "./btc";
export { default as ETH } from "./eth";
export { default as DAI } from "./dai";
export { default as USDC } from "./usdc";
export { default as USDT } from "./usdt";
export { default as WLD } from "./wld";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/types.ts
================================================
export type TokenVariant = "color" | "monochrome";

export interface IconProps extends React.SVGProps<SVGSVGElement> {
  /** Variant of the token icon (default: "default") */
  variant?: TokenVariant;
  /** Whether the token is disabled */
  disabled?: boolean;
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/usdc.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const USDC = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#005CFF" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      d="M52.7781 48.6526C52.7781 43.9987 49.9857 42.403 44.4008 41.7383C40.4117 41.2063 39.6138 40.1426 39.6138 38.2808C39.6138 36.419 40.9437 35.2225 43.603 35.2225C45.9965 35.2225 47.3263 36.0204 47.9911 38.0149C48.1242 38.4139 48.5231 38.6797 48.922 38.6797H51.0494C51.5814 38.6797 51.9803 38.2808 51.9803 37.7491V37.616C51.4483 34.6905 49.0548 32.4301 45.9965 32.1643V28.9729C45.9965 28.4409 45.5976 28.042 44.9328 27.9089H42.9382C42.4062 27.9089 42.0073 28.3078 41.8743 28.9729V32.0312C37.8851 32.5632 35.3588 35.2225 35.3588 38.5469C35.3588 42.935 38.0182 44.6635 43.603 45.3285C47.3263 45.9933 48.5231 46.7911 48.5231 48.9188C48.5231 51.0465 46.6613 52.5091 44.135 52.5091C40.6775 52.5091 39.4807 51.0462 39.0818 49.0516C38.9491 48.5199 38.5501 48.2537 38.1512 48.2537H35.8905C35.3588 48.2537 34.9599 48.6526 34.9599 49.1846V49.3177C35.4916 52.6418 37.6192 55.0353 42.0073 55.7004V58.8918C42.0073 59.4234 42.4062 59.8224 43.071 59.9554H45.0656C45.5976 59.9554 45.9965 59.5565 46.1296 58.8918V55.7004C50.1188 55.0353 52.7781 52.2429 52.7781 48.6526Z"
      className={getIconFillClass(props)}
    />
    <path
      d="M37.2184 62.6161C26.8465 58.8931 21.5275 47.3244 25.3839 37.0853C27.3785 31.5005 31.7666 27.2455 37.2184 25.2509C37.7504 24.985 38.0162 24.5861 38.0162 23.921V22.0595C38.0162 21.5275 37.7504 21.1286 37.2184 20.9958C37.0853 20.9958 36.8195 20.9958 36.6864 21.1286C24.0541 25.1178 17.1394 38.5482 21.1286 51.1805C23.5221 58.6269 29.24 64.3448 36.6864 66.7383C37.2184 67.0042 37.7504 66.7383 37.8832 66.2063C38.0162 66.0736 38.0162 65.9405 38.0162 65.6747V63.8128C38.0162 63.4139 37.6173 62.8822 37.2184 62.6161ZM51.3136 21.1286C50.7816 20.8628 50.2496 21.1286 50.1168 21.6606C49.9838 21.7937 49.9838 21.9264 49.9838 22.1926V24.0541C49.9838 24.5861 50.3827 25.1178 50.7816 25.3839C61.1535 29.107 66.4725 40.6756 62.6161 50.9147C60.6215 56.4995 56.2334 60.7546 50.7816 62.7491C50.2496 63.015 49.9838 63.4139 49.9838 64.079V65.9405C49.9838 66.4725 50.2496 66.8714 50.7816 67.0042C50.9147 67.0042 51.1805 67.0042 51.3136 66.8714C63.9459 62.8822 70.8606 49.4518 66.8714 36.8195C64.4779 29.24 58.6269 23.5221 51.3136 21.1286Z"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default USDC;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/usdt.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const USDT = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#28D9A6" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      d="M48.4722 37.3457V31.9535H60.8028V23.7377H27.2262V31.9535H39.5582V37.3414C29.5358 37.8017 22 39.7866 22 42.1644C22 44.5423 29.5395 46.5272 39.5582 46.9904V64.2623H48.4751V46.989C58.4794 46.5272 66 44.5437 66 42.1681C66 39.7924 58.4794 37.8089 48.4751 37.3472M48.4751 45.526V45.5217C48.2235 45.5376 46.931 45.6152 44.0529 45.6152C41.7519 45.6152 40.1331 45.5499 39.5626 45.5202V45.5275C30.7081 45.1353 24.0987 43.5933 24.0987 41.7483C24.0987 39.9033 30.7088 38.3635 39.5626 37.9706V43.9913C40.1426 44.0312 41.8012 44.129 44.0906 44.129C46.8403 44.129 48.2228 44.0145 48.4766 43.9913V37.9706C57.3137 38.3643 63.9078 39.9077 63.9078 41.7461C63.9078 43.5846 57.3108 45.1287 48.4766 45.5224"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default USDT;



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/utils.ts
================================================
import { TokenVariant } from "./types";

export const getBackgroundClass = ({
  disabled,
  variant,
}: {
  disabled?: boolean;
  variant?: TokenVariant;
}) => (disabled ? "fill-gray-350" : variant === "color" ? "fill-current" : "fill-gray-100");

export const getIconFillClass = ({
  disabled,
  variant,
}: {
  disabled?: boolean;
  variant?: TokenVariant;
}) => (disabled || variant === "color" ? "fill-gray-0" : "fill-gray-900");



================================================
File: packages/mini-apps-ui-kit-react/src/components/Token/icons/wld.tsx
================================================
import { IconProps } from "./types";
import { getBackgroundClass, getIconFillClass } from "./utils";

const WLD = (props: IconProps) => (
  <svg
    width="88"
    height="88"
    viewBox="0 0 88 88"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
    style={{ color: "#181818" }}
  >
    <rect width="88" height="88" rx="44" className={getBackgroundClass(props)} />
    <path
      d="M44 63.9998C40.3849 63.9998 37.0423 63.1044 33.9778 61.308C30.9132 59.5171 28.4828 57.0866 26.6919 54.0221C24.8954 50.952 24 47.615 24 43.9998C24 40.3847 24.8954 37.0421 26.6919 33.9776C28.4828 30.9131 30.9132 28.4826 33.9778 26.6917C37.0423 24.8953 40.3849 23.9998 44 23.9998C47.6151 23.9998 50.9577 24.8953 54.0222 26.6917C57.0868 28.4882 59.5172 30.9131 61.3081 33.9776C63.099 37.0421 64 40.3847 64 43.9998C64 47.615 63.1046 50.9576 61.3081 54.0221C59.5172 57.0866 57.0868 59.5171 54.0222 61.308C50.9577 63.0989 47.6151 63.9998 44 63.9998ZM25.6908 46.0799V42.0032H62.3482V46.0799H25.6908ZM44 59.8341C46.8643 59.8341 49.4894 59.1278 51.8754 57.7095C54.2614 56.2913 56.1468 54.378 57.5373 51.9643C58.9277 49.5505 59.6174 46.8975 59.6174 44.0054C59.6174 41.1133 58.9221 38.4604 57.5373 36.0466C56.1468 33.6328 54.2614 31.714 51.8754 30.3013C49.4894 28.8831 46.8643 28.1767 44 28.1767C41.1357 28.1767 38.5106 28.8831 36.1246 30.3013C33.7386 31.7195 31.8532 33.6328 30.4627 36.0466C29.0723 38.4604 28.3826 41.1133 28.3826 44.0054C28.3826 46.8975 29.0779 49.5505 30.4627 51.9643C31.8532 54.378 33.7386 56.2968 36.1246 57.7095C38.5106 59.1278 41.1357 59.8341 44 59.8341ZM33.327 44.3002V43.7774C33.327 41.7251 33.8165 39.8675 34.8009 38.2045C35.7853 36.5416 37.1646 35.2346 38.9444 34.2779C40.7241 33.3213 42.7542 32.8486 45.04 32.8486H58.4438L60.3515 36.8419H45.2125C42.9544 36.8419 41.1413 37.4926 39.7675 38.7941C38.3938 40.0955 37.7041 41.7585 37.7041 43.7829V44.3057C37.7041 46.358 38.3938 48.0321 39.7675 49.3169C41.1413 50.6016 42.9544 51.2468 45.2125 51.2468H60.3515L58.4438 55.2401H45.04C42.7542 55.2401 40.7241 54.7618 38.9444 53.8107C37.1646 52.8541 35.7853 51.5471 34.8009 49.8842C33.8165 48.2212 33.327 46.3636 33.327 44.3113V44.3002Z"
      className={getIconFillClass(props)}
    />
  </svg>
);

export default WLD;



================================================
File: packages/mini-apps-ui-kit-react/src/components/TopBar/index.ts
================================================
export * from "./TopBar";



================================================
File: packages/mini-apps-ui-kit-react/src/components/TopBar/TopBar.tsx
================================================
import { cn } from "@/lib/utils";
import React from "react";

import { Typography } from "../Typography";

interface TopBarProps {
  /** Title displayed in the center */
  title: string;
  /** Element rendered on the left side */
  startAdornment?: React.ReactNode;
  /** Element rendered on the right side */
  endAdornment?: React.ReactNode;
}

export function TopBar({ title, startAdornment, endAdornment }: TopBarProps) {
  const hasStartAdornment = Boolean(startAdornment);
  const hasEndAdornment = Boolean(endAdornment);

  const textAlignment = hasStartAdornment ? "text-center" : "text-left";
  const justifyContent =
    hasStartAdornment || hasEndAdornment ? "justify-between" : "justify-start";

  return (
    <div className={cn("flex items-center px-6 pt-6 pb-2 w-full h-[4.5rem]", justifyContent)}>
      {startAdornment && <div className="shrink-0">{startAdornment}</div>}

      <Typography
        variant={hasStartAdornment ? "subtitle" : "heading"}
        level={hasStartAdornment ? 1 : 3}
        className={cn("flex-1 grow truncate", textAlignment)}
      >
        {title}
      </Typography>

      {endAdornment && <div className="shrink-0">{endAdornment}</div>}

      {!endAdornment && hasStartAdornment && (
        <div className="shrink-0 invisible" aria-hidden="true">
          {startAdornment}
        </div>
      )}
    </div>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/src/components/Typography/index.ts
================================================
export * from "./Typography";



================================================
File: packages/mini-apps-ui-kit-react/src/components/Typography/Typography.tsx
================================================
import { cva } from "class-variance-authority";
import { PropsWithChildren, forwardRef } from "react";

import { cn } from "../../lib/utils";

export interface TypographyProps extends React.HTMLAttributes<HTMLElement> {
  /**
   * The HTML element to render the typography as
   * @default "p"
   */
  as?:
    | "p"
    | "h1"
    | "h2"
    | "h3"
    | "h4"
    | "h5"
    | "h6"
    | "span"
    | "small"
    | "strong"
    | "div"
    | "em";
}

export interface TypographyNumberProps extends TypographyProps {
  variant?: "number";
  level?: 1 | 2 | 3 | 4 | 5;
}

export interface TypographyCommonProps extends TypographyProps {
  variant?: "heading" | "subtitle" | "body";
  level?: 1 | 2 | 3 | 4;
}

export interface TypographyLabelProps extends TypographyProps {
  variant?: "label";
  level?: 1 | 2;
}

export interface TypographyDisplayProps extends TypographyProps {
  variant?: "display";
  level?: 1;
}

export type TypographyComponentProps =
  | TypographyNumberProps
  | TypographyCommonProps
  | TypographyLabelProps
  | TypographyDisplayProps;

export const typographyVariants = cva("", {
  variants: {
    variant: {
      display: "font-sans font-semibold leading-narrow tracking-[-0.02em]",
      heading: "font-sans font-semibold leading-narrow tracking-[-0.01em]",
      subtitle: "font-sans font-medium leading-narrow",
      label: "font-sans font-semibold leading-narrow",
      body: "font-sans font-normal leading-compact",
      number: "font-sans font-semibold",
    },
    level: {
      1: "",
      2: "",
      3: "",
      4: "",
      5: "",
      6: "",
    },
  },
  compoundVariants: [
    // Display
    {
      variant: "display",
      level: 1,
      className: "text-7xl",
    },
    // Heading
    {
      variant: "heading",
      level: 1,
      className: "text-4xl",
    },
    {
      variant: "heading",
      level: 2,
      className: "text-3xl",
    },
    {
      variant: "heading",
      level: 3,
      className: "text-2xl",
    },
    {
      variant: "heading",
      level: 4,
      className: "text-[1.375rem]",
    },
    // Subtitle
    {
      variant: "subtitle",
      level: 1,
      className: "text-lg",
    },
    {
      variant: "subtitle",
      level: 2,
      className: "text-base",
    },
    {
      variant: "subtitle",
      level: 3,
      className: "text-sm",
    },
    {
      variant: "subtitle",
      level: 4,
      className: "text-xs",
    },
    // Label
    {
      variant: "label",
      level: 1,
      className: "text-base",
    },
    {
      variant: "label",
      level: 2,
      className: "text-sm",
    },
    // Body
    {
      variant: "body",
      level: 1,
      className: "text-lg",
    },
    {
      variant: "body",
      level: 2,
      className: "text-base",
    },
    {
      variant: "body",
      level: 3,
      className: "text-sm",
    },
    {
      variant: "body",
      level: 4,
      className: "text-xs",
    },
    // Number
    {
      variant: "number",
      level: 1,
      className: "text-6xl tracking-[-0.01em]",
    },
    {
      variant: "number",
      level: 2,
      className: "text-5xl tracking-[-0.02em]",
    },
    {
      variant: "number",
      level: 3,
      className: "text-3xl tracking-[-0.01em]",
    },
    {
      variant: "number",
      level: 4,
      className: "text-xl tracking-[-0.02em]",
    },
    {
      variant: "number",
      level: 5,
      className: "text-base tracking-[-0.02em]",
    },
    {
      variant: "label",
      level: 1,
      className: "text-[17px]",
    },
    {
      variant: "label",
      level: 2,
      className: "text-[15px]",
    },
  ],
  defaultVariants: {
    variant: "body",
    level: 2,
  },
});

export const Typography = forwardRef<HTMLElement, PropsWithChildren<TypographyComponentProps>>(
  (
    { variant = "body", level = 2, children, as: Component = "p", className, ...props },
    ref,
  ) => {
    return (
      <Component
        className={cn(typographyVariants({ variant, level, className }))}
        ref={ref as never}
        {...props}
      >
        {children}
      </Component>
    );
  },
);

Typography.displayName = "Typography";

export default Typography;



================================================
File: packages/mini-apps-ui-kit-react/src/components/WalletAddressField/index.ts
================================================
export * from "./WalletAddressField";



================================================
File: packages/mini-apps-ui-kit-react/src/components/WalletAddressField/WalletAddressField.tsx
================================================
"use client";

import { createChangeEvent } from "@/lib/utils";
import { forwardRef, useImperativeHandle, useRef, useState } from "react";

import ClearButton from "../ClearButton";
import { Input, InputProps } from "../Input";
import PasteButton, { PASTE_BUTTON_WIDTH } from "../PasteButton/PasteButton";

export interface WalletAddressFieldProps
  extends Omit<
    InputProps,
    "startAdornment" | "startAdornmentWidth" | "endAdornment" | "endAdornmentWidth"
  > {
  /**
   * If true, the input will display in an error state with error styling
   */
  error?: boolean;
  /**
   * If true, the input will display in a valid state with success styling
   */
  isValid?: boolean;
  /**
   * Label for the input
   * @default "Enter wallet address"
   */
  label?: string;
  /**
   * Label for the paste button
   * @default "Paste"
   */
  pasteButtonLabel?: string;
}

export const WalletAddressField = forwardRef<HTMLInputElement, WalletAddressFieldProps>(
  (
    {
      isValid,
      disabled,
      type = "text",
      autoComplete = "off",
      spellCheck = "false",
      label = "Wallet address",
      pasteButtonLabel = "Paste",
      ...props
    },
    forwardedRef,
  ) => {
    const inputRef = useRef<HTMLInputElement>(null);
    const [isPasted, setIsPasted] = useState(false);
    const [value, setValue] = useState("");
    const [isFocused, setIsFocused] = useState(false);
    useImperativeHandle(forwardedRef, () => inputRef.current!);

    let endAdornment;
    let endAdornmentWidth;
    if (!disabled && !isPasted && !value) {
      endAdornment = (
        <PasteButton
          inputRef={inputRef}
          label={pasteButtonLabel}
          onPaste={() => {
            if (inputRef.current) {
              const event = createChangeEvent(inputRef.current);
              props.onChange?.(event);
              setIsPasted(true);
            }
          }}
        />
      );
      endAdornmentWidth = PASTE_BUTTON_WIDTH;
    } else if (isFocused && !disabled) {
      endAdornment = (
        <ClearButton
          inputRef={inputRef}
          onClear={() => {
            if (inputRef.current) {
              const event = createChangeEvent(inputRef.current);
              props.onChange?.(event);
              setValue("");
            }
          }}
        />
      );
      endAdornmentWidth = 2.3;
    }

    return (
      <Input
        {...props}
        ref={inputRef}
        isValid={isValid}
        disabled={disabled}
        startAdornmentWidth={2.3}
        endAdornmentWidth={endAdornmentWidth}
        endAdornment={endAdornment}
        type={type}
        autoComplete={autoComplete}
        spellCheck={spellCheck}
        label={label}
        onFocus={(e) => {
          setIsFocused(true);
          props.onFocus?.(e);
        }}
        onBlur={(e) => {
          setIsFocused(false);
          props.onBlur?.(e);
        }}
        onChange={(e) => {
          props.onChange?.(e);
          setValue(e.target.value);
        }}
      />
    );
  },
);

WalletAddressField.displayName = "WalletAddressField";

export default WalletAddressField;



================================================
File: packages/mini-apps-ui-kit-react/src/lib/utils.ts
================================================
import { type ClassValue, clsx } from "clsx";
import { ChangeEvent } from "react";
import { twMerge } from "tailwind-merge";

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs));
}

export const createChangeEvent = (target: HTMLInputElement) => {
  const event = new Event("change", { bubbles: true });
  Object.defineProperty(event, "target", { value: target });
  Object.defineProperty(event, "currentTarget", { value: target });
  return event as unknown as ChangeEvent<HTMLInputElement>;
};



================================================
File: packages/mini-apps-ui-kit-react/src/lib/constants/dropdownStyles.ts
================================================
export const DROPDOWN_CONTAINER_STYLES =
  "relative z-50 mt-1 max-h-[11.75rem] w-full overflow-hidden rounded-[0.625rem] bg-gray-0 border border-gray-300";



================================================
File: packages/mini-apps-ui-kit-react/src/tailwind/index.ts
================================================
import plugin from "tailwindcss/plugin";

export const gray = {
  "--gray-0": "255 255 255",
  "--gray-50": "249 250 251",
  "--gray-100": "243 244 245",
  "--gray-200": "235 236 239",
  "--gray-300": "214 217 221",
  "--gray-350": "177 184 194",
  "--gray-400": "155 163 174",
  "--gray-500": "113 118 128",
  "--gray-700": "60 66 75",
  "--gray-900": "24 24 24",
};

export const success = {
  "--success-100": "230 249 236",
  "--success-200": "204 243 217",
  "--success-300": "153 232 179",
  "--success-400": "102 220 141",
  "--success-500": "51 209 103",
  "--success-600": "0 194 48",
  "--success-700": "0 155 38",
  "--success-800": "0 116 29",
  "--success-900": "0 77 19",
};

export const error = {
  "--error-100": "254 233 231",
  "--error-200": "253 211 207",
  "--error-300": "251 167 159",
  "--error-400": "249 123 111",
  "--error-500": "247 80 63",
  "--error-600": "242 40 13",
  "--error-700": "194 32 10",
  "--error-800": "145 24 8",
  "--error-900": "97 16 5",
};

export const warning = {
  "--warning-100": "255 246 230",
  "--warning-200": "255 237 204",
  "--warning-300": "255 219 153",
  "--warning-400": "255 201 102",
  "--warning-500": "255 184 51",
  "--warning-600": "255 174 0",
  "--warning-700": "204 139 0",
  "--warning-800": "153 104 0",
  "--warning-900": "102 70 0",
};

export const info = {
  "--info-100": "230 240 255",
  "--info-200": "204 224 255",
  "--info-300": "153 194 255",
  "--info-400": "102 163 255",
  "--info-500": "51 133 255",
  "--info-600": "0 92 255",
  "--info-700": "0 74 204",
  "--info-800": "0 55 153",
  "--info-900": "0 36 102",
};

const uiKitTailwindPlugin = plugin(
  function ({ addBase }) {
    addBase({
      ":root": {
        "--font-sans": "TWK Lausanne",
        ...gray,
        ...success,
        ...error,
        ...warning,
        ...info,
      },
    });
  },
  {
    theme: {
      fontFamily: {
        sans: "var(--font-sans)",
      },
      colors: {
        transparent: "transparent",
        current: "currentColor",
        gray: {
          900: "rgb(var(--gray-900) / <alpha-value>)",
          800: "rgb(var(--gray-800) / <alpha-value>)",
          700: "rgb(var(--gray-700) / <alpha-value>)",
          500: "rgb(var(--gray-500) / <alpha-value>)",
          400: "rgb(var(--gray-400) / <alpha-value>)",
          350: "rgb(var(--gray-350) / <alpha-value>)",
          300: "rgb(var(--gray-300) / <alpha-value>)",
          200: "rgb(var(--gray-200) / <alpha-value>)",
          100: "rgb(var(--gray-100) / <alpha-value>)",
          50: "rgb(var(--gray-50) / <alpha-value>)",
          0: "rgb(var(--gray-0) / <alpha-value>)",
        },
        success: {
          900: "rgb(var(--success-900) / <alpha-value>)",
          800: "rgb(var(--success-800) / <alpha-value>)",
          700: "rgb(var(--success-700) / <alpha-value>)",
          600: "rgb(var(--success-600) / <alpha-value>)",
          500: "rgb(var(--success-500) / <alpha-value>)",
          400: "rgb(var(--success-400) / <alpha-value>)",
          300: "rgb(var(--success-300) / <alpha-value>)",
          200: "rgb(var(--success-200) / <alpha-value>)",
          100: "rgb(var(--success-100) / <alpha-value>)",
        },
        error: {
          900: "rgb(var(--error-900) / <alpha-value>)",
          800: "rgb(var(--error-800) / <alpha-value>)",
          700: "rgb(var(--error-700) / <alpha-value>)",
          600: "rgb(var(--error-600) / <alpha-value>)",
          500: "rgb(var(--error-500) / <alpha-value>)",
          400: "rgb(var(--error-400) / <alpha-value>)",
          300: "rgb(var(--error-300) / <alpha-value>)",
          200: "rgb(var(--error-200) / <alpha-value>)",
          100: "rgb(var(--error-100) / <alpha-value>)",
        },
        warning: {
          900: "rgb(var(--warning-900) / <alpha-value>)",
          800: "rgb(var(--warning-800) / <alpha-value>)",
          700: "rgb(var(--warning-700) / <alpha-value>)",
          600: "rgb(var(--warning-600) / <alpha-value>)",
          500: "rgb(var(--warning-500) / <alpha-value>)",
          400: "rgb(var(--warning-400) / <alpha-value>)",
          300: "rgb(var(--warning-300) / <alpha-value>)",
          200: "rgb(var(--warning-200) / <alpha-value>)",
          100: "rgb(var(--warning-100) / <alpha-value>)",
        },
        info: {
          900: "rgb(var(--info-900) / <alpha-value>)",
          800: "rgb(var(--info-800) / <alpha-value>)",
          700: "rgb(var(--info-700) / <alpha-value>)",
          600: "rgb(var(--info-600) / <alpha-value>)",
          500: "rgb(var(--info-500) / <alpha-value>)",
          400: "rgb(var(--info-400) / <alpha-value>)",
          300: "rgb(var(--info-300) / <alpha-value>)",
          200: "rgb(var(--info-200) / <alpha-value>)",
          100: "rgb(var(--info-100) / <alpha-value>)",
        },
      },
      lineHeight: {
        none: "1",
        narrow: "1.2",
        compact: "1.3",
      },
      fontSize: {
        "2xs": "0.6875rem",
        xs: "0.8125rem",
        sm: "0.9375rem",
        base: "1.0625rem",
        lg: "1.1875rem",
        xl: "1.3125rem",
        "2xl": "1.625rem",
        "3xl": "1.875rem",
        "4xl": "2.125rem",
        "5xl": "2.5rem",
        "6xl": "2.75rem",
        "7xl": "3.5rem",
      },
      extend: {
        boxShadow: {
          card: "0 0.625rem 1.875rem 0 #191C201A",
          "regular-large": "0 1rem 2.5rem -0.5rem #585C5F29",
        },
      },
    },
  },
);

export default uiKitTailwindPlugin;



================================================
File: packages/mini-apps-ui-kit-react/stories/AlertDialog.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import {
  AlertDialog,
  AlertDialogClose,
  AlertDialogContent,
  AlertDialogDescription,
  AlertDialogFooter,
  AlertDialogHeader,
  AlertDialogPortal,
  AlertDialogTitle,
  AlertDialogTrigger,
} from "../src/components/AlertDialog/AlertDialog";
import { Button } from "../src/components/Button/Button";
import { CircleSpark } from "./helpers/icons/CircleSpark";

const meta: Meta<typeof AlertDialog> = {
  title: "Components/AlertDialog",
  component: AlertDialog,
  tags: ["autodocs"],
  argTypes: {
    dismissible: {
      control: "boolean",
      description: "Whether the dialog can be dismissed",
      defaultValue: true,
    },
  },
  subcomponents: {
    AlertDialogTrigger,
    AlertDialogContent,
    AlertDialogHeader,
    AlertDialogTitle,
    AlertDialogDescription,
    AlertDialogFooter,
    AlertDialogClose,
    AlertDialogPortal,
  },
  parameters: {
    docs: {
      description: {
        component:
          "AlertDialog is a modal dialog that interrupts the user with important content and expects a response.  This component is built on top of [Vaul](https://vaul.emilkowal.ski/getting-started) and the Dialog component from [Radix UI](https://www.radix-ui.com/primitives/docs/components/dialog).",
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof AlertDialog>;

export const Default: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "The default AlertDialog implementation showing a basic confirmation dialog with a trigger button, title, description, and action buttons.",
      },
    },
  },
  render: () => (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="secondary" size="sm">
          Open Alert Dialog
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Are you sure?</AlertDialogTitle>
        </AlertDialogHeader>
        <AlertDialogDescription>
          This action cannot be undone. This will permanently delete your account and remove
          your data from our servers.
        </AlertDialogDescription>
        <AlertDialogFooter>
          <AlertDialogClose asChild>
            <Button variant="secondary">Cancel</Button>
          </AlertDialogClose>
          <Button>Continue</Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  ),
};

export const WithIcon: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "An example of AlertDialog with custom styling using Tailwind CSS classes to create a danger/delete confirmation dialog with red color scheme.",
      },
    },
  },
  render: () => (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="secondary" size="sm">
          Delete Account
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader icon={<CircleSpark />}>
          <AlertDialogTitle>Delete Account</AlertDialogTitle>
        </AlertDialogHeader>
        <AlertDialogDescription>
          This action cannot be undone. This will permanently delete your account and remove
          your data from our servers.
        </AlertDialogDescription>
        <AlertDialogFooter>
          <AlertDialogClose asChild>
            <Button variant="secondary">Cancel</Button>
          </AlertDialogClose>
          <Button>Delete Account</Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  ),
};

export const WithLongContent: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "Demonstrates how AlertDialog handles long content with a scrollable description area, perfect for terms and conditions or lengthy information.",
      },
    },
  },
  render: () => (
    <AlertDialog>
      <AlertDialogTrigger asChild>
        <Button variant="secondary" size="sm">
          Terms and Conditions
        </Button>
      </AlertDialogTrigger>
      <AlertDialogContent>
        <AlertDialogHeader>
          <AlertDialogTitle>Terms and Conditions</AlertDialogTitle>
        </AlertDialogHeader>
        <AlertDialogDescription>
          <p className="mb-4">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.
          </p>
          <p className="mb-4">
            Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu
            fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa
            qui officia deserunt mollit anim id est laborum.
          </p>
          <p>
            Sed ut perspiciatis unde omnis iste natus error sit voluptatem accusantium
            doloremque laudantium, totam rem aperiam, eaque ipsa quae ab illo inventore
            veritatis et quasi architecto beatae vitae dicta sunt explicabo.
          </p>
        </AlertDialogDescription>
        <AlertDialogFooter>
          <AlertDialogClose asChild>
            <Button variant="secondary">Decline</Button>
          </AlertDialogClose>
          <Button>Accept</Button>
        </AlertDialogFooter>
      </AlertDialogContent>
    </AlertDialog>
  ),
};



================================================
File: packages/mini-apps-ui-kit-react/stories/BottomBar.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import { BottomBar } from "../src/components/BottomBar";
import { Button } from "../src/components/Button";

const meta: Meta<typeof BottomBar> = {
  title: "components/BottomBar",
  component: BottomBar,
  argTypes: {
    direction: {
      control: "radio",
      options: ["horizontal", "vertical"],
    },
    children: {
      table: {
        disable: true,
      },
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "400px", margin: "0 auto" }}>
        <Story />
      </div>
    ),
  ],
  parameters: {
    componentSubtitle: "A container for action buttons at the bottom of a view",
    docs: {
      description: {
        component:
          "Provides a consistent layout for primary and secondary actions, supporting both horizontal and vertical arrangements.",
      },
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Horizontal: Story = {
  args: {
    direction: "horizontal",
    children: (
      <>
        <Button variant="secondary" fullWidth>
          Cancel
        </Button>
        <Button variant="primary" fullWidth>
          Confirm
        </Button>
      </>
    ),
  },
  parameters: {
    docs: {
      description: {
        story:
          "The default layout with buttons arranged side by side. Best for most use cases where screen width allows.",
      },
    },
  },
};

export const Vertical: Story = {
  args: {
    direction: "vertical",
    children: (
      <>
        <Button variant="secondary" fullWidth>
          Cancel
        </Button>
        <Button variant="primary" fullWidth>
          Confirm
        </Button>
      </>
    ),
  },
  parameters: {
    docs: {
      description: {
        story:
          "Stacks buttons vertically. Useful for narrow viewports or when buttons have long labels.",
      },
    },
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/BulletList.stories.tsx
================================================
import BulletPoint from "@/components/BulletPoint/BulletPoint";
import type { Meta, StoryObj } from "@storybook/react";

import { BulletList } from "../src/components/BulletList";
import { BulletListItem } from "../src/components/BulletListItem/BulletListItem";
import { Typography } from "../src/components/Typography";
import { Shield } from "./helpers/icons/Shield";
import { SparkIcon } from "./helpers/icons/SparkIcon";
import { Star } from "./helpers/icons/Star";

const meta: Meta<typeof BulletList> = {
  title: "components/BulletList",
  component: BulletList,
  parameters: {
    docs: {
      description: {
        component: "A component that renders a list of BulletListItems with spark icons.",
      },
    },
  },
  decorators: [
    (Story) => (
      <div className="w-[400px]">
        <Story />
      </div>
    ),
  ],
  subcomponents: { BulletListItem },
};

export default meta;
type Story = StoryObj<typeof BulletList>;

export const Default: Story = {
  render: () => (
    <BulletList>
      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        First bullet point with spark icon
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        Second bullet point with spark icon
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        Third bullet point with spark icon
      </BulletListItem>
    </BulletList>
  ),
};

export const WithCustomItems: Story = {
  render: () => (
    <BulletList>
      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        <Typography variant="body">Regular text item with body styling</Typography>
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        <div className="flex items-center gap-x-2">
          <span>✅</span>
          <strong>Item with custom content</strong>
        </div>
      </BulletListItem>
    </BulletList>
  ),
};

export const WithLongText: Story = {
  render: () => (
    <BulletList>
      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        Lorem ipsum dolor sit amet, consectetur adipisicing elit. Dolore nam soluta, est a nemo
        commodi illum repudiandae praesentium tempora vel fuga quam laudantium ut nostrum rem,
        perspiciatis consequatur quibusdam culpa sunt molestias cupiditate autem necessitatibus
        obcaecati.
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        Doloribus saepe mollitia sapiente amet hic optio modi officia voluptas nam? Alias
        accusantium doloremque harum commodi veritatis quasi excepturi assumenda rerum?
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint>
            <SparkIcon className="text-gray-0" />
          </BulletPoint>
        }
      >
        Veniam ex corporis animi aliquid autem beatae harum libero quos, rem dolore numquam
        deleniti reprehenderit impedit eaque nam. Minima debitis laudantium quos perferendis
        aliquam suscipit ex. Esse earum atque exercitationem et hic ipsum cupiditate, odit illo
        nihil. Voluptatum magni velit sint maiores accusamus.
      </BulletListItem>
    </BulletList>
  ),
};

export const WithCustomBullet: Story = {
  render: () => (
    <BulletList>
      <BulletListItem
        bulletPoint={
          <BulletPoint className="bg-success-500">
            <Shield className="text-gray-0" />
          </BulletPoint>
        }
      >
        First bullet point with shield icon
      </BulletListItem>

      <BulletListItem
        bulletPoint={
          <BulletPoint className="bg-error-500">
            <Star className="text-gray-0" />
          </BulletPoint>
        }
      >
        Second bullet point with star icon
      </BulletListItem>
    </BulletList>
  ),
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Button.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, fn, within } from "@storybook/test";

import { Button } from "../src/components/Button";
import { Star } from "./helpers/icons/Star";

const meta: Meta<typeof Button> = {
  title: "components/Button",
  component: Button,
  parameters: {
    docs: {
      description: {
        component:
          "A versatile button component that supports different variants, sizes, and states with optional icon support.",
      },
    },
  },
  argTypes: {
    variant: {
      control: "radio",
    },
    size: {
      control: "radio",
      options: ["sm", "lg"],
    },
    fullWidth: {
      control: "boolean",
      defaultValue: false,
    },
    disabled: {
      control: "boolean",
      defaultValue: false,
    },
    state: {
      control: "radio",
      options: [undefined, "pending", "success", "failed"],
    },
  },
  args: { onClick: fn() },
  decorators: [
    (Story) => (
      <div style={{ width: "200px", display: "flex", justifyContent: "center" }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Text: Story = {
  args: {
    children: "Button",
    variant: "primary",
    size: "lg",
    fullWidth: false,
  },
  parameters: {
    docs: {
      description: {
        story: "A basic button with text content only.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = await canvas.findByText("Button");

    expect(button).toBeInTheDocument();
  },
};

export const TextWithIcon: Story = {
  args: {
    children: (
      <>
        <Star />
        Button
      </>
    ),
    variant: "primary",
    size: "lg",
    fullWidth: false,
  },
  parameters: {
    docs: {
      description: {
        story:
          "A button that combines text and an icon, demonstrating how to use both elements together.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const button = await canvas.findByText("Button");
    const icon = await canvas.findByTestId("star-icon");

    expect(button).toBeInTheDocument();
    expect(icon).toBeInTheDocument();
  },
};

export const Icon: Story = {
  args: {
    children: <Star />,
    variant: "primary",
    size: "icon",
  },
  parameters: {
    docs: {
      description: {
        story: "A button that displays an icon only.",
      },
    },
  },
  parameters: {
    docs: {
      description: {
        story: "A button that displays an icon only.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const icon = await canvas.findByTestId("star-icon");

    expect(icon).toBeInTheDocument();
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Checkbox.stories.tsx
================================================
import type { Meta, StoryFn, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";
import { useEffect, useState } from "react";

import { Checkbox } from "../src/components/Checkbox";

const meta: Meta<typeof Checkbox> = {
  title: "components/Checkbox",
  component: Checkbox,
  parameters: {
    docs: {
      description: {
        component:
          "A checkbox component that allows users to select one or multiple options. Built on top of [Radix UI's Checkbox](https://www.radix-ui.com/primitives/docs/components/checkbox) primitive for accessibility and customization.",
      },
    },
  },
};

export default meta;

type Story = StoryObj<typeof Checkbox>;

const Template: StoryFn<typeof Checkbox> = (args) => {
  const [isChecked, setIsChecked] = useState(args.checked);

  useEffect(() => {
    // Update the checked state when the args change via Storybook's controls
    setIsChecked(args.checked);
  }, [args.checked]);

  return <Checkbox {...args} checked={isChecked} onChange={setIsChecked} />;
};

export const Checked: Story = Template.bind({});

Checked.args = {
  checked: true,
};

Checked.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const checkbox = await canvas.findByRole("checkbox");
  const tickIcon = checkbox.querySelector("svg");

  expect(checkbox).toBeInTheDocument();
  expect(checkbox).toBeChecked();
  expect(checkbox).toHaveClass("bg-gray-900 border-gray-900");
  expect(checkbox).not.toHaveClass("bg-transparent border-gray-400");
  expect(tickIcon).toBeInTheDocument();
  expect(tickIcon).toHaveClass("w-4 h-4");
};

export const Unchecked: Story = Template.bind({});

Unchecked.args = {
  checked: false,
};

Unchecked.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const checkbox = await canvas.findByRole("checkbox");

  expect(checkbox).toBeInTheDocument();
  expect(checkbox).not.toBeChecked();
  expect(checkbox).toHaveClass("bg-transparent border-gray-400");
  expect(checkbox).not.toHaveClass("bg-gray-900 border-gray-900");
};

export const Disabled: Story = Template.bind({});

Disabled.args = {
  checked: true,
  disabled: true,
};

Disabled.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const checkbox = await canvas.findByRole("checkbox");

  expect(checkbox).toBeInTheDocument();
  expect(checkbox).toBeDisabled();
  expect(checkbox).toHaveClass("opacity-20 cursor-not-allowed");
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Chip.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";

import { Chip, ChipProps } from "../src/components/Chip";
import { iconControl } from "./helpers/icon-control";
import { Shield } from "./helpers/icons/Shield";

const meta: Meta<ChipProps> = {
  title: "components/Chip",
  component: Chip,
  parameters: {
    docs: {
      description: {
        component:
          "A chip component that displays labels with optional icons and different variants including success, warning, error, and important states.",
      },
    },
  },
  argTypes: {
    icon: iconControl,
  },
};

export default meta;

type Story = StoryObj<ChipProps>;

export const Default: Story = {
  args: {
    label: "Default",
  },
  parameters: {
    docs: {
      description: {
        story: "The default chip variant without any icon or special styling.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Default");

    expect(chip).toBeInTheDocument();
  },
};

export const DefaultWithIcon: Story = {
  args: {
    label: "Default with icon",
    icon: <Shield />,
  },
  parameters: {
    docs: {
      description: {
        story: "A chip that includes an icon alongside the label text.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Default with icon");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(icon).toBeInTheDocument();
  },
};

export const SuccessWithIcon: Story = {
  args: {
    label: "Success with icon",
    variant: "success",
    icon: <Shield variant="success" />,
  },
  parameters: {
    docs: {
      description: {
        story: "A success-themed chip with green styling and a matching icon.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Success with icon");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(chip.parentNode).toHaveClass("bg-success-100 text-success-700");
    expect(icon).toBeInTheDocument();
  },
};

export const WarningWithIcon: Story = {
  args: {
    label: "Warning with icon",
    variant: "warning",
    icon: <Shield variant="warning" />,
  },
  parameters: {
    docs: {
      description: {
        story: "A warning-themed chip with amber styling and a matching icon.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Warning with icon");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(chip.parentNode).toHaveClass("bg-warning-100 text-warning-700");
    expect(icon).toBeInTheDocument();
  },
};

export const ErrorWithIcon: Story = {
  args: {
    label: "Error with icon",
    variant: "error",
    icon: <Shield variant="error" />,
  },
  parameters: {
    docs: {
      description: {
        story: "An error-themed chip with red styling and a matching icon.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Error with icon");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(chip.parentNode).toHaveClass("bg-error-100 text-error-700");
    expect(icon).toBeInTheDocument();
  },
};

export const ImportantWithIcon: Story = {
  args: {
    label: "Important with icon",
    variant: "important",
    icon: <Shield variant="important" />,
  },
  parameters: {
    docs: {
      description: {
        story: "An important-themed chip with blue styling and a matching icon.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Important with icon");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(chip.parentNode).toHaveClass("bg-info-100 text-info-700");
    expect(icon).toBeInTheDocument();
  },
};

export const DifferentColors: Story = {
  args: {
    label: "Different colors",
    variant: "important",
    className: "bg-success-100 text-primary-pink",
    icon: <Shield variant="important" color="#9D50FF" />,
  },
  parameters: {
    docs: {
      description: {
        story:
          "A chip demonstrating custom color combinations using className and color props.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const chip = await canvas.findByText("Different colors");
    const icon = await canvas.findByTestId("shield-icon");

    expect(chip).toBeInTheDocument();
    expect(chip.parentNode).toHaveClass("bg-success-100 text-primary-pink");
    expect(icon).toBeInTheDocument();
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/ColorPicker.stories.tsx
================================================
import { ColorPickerGroup, ColorPickerItem } from "@/components/ColorPicker";
import type { Meta, StoryObj } from "@storybook/react";

const meta: Meta<typeof ColorPickerGroup> = {
  title: "components/ColorPicker",
  component: ColorPickerGroup,
  parameters: {
    docs: {
      description: {
        component: "A color picker input component with a visual color preview.",
      },
    },
  },
  argTypes: {
    value: {
      control: "color",
    },
    disabled: {
      control: "boolean",
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  render: (args) => {
    return (
      <ColorPickerGroup {...args}>
        <ColorPickerItem value="#9D50FF" />
        <ColorPickerItem value="#4940E0" />
        <ColorPickerItem value="#00C3B6" />
        <ColorPickerItem value="#FF5096" />
      </ColorPickerGroup>
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/CountryDrawer.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { useState } from "react";

import { Button } from "../src/components/Button";
import { CountryDrawer } from "../src/components/CountryDrawer/CountryDrawer";
import { CountryCode, Flag } from "../src/components/Flag";

const meta = {
  title: "components/CountryDrawer",
  component: CountryDrawer,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: `
A drawer component for selecting countries, typically used in conjunction with phone number input fields.
It provides a searchable list of countries with their flags and names, organized alphabetically.

## Features
- Search functionality for quick country lookup
- Alphabetically grouped country list
- Full-page drawer interface
- Customizable trigger element
- Keyboard navigation support
        `,
      },
    },
  },
  tags: ["autodocs"],
} satisfies Meta<typeof CountryDrawer>;

export default meta;
type Story = StoryObj<typeof CountryDrawer>;

const CountryDrawerDemo = () => {
  const [country, setCountry] = useState<CountryCode>("US");

  return (
    <CountryDrawer value={country} onChange={(code) => setCountry(code as CountryCode)}>
      <Button variant="secondary" size="icon">
        <Flag countryCode={country} />
      </Button>
    </CountryDrawer>
  );
};

export const Default: Story = {
  render: () => <CountryDrawerDemo />,
};

export const Disabled: Story = {
  render: () => (
    <CountryDrawer value="US" onChange={() => {}} disabled>
      <Button variant="secondary" size="icon">
        <Flag countryCode="US" />
      </Button>
    </CountryDrawer>
  ),
};

export const LimitedCountries: Story = {
  render: () => {
    const [country, setCountry] = useState<CountryCode>("US");

    return (
      <CountryDrawer
        value={country}
        countries={["US", "CA", "GB", "FR", "DE"]}
        onChange={(code) => setCountry(code as CountryCode)}
      >
        <Button variant="secondary" size="icon">
          <Flag countryCode={country} />
        </Button>
      </CountryDrawer>
    );
  },
};

export const WithCustomTrigger: Story = {
  render: () => {
    const [country, setCountry] = useState<CountryCode>("US");

    return (
      <CountryDrawer value={country} onChange={(code) => setCountry(code as CountryCode)}>
        <Button variant="primary">Change Country</Button>
      </CountryDrawer>
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Drawer.stories.tsx
================================================
import { Button } from "@/components/Button";
import {
  Drawer,
  DrawerClose,
  DrawerContent,
  DrawerHeader,
  DrawerTitle,
  DrawerTrigger,
} from "@/components/Drawer";
import { Typography } from "@/index";
import { Meta, StoryObj } from "@storybook/react";

const meta: Meta<typeof Drawer> = {
  title: "components/Drawer",
  component: Drawer,
  subcomponents: {
    DrawerTrigger,
    DrawerContent,
    DrawerClose,
    DrawerHeader,
    DrawerTitle,
  },
  parameters: {
    docs: {
      description: {
        component:
          "A drawer component that slides up from the bottom of the screen.  This component is built on top of [Vaul](https://vaul.emilkowal.ski/getting-started) and the Dialog component from [Radix UI](https://www.radix-ui.com/primitives/docs/components/dialog).",
      },
    },
  },
};

export default meta;

export const Default: StoryObj<typeof Drawer> = {
  render: (props) => (
    <Drawer {...props}>
      <DrawerTrigger>
        <Button variant="secondary" size="sm">
          Open
        </Button>
      </DrawerTrigger>
      <DrawerContent className="p-6">
        <DrawerHeader>
          <DrawerTitle>Drawer title</DrawerTitle>
        </DrawerHeader>
        <div className="my-8">
          <Typography className="text-gray-500">
            Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor
            incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud
            exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat. Duis aute
            irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla
            pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia
            deserunt mollit anim id est laborum.
          </Typography>
        </div>
      </DrawerContent>
    </Drawer>
  ),
};

export const FullPage: StoryObj<typeof Drawer> = {
  render: () => (
    <Drawer fullPage>
      <DrawerTrigger>
        <Button variant="secondary" size="sm">
          Open
        </Button>
      </DrawerTrigger>
      <DrawerContent className="p-6">
        <DrawerHeader>
          <DrawerTitle>Drawer with scrollable content</DrawerTitle>
        </DrawerHeader>
        <div className="max-w-md w-full mx-auto flex flex-col items-center flex-grow">
          <div
            className="no-scrollbar w-full flex flex-col flex-grow flex-basis-0 overflow-auto p-2 my-4"
            style={{
              flexBasis: 0,
            }}
          >
            {Array.from({ length: 50 }).map((_, i) => (
              <DrawerClose key={i} className="block w-full">
                <div className="py-2">Option {i + 1}</div>
              </DrawerClose>
            ))}
          </div>
          <DrawerClose>
            <Button>Close</Button>
          </DrawerClose>
        </div>
      </DrawerContent>
    </Drawer>
  ),
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Flag.stories.tsx
================================================
import { countryCodes } from "@/components/Flag/constants";
import type { Meta, StoryObj } from "@storybook/react";

import { Flag, LazyFlag } from "../src/components/Flag";

const meta: Meta<typeof Flag> = {
  title: "Components/Flag",
  component: Flag,
  parameters: {
    docs: {
      description: {
        component: "A component that displays a country or region flag using SVG icons.",
        story: "A component that displays a country or region flag using SVG icons.",
      },
    },
  },
  argTypes: {
    countryCode: {
      control: "select",
      options: countryCodes,
      description: "ISO 3166-1 alpha-2 country code (e.g. 'US', 'GB', 'FR')",
    },
    size: {
      control: "number",
      description:
        "Width and height in pixels for the flag SVG. Defaults to 40px if not specified.",
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    countryCode: "DE",
  },
};

export const Lazy: Story = {
  render: (args: { countryCode: string; size?: number }) => <LazyFlag {...args} />,
  args: {
    countryCode: "DE",
  },
  parameters: {
    docs: {
      description: {
        story: "A lazy-loaded version of the Flag component that loads flag SVGs on demand.",
      },
    },
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Form.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";

import { Form, FormProps } from "../src/components/Form";
import { Input } from "../src/components/Input";

type FormStoryProps = FormProps & {
  message?: string;
};

const meta: Meta<FormStoryProps> = {
  title: "components/Form",
  component: Form.Root,
  parameters: {
    docs: {
      description: {
        component:
          "A form component that provides form validation and submission handling functionality.",
      },
    },
  },
};

export default meta;

type Story = StoryObj<FormStoryProps>;

export const WithValidationMessage: Story = {
  render: ({ message = "This field is required" }) => (
    <Form.Root>
      <Form.Field name="email">
        <Form.Control asChild>
          <Input label="Enter your email" />
        </Form.Control>
        <Form.Message>{message}</Form.Message>
      </Form.Field>
    </Form.Root>
  ),
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const messageElement = await canvas.findByText("This field is required");
    expect(messageElement).toBeInTheDocument();
  },
};

export const WithErrorState: Story = {
  render: ({ message = "Please enter a valid email" }) => (
    <Form.Root>
      <Form.Field name="email" className="has-error">
        <Form.Control asChild>
          <Input error label="Enter your email" />
        </Form.Control>
        <Form.Message error>{message}</Form.Message>
      </Form.Field>
    </Form.Root>
  ),
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const messageElement = await canvas.findByText("Please enter a valid email");
    const input = await canvas.findByPlaceholderText("Enter your email");
    expect(messageElement).toBeInTheDocument();
    expect(input).toHaveClass("border-error-700");
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Input.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";

import { Input, InputProps } from "../src/components/Input";
import { iconControl } from "./helpers/icon-control";
import { CountryCode } from "./helpers/icons/CountryCode";
import { Switch } from "./helpers/icons/Switch";

const meta: Meta<InputProps> = {
  title: "components/Input",
  component: Input,
  parameters: {
    docs: {
      description: {
        component:
          "A customizable text input component that supports adornments and various states.",
      },
    },
  },
  argTypes: {
    startAdornment: iconControl,
    endAdornment: iconControl,
    type: {
      control: false,
    },
    disabled: {
      control: "boolean",
    },
    value: {
      control: "text",
      description: "The input's value. Follows standard HTML input behavior.",
    },
    onChange: {
      control: false,
      description:
        "Callback fired when the input's value changes. Follows standard HTML input behavior.",
    },
  },
  decorators: [
    (Story) => (
      <div className="w-80 flex justify-center">
        <Story />
      </div>
    ),
  ],
};
export default meta;
type Story = StoryObj<InputProps>;

export const Text: Story = {
  args: {
    label: "Name",
    id: "name",
  },
  parameters: {
    docs: {
      description: {
        story: "Basic text input with placeholder text.",
      },
    },
  },
  parameters: {
    docs: {
      description: {
        story: "Basic text input with placeholder text.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const input = await canvas.findByPlaceholderText("Name");

    expect(input).toBeInTheDocument();
  },
};

export const PersistLabel: Story = {
  args: {
    label: "Email",
    id: "email",
    variant: "floating-label",
  },
  parameters: {
    docs: {
      description: {
        story:
          "Input with a persistent floating label that remains visible above the input field.",
      },
    },
  },
  parameters: {
    docs: {
      description: {
        story: "Input in a disabled state where user interaction is prevented.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const input = await canvas.findByPlaceholderText("Email");
    const label = await canvas.findByLabelText("Email");

    expect(input).toBeInTheDocument();
    expect(label).toBeInTheDocument();
  },
};

export const Disabled: Story = {
  args: {
    label: "Name",
    disabled: true,
  },
  parameters: {
    docs: {
      description: {
        story: "Input in a disabled state where user interaction is prevented.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const input = await canvas.findByPlaceholderText("Name");

    expect(input).toBeDisabled();
  },
};

export const StartCustomSizeIcon: Story = {
  args: {
    label: "Number",
    startAdornment: <CountryCode />,
    startAdornmentWidth: 4.5,
  },
  parameters: {
    docs: {
      description: {
        story: "Input with a custom-sized icon at the start position.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const icon = await canvas.findByTestId("country-code-icon");

    expect(icon).toBeInTheDocument();
  },
};

export const EndCustomSizeIcon: Story = {
  args: {
    label: "Number",
    endAdornment: <Switch />,
    endAdornmentWidth: 2,
  },
  parameters: {
    docs: {
      description: {
        story: "Input with a custom-sized icon at the end position.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const icon = await canvas.findByTestId("switch-icon");

    expect(icon).toBeInTheDocument();
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/ListItem.stories.tsx
================================================
import { Chip, Pill, Token } from "@/index";
import type { Meta, StoryObj } from "@storybook/react";

import { ListItem } from "../src/components/ListItem";
import { Star } from "./helpers/icons/Star";

const meta: Meta<typeof ListItem> = {
  title: "Components/ListItem",
  component: ListItem,
  parameters: {
    docs: {
      description: {
        component:
          "A versatile list item component that can be styled with different variants: duotone (alternating backgrounds), outline (bordered), and ghost (minimal). Used for displaying content in list format with consistent height and alignment.",
      },
    },
  },
  argTypes: {
    label: {
      control: "text",
    },
    description: {
      control: "text",
    },
    disabled: {
      control: "boolean",
    },
    startAdornment: {
      control: "select",
      options: ["None", "Token"],
      mapping: {
        None: null,
        Token: <Token value="BTC" />,
      },
    },
    endAdornment: {
      control: "select",
      options: ["None", "Star", "Chip"],
      mapping: {
        None: null,
        Star: <Star />,
        Chip: <Chip label="Action" variant="warning" />,
      },
    },
  },
  decorators: [
    (Story) => (
      <div className="w-[400px]">
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof ListItem>;

export const Basic: Story = {
  args: {
    label: "Basic List Item",
    description: "This is a basic list item with a label and description",
  },
};

export const WithStartAdornment: Story = {
  args: {
    label: "List Item with Icon",
    description: "This list item has a start adornment",
    startAdornment: <Token value="BTC" />,
  },
};

export const WithEndAdornment: Story = {
  args: {
    label: "List Item with Action",
    description: "This list item has an end adornment",
    endAdornment: <Pill checked>Suggested</Pill>,
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Marble.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import marble1 from "../public/images/marbles/marble1.png";
import marble2 from "../public/images/marbles/marble2.png";
import marble3 from "../public/images/marbles/marble3.svg";
import { Marble } from "../src/components/Marble";

const meta: Meta<typeof Marble> = {
  title: "components/Marble",
  component: Marble,
  parameters: {
    docs: {
      description: {
        component:
          "A circular component that displays an image with a border, resembling a marble.",
      },
    },
  },
  decorators: [
    (Story) => (
      <div className="p-4">
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof Marble>;

export const Default: Story = {
  args: {
    src: marble1,
  },
};

export const MultipleMarbles: Story = {
  render: () => (
    <div className="flex gap-x-4">
      <Marble src={marble1} />
      <Marble src={marble2} />
      <Marble src={marble3} />
    </div>
  ),
};

export const DifferentSizes: Story = {
  render: () => (
    <div className="flex gap-x-4 items-center">
      <Marble src={marble1} className="w-32" />
      <Marble src={marble2} className="w-24" />
      <Marble src={marble3} className="w-16" />
    </div>
  ),
};



================================================
File: packages/mini-apps-ui-kit-react/stories/mdx.d.ts
================================================
declare module "*.mdx" {
  const component: any;
  export default component;
}



================================================
File: packages/mini-apps-ui-kit-react/stories/NumberPad.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";
import { useState } from "react";

import { NumberPad } from "../src/components/NumberPad";

const meta: Meta<typeof NumberPad> = {
  title: "components/NumberPad",
  component: NumberPad,
  parameters: {
    docs: {
      description: {
        component:
          "A numeric keypad component that allows users to input numbers and decimals. Includes a delete button and validates input to ensure only valid numbers are entered.",
      },
    },
  },
  decorators: [
    (Story) => (
      <div className="w-[400px] flex justify-center">
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {},
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    // Check that buttons 1-9 are displayed
    for (let i = 0; i <= 9; i++) {
      const button = canvas.getByText(i.toString());
      await expect(button).toBeInTheDocument();
    }

    // Check that the delete button is displayed
    const deleteButton = canvas.getByTestId("delete-icon");
    await expect(deleteButton).toBeInTheDocument();

    // Check that the decimal button is displayed
    const decimalButton = canvas.getByText(".");
    await expect(decimalButton).toBeInTheDocument();
  },
};

export const Controlled: Story = {
  args: {
    value: "",
  },
  render: (args) => {
    const [value, setValue] = useState(args.value);
    return (
      <div className="flex flex-col gap-4 items-center w-[400px]">
        <div className="font-sans font-semibold flex items-center gap-2 h-[4.25rem]">
          <span className="text-xl">$</span>
          <span className="text-[3.5rem]">{value}</span>
        </div>
        <NumberPad value={value} onChange={setValue} />
      </div>
    );
  },
};

export const ClearOnLongDeletePress: Story = {
  args: {
    value: "",
    longPressOptions: {
      threshold: 1500,
    },
  },
  render: (args) => {
    const [value, setValue] = useState(args.value);

    const handleLongDeletePress = () => {
      setValue("");
    };

    return (
      <div className="flex flex-col gap-4 items-center w-[400px]">
        <div className="font-sans font-semibold flex items-center gap-2 h-[4.25rem]">
          <span className="text-xl">$</span>
          <span className="text-[3.5rem]">{value}</span>
        </div>
        <NumberPad
          {...args}
          value={value}
          onChange={setValue}
          onLongDeletePress={handleLongDeletePress}
        />
      </div>
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/OTPField.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";

import { Form } from "../src/components/Form";
import { OTPField } from "../src/components/OTPField";

const meta: Meta<typeof OTPField> = {
  title: "components/OTPField",
  component: OTPField,
  parameters: {
    docs: {
      description: {
        component: "A one-time password input field that allows entering numeric codes.",
      },
    },
  },
  argTypes: {
    maxLength: {
      defaultValue: 6,
      control: {
        type: "number",
        min: 1,
      },
    },
    value: {
      control: false,
    },
    error: {
      control: "boolean",
    },
    mode: {
      control: "select",
      options: ["digits", "chars", "digitsAndChars"],
    },
    onChange: {
      control: false,
    },
    onComplete: {
      control: false,
    },
    pasteTransformer: {
      control: false,
    },
  },
};
export default meta;
type Story = StoryObj<typeof OTPField>;

export const Default: Story = {
  render: (args) => <OTPField {...args} />,
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const slots = await canvas.findAllByRole("textbox");

    expect(slots).toHaveLength(6 + 1);
    slots.forEach((slot) => {
      expect(slot).toBeInTheDocument();
    });
  },
};

export const Error: Story = {
  render: () => (
    <Form.Root>
      <Form.Field name="otp">
        <OTPField error />
        <Form.Message error textAlign="center">
          Error message
        </Form.Message>
      </Form.Field>
    </Form.Root>
  ),
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const slots = await canvas.findAllByRole("textbox");

    expect(slots).toHaveLength(6 + 1);
    slots.slice(0, -1).forEach((slot) => {
      expect(slot).toBeInTheDocument();
      expect(slot).toHaveClass("border-error-700");
    });
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/PasswordField.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import { PasswordField } from "../src/components/PasswordField/PasswordField";

const meta: Meta<typeof PasswordField> = {
  title: "Components/PasswordField",
  component: PasswordField,
  tags: ["autodocs"],
  parameters: {
    docs: {
      description: {
        component: "A password input component with a toggle to show/hide the password.",
      },
    },
  },
  args: {
    label: "Enter password",
  },
  decorators: [
    (Story) => (
      <div className="w-80 flex justify-center">
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof PasswordField>;

export const Default: Story = {
  args: {},
};



================================================
File: packages/mini-apps-ui-kit-react/stories/PhoneField.stories.tsx
================================================
import { Button } from "@/components/Button";
import { countryCodes } from "@/components/Flag/constants";
import { PhoneField, PhoneFieldProps } from "@/components/PhoneField";
import { getCountryDataListByCodes } from "@/components/PhoneField/utils";
import { Meta, StoryObj } from "@storybook/react";
import { expect, fireEvent, userEvent, waitFor, within } from "@storybook/test";
import { useRef, useState } from "react";

import { Form } from "../src/components/Form";
import { iconControl } from "./helpers/icon-control";

const meta: Meta<typeof PhoneField> = {
  title: "components/PhoneField",
  component: PhoneField,
  parameters: {
    docs: {
      description: {
        component:
          "A phone number input field with country code selection and formatting support.",
      },
    },
  },
  argTypes: {
    endAdornment: iconControl,
    disableDialCodePrefill: {
      control: false,
    },
    defaultCountryCode: {
      control: false,
    },
  },
  decorators: [
    (Story) => (
      <div className="w-[300px]" data-testid="select-container">
        <Story />
      </div>
    ),
  ],
};

export default meta;

type Story = StoryObj<PhoneFieldProps>;

export const Default: Story = {
  render: (args) => {
    const [value, setValue] = useState("");

    return <PhoneField {...args} value={value} onChange={setValue} />;
  },
  parameters: {
    docs: {
      description: {
        story: "The default phone field with country code selector as a drawer.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;
    const selectButton = await canvas.getByTestId("country-selector-button");

    expect(input).toBeVisible();
    expect(input).toHaveValue("");
    expect(selectButton).toBeVisible();
    expect(selectButton.childNodes).toHaveLength(3);

    const [selectButtonFlag, selectButtonDialCode, selectButtonArrow] = selectButton.childNodes;

    expect(selectButtonFlag).toBeVisible();
    expect(selectButtonDialCode).toBeVisible();
    expect(selectButtonDialCode).toHaveTextContent("+1");
    expect(selectButtonArrow).toBeVisible();
  },
};

export const AllowedCountryCodesProvided: Story = {
  render: (args) => {
    const [value, setValue] = useState("");

    return <PhoneField {...args} value={value} onChange={setValue} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Phone field with a restricted list of available country codes.",
      },
    },
  },
  args: {
    disableDialCodePrefill: false,
    defaultCountryCode: "DE",
    countries: ["DE", "PL"],
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    let drawer: HTMLDivElement | null = null;
    let searchInput: HTMLInputElement | null = null;
    let countryElements: NodeListOf<Element> | null = null;

    const selectButton = await canvas.getByTestId("country-selector-button");

    fireEvent.click(selectButton);

    await waitFor(async () => {
      drawer = document.body.querySelector("[data-vaul-drawer]");

      countryElements = drawer!.querySelectorAll("[data-country]");

      expect(countryElements).toHaveLength(2);

      searchInput = (await within(drawer!).getByPlaceholderText("Search")) as HTMLInputElement;

      expect(searchInput).toBeVisible();
    });

    userEvent.type(searchInput!, "Germany");

    await waitFor(() => {
      countryElements = drawer!.querySelectorAll("[data-country]");

      expect(countryElements).toHaveLength(1);
    });

    fireEvent.click(countryElements![0]);
  },
};

export const WithErrorLabel: Story = {
  render: (args) => {
    const [value, setValue] = useState("");

    return (
      <Form.Root>
        <Form.Field name="phone" className="has-error">
          <Form.Control asChild>
            <PhoneField {...args} value={value} onChange={setValue} />
          </Form.Control>
          <Form.Message error>Error message</Form.Message>
        </Form.Field>
      </Form.Root>
    );
  },
  parameters: {
    docs: {
      description: {
        story: "Phone field in an error state with error message display.",
      },
    },
  },
  args: {
    error: true,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toHaveClass("border-error-600");

    const errorMessage = await canvas.getByText("Error message");

    expect(errorMessage).toBeVisible();
  },
};

export const ShowValidStateWhenMin12Digits: Story = {
  render: (args) => {
    const [value, setValue] = useState("");
    const isValid = value.length >= 12;

    return <PhoneField {...args} value={value} onChange={setValue} isValid={isValid} />;
  },
  parameters: {
    docs: {
      description: {
        story:
          "Phone field that shows a success state when the input reaches a minimum length of 12 digits.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    let input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toBeVisible();
    expect(input).toHaveValue("");

    userEvent.type(input, "12345678912");

    await waitFor(async () => {
      const tickIcon = await canvas.findByTestId("tick-icon");

      expect(tickIcon).toBeVisible();
      expect(input).toHaveValue("+1 (234) 567-8912");
    });
  },
};

export const CustomDefaultCountry: Story = {
  render: (args) => {
    const [value, setValue] = useState("");
    return <PhoneField {...args} value={value} onChange={setValue} />;
  },
  parameters: {
    docs: {
      description: {
        story:
          "Phone field initialized with a specific country code and the ability to change it.",
      },
    },
  },
  args: {
    defaultCountryCode: "PL",
    disableDialCodePrefill: false,
  },
  play: async ({ canvasElement }) => {
    let drawer: HTMLDivElement | null = null;
    const canvas = within(canvasElement);

    let input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toHaveValue("");

    const selectButton = await canvas.getByTestId("country-selector-button");

    fireEvent.click(selectButton);

    await waitFor(() => {
      drawer = document.body.querySelector("[data-vaul-drawer]");
      expect(drawer).toBeVisible();

      const countries = drawer!.querySelectorAll("[data-country]");
      const countryList = getCountryDataListByCodes(countryCodes);
      expect(countries).toHaveLength(countryList.length);

      fireEvent.click(countries[0]);
    });

    input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toHaveValue("");

    fireEvent.click(selectButton);

    await waitFor(() => {
      drawer = document.body.querySelector("[data-vaul-drawer]");
      expect(drawer).toBeVisible();

      const countryOption = drawer!.querySelector('[data-country="PL"]') as HTMLElement;
      expect(countryOption).toBeVisible();

      fireEvent.click(countryOption);
    });

    input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toHaveValue("");
  },
};

export const FocusOnButtonClick: Story = {
  render: (args) => {
    const phoneFieldRef = useRef<HTMLInputElement | null>(null);
    const [value, setValue] = useState("");

    const handleButtonClick = () => {
      phoneFieldRef.current?.focus();
    };

    return (
      <div className="flex flex-col gap-2">
        <PhoneField ref={phoneFieldRef} {...args} value={value} onChange={setValue} />
        <Button fullWidth onClick={handleButtonClick} size="sm" variant="secondary">
          Focus
        </Button>
      </div>
    );
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const button = await canvas.getByText("Focus");

    expect(button).toBeVisible();

    fireEvent.click(button);

    let input = (await canvas.getByPlaceholderText("Phone")) as HTMLInputElement;

    expect(input).toHaveFocus();
  },
};

export const RandomNumber: Story = {
  render: (args) => {
    const [value, setValue] = useState("");

    const handleButtonClick = () => {
      const minLength = 7;
      const maxLength = 15;
      const length = Math.floor(Math.random() * (maxLength - minLength + 1)) + minLength;
      const randomNumber = Array.from({ length }, () => Math.floor(Math.random() * 10)).join(
        "",
      );
      setValue(randomNumber);
    };

    return (
      <div className="flex flex-col gap-2">
        <PhoneField {...args} value={value} onChange={setValue} />
        <Button fullWidth onClick={handleButtonClick} size="sm" variant="secondary">
          Generate Random Number
        </Button>
      </div>
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Pill.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import { Pill } from "../src/components/Pill";

const meta: Meta<typeof Pill> = {
  title: "components/Pill",
  component: Pill,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "A pill-shaped component that can be used as a toggle or label with a rounded appearance.",
      },
    },
  },
  tags: ["autodocs"],
  argTypes: {
    checked: {
      control: "boolean",
    },
    asChild: {
      control: false,
    },
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    children: "Pill Label",
    checked: false,
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Progress.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, within } from "@storybook/test";

import { Progress } from "../src/components/Progress";

const meta: Meta<typeof Progress> = {
  title: "components/Progress",
  component: Progress,
  parameters: {
    docs: {
      description: {
        component:
          "A progress indicator component that shows the completion status of a task or process. The progress is represented by a horizontal bar that fills from left to right based on the provided value between 0 and 100. The background color of the progress bar can be customized using background utility classes, while the indicator color can be customized using text color utility classes.",
      },
    },
  },
  argTypes: {
    value: {
      control: { type: "range", min: 0, max: 100, step: 1 },
      defaultValue: 0,
    },
  },
  decorators: [
    (Story) => (
      <div style={{ width: "200px", color: "rgb(var(--success-600))" }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    value: 33,
  },
  play: async ({ canvasElement }: { canvasElement: HTMLElement }) => {
    const canvas = within(canvasElement);
    const progress = canvas.getByRole("progressbar");
    expect(progress).toBeInTheDocument();
    expect(progress).toHaveAttribute("data-value", "100");
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/RadioGroup.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { expect, userEvent, within } from "@storybook/test";
import { useState } from "react";

import { RadioGroup, RadioGroupItem } from "../src/components/RadioGroup";
import { cn } from "../src/lib/utils";

const meta: Meta<typeof RadioGroup> = {
  title: "components/RadioGroup",
  component: RadioGroup,
  parameters: {
    docs: {
      description: {
        component:
          "A radio group component that allows users to select a single option from a list of choices.",
      },
    },
  },
  subcomponents: {
    RadioGroupItem: RadioGroupItem as React.ComponentType<unknown>,
  },
  parameters: {
    docs: {
      description: {
        component:
          "A radio group component that extends [Radix's RadioGroup](https://www.radix-ui.com/primitives/docs/components/radio-group) primitive, allowing users to select a single option from a list of options.",
      },
    },
  },
  argTypes: {
    defaultValue: {
      control: false,
    },
    orientation: {
      table: {
        defaultValue: { summary: "vertical" },
      },
    },
    name: {
      control: false,
    },
  },
};

export default meta;

type Story = StoryObj<typeof meta>;

const options = ["option1", "option2", "option3"];

export const Default: Story = {
  render: (args) => (
    <RadioGroup {...args}>
      {options.map((value) => (
        <div
          className={cn("flex items-center", args.orientation === "vertical" ? "pb-2" : "pr-2")}
          key={value}
        >
          <RadioGroupItem value={value} />
        </div>
      ))}
    </RadioGroup>
  ),
  parameters: {
    docs: {
      description: {
        story: "Basic radio group with vertical orientation and unlabeled options.",
      },
    },
  },
  args: {
    defaultValue: "option1",
    orientation: "vertical",
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const radioGroupElement = await canvas.findByRole("radiogroup");

    expect(radioGroupElement).toBeInTheDocument();
    expect(radioGroupElement).toHaveAttribute("aria-orientation", "vertical");

    const radioGroupItems = await canvas.findAllByRole("radio");

    expect(radioGroupItems).toHaveLength(options.length);
    expect(radioGroupItems[0]).toBeChecked();
    expect(radioGroupItems[1]).not.toBeChecked();
    expect(radioGroupItems[2]).not.toBeChecked();
  },
};

export const WithLabels: Story = {
  render: (args) => (
    <RadioGroup {...args}>
      {options.map((value, index) => {
        const id = `WithLabels-${String(index + 1)}`;

        return (
          <div
            className={cn(
              "flex items-center space-x-2",
              args.orientation === "vertical" ? "pb-2" : "pr-2",
            )}
            key={value}
          >
            <RadioGroupItem value={value} id={id} />
            <label htmlFor={id}>{value}</label>
          </div>
        );
      })}
    </RadioGroup>
  ),
  parameters: {
    docs: {
      description: {
        story: "Radio group with labeled options for better accessibility and user experience.",
      },
    },
  },
  args: {
    defaultValue: "option2",
    orientation: "vertical",
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const labelOptions = await Promise.all(options.map((value) => canvas.findByText(value)));

    expect(labelOptions).toHaveLength(options.length);

    const radioGroupItems = await canvas.findAllByRole("radio");

    expect(radioGroupItems[0]).not.toBeChecked();

    await userEvent.click(radioGroupItems[0]);

    expect(radioGroupItems[0]).toBeChecked();

    await userEvent.click(radioGroupItems[1]);

    expect(radioGroupItems[0]).not.toBeChecked();
  },
};

export const DisabledItems: Story = {
  render: (args) => (
    <RadioGroup {...args}>
      {options.map((value, index) => {
        const id = `DisabledItems-${String(index + 1)}`;
        const disabled = value === "option2";
        const label = disabled ? `${value} (Disabled)` : value;

        return (
          <div
            className={cn(
              "flex items-center space-x-2",
              args.orientation === "vertical" ? "pb-2" : "pr-2",
            )}
            key={value}
          >
            <RadioGroupItem value={value} id={id} disabled={disabled} />
            <label htmlFor={id}>{label}</label>
          </div>
        );
      })}
    </RadioGroup>
  ),
  parameters: {
    docs: {
      description: {
        story: "Radio group demonstrating disabled state for specific options.",
      },
    },
  },
  args: {
    defaultValue: "option1",
    orientation: "vertical",
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const radioGroupItems = await canvas.findAllByRole("radio");

    expect(radioGroupItems).toHaveLength(options.length);
    expect(radioGroupItems[0]).not.toBeDisabled();
    expect(radioGroupItems[1]).toBeDisabled();
    expect(radioGroupItems[2]).not.toBeDisabled();
  },
};

export const Controlled: Story = {
  render: (args) => {
    const [selectedValue, setSelectedValue] = useState(args.defaultValue);

    return (
      <RadioGroup {...args} value={selectedValue} onChange={setSelectedValue}>
        {options.map((value) => (
          <div
            className={cn(
              "flex items-center",
              args.orientation === "vertical" ? "pb-2" : "pr-2",
            )}
            key={value}
          >
            <RadioGroupItem value={value} />
          </div>
        ))}
      </RadioGroup>
    );
  },
  parameters: {
    docs: {
      description: {
        story: "Radio group as a controlled component with external state management.",
      },
    },
  },
  args: {
    defaultValue: "option3",
    orientation: "vertical",
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const radioGroupItems = await canvas.findAllByRole("radio");

    expect(radioGroupItems).toHaveLength(options.length);
    expect(radioGroupItems[0]).not.toBeChecked();
    expect(radioGroupItems[1]).not.toBeChecked();
    expect(radioGroupItems[2]).toBeChecked();

    await userEvent.click(radioGroupItems[1]);

    expect(radioGroupItems[0]).not.toBeChecked();
    expect(radioGroupItems[1]).toBeChecked();
    expect(radioGroupItems[2]).not.toBeChecked();
  },
};

export const OneControlledRadioElement: Story = {
  render: (args) => {
    const [option1] = options;
    const [selectedValue, setSelectedValue] = useState("");
    const [_isRadioChecked, setIsRadioChecked] = useState(false);

    const handleOnClick = () => {
      setIsRadioChecked((prevState) => {
        const result = !prevState;
        setSelectedValue(result ? option1 : "");
        return result;
      });
    };

    return (
      <RadioGroup {...args} value={selectedValue} onClick={handleOnClick}>
        <RadioGroupItem value={option1} />
      </RadioGroup>
    );
  },
  parameters: {
    docs: {
      description: {
        story:
          "Radio group with a single controlled radio element that can be toggled on and off.",
      },
    },
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);
    const radioGroupItem = await canvas.findByRole("radio");

    expect(radioGroupItem).not.toBeChecked();

    await userEvent.click(radioGroupItem);

    expect(radioGroupItem).toBeChecked();

    await userEvent.click(radioGroupItem);

    expect(radioGroupItem).not.toBeChecked();
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/SearchField.stories.tsx
================================================
import { SearchField } from "@/components/SearchField";
import type { Meta, StoryObj } from "@storybook/react";
import { fn } from "@storybook/test";

import { Form } from "../src/components/Form";
import { iconControl } from "./helpers/icon-control";

const meta: Meta<typeof SearchField> = {
  title: "components/SearchField",
  component: SearchField,
  parameters: {
    docs: {
      description: {
        component: "A text input component designed for search functionality.",
      },
    },
  },
  argTypes: {
    endAdornment: {
      ...iconControl,
      description: "Optional icon or element to display at the end of the input",
    },
    error: {
      control: "boolean",
      description: "If true, displays the input in an error state with error styling",
    },
    disabled: {
      control: "boolean",
      description: "The input's `disabled` attribute.",
    },
    isValid: {
      control: "boolean",
      description: "If true, displays the input in a valid state with success styling",
    },
    showPasteButton: {
      control: "boolean",
      description: "If true, displays a paste button as an end adornment",
    },
    type: {
      control: "text",
      description: "The input's `type` attribute.",
    },
    autoComplete: {
      control: "text",
      description: "The input's `autocomplete` attribute.",
    },
    spellCheck: {
      control: "text",
      description: "The input's `spellcheck` attribute.",
    },
    pasteButtonLabel: {
      control: "text",
      description: "Label for the paste button.",
    },
    value: {
      control: "text",
      description: "The input's value. Follows standard HTML input behavior.",
    },
    onChange: {
      control: false,
      description:
        "Callback fired when the input's value changes. Follows standard HTML input behavior.",
    },
  },
  decorators: [
    (Story) => (
      <div className="w-80 flex justify-center">
        <Story />
      </div>
    ),
  ],
  args: {
    onChange: fn(),
  },
};

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  render: (args) => <SearchField label="Name, Address or ENS" {...args} />,
};

export const Error: Story = {
  render: (args) => (
    <Form.Root className="w-full">
      <Form.Field name="search">
        <SearchField label="Name, Address or ENS" error {...args} />
        <Form.Message error>This is an error message</Form.Message>
      </Form.Field>
    </Form.Root>
  ),
};

export const WithPasteButton: Story = {
  render: (args) => <SearchField label="Name, Address or ENS" showPasteButton {...args} />,
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Select.stories.tsx
================================================
import { Meta, StoryObj } from "@storybook/react";
import { expect, fireEvent, waitFor, within } from "@storybook/test";
import { useState } from "react";

import { Button } from "../src/components/Button";
import { Form } from "../src/components/Form";
import { Select, SelectOption, SelectProps } from "../src/components/Select";

const meta: Meta<typeof Select> = {
  title: "components/Select",
  component: Select,
  parameters: {
    docs: {
      description: {
        component:
          "A select component that provides a dropdown list of options with support for default values, disabled state, and error handling.",
      },
    },
  },
  argTypes: {
    value: {
      control: false,
    },
  },
  decorators: [
    (Story) => (
      <div className="w-[300px]" data-testid="select-container">
        <Story />
      </div>
    ),
  ],
};

export default meta;

type Story = StoryObj<SelectProps>;

const options: SelectOption[] = [
  { value: "10", label: "$10" },
  { value: "25", label: "$25" },
  { value: "50", label: "$50" },
  { value: "100", label: "$100" },
];

export const Default: Story = {
  render: (args) => {
    const [selectedValue, setSelectedValue] = useState<string | undefined>();

    return <Select {...args} value={selectedValue} onChange={setSelectedValue} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Basic select component with placeholder and dropdown options.",
      },
    },
  },
  args: {
    options,
    placeholder: "Value",
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const placeholder = await canvas.getByText("Value");

    expect(placeholder).toBeInTheDocument();

    const selectInput = await canvas.getByRole("combobox");

    expect(selectInput).toBeInTheDocument();
  },
};

export const WithDefaultValue: Story = {
  render: (args) => {
    return <Select {...args} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Select component initialized with a pre-selected value.",
      },
    },
  },
  args: {
    options,
    defaultValue: options[0].value,
    placeholder: "Value",
  },
  play: async ({ canvasElement }) => {
    let selectViewport: Element | null = null;
    const canvas = within(canvasElement);

    const selectedValue = await canvas.getByText("$10");

    expect(selectedValue).toBeVisible();

    const selectInput = await canvas.getByRole("combobox");

    fireEvent.click(selectInput);

    await waitFor(() => {
      selectViewport = document.body.querySelector("[data-radix-select-viewport]");

      expect(selectViewport).toBeVisible();
    });

    let collectionItems = selectViewport!.querySelectorAll("[data-radix-collection-item]");

    expect(collectionItems.length).toBe(options.length);

    fireEvent.click(collectionItems[1]);

    await waitFor(async () => {
      const selectedValue = await canvas.getByText("$25");

      expect(selectedValue).toBeVisible();
    });

    fireEvent.click(selectInput);

    await waitFor(() => {
      selectViewport = document.body.querySelector("[data-radix-select-viewport]");

      expect(selectViewport).toBeVisible();
    });

    collectionItems = selectViewport!.querySelectorAll("[data-radix-collection-item]");

    fireEvent.click(collectionItems[0]);

    await waitFor(async () => {
      const selectedValue = await canvas.getByText("$10");

      expect(selectedValue).toBeVisible();
    });
  },
};

export const Disabled: Story = {
  render: (args) => {
    return <Select {...args} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Select component in a disabled state where user interaction is prevented.",
      },
    },
  },
  args: {
    options,
    placeholder: "Value",
    disabled: true,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const selectInput = await canvas.getByRole("combobox");

    expect(selectInput).toBeDisabled();
  },
};

export const WithErrorLabel: Story = {
  render: (args) => {
    const [selectedValue, setSelectedValue] = useState<string | undefined>();

    return (
      <Form.Root>
        <Form.Field name="select" className="has-error">
          <Form.Control asChild>
            <Select {...args} value={selectedValue} onChange={setSelectedValue} />
          </Form.Control>
          <Form.Message error>Error message</Form.Message>
        </Form.Field>
      </Form.Root>
    );
  },
  parameters: {
    docs: {
      description: {
        story: "Select component in an error state with error message display.",
      },
    },
  },
  args: {
    options,
    placeholder: "Value",
    error: true,
  },
  play: async ({ canvasElement }) => {
    const canvas = within(canvasElement);

    const selectInput = await canvas.getByRole("combobox");

    expect(selectInput).toHaveClass("shadow-none border-error-700 bg-error-100");

    const errorMessage = await canvas.getByText("Error message");

    expect(errorMessage).toBeVisible();
  },
};

export const WithDefaultOpen: Story = {
  render: (args) => {
    const [selectedValue, setSelectedValue] = useState<string | undefined>();

    return <Select {...args} value={selectedValue} onChange={setSelectedValue} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Select component that opens its dropdown automatically on mount.",
      },
    },
  },
  args: {
    options,
    placeholder: "Value",
    defaultOpen: true,
  },
  play: async () => {
    const selectViewport = document.body.querySelector("[data-radix-select-viewport]");

    expect(selectViewport).toBeVisible();
  },
};

const longListOptions = Array.from({ length: 100 }, (_, idx) => idx + 1)
  .filter((value) => value % 5 === 0 || value % 10 === 0)
  .map((value) => ({
    value: value.toString(),
    label: `$${value}`,
  }));

export const LongList: Story = {
  render: (args) => {
    const [selectedValue, setSelectedValue] = useState<string | undefined>();

    return <Select {...args} value={selectedValue} onChange={setSelectedValue} />;
  },
  parameters: {
    docs: {
      description: {
        story: "Select component with a scrollable list of many options.",
      },
    },
  },
  args: {
    options: longListOptions,
    placeholder: "Scroll through options",
  },
  play: async ({ canvasElement }) => {
    let selectViewport: Element | null = null;
    const canvas = within(canvasElement);

    const selectInput = await canvas.getByRole("combobox");

    fireEvent.click(selectInput);

    await waitFor(() => {
      selectViewport = document.body.querySelector("[data-radix-select-viewport]");

      expect(selectViewport).toBeVisible();
    });

    const collectionItems = selectViewport!.querySelectorAll("[data-radix-collection-item]");

    expect(collectionItems.length).toBe(longListOptions.length);
  },
};

export const ControlledOpen: Story = {
  render: (args) => {
    const [open, setOpen] = useState(false);
    const [selectedValue, setSelectedValue] = useState<string | undefined>();

    const handleButtonClick = () => {
      setOpen((prev) => !prev);
    };

    return (
      <>
        <div className="mb-2">
          <Button fullWidth onClick={handleButtonClick}>
            Toggle Dropdown
          </Button>
        </div>
        <Select
          {...args}
          value={selectedValue}
          onChange={setSelectedValue}
          open={open}
          onOpenChange={setOpen}
        />
      </>
    );
  },
  parameters: {
    docs: {
      description: {
        story: "Select component with externally controlled open state via a toggle button.",
      },
    },
  },
  args: {
    options,
    placeholder: "Controlled open",
  },
  play: async ({ canvasElement }) => {
    let selectViewport: Element | null = null;
    const canvas = within(canvasElement);

    const button = await canvas.getByText("Toggle Dropdown");

    expect(button).toBeVisible();

    fireEvent.click(button);

    await waitFor(() => {
      selectViewport = document.body.querySelector("[data-radix-select-viewport]");

      expect(selectViewport).toBeVisible();
    });

    fireEvent.click(button);

    await waitFor(() => {
      selectViewport = document.body.querySelector("[data-radix-select-viewport]");

      expect(selectViewport).not.toBeInTheDocument();
    });
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Switch.stories.tsx
================================================
import type { Meta, StoryFn, StoryObj } from "@storybook/react";
import { expect, userEvent, within } from "@storybook/test";
import { useEffect, useState } from "react";

import { Switch, SwitchProps } from "../src/components/Switch";

const meta: Meta<SwitchProps> = {
  title: "components/Switch",
  component: Switch,
  parameters: {
    docs: {
      description: {
        component:
          "A toggle switch component that provides a visual way to turn an option on or off.",
      },
    },
  },
};

export default meta;

type Story = StoryObj<SwitchProps>;

const Template: StoryFn<SwitchProps> = (args) => {
  const [isChecked, setIsChecked] = useState(args.checked);

  useEffect(() => {
    // Update the checked state when the args change via Storybook's controls
    setIsChecked(args.checked);
  }, [args.checked]);

  return <Switch {...args} checked={isChecked} onChange={setIsChecked} />;
};

export const Unchecked: Story = Template.bind({});

Unchecked.parameters = {
  docs: {
    description: {
      story: "Switch component in its default unchecked state.",
    },
  },
};

Unchecked.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const switchElement = await canvas.findByRole("switch");

  expect(switchElement).toBeInTheDocument();
  expect(switchElement).not.toBeChecked();
  expect(switchElement).toHaveAttribute("aria-checked", "false");
  expect(switchElement).toHaveClass("border-gray-300 bg-gray-300");
  expect(switchElement).not.toHaveClass("border-gray-900 bg-gray-900");
  expect(switchElement.firstChild).toHaveClass("translate-x-0");
};

export const Checked: Story = Template.bind({});

Checked.parameters = {
  docs: {
    description: {
      story: "Switch component in its checked state.",
    },
  },
};

Checked.args = {
  checked: true,
};

Checked.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const switchElement = await canvas.findByRole("switch");

  expect(switchElement).toBeInTheDocument();
  expect(switchElement).toBeChecked();
  expect(switchElement).toHaveAttribute("aria-checked", "true");
  expect(switchElement).toHaveClass("border-gray-900 bg-gray-900");
  expect(switchElement).not.toHaveClass("border-gray-300 bg-gray-300");
  expect(switchElement.firstChild).toBeInTheDocument();
  expect(switchElement.firstChild).toHaveClass("translate-x-4");
};

export const Disabled: Story = Template.bind({});

Disabled.parameters = {
  docs: {
    description: {
      story: "Switch component in a disabled state where user interaction is prevented.",
    },
  },
};

Disabled.args = {
  disabled: true,
};

Disabled.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const switchElement = await canvas.findByRole("switch");

  expect(switchElement).toBeInTheDocument();
  expect(switchElement).not.toBeChecked();
  expect(switchElement).toHaveClass("opacity-20");

  await userEvent.click(switchElement);

  expect(switchElement).not.toBeChecked();
};

export const ToggleSwitchTesting: Story = Template.bind({});

ToggleSwitchTesting.parameters = {
  docs: {
    description: {
      story: "Interactive demonstration of switch toggling behavior.",
    },
  },
};

ToggleSwitchTesting.play = async ({ canvasElement }) => {
  const canvas = within(canvasElement);
  const switchElement = await canvas.findByRole("switch");

  expect(switchElement).toBeInTheDocument();
  expect(switchElement).not.toBeChecked();

  await userEvent.click(switchElement);

  expect(switchElement).toBeChecked();

  await userEvent.click(switchElement);

  expect(switchElement).not.toBeChecked();
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Tabs.stories.tsx
================================================
import { TabItem, Tabs } from "@/components/Tabs";
import type { Meta, StoryObj } from "@storybook/react";
import React from "react";

import { Apps } from "./helpers/icons/Apps";
import { Contacts } from "./helpers/icons/Contacts";
import { Wallet } from "./helpers/icons/Wallet";
import { WorldID } from "./helpers/icons/WorldID";

const meta: Meta<typeof Tabs> = {
  title: "Components/Tabs",
  component: Tabs,
  parameters: {
    layout: "centered",
  },
  subcomponents: {
    TabItem,
  },
  decorators: [
    (Story) => (
      <div style={{ width: "360px" }}>
        <Story />
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof Tabs>;

export const Default: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "A basic tab navigation component with icons and labels. Each tab can be selected to show different content.",
      },
    },
  },
  render: () => {
    const [value, setValue] = React.useState("wallet");

    return (
      <Tabs value={value} onValueChange={setValue}>
        <TabItem value="apps" icon={<Apps />} label="Apps" />
        <TabItem value="wallet" icon={<Wallet />} label="Wallet" />
        <TabItem value="contacts" icon={<Contacts />} label="Contacts" />
        <TabItem value="worldid" icon={<WorldID />} label="World ID" />
      </Tabs>
    );
  },
};

export const ActiveIcons: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "Tabs with different icons for active and inactive states. The active tab shows a solid version of the icon while inactive tabs show the regular outline version.",
      },
    },
  },
  render: () => {
    const [value, setValue] = React.useState("wallet");

    return (
      <Tabs value={value} onValueChange={setValue}>
        <TabItem value="apps" icon={<Apps />} altIcon={<Apps solid />} label="Apps" />
        <TabItem value="wallet" icon={<Wallet />} altIcon={<Wallet solid />} label="Wallet" />
        <TabItem
          value="contacts"
          icon={<Contacts />}
          altIcon={<Contacts solid />}
          label="Contacts"
        />
      </Tabs>
    );
  },
};

export const WithLinks: Story = {
  parameters: {
    docs: {
      description: {
        story:
          "Tabs can be used as links by wrapping them in an anchor element. This is useful for navigation between pages.",
      },
    },
  },
  render: () => {
    const [value, setValue] = React.useState("wallet");

    return (
      <Tabs value={value} onValueChange={setValue}>
        <a>
          <TabItem value="apps" icon={<Apps />} altIcon={<Apps solid />} label="Apps" />
        </a>
        <a>
          <TabItem value="wallet" icon={<Wallet />} altIcon={<Wallet solid />} label="Wallet" />
        </a>
      </Tabs>
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/TextArea.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import TextArea from "../src/components/TextArea";

const meta = {
  title: "Components/TextArea",
  component: TextArea,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "A multi-line text input component that allows users to enter longer form content.",
      },
    },
  },
  tags: ["autodocs"],
  decorators: [
    (Story) => (
      <div className="w-80 flex justify-center">
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof TextArea>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    label: "Enter your text here...",
    id: "text-area-default",
  },
};

export const FloatingLabel: Story = {
  args: {
    label: "Enter your text here...",
    variant: "floating-label",
    id: "text-area-floating-label",
  },
};

export const WithError: Story = {
  args: {
    label: "Enter your text here...",
    error: true,
    id: "text-area-error",
  },
};

export const Disabled: Story = {
  args: {
    label: "This textarea is disabled",
    disabled: true,
    id: "text-area-disabled",
  },
};

export const Focused: Story = {
  args: {
    label: "This textarea is focused",
    isFocused: true,
    id: "text-area-focused",
  },
};

export const WithValue: Story = {
  args: {
    label: "This textarea has content",
    value: "This is some example text that shows how the textarea looks with content.",
    id: "text-area-with-value",
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Toast.stories.tsx
================================================
import { Button } from "@/index";
import type { Meta, StoryObj } from "@storybook/react";

import { Toaster, useToast } from "../src/components/Toast";

const ToastDemo = ({
  variant,
  title,
  duration,
}: {
  variant: "success" | "error";
  title: string;
  duration: number;
}) => {
  const defaultTitle = variant === "success" ? "Something went good" : "Something went wrong";
  const { toast } = useToast();
  return (
    <div
      style={{
        position: "relative",
        height: 400,
        display: "flex",
        justifyContent: "center",
        alignItems: "center",
      }}
    >
      <Button
        variant="secondary"
        size="sm"
        onClick={() =>
          toast[variant]({
            title: title || defaultTitle,
            duration,
          })
        }
      >
        Show Toast
      </Button>
      <Toaster />
    </div>
  );
};

const meta: Meta<typeof ToastDemo> = {
  title: "Components/Toast",
  component: ToastDemo,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "Toast component for displaying temporary notifications. Supports success and error variants with customizable duration and title content.",
      },
    },
  },
  argTypes: {
    variant: {
      control: "select",
      options: ["success", "error"],
      description: "Type of notification to show",
    },
    duration: {
      control: "number",
      description: "Duration of the toast",
    },
    title: {
      control: "text",
      description: "Message to display in the toast",
    },
  },
};

export default meta;

type Story = StoryObj<typeof ToastDemo>;

export const Default: Story = {
  args: {
    variant: "success",
    title: "",
    duration: 3000,
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/ToggleGroup.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import { ToggleGroupItem, ToggleGroupRoot } from "../src/components/ToggleGroup/ToggleGroup";

const meta = {
  title: "Components/ToggleGroup",
  component: ToggleGroupRoot,
  subcomponents: { ToggleGroupItem },
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "A toggle group component that allows users to select one or multiple options.",
      },
    },
  },
  argTypes: {
    type: {
      control: "radio",
      options: ["single", "multiple"],
      description: "The type of selection that should be used",
    },
    defaultValue: {
      description: "The value of the toggle group when initially rendered",
    },
    value: {
      description: "The controlled value of the toggle group",
    },
    onValueChange: {
      description: "Event handler called when the value changes",
    },
    disabled: {
      control: "boolean",
      description: "When true, prevents the user from interacting with the toggle group",
    },
    loop: {
      control: "boolean",
      description:
        "When true, keyboard navigation will loop from last item to first, and vice versa",
    },
    rovingFocus: {
      control: "boolean",
      description: "When true, the group will get focus on mount",
    },
    dir: {
      control: "radio",
      options: ["ltr", "rtl"],
      description: "The reading direction of the toggle group",
    },
    asChild: {
      control: "boolean",
      description: "Whether this component should be rendered as a child of another component",
    },
  },
  tags: ["autodocs"],
} satisfies Meta<typeof ToggleGroupRoot>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    type: "single",
    defaultValue: "1d",
  },
  parameters: {
    docs: {
      description: {
        story: "A single-select toggle group where only one option can be selected at a time.",
      },
    },
  },
  render: () => (
    <ToggleGroupRoot type="single" defaultValue="1d">
      <ToggleGroupItem value="1d">1D</ToggleGroupItem>
      <ToggleGroupItem value="1w">1W</ToggleGroupItem>
      <ToggleGroupItem value="1m">1M</ToggleGroupItem>
      <ToggleGroupItem value="1y">1Y</ToggleGroupItem>
    </ToggleGroupRoot>
  ),
};

export const Multiple: Story = {
  args: {
    type: "multiple",
    defaultValue: ["1d"],
  },
  parameters: {
    docs: {
      description: {
        story:
          "A multi-select toggle group where multiple options can be selected simultaneously.",
      },
    },
  },
  render: () => (
    <ToggleGroupRoot type="multiple" defaultValue={["1d"]}>
      <ToggleGroupItem value="1d">1D</ToggleGroupItem>
      <ToggleGroupItem value="1w">1W</ToggleGroupItem>
      <ToggleGroupItem value="1m">1M</ToggleGroupItem>
      <ToggleGroupItem value="1y">1Y</ToggleGroupItem>
    </ToggleGroupRoot>
  ),
};

export const Disabled: Story = {
  args: {
    type: "single",
    defaultValue: "1d",
  },
  parameters: {
    docs: {
      description: {
        story: "A toggle group with a disabled option that cannot be selected.",
      },
    },
  },
  render: () => (
    <ToggleGroupRoot type="single" defaultValue="1d">
      <ToggleGroupItem value="1d">1D</ToggleGroupItem>
      <ToggleGroupItem value="1w" disabled>
        1W
      </ToggleGroupItem>
      <ToggleGroupItem value="1m">1M</ToggleGroupItem>
      <ToggleGroupItem value="1y">1Y</ToggleGroupItem>
    </ToggleGroupRoot>
  ),
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Token.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import { Token } from "../src/components/Token";

const meta: Meta<typeof Token> = {
  title: "Components/Token",
  component: Token,
  parameters: {
    docs: {
      description: {
        component: "A component that displays a token symbol.",
      },
    },
  },
  argTypes: {
    value: {
      options: ["BTC", "ETH", "USDC", "WLD", "DAI", "USDT"],
      control: { type: "select" },
    },
  },
};

export default meta;
type Story = StoryObj<typeof Token>;

export const Default: Story = {
  args: {
    value: "BTC",
  },
};

export const Monochrome: Story = {
  args: {
    value: "BTC",
    variant: "monochrome",
  },
};

export const Disabled: Story = {
  args: {
    value: "BTC",
    disabled: true,
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/TopBar.stories.tsx
================================================
import { Button } from "@/index";
import type { Meta, StoryObj } from "@storybook/react";

import { TopBar } from "../src/components/TopBar/TopBar";

const BackButton = () => (
  <Button variant="tertiary" size="icon">
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <path
        d="M15 19L8 12L15 5"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  </Button>
);

const ClockIcon = () => (
  <Button variant="tertiary" size="icon">
    <svg
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
    >
      <circle cx="12" cy="12" r="9" stroke="currentColor" strokeWidth="2" />
      <path d="M12 7V12L15 15" stroke="currentColor" strokeWidth="2" strokeLinecap="round" />
    </svg>
  </Button>
);

const meta: Meta<typeof TopBar> = {
  title: "Components/TopBar",
  component: TopBar,
  tags: ["autodocs"],
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component:
          "A navigation bar component that displays a title with optional start and end elements. Commonly used at the top of pages or modals to show the current section and navigation controls.",
      },
    },
  },
  argTypes: {
    startAdornment: {
      control: "select",
      options: ["None", "Back"],
      mapping: {
        None: null,
        Back: <BackButton />,
      },
    },
    endAdornment: {
      control: "select",
      options: ["None", "Clock"],
      mapping: {
        None: null,
        Clock: <ClockIcon />,
      },
    },
  },
  decorators: [
    (Story) => (
      <div
        style={{
          backgroundColor: "#000",
          width: 400,
          height: 140,
          display: "flex",
          flexDirection: "column",
          justifyContent: "end",
        }}
      >
        <div
          style={{
            backgroundColor: "#fff",
            width: "100%",
            height: 72,
            borderTopLeftRadius: 24,
            borderTopRightRadius: 24,
          }}
        >
          <Story />
        </div>
      </div>
    ),
  ],
};

export default meta;
type Story = StoryObj<typeof TopBar>;

export const Default: Story = {
  args: {
    title: "World",
  },
};

export const WithStartAdornment: Story = {
  args: {
    title: "World",
    startAdornment: <BackButton />,
  },
};

export const OnlyStartAdornment: Story = {
  args: {
    startAdornment: <BackButton />,
  },
};

export const WithEndAdornment: Story = {
  args: {
    title: "World",
    endAdornment: <ClockIcon />,
  },
};

export const WithBothAdornments: Story = {
  args: {
    title: "World",
    startAdornment: <BackButton />,
    endAdornment: <ClockIcon />,
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/Typography.mdx
================================================
import { Meta, Story, Canvas } from '@storybook/blocks';
import { Typography } from '../src/components/Typography';
import * as TypographyStories from './Typography.stories';
import { TypographyListItem } from "./documentation/components/TypographyListItem";

<Meta of={TypographyStories}/>

# Typography

Our typography system uses [TWK Lausanne](https://weltkern.com/typefaces/lausanne) font and consists of several text styles optimized for different use cases. Each style is carefully crafted to maintain readability and visual hierarchy across our applications. Please ensure you have the proper license to use [TWK Lausanne](https://weltkern.com/typefaces/lausanne) before implementing these typography styles.

<br/>

## Display

<div style={{
  marginTop: 20,
  marginBottom: 80,
}}>
  <TypographyListItem>
    <Story of={TypographyStories.Display1} />
  </TypographyListItem>
</div>


## Headings

<div style={{
  marginTop: 20,
  marginBottom: 80,
}}>
  <TypographyListItem>
    <Story of={TypographyStories.Heading1} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Heading2} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Heading3} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Heading4} />
  </TypographyListItem>
</div>



## Subtitles

<div style={{
  marginTop: 20,
  marginBottom: 80,
}}>
  <TypographyListItem>
    <Story of={TypographyStories.Subtitle1} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Subtitle2} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Subtitle3} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Subtitle4} />
  </TypographyListItem>
</div>


## Labels

<div style={{
  marginTop: 20,
  marginBottom: 80,
}}>
  <TypographyListItem>
    <Story of={TypographyStories.Label1} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Label2} />
  </TypographyListItem>
</div>


## Body

<div style={{
  marginTop: 20,
  marginBottom: 80,
}}>
  <TypographyListItem>
    <Story of={TypographyStories.Body1} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Body2} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Body3} />
  </TypographyListItem>
  <TypographyListItem>
    <Story of={TypographyStories.Body4} />
  </TypographyListItem>
</div>



================================================
File: packages/mini-apps-ui-kit-react/stories/Typography.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";

import {
  Typography,
  TypographyCommonProps,
  TypographyDisplayProps,
  TypographyLabelProps,
  TypographyNumberProps,
} from "../src/components/Typography";
import TypographyDocs from "./Typography.mdx";

const meta: Meta<typeof Typography> = {
  title: "components/Typography",
  component: Typography,
  parameters: {
    docs: {
      page: TypographyDocs,
    },
  },
  argTypes: {
    as: {
      table: {
        disable: true,
      },
    },
    variant: {
      control: "radio",
      options: ["display", "heading", "subtitle", "body", "label"],
      table: {
        readonly: true,
      },
    },
  },
};

export default meta;

// Main stories for sidebar
export const Display: StoryObj<TypographyDisplayProps> = {
  args: {
    variant: "display",
    level: 1,
    children: "The real human network",
  },
  argTypes: {
    level: {
      control: "radio",
      options: [1],
    },
  },
};

export const Heading: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "heading",
    level: 1,
    children: "Identity, finance and community for every human.",
  },
  argTypes: {
    level: {
      control: "radio",
      options: [1, 2, 3, 4],
    },
  },
};

export const Subtitle: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "subtitle",
    level: 1,
    children:
      "In the age of AI, World is a network of real humans built on an anonymous proof of human and a globally inclusive financial network.",
  },
  argTypes: {
    level: {
      control: "radio",
      options: [1, 2, 3, 4],
    },
  },
};

export const Label: StoryObj<TypographyLabelProps> = {
  args: {
    variant: "label",
    level: 1,
    children: "Unique humans",
  },
  argTypes: {
    level: {
      control: "radio",
      options: [1, 2],
    },
  },
};

export const Body: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "body",
    level: 1,
    children:
      "World ID allows you to anonymously and securely verify that you are a real and unique human (and not a bot) for easy online verification like signing into social apps and ensuring fair online activities like voting or buying concert tickets.",
  },
  tags: ["!autodocs"],
  argTypes: {
    level: {
      control: "radio",
      options: [1, 2, 3, 4],
    },
  },
};

// Display levels
export const Display1: StoryObj<TypographyDisplayProps> = {
  args: {
    variant: "display",
    level: 1,
    children: "Welcome to Mini Apps",
  },
  tags: ["!dev"],
};

// Heading levels
export const Heading1: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "heading",
    level: 1,
    children: "Build Beautiful User Interfaces",
  },
  tags: ["!dev"],
};

export const Heading2: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "heading",
    level: 2,
    children: "Craft Engaging Experiences",
  },
  tags: ["!dev"],
};

export const Heading3: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "heading",
    level: 3,
    children: "Design with Confidence",
  },
  tags: ["!dev"],
};

export const Heading4: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "heading",
    level: 4,
    children: "Perfect Every Detail",
  },
  tags: ["!dev"],
};

// Subtitle levels
export const Subtitle1: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "subtitle",
    level: 1,
    children: "Modern Components for React Applications",
  },
  tags: ["!dev"],
};

export const Subtitle2: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "subtitle",
    level: 2,
    children: "Flexible and Easy to Customize",
  },
  tags: ["!dev"],
};

export const Subtitle3: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "subtitle",
    level: 3,
    children: "Built with Developer Experience in Mind",
  },
  tags: ["!dev"],
};

export const Subtitle4: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "subtitle",
    level: 4,
    children: "Optimized for Performance",
  },
  tags: ["!dev"],
};

// Label levels
export const Label1: StoryObj<TypographyLabelProps> = {
  args: {
    variant: "label",
    level: 1,
    children: "Important Information",
  },
  tags: ["!dev"],
};

export const Label2: StoryObj<TypographyLabelProps> = {
  args: {
    variant: "label",
    level: 2,
    children: "Additional Details",
  },
  tags: ["!dev"],
};

// Body levels
export const Body1: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "body",
    level: 1,
    children:
      "Create stunning web applications with our comprehensive UI kit. Start building faster and smarter today.",
  },
  tags: ["!dev"],
};

export const Body2: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "body",
    level: 2,
    children:
      "Our components are designed to work seamlessly together, providing a consistent and polished look across your entire application.",
  },
  tags: ["!dev"],
};

export const Body3: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "body",
    level: 3,
    children:
      "Focus on what matters most - building great features. Let our UI kit handle the visual details.",
  },
  tags: ["!dev"],
};

export const Body4: StoryObj<TypographyCommonProps> = {
  args: {
    variant: "body",
    level: 4,
    children:
      "Simple, intuitive, and powerful. Everything you need to create professional-looking interfaces.",
  },
  tags: ["!dev"],
};

// Number levels (hidden from sidebar)
export const Number1: StoryObj<TypographyNumberProps> = {
  args: {
    variant: "number",
    level: 1,
    children: "2,500+ Components",
  },
  tags: ["!dev"],
};

export const Number2: StoryObj<TypographyNumberProps> = {
  args: {
    variant: "number",
    level: 2,
    children: "99.9% Uptime",
  },
  tags: ["!dev"],
};

export const Number3: StoryObj<TypographyNumberProps> = {
  args: {
    variant: "number",
    level: 3,
    children: "4.9/5 Rating",
  },
  tags: ["!dev"],
};

export const Number4: StoryObj<TypographyNumberProps> = {
  args: {
    variant: "number",
    level: 4,
    children: "50K+ Downloads",
  },
  tags: ["!dev"],
};

export const Number5: StoryObj<TypographyNumberProps> = {
  args: {
    variant: "number",
    level: 5,
    children: "24/7 Support",
  },
  tags: ["!dev"],
};



================================================
File: packages/mini-apps-ui-kit-react/stories/WalletAddressField.stories.tsx
================================================
import type { Meta, StoryObj } from "@storybook/react";
import { useState } from "react";

import { WalletAddressField } from "../src/components/WalletAddressField/WalletAddressField";

const meta = {
  title: "Components/WalletAddressField",
  component: WalletAddressField,
  parameters: {
    layout: "centered",
    docs: {
      description: {
        component: "A text input component designed for entering wallet addresses.",
      },
    },
  },
  tags: ["autodocs"],
  decorators: [
    (Story) => (
      <div className="w-80 flex justify-center">
        <Story />
      </div>
    ),
  ],
} satisfies Meta<typeof WalletAddressField>;

export default meta;
type Story = StoryObj<typeof meta>;

export const Default: Story = {
  args: {
    label: "Enter wallet address",
  },
};

export const WithValue: Story = {
  args: {
    value: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
    label: "Enter wallet address",
  },
};

export const WithError: Story = {
  args: {
    value: "invalid-address",
    error: true,
    label: "Enter wallet address",
  },
};

export const WithSuccess: Story = {
  args: {
    value: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
    isValid: true,
    label: "Enter wallet address",
  },
};

export const Disabled: Story = {
  args: {
    value: "0x742d35Cc6634C0532925a3b844Bc454e4438f44e",
    disabled: true,
    label: "Enter wallet address",
  },
};

export const CustomPlaceholder: Story = {
  args: {
    label: "Paste your ETH address here",
  },
};

export const Interactive: Story = {
  render: () => {
    const [value, setValue] = useState("");
    const [isValid, setIsValid] = useState(false);
    const [error, setError] = useState(false);

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const newValue = e.target.value;
      setValue(newValue);

      // Simple validation for Ethereum address
      const isEthAddress = /^0x[a-fA-F0-9]{40}$/.test(newValue);
      setIsValid(isEthAddress);
      setError(newValue.length > 0 && !isEthAddress);
    };

    return (
      <WalletAddressField
        value={value}
        onChange={handleChange}
        isValid={isValid}
        error={error}
        label="Enter ETH wallet address"
      />
    );
  },
};



================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/Colors.mdx
================================================
import { gray, success, error, warning, info } from "../../src/tailwind/index";
import { Color } from "./components/Color";

# Colors

## Gray
<div className="flex flex-wrap gap-4 pb-20">
  {Object.entries(gray).map(([key, value]) => (
    <Color key={key} name={key} color={value} />
  ))}
</div>

## Success
<div className="flex flex-wrap gap-4 pb-20">
  {Object.entries(success).map(([key, value]) => (
    <Color key={key} name={key} color={value} />
  ))}
</div>

## Error 
<div className="flex flex-wrap gap-4 pb-20">
  {Object.entries(error).map(([key, value]) => (
    <Color key={key} name={key} color={value} />
  ))}
</div>

## Warning
<div className="flex flex-wrap gap-4 pb-20">
  {Object.entries(warning).map(([key, value]) => (
    <Color key={key} name={key} color={value} />
  ))}
</div>

## Info
<div className="flex flex-wrap gap-4 pb-20">
  {Object.entries(info).map(([key, value]) => (
    <Color key={key} name={key} color={value} />
  ))}
</div>





================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/Icons.mdx
================================================
# Icons

Our component library uses [**Iconoir**](https://iconoir.com/), a comprehensive open-source icon set that provides over 1,600 unique SVG icons designed on a 24x24 pixels grid.

## Features

- **Open Source**: 100% free and open source under MIT License
- **Multi-Platform**: Available in SVG, React, React Native, Flutter, Figma and Framer
- **Modern Design**: Clean, consistent design that aligns well with contemporary UI principles
- **Performance Optimized**: Optimized SVG icons for better performance
- **Customizable**: Icons can be easily customized with different sizes, colors, and styles

## Best Practices

1. **Consistency**: Use consistent icon sizes throughout your application (recommended 24x24 pixels)
2. **Accessibility**: Always provide appropriate aria-labels or text alternatives for icons
3. **Color**: Use the theme's color system for icon colors to maintain consistency
4. **Importing**: Import icons directly from 'iconoir-react' for better tree-shaking

## License

Iconoir is available under the MIT License. Please refer to their [website](https://iconoir.com/) for more details. 


================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/Spacing.mdx
================================================
import { Meta } from "@storybook/blocks";
import Section from "./components/Section";
import moduleImage from './static/spacing/module.jpg';
import mainImage from './static/spacing/main.jpg';
import sectionImage from './static/spacing/sections.jpg';
import searchImage from './static/spacing/search-bar.jpg';
import buttonImage from './static/spacing/button.jpg';
import statesImage from './static/spacing/states.jpg';
import bottomMenuImage from './static/spacing/bottom-menu.jpg';
import mainTitleImage from './static/spacing/main-title.jpg';
import buttonActiveImage from './static/spacing/button-active.jpg';


<Meta title="Documentation/Spacing" />
# Spacing

<Section title="4px layout system" image={moduleImage}>
  By establishing `4px` as the foundational measurement, it simplifies spacing, sizing, and alignment across all components, making designs easier to adapt to different screen sizes and resolutions. This system encourages uniformity in padding, margins, and element dimensions, resulting in a structured, clean, and balanced appearance. Ideal for modern UI kits.
</Section>

<Section title="Main paddings" image={mainImage}>
  Padding is set to a default of `24px`, providing ample breathing room around elements while maintaining a clean and structured appearance.
</Section>

<Section title="Sections" image={sectionImage}>
  The default space between sections is set to `40px`. This larger spacing helps to create clear separation between distinct areas of content.

  `16px` spacing between subheadlines and their associated content. This deliberate spacing provides a clear visual connection between headers and their content.
</Section>

<Section title="Search bar" image={searchImage}>
  The default space between the header and the search bar should be always `16px`.
</Section>

<Section title="Button" image={buttonImage}>
  Buttons are positioned with a `32px` space from the iOS bottom bar, ensuring optimal accessibility and a comfortable tap area.
</Section>

<Section title="Button with active keyboard" image={buttonActiveImage}>
  Buttons are placed `24px` above the active keyboard. This spacing ensures that buttons remain easily accessible and visually distinct, even when the keyboard is active, preventing accidental taps or overlap.
</Section>

<Section title="States" image={statesImage}>
  The bottom menu is positioned with a `20px` padding from the iOS bottom bar, ensuring a comfortable buffer that enhances touch accessibility while aligning with native iOS design guidelines. 

  Additionally, there is a minimum padding of `8px` from the top of the menu, providing necessary breathing room.
</Section>

<Section title="Bottom menu" image={bottomMenuImage}>
  It is recommended to position the bottom menu with a `20px` padding from the iOS bottom bar to create a comfortable buffer that enhances touch accessibility and aligns with native iOS design guidelines. Additionally, a minimum padding of `8px` from the top of the menu is advised to provide necessary breathing room.
</Section>

<Section title="Main title Spacing" image={mainTitleImage}>
  The vertical space between the top page and the title should be `64px`, ensuring a safe area between these two elements.

  The space between the main title and subtitle should be `16px`.
</Section>


================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/components/Color.tsx
================================================
interface ColorProps {
  name: string;
  code: string;
  color: string;
}

export const Color = ({ name, color }: ColorProps) => {
  const nameWithoutPrefix = name.split("-").pop() || "";
  return (
    <div
      className="flex flex-col rounded-2xl overflow-hidden"
      style={{ border: "1px solid #00000019" }}
    >
      <div className="w-32 h-20" style={{ backgroundColor: `rgb(${color})` }} />
      <div className="flex flex-col justify-start h-12 p-2">
        <strong>{nameWithoutPrefix}</strong>
      </div>
    </div>
  );
};



================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/components/Section.tsx
================================================
function Section({
  children,
  image,
  title,
}: {
  children: React.ReactNode;
  image: string;
  title: string;
}) {
  return (
    <div className="py-12 grid gap-12 md:grid-cols-[1fr_2fr] ">
      <div>
        <h2>{title}</h2>
        {children}
      </div>
      <div>
        <img src={image} alt={title} className="w-full" />
      </div>
    </div>
  );
}

export default Section;



================================================
File: packages/mini-apps-ui-kit-react/stories/documentation/components/TypographyListItem.tsx
================================================
interface TypographyListItemProps {
  children: React.ReactNode;
}

export const TypographyListItem = ({ children }: TypographyListItemProps) => {
  return (
    <div
      className="min-h-14"
      style={{
        paddingTop: 10,
        paddingBottom: 10,
      }}
    >
      {children}
    </div>
  );
};




================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icon-control.tsx
================================================
import { Shield } from "./icons/Shield";
import { Star } from "./icons/Star";

export const iconControl = {
  control: "select",
  options: ["None", "Star", "Shield"],
  mapping: {
    None: null,
    Star: <Star />,
    Shield: <Shield />,
  },
} as const;



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Apps.tsx
================================================
import React from "react";

export interface IconProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  solid?: boolean;
}

export const Apps: React.FC<IconProps> = ({ size = 24, solid = false, ...props }) => {
  if (solid) {
    return (
      <svg
        width="26"
        height="26"
        viewBox="0 0 26 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <path
          d="M3.83887 3.71452H11.2674C11.2674 4.24514 11.2674 10.4385 11.2674 11.1431C10.7368 11.1431 4.54346 11.1431 3.83887 11.1431C3.83889 10.0819 3.83887 4.47475 3.83887 3.71452Z"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
        />
        <path
          d="M3.83887 14.8573H11.2674C11.2674 15.3879 11.2674 21.5813 11.2674 22.2859C10.7368 22.2859 4.54346 22.2859 3.83887 22.2859C3.83889 21.2246 3.83887 15.6175 3.83887 14.8573Z"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
        />
        <path
          d="M14.9822 14.8573H22.4107C22.4107 15.3879 22.4107 21.5813 22.4107 22.2859C21.8801 22.2859 15.6868 22.2859 14.9822 22.2859C14.9822 21.2246 14.9822 15.6175 14.9822 14.8573Z"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
        />
        <path
          d="M14.9822 3.71452H22.4107C22.4107 4.24514 22.4107 10.4385 22.4107 11.1431C21.8801 11.1431 15.6868 11.1431 14.9822 11.1431C14.9822 10.0819 14.9822 4.47475 14.9822 3.71452Z"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
        />
      </svg>
    );
  }
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 28 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M4.12415 4.00018H12.1241C12.1241 4.57161 12.1241 11.2414 12.1241 12.0002C11.5527 12.0002 4.88294 12.0002 4.12415 12.0002C4.12417 10.8573 4.12414 4.81889 4.12415 4.00018Z"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M4.12415 16.0002H12.1241C12.1241 16.5716 12.1241 23.2414 12.1241 24.0002C11.5527 24.0002 4.88294 24.0002 4.12415 24.0002C4.12417 22.8573 4.12414 16.8189 4.12415 16.0002Z"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M16.1241 16.0002H24.1241C24.1241 16.5716 24.1241 23.2414 24.1241 24.0002C23.5527 24.0002 16.8829 24.0002 16.1241 24.0002C16.1242 22.8573 16.1241 16.8189 16.1241 16.0002Z"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M16.1241 4.00018H24.1241C24.1241 4.57161 24.1241 11.2414 24.1241 12.0002C23.5527 12.0002 16.8829 12.0002 16.1241 12.0002C16.1242 10.8573 16.1241 4.81889 16.1241 4.00018Z"
        stroke="currentColor"
        strokeWidth="2"
      />
    </svg>
  );
};

export default Apps;



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/CircleSpark.tsx
================================================
export function CircleSpark(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="64"
      height="64"
      viewBox="0 0 64 64"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      data-testid="circle-spark-icon"
      {...props}
    >
      <rect width="64" height="64" rx="32" fill="#9BA3AE" />
      <rect opacity="0.2" width="64" height="64" rx="32" fill="url(#paint0_radial_312_818)" />
      <rect
        x="0.363636"
        y="0.363636"
        width="63.2727"
        height="63.2727"
        rx="31.6364"
        stroke="url(#paint1_linear_312_818)"
        strokeWidth="0.727273"
      />
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M31.9999 17.8181C32.6024 17.8181 33.0908 18.3065 33.0908 18.909C33.0908 23.4124 34.0554 26.3335 35.8852 28.1513C37.7164 29.9706 40.6394 30.909 45.0908 30.909C45.6933 30.909 46.1818 31.3974 46.1818 31.9999C46.1818 32.6024 45.6933 33.0908 45.0908 33.0908C40.6467 33.0908 37.7216 34.0538 35.8877 35.8877C34.0538 37.7216 33.0908 40.6467 33.0908 45.0908C33.0908 45.6933 32.6024 46.1818 31.9999 46.1818C31.3974 46.1818 30.909 45.6933 30.909 45.0908C30.909 40.6485 29.9399 37.7229 28.1024 35.8883C26.2644 34.0534 23.3383 33.0908 18.909 33.0908C18.3065 33.0908 17.8181 32.6024 17.8181 31.9999C17.8181 31.3974 18.3065 30.909 18.909 30.909C23.3456 30.909 26.2696 29.971 28.1049 28.1507C29.9383 26.3322 30.909 23.4106 30.909 18.909C30.909 18.3065 31.3974 17.8181 31.9999 17.8181Z"
        fill="white"
      />
      <defs>
        <radialGradient
          id="paint0_radial_312_818"
          cx="0"
          cy="0"
          r="1"
          gradientUnits="userSpaceOnUse"
          gradientTransform="translate(14.5455 -1.21665e-06) rotate(63.4349) scale(71.5542 71.2456)"
        >
          <stop stopColor="white" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </radialGradient>
        <linearGradient
          id="paint1_linear_312_818"
          x1="32"
          y1="0"
          x2="32"
          y2="64"
          gradientUnits="userSpaceOnUse"
        >
          <stop stopColor="white" stopOpacity="0.3" />
          <stop offset="1" stopColor="white" stopOpacity="0" />
        </linearGradient>
      </defs>
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Contacts.tsx
================================================
import React from "react";

export interface IconProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  solid?: boolean;
}

export const Contacts: React.FC<IconProps> = ({ size = 24, solid = false, ...props }) => {
  if (solid) {
    return (
      <svg
        width="26"
        height="26"
        viewBox="0 0 27 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <g clip-path="url(#clip0_570_1184)">
          <path
            d="M1.82495 20C1.82495 16.4101 4.7351 13.5 8.32495 13.5C11.9148 13.5 14.825 16.4101 14.825 20V22.5H1.82495V20Z"
            fill="currentColor"
          />
          <path
            d="M25.4272 23.45H26.3772V22.5V18C26.3772 13.8855 23.0418 10.55 18.9272 10.55C14.8127 10.55 11.4772 13.8855 11.4772 18V22.5V23.45H12.4272H25.4272Z"
            fill="currentColor"
            stroke="white"
            stroke-width="1.9"
          />
          <path
            d="M11.4272 9C11.4272 10.933 9.86024 12.5 7.92725 12.5C5.99425 12.5 4.42725 10.933 4.42725 9C4.42725 7.067 5.99425 5.5 7.92725 5.5C9.86024 5.5 11.4272 7.067 11.4272 9Z"
            fill="currentColor"
          />
          <path
            d="M22.4272 7C22.4272 8.933 20.8602 10.5 18.9272 10.5C16.9942 10.5 15.4272 8.933 15.4272 7C15.4272 5.067 16.9942 3.5 18.9272 3.5C20.8602 3.5 22.4272 5.067 22.4272 7Z"
            fill="currentColor"
          />
        </g>
        <defs>
          <clipPath id="clip0_570_1184">
            <rect width="26" height="26" fill="white" transform="translate(0.625)" />
          </clipPath>
        </defs>
      </svg>
    );
  }
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 29 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M2.91724 21.5385C2.91724 18.2248 5.60353 15.5385 8.91724 15.5385C12.2309 15.5385 14.9172 18.2248 14.9172 21.5385V23.2308H2.91724V21.5385Z"
        fill="white"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M14.3351 19.3846C14.3351 16.0709 17.0214 13.3846 20.3351 13.3846C23.6488 13.3846 26.3351 16.0709 26.3351 19.3846V23.2308H14.3351V19.3846Z"
        fill="white"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M11.2582 9.69231C11.2582 11.2217 10.0184 12.4615 8.48896 12.4615C6.95955 12.4615 5.71973 11.2217 5.71973 9.69231C5.71973 8.16291 6.95955 6.92308 8.48896 6.92308C10.0184 6.92308 11.2582 8.16291 11.2582 9.69231Z"
        fill="white"
        stroke="currentColor"
        strokeWidth="2"
      />
      <path
        d="M23.1043 7.53846C23.1043 9.06786 21.8645 10.3077 20.3351 10.3077C18.8057 10.3077 17.5659 9.06786 17.5659 7.53846C17.5659 6.00905 18.8057 4.76923 20.3351 4.76923C21.8645 4.76923 23.1043 6.00905 23.1043 7.53846Z"
        fill="white"
        stroke="currentColor"
        strokeWidth="2"
      />
    </svg>
  );
};

export default Contacts;



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/CountryCode.tsx
================================================
export function CountryCode(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="70"
      height="24"
      viewBox="0 0 70 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      data-testid="country-code-icon"
      {...props}
    >
      <g clipPath="url(#clip0_12_757)">
        <path
          d="M12 24C18.6274 24 24 18.6274 24 12C24 5.37258 18.6274 0 12 0C5.37258 0 0 5.37258 0 12C0 18.6274 5.37258 24 12 24Z"
          fill="#F0F0F0"
        />
        <path
          d="M11.4783 12H24C24 10.9169 23.8556 9.86765 23.5866 8.86954H11.4783V12Z"
          fill="#D80027"
        />
        <path
          d="M11.4783 5.73913H22.2387C21.5041 4.54044 20.5649 3.48092 19.4698 2.60867H11.4783V5.73913Z"
          fill="#D80027"
        />
        <path
          d="M12 24C14.8242 24 17.42 23.0239 19.4698 21.3913H4.53021C6.58006 23.0239 9.17585 24 12 24Z"
          fill="#D80027"
        />
        <path
          d="M1.76128 18.2609H22.2387C22.8285 17.2986 23.2858 16.2467 23.5866 15.1304H0.413391C0.714188 16.2467 1.17155 17.2986 1.76128 18.2609Z"
          fill="#D80027"
        />
        <path
          d="M5.55863 1.87397H6.65217L5.63498 2.61295L6.02353 3.80869L5.00639 3.0697L3.98925 3.80869L4.32487 2.7757C3.42928 3.52172 2.64431 4.39575 1.99744 5.36963H2.34783L1.70034 5.84002C1.59947 6.0083 1.50272 6.17925 1.41 6.35273L1.71919 7.30434L1.14234 6.88523C0.998953 7.18903 0.867797 7.49967 0.749906 7.81678L1.09055 8.86528H2.34783L1.33064 9.60427L1.71919 10.8L0.702047 10.061L0.0927656 10.5037C0.0317812 10.9939 0 11.4932 0 12H12C12 5.37262 12 4.59131 12 0C9.62944 0 7.41961 0.687656 5.55863 1.87397ZM6.02353 10.8L5.00639 10.061L3.98925 10.8L4.3778 9.60427L3.36061 8.86528H4.61789L5.00639 7.66955L5.39489 8.86528H6.65217L5.63498 9.60427L6.02353 10.8ZM5.63498 6.10861L6.02353 7.30434L5.00639 6.56536L3.98925 7.30434L4.3778 6.10861L3.36061 5.36963H4.61789L5.00639 4.17389L5.39489 5.36963H6.65217L5.63498 6.10861ZM10.3279 10.8L9.31073 10.061L8.29359 10.8L8.68214 9.60427L7.66495 8.86528H8.92223L9.31073 7.66955L9.69923 8.86528H10.9565L9.93933 9.60427L10.3279 10.8ZM9.93933 6.10861L10.3279 7.30434L9.31073 6.56536L8.29359 7.30434L8.68214 6.10861L7.66495 5.36963H8.92223L9.31073 4.17389L9.69923 5.36963H10.9565L9.93933 6.10861ZM9.93933 2.61295L10.3279 3.80869L9.31073 3.0697L8.29359 3.80869L8.68214 2.61295L7.66495 1.87397H8.92223L9.31073 0.678234L9.69923 1.87397H10.9565L9.93933 2.61295Z"
          fill="#0052B4"
        />
      </g>
      <path
        d="M38.432 16.972C38.3253 16.972 38.2347 16.9347 38.16 16.86C38.0853 16.7853 38.048 16.6947 38.048 16.588V13.468H34.992C34.8853 13.468 34.7947 13.4307 34.72 13.356C34.6453 13.2813 34.608 13.1907 34.608 13.084V12.22C34.608 12.1133 34.6453 12.0227 34.72 11.948C34.7947 11.8733 34.8853 11.836 34.992 11.836H38.048V8.812C38.048 8.69467 38.0853 8.604 38.16 8.54C38.2347 8.46533 38.3253 8.428 38.432 8.428H39.392C39.5093 8.428 39.6 8.46533 39.664 8.54C39.7387 8.604 39.776 8.69467 39.776 8.812V11.836H42.832C42.9387 11.836 43.0293 11.8733 43.104 11.948C43.1787 12.0227 43.216 12.1133 43.216 12.22V13.084C43.216 13.1907 43.1787 13.2813 43.104 13.356C43.04 13.4307 42.9493 13.468 42.832 13.468H39.776V16.588C39.776 16.6947 39.7387 16.7853 39.664 16.86C39.6 16.9347 39.5093 16.972 39.392 16.972H38.432ZM47.8851 17.5C47.7785 17.5 47.6878 17.4627 47.6131 17.388C47.5385 17.3133 47.5011 17.2227 47.5011 17.116V8.86L45.0851 10.716C45.0211 10.7693 44.9411 10.796 44.8451 10.796C44.7171 10.796 44.6158 10.7427 44.5411 10.636L43.8531 9.74C43.7998 9.66533 43.7731 9.59067 43.7731 9.516C43.7731 9.388 43.8318 9.28133 43.9491 9.196L47.5331 6.412C47.6505 6.33733 47.7838 6.3 47.9331 6.3H49.3731C49.4798 6.3 49.5705 6.33733 49.6451 6.412C49.7198 6.48667 49.7571 6.57733 49.7571 6.684V17.116C49.7571 17.2227 49.7198 17.3133 49.6451 17.388C49.5705 17.4627 49.4798 17.5 49.3731 17.5H47.8851Z"
        fill="#191C20"
      />
      <path
        d="M61 10L65 14L69 10"
        stroke="#9BA3AE"
        stroke-width="1.84615"
        stroke-linecap="round"
        stroke-linejoin="round"
      />
      <defs>
        <clipPath id="clip0_12_757">
          <rect width="24" height="24" fill="white" />
        </clipPath>
      </defs>
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Shield.tsx
================================================
import { ChipProps } from "../../../src/components/Chip";

interface ShieldProps extends React.SVGProps<SVGSVGElement> {
  variant?: ChipProps["variant"];
  color?: string;
}

export function Shield({ variant = "default", color = "currentColor", ...rest }: ShieldProps) {
  return (
    <svg
      width="20"
      height="20"
      viewBox="0 0 16 16"
      fill={color}
      xmlns="http://www.w3.org/2000/svg"
      data-testid="shield-icon"
      {...rest}
    >
      <path
        fillRule="evenodd"
        clipRule="evenodd"
        d="M3.55499 3.14062L6.91386 1.57629C7.60896 1.25256 8.40239 1.25256 9.09748 1.57629L12.443 3.13442C13.4214 3.59006 14.0635 4.61413 13.995 5.73371C13.7321 10.0281 12.5604 11.9695 9.39325 14.2217C8.55742 14.816 7.45484 14.8146 6.61839 14.2212C3.46094 11.9811 2.24581 10.0669 2.00411 5.71865C1.94229 4.60642 2.58343 3.59311 3.55499 3.14062ZM8 9.3335C8.73638 9.3335 9.33333 8.73654 9.33333 8.00016C9.33333 7.26378 8.73638 6.66683 8 6.66683C7.26362 6.66683 6.66667 7.26378 6.66667 8.00016C6.66667 8.73654 7.26362 9.3335 8 9.3335Z"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/SparkIcon.tsx
================================================
import { ComponentProps } from "react";

export const SparkIcon = (props: ComponentProps<"svg">) => (
  <svg
    width="20"
    height="20"
    viewBox="0 0 20 20"
    fill="none"
    xmlns="http://www.w3.org/2000/svg"
    {...props}
  >
    <path
      fillRule="evenodd"
      clipRule="evenodd"
      d="M10 1.875C10.3452 1.875 10.625 2.15482 10.625 2.5C10.625 5.08005 11.1776 6.7536 12.2259 7.79507C13.2751 8.83737 14.9497 9.375 17.5 9.375C17.8452 9.375 18.125 9.65482 18.125 10C18.125 10.3452 17.8452 10.625 17.5 10.625C14.9539 10.625 13.2781 11.1767 12.2274 12.2274C11.1767 13.2781 10.625 14.9539 10.625 17.5C10.625 17.8452 10.3452 18.125 10 18.125C9.65482 18.125 9.375 17.8452 9.375 17.5C9.375 14.9549 8.8198 13.2788 7.76702 12.2277C6.71403 11.1765 5.03763 10.625 2.5 10.625C2.15482 10.625 1.875 10.3452 1.875 10C1.875 9.65482 2.15482 9.375 2.5 9.375C5.0418 9.375 6.71702 8.8376 7.76847 7.79471C8.81888 6.75286 9.375 5.07901 9.375 2.5C9.375 2.15482 9.65482 1.875 10 1.875Z"
      fill="currentColor"
    />
  </svg>
);



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Star.tsx
================================================
export function Star(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="17"
      height="16"
      viewBox="0 0 17 16"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      data-testid="star-icon"
      {...props}
    >
      <path
        d="M8.4974 0.833332C9.19691 0.833332 9.74792 1.36169 10.0997 2.07461L11.2744 4.44344C11.31 4.51675 11.3944 4.61999 11.5214 4.71442C11.6482 4.80876 11.7724 4.86081 11.8541 4.87454L13.9805 5.23075C14.7486 5.35982 15.3924 5.73633 15.6014 6.39193C15.8102 7.04699 15.5042 7.72774 14.9519 8.28109L14.9514 8.28163L13.2994 9.94724C13.2339 10.0133 13.1606 10.1376 13.1146 10.2996C13.0689 10.4605 13.0649 10.6071 13.0856 10.7018L13.0859 10.7031L13.5585 12.7636C13.7545 13.6212 13.6896 14.4715 13.0847 14.9161C12.4778 15.3622 11.6485 15.1645 10.895 14.7157L8.9017 13.526C8.818 13.476 8.67424 13.4355 8.50073 13.4355C8.32849 13.4355 8.18171 13.4755 8.09256 13.5273L8.0913 13.5281L6.10192 14.7155C5.34937 15.1658 4.52103 15.36 3.91407 14.9135C3.30966 14.4688 3.24143 13.62 3.43807 12.7632L3.9106 10.7031L3.91089 10.7018C3.93161 10.6071 3.92755 10.4605 3.88187 10.2996C3.83587 10.1376 3.76252 10.0133 3.69705 9.94724L2.0439 8.28042C1.4951 7.72709 1.19014 7.04694 1.3973 6.39284C1.60506 5.73683 2.24762 5.35987 3.01622 5.23071L5.14088 4.87479L5.14156 4.87468C5.21945 4.86117 5.3418 4.8097 5.46832 4.71512C5.59507 4.62036 5.67973 4.5169 5.71541 4.44344L5.71721 4.43978L6.89041 2.07398L6.89088 2.07305C7.24597 1.36072 7.79869 0.833332 8.4974 0.833332Z"
        className="fill-current"
      />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Switch.tsx
================================================
export function Switch(props: React.SVGProps<SVGSVGElement>) {
  return (
    <svg
      width="30"
      height="18"
      viewBox="0 0 40 24"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      data-testid="switch-icon"
      {...props}
    >
      <rect x="1" y="1" width="38" height="22" rx="11" fill="#191C20" />
      <rect x="1" y="1" width="38" height="22" rx="11" stroke="#191C20" stroke-width="2" />
      <rect x="18" y="2" width="20" height="20" rx="10" fill="white" />
    </svg>
  );
}



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/Wallet.tsx
================================================
import React from "react";

export interface IconProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  solid?: boolean;
}

export const Wallet: React.FC<IconProps> = ({ size = 24, solid = false, ...props }) => {
  if (solid) {
    return (
      <svg
        width="26"
        height="26"
        viewBox="0 0 27 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <rect
          x="3.16046"
          y="4.64273"
          width="20.4286"
          height="16.7143"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
        />
        <rect
          x="16.625"
          y="10.8333"
          width="6.5"
          height="4.33333"
          fill="white"
          stroke="currentColor"
          strokeWidth="1.89583"
        />
      </svg>
    );
  }
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 29 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <rect x="3.375" y="5" width="22" height="18" stroke="currentColor" strokeWidth="2" />
      <rect
        x="17.875"
        y="11.6667"
        width="7"
        height="4.66667"
        fill="white"
        stroke="currentColor"
        strokeWidth="2"
      />
    </svg>
  );
};

export default Wallet;



================================================
File: packages/mini-apps-ui-kit-react/stories/helpers/icons/WorldID.tsx
================================================
import React from "react";

export interface IconProps extends React.SVGProps<SVGSVGElement> {
  size?: number;
  solid?: boolean;
}

export const WorldID: React.FC<IconProps> = ({ size = 24, solid = false, ...props }) => {
  if (solid) {
    return (
      <svg
        width="26"
        height="26"
        viewBox="0 0 27 26"
        fill="none"
        xmlns="http://www.w3.org/2000/svg"
        {...props}
      >
        <path
          d="M13.875 3.25C8.49022 3.25 4.125 7.61522 4.125 13C4.125 18.3847 8.49022 22.75 13.875 22.75C19.2597 22.75 23.625 18.3847 23.625 13C23.625 7.61522 19.2597 3.25 13.875 3.25Z"
          fill="currentColor"
          stroke="currentColor"
          strokeWidth="1.9"
          strokeLinecap="round"
          strokeLinejoin="round"
        />
        <mask
          id="mask0_528_3444"
          style={{ maskType: "alpha" }}
          maskUnits="userSpaceOnUse"
          x="5"
          y="4"
          width="18"
          height="18"
        >
          <circle cx="13.875" cy="13" r="8.82143" fill="currentColor" />
        </mask>
        <g mask="url(#mask0_528_3444)">
          <ellipse cx="13.875" cy="19.1071" rx="8.35714" ry="2.78571" fill="white" />
          <path
            d="M6.07465 18.8502C6.07465 18.8502 8.32413 16.9002 13.8746 16.9002C19.4251 16.9002 21.6746 18.8502 21.6746 18.8502"
            stroke="currentColor"
            strokeWidth="1.9"
            strokeLinecap="round"
            strokeLinejoin="round"
          />
          <path
            d="M13.8746 13.0002C15.4901 13.0002 16.7996 11.6907 16.7996 10.0752C16.7996 8.45978 15.4901 7.15021 13.8746 7.15021C12.2592 7.15021 10.9496 8.45978 10.9496 10.0752C10.9496 11.6907 12.2592 13.0002 13.8746 13.0002Z"
            fill="white"
          />
        </g>
      </svg>
    );
  }
  return (
    <svg
      width="26"
      height="26"
      viewBox="0 0 29 28"
      fill="none"
      xmlns="http://www.w3.org/2000/svg"
      {...props}
    >
      <path
        d="M14.8746 3.50012C9.07564 3.50012 4.37463 8.20113 4.37463 14.0001C4.37463 19.7991 9.07564 24.5001 14.8746 24.5001C20.6736 24.5001 25.3746 19.7991 25.3746 14.0001C25.3746 8.20113 20.6736 3.50012 14.8746 3.50012Z"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M6.47461 20.3001C6.47461 20.3001 8.89713 18.2001 14.8746 18.2001C20.852 18.2001 23.2746 20.3001 23.2746 20.3001"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
      <path
        d="M14.8746 14.0001C16.6144 14.0001 18.0246 12.5899 18.0246 10.8501C18.0246 9.11044 16.6144 7.70013 14.8746 7.70013C13.1349 7.70013 11.7246 9.11044 11.7246 10.8501C11.7246 12.5899 13.1349 14.0001 14.8746 14.0001Z"
        stroke="currentColor"
        strokeWidth="2"
        strokeLinecap="round"
        strokeLinejoin="round"
      />
    </svg>
  );
};

export default WorldID;



================================================
File: packages/mini-apps-ui-kit-react/styles/globals.css
================================================
@import "react-international-phone/dist/index.css";

/* Hide pseudo-elements for search inputs */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration,
input[type="search"]::-webkit-search-results-button,
input[type="search"]::-webkit-search-results-decoration {
  display: none;
}

/* Hide clear button for all supported input types */
input::-webkit-clear-button {
  display: none;
}

/* Hide spin buttons for number inputs */
input::-webkit-inner-spin-button,
input::-webkit-outer-spin-button {
  display: none;
}

/* Hide calendar picker for date inputs */
input::-webkit-calendar-picker-indicator {
  display: none;
}

/* Hide pseudo-elements for datetime inputs */
input::-webkit-datetime-edit,
input::-webkit-datetime-edit-fields-wrapper,
input::-webkit-datetime-edit-text,
input::-webkit-datetime-edit-year-field,
input::-webkit-datetime-edit-month-field,
input::-webkit-datetime-edit-day-field,
input::-webkit-datetime-edit-hour-field,
input::-webkit-datetime-edit-minute-field,
input::-webkit-datetime-edit-second-field,
input::-webkit-datetime-edit-ampm-field {
  display: none;
}

@tailwind base;
@tailwind components;
@tailwind utilities;



================================================
File: packages/mini-apps-ui-kit-react/.storybook/main.ts
================================================
import type { StorybookConfig } from "@storybook/react-vite";
import { dirname, join } from "path";

/**
 * This function is used to resolve the absolute path of a package.
 * It is needed in projects that use Yarn PnP or are set up within a monorepo.
 */
function getAbsolutePath(value: string): any {
  return dirname(require.resolve(join(value, "package.json")));
}

const config: StorybookConfig = {
  stories: ["../stories/**/*.mdx", "../stories/**/*.stories.@(ts|tsx)"],
  staticDirs: ["../public", "../stories/documentation/static"],
  addons: [
    getAbsolutePath("@storybook/addon-essentials"),
    getAbsolutePath("@chromatic-com/storybook"),
    getAbsolutePath("@storybook/addon-interactions"),
  ],
  framework: {
    name: getAbsolutePath("@storybook/react-vite"),
    options: {},
  },
};
export default config;



================================================
File: packages/mini-apps-ui-kit-react/.storybook/manager.ts
================================================
import { addons } from "@storybook/manager-api";

import theme from "./theme";

addons.setConfig({ theme });



================================================
File: packages/mini-apps-ui-kit-react/.storybook/preview-head.html
================================================





================================================
File: packages/mini-apps-ui-kit-react/.storybook/preview.css
================================================
@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-350.woff") format("woff");
  font-weight: 400;
  font-style: normal;
}

@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-350Italic.woff") format("woff");
  font-weight: 400;
  font-style: italic;
}

@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-500.woff") format("woff");
  font-weight: 500;
  font-style: normal;
}

@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-500Italic.woff") format("woff");
  font-weight: 500;
  font-style: italic;
}

@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-600.woff") format("woff");
  font-weight: 600;
  font-style: normal;
}

@font-face {
  font-family: "TWK Lausanne";
  src: url("../public/fonts/TWKLausanne-600Italic.woff") format("woff");
  font-weight: 600;
  font-style: italic;
}

h1,
h2,
h3,
h4,
h5,
h6,
strong,
b {
  font-weight: 600 !important;
}

.sbdocs-content a,
.docs-story a {
  text-decoration: underline;
}



================================================
File: packages/mini-apps-ui-kit-react/.storybook/preview.ts
================================================
import type { Preview } from "@storybook/react";

import "../public/globals.css";
import "./preview.css";
import theme from "./theme";

const preview: Preview = {
  parameters: {
    controls: {
      matchers: {
        color: /(background|color)$/i,
        date: /Date$/i,
      },
    },
    layout: "centered",
    docs: {
      theme,
    },
  },
  tags: ["autodocs"],
};

export default preview;



================================================
File: packages/mini-apps-ui-kit-react/.storybook/theme.ts
================================================
import { create } from "@storybook/theming/create";

export default create({
  base: "light",
  fontBase: "'TWK Lausanne', sans-serif",

  brandTitle: "Mini App UI Kit",
  brandUrl: "https://docs.world.org",
  brandImage: "https://docs.world.org/_next/static/media/world-logo.49cd9d35.svg",
  brandTarget: "_blank",
  //
  colorPrimary: "#191C20",
  colorSecondary: "#191C20",

  // UI
  appBg: "#F3F4F5",
  appContentBg: "#FFFFFF",
  appPreviewBg: "#EBECEF",
  appBorderColor: "#FFFFFF",
  appBorderRadius: 4,

  // Text colors
  textColor: "#191C20",
  textInverseColor: "#FFFFFF",
  textMutedColor: "#667085",

  // Toolbar default and active colors
  barTextColor: "#191C20",
  barSelectedColor: "#657080",
  barHoverColor: "#EBECEF",
  barBg: "#FFFFFF",

  // Form colors
  inputBg: "#FFFFFF",
  inputBorder: "#EBECEF",
  inputTextColor: "#191C20",
  inputBorderRadius: 12,

  buttonBorder: "#657080",
  buttonBg: "transparent",
});



================================================
File: .changeset/config.json
================================================
{
  "$schema": "https://unpkg.com/@changesets/config@3.0.0/schema.json",
  "changelog": "@changesets/cli/changelog",
  "commit": false,
  "fixed": [],
  "linked": [],
  "access": "public",
  "baseBranch": "main",
  "updateInternalDependencies": "patch",
  "ignore": [
    "@worldcoin/mini-apps-ui-kit-example-nextjs"
  ]
}


================================================
File: .github/workflows/release.yml
================================================
name: Release

on:
  push:
    branches:
      - main

concurrency: ${{ github.workflow }}-${{ github.ref }}

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repo
        uses: actions/checkout@v4
        with:
          # This makes Actions fetch all Git history so that Changesets can generate changelogs with the correct commits
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 22.x

      - name: Setup PNPM
        uses: pnpm/action-setup@v2
        with:
          version: 9.12.1

      - name: Install Dependencies
        run: pnpm install --frozen-lockfile

      - name: Create Release Pull Request or Publish to npm
        id: changesets
        uses: changesets/action@v1
        with:
          # This expects you to have a script called release which does a build for your packages and calls changeset publish
          publish: pnpm release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}



================================================
File: .github/workflows/relyance-sci.yml
================================================
name: Relyance SCI Scan

on:
  schedule:
    - cron: "0 20 * * *"
  workflow_dispatch:

jobs:
  execute-relyance-sci:
    name: Relyance SCI Job
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Pull and run SCI binary
        run: |-
          docker pull gcr.io/relyance-ext/compliance_inspector:release && \
          docker run --rm -v `pwd`:/repo --env API_KEY='${{ secrets.DPP_SCI_KEY }}' gcr.io/relyance-ext/compliance_inspector:release




================================================================================

