DOCUMENT 1
SOURCE: https://docs.world.org/mini-apps
CONTENT:
Mini Apps | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalIntroductionMini Apps

Mini apps enable third-party developers to create native-like applications within World App.
Building a mini app will provide access to our rapidly growing user network and monetization opportunities via WLD and USDC.
In addition, mini apps introduce smart contract support natively inside of World App.
How it Works
Mini apps are simply web applications opened via webview inside of World App. Using the MiniKit SDK, these applications can become
native-like and interact with the World ecosystem.Quick StartInstalling MiniKit© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 2
SOURCE: https://docs.world.org/mini-apps/quick-start/app-store
CONTENT:
App Store | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartApp Store
To ensure a consistent user experience, apps will be rejected unless they follow our guidelines.
Once your mini app is ready to be published, you can submit it for review inside of the Developer Portal.
Once approved, your mini app will be available to all World App users to discover in the app store.

If your app was rejected please reach out to @MateoSauton on Telegram for more information.PreviousTestingDesign StandardsGuidelines© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 3
SOURCE: https://docs.world.org/mini-apps/reference/api
CONTENT:
API Reference | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceSend NotificationPOSTGet TransactionGETGet PricesGETErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceAPI Reference
Send NotificationPOSThttps://developer.worldcoin.org/api/v2/minikit/send-notification
This endpoint lets you send notifications to users of your mini app and requires an api_key.
Body ParamsNamewallet_addressesTypestring[]RequiredREQUIREDDescriptionThe wallet_addresses is an array of wallet addresses to send the notification to. Users must have opted in to notifications for your app. Max 1000 users per call.NametitleTypestringRequiredREQUIREDDescriptionThe title is the title of the notification. It should be 30 characters or less.NamemessageTypestringRequiredREQUIREDDescriptionThe message is the message of the notification. It should be 200 characters or less.Namemini_app_pathTypestringRequiredREQUIREDDescriptionThe mini_app_path is the url encoded path of the mini app where your notification should link to when the user clicks on it.  Should be of the format worldapp://mini-app?app_id=[app_id]&path=[path] (path is optional).Nameapp_idTypestringRequiredREQUIREDDescriptionThe app_id is the identifier of the app initiating the transaction.Request HeadersNameAuthorizationTypestringRequiredREQUIREDDescriptionThe Authorization header should be the api_key for your app from the Developer Portal. Make sure to
prefix it with Bearer {api_key}.RequestcURLJavaScriptPOSThttps://developer.worldcoin.org/api/v2/minikit/send-notificationcurl -X POST "https://developer.worldcoin.org/api/v2/minikit/send-notification" \
    -H "Authorization: Bearer {api_key}" \
    -H "Content-Type: application/json" \
    -d '{"app_id": "app_id", "wallet_addresses": ["0x123", "0x456"], "title": "title", "message": "message", "mini_app_path": "mini_app_path"}'
CopyCopied!

Response
NamesuccessTypebooleanDescriptionIndicates if the API request was successful.NamestatusTypenumberDescriptionThe HTTP status code of the response.NameresultTypearrayDescriptionAn array of notification delivery results for each wallet address, where each item contains:
walletAddress (string): The wallet address that the notification was attempted to be sent to
sent (boolean): Whether the notification was successfully sent to this wallet address
reason (string, optional): If the notification failed to send, this field contains the reason
Response{
    "success": true,
    "status": 200,
    "result": [
        {
            "walletAddress": "0x377da9cab87c04a1d6f19d8b4be9aef8df26fcdd",
            "sent": true
        },
        {
            "walletAddress": "0x444da9cab87c04a1d6f19d8b4be9aef8df26fcdd",
            "sent": false,
            "reason": "User has notification disabled for World App"
        }
    ]
}
CopyCopied!

Get TransactionGEThttps://developer.worldcoin.org/api/v2/minikit/transaction/{transaction_id}?app_id=&type=
This endpoint lets you query your apps transactions for their current status. You will only be able to
query for transactions of apps where you possess the api_key.Query ParamsNameapp_idTypestringRequiredREQUIREDDescriptionThe app_id corresponding to the transaction that is being queried.NametypeTypestringRequiredREQUIREDDescriptionThe type is either payment (pay) or transaction (sendTransaction) depending on the command you used.Request HeadersNameAuthorizationTypestringRequiredREQUIREDDescriptionThe Authorization header should be the api_key for your app from the Developer Portal. Make sure to
prefix it with Bearer {api_key}.RequestcURLJavaScriptGET/api/v2/minikit/transaction/{transaction_id}curl -X GET "/api/v2/minikit/transaction/{transaction_id}" \
    -H "Authorization: Bearer {api_key}"
CopyCopied!

Response
NamereferenceTypestringDescriptionThe reference is your specified unique identifier for the transaction.Nametransaction_hashTypestringDescriptionThe transaction_hash is the hash of the transaction on the blockchain.Nametransaction_statusTypestringDescriptionThe current transaction_status, can be either 'pending', 'mined', or 'failed'.NamefromTypestringDescriptionThe from is the address of the sender.NamechainTypestringDescriptionThe chain is the name of the blockchain network.NametimestampTypestringDescriptionThe timestamp is the time when the transaction was created, in ISO 8601 format.Nametoken_amountTypestringDescriptionThe token_amount is the amount of tokens transferred, in BigInt with 6 decimals.NametokenTypestringDescriptionThe token is the type of token transferred.NametoTypestringDescriptionThe to is the address of the receiver.Nameapp_idTypestringDescriptionThe app_id is the identifier of the app initiating the transaction.ResponsePaymentTransactionGET/api/v2/minikit/transaction/{transaction_id}{
    "reference": "1fa38f30-8ee1-4e4b-9988-0517a774f96c",
    "transaction_hash": "0xfb25cb74b13d51deeb1a91460619c3d86a7637d40dd29831aa38dd6cbb05e880",
    "transaction_status": "pending | mined | failed",
    "from": "0x0c892815f0B058E69987920A23FBb33c834289cf",
    "chain": "worldchain",
    "timestamp": "2024-01-01T00:00:00.000Z", // ISO 8601
    "token_amount": "100000000", // amount in BigInt with 6 decimals
    "token": "USDCE",
    "to": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    "app_id": "app_9a73963d73efdf2e7d9472593dc9dffd"
}
CopyCopied!

Get PricesGEThttps://app-backend.worldcoin.dev/public/v1/miniapps/prices?cryptoCurrencies=WLD,USDCE&fiatCurrencies=
This endpoint lets you query the latest prices of the Worldcoin token in various fiat currencies.
We offer this as a service to make it easier to use WLD as a currency.Query ParamsNamefiatCurrenciesTypestringRequiredREQUIREDDescriptionThe fiatCurrencies is a comma-separated list of fiat currencies following ISO4217 currency code.
eg. USD,EUR,JPY,ARSNamecryptoCurrenciesTypestringRequiredREQUIREDDescriptionThe cryptoCurrencies is a comma-separated list of currencies we support.
eg. USDCE,WLDRequestcURLJavaScriptGET/public/v1/miniapps/prices?...curl -X GET "https://app-backend.worldcoin.dev/public/v1/prices?cryptoCurrencies=WLD&fiatCurrencies=USD"
CopyCopied!

Response (abridged)
Detailed are a just a few values in the return that could be confusing. See the response object in the bottom right column for the full list of fields
NamepricesTypestringDescriptionThe prices is an object where each key is the respective currency codeNameamountTypestringDescriptionThe amount represents the non converted value for the price of 1 WLD for a given currencyNamedecimalsTypestringDescriptionThe current decimals, should be used to calculate the converted price. ie an amount of 1000000 with 6 decimals would mean a price of $1.00
via, 1000000 * 10^-6ResponseGET/public/v1/miniapps/prices?...{
    "result": {
        "prices": {
            "WLD": {
                "USD": {
                    "asset": "USD",
                    "amount": "1510763",
                    "decimals": 6,
                    "symbol": "USD"
                },
            },
            "USDCE": {
                "USD": {
                    "asset": "USD",
                    "amount": "1000058",
                    "decimals": 6,
                    "symbol": "USD"
                },
            }
        }
    }
}
CopyCopied!CommandsSend Haptic FeedbackNextErrors© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 4
SOURCE: https://docs.world.org/mini-apps/commands/send-transaction
CONTENT:
Send Transaction | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionCrafting the payloadUsing the commandAlternative: Verifying the transactionCalling a payable function to send ETHSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Transaction
Send transaction is our command that lets you write to arbitrary smart contracts.
One important policy restriction we enforce is that we do not allow approvals. In order to use funds
you must use the Signature Transfer function of permit2.
Crafting the payload
Send transaction will automatically create the permit2 signatures for you.
Make sure you specify the contracts and tokens you are interacting with in the Developer Portal
(configuration/advanced) otherwise we will block the transaction.
export type SendTransactionInput = {
	transaction: Transaction[]
	permit2?: Permit2[] // Optional
}

export type Permit2 = {
	permitted: {
		token: string
		amount: string | unknown
	}
	spender: string
	nonce: string | unknown
	deadline: string | unknown
}

export type Transaction = {
	address: string // Contract address
	abi: Abi | readonly unknown[] // Only include the abi for the function you're calling
	functionName: ContractFunctionName<Abi | readonly unknown[], 'payable' | 'nonpayable'>
  value?: string // Hex string representation of the value to send with the function call
	args: ContractFunctionArgs<
		// Wrap all your arguments in strings to avoid overflow errors
		Abi | readonly unknown[],
		'payable' | 'nonpayable',
		ContractFunctionName<Abi | readonly unknown[], 'payable' | 'nonpayable'>
	>
}
CopyCopied!
Using the command
In this example we will use two nested transactions. If your function requires a permit2 signature use PERMIT2_SIGNATURE_PLACEHOLDER_{n} with
the index of the permit2 object in the transaction array.
Additionally if you introduce a new ERC20 token we will automatically approve the permit2 contract to spend the tokens.
It is strongly recommended to execute using only one transaction.

Note this function only accepts stringified values.
Async handlersEvent listenersABISending the transaction & receiving the responseapp/page.tsx// Make sure this is only the function you're calling 
// Otherwise you will get an error
import DEXABI from '../../abi/DEX.json'
import { MiniKit } from '@worldcoin/minikit-js'

// ...
const sendTransaction = async () => {
  if (!MiniKit.isInstalled()) {
    return;
  }

  const deadline = Math.floor((Date.now() + 30 * 60 * 1000) / 1000).toString()

  // Transfers can also be at most 1 hour in the future.
  const permitTransfer = {
    permitted: {
      token: testTokens.worldchain.USDCE,
      amount: '10000',
    },
    nonce: Date.now().toString(),
    deadline,
  }

  const permitTransferArgsForm = [
    [permitTransfer.permitted.token, permitTransfer.permitted.amount],
    permitTransfer.nonce,
    permitTransfer.deadline,
  ]

  const transferDetails = {
    to: '0x126f7998Eb44Dd2d097A8AB2eBcb28dEA1646AC8',
    requestedAmount: '10000',
  }

  const transferDetailsArgsForm = [transferDetails.to, transferDetails.requestedAmount]

  const {commandPayload, finalPayload} = await MiniKit.commandsAsync.sendTransaction({
    transaction: [
      {
        address: '0x34afd47fbdcc37344d1eb6a2ed53b253d4392a2f',
        abi: DEXABI,
        functionName: 'signatureTransfer',
        args: [permitTransferArgsForm, transferDetailsArgsForm, 'PERMIT2_SIGNATURE_PLACEHOLDER_0'],
      },
    ],
    permit2: [
      {
        ...permitTransfer,
        spender: '0x34afd47fbdcc37344d1eb6a2ed53b253d4392a2f',
      },
    ],
  })
}
CopyCopied!Learn more about your errors see errorsCheck transaction statusThe transaction will be first simulated and checked for errors. If there are no errors the user will be prompted to sign the transaction. To make it easier we let you install hooks built on top of Viem.This requires installing the @worldcoin/minikit-react package.Usagepnpm i @worldcoin/minikit-react
CopyCopied!In this flow we will use the hook useWaitForTransactionReceipt to check the status of the transaction.app/page.tsximport { useWaitForTransactionReceipt } from '@worldcoin/minikit-react'

const [transactionId, setTransactionId] = useState<string>('')

const client = createPublicClient({
  chain: worldchain,
  transport: http('https://worldchain-mainnet.g.alchemy.com/public'),
})

const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({
  client: client,
  appConfig: {
    app_id: '<app_id>',
  },
  transactionId: transactionId,
})

const sendTransaction = async () => {
  if (!MiniKit.isInstalled()) {
    return;
  }
  // ...
  const {commandPayload, finalPayload} = await MiniKit.commandsAsync.sendTransaction({
    // ...
  })

  if (payload.status === 'error') {
    console.error('Error sending transaction', payload)
  } else {
    setTransactionId(payload.transaction_id)
  }
}
CopyCopied!
Alternative: Verifying the transaction
If you don't want to use our hook you can choose to query for the hash yourself using this endpoint. Make sure to specify type=transaction in the query string.
Transactions are sent via our relayer currently and so we provide you an internal id rather than a hash in the original response above.
app/confirm-transaction/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { MiniAppSendTransactionSuccessPayload } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppSendTransactionSuccessPayload
}

export async function POST(req: NextRequest) {
	const { payload } = (await req.json()) as IRequestPayload

	const response = await fetch(
		`https://developer.worldcoin.org/api/v2/minikit/transaction/${payload.transaction_id}?app_id=${process.env.APP_ID}&type=transaction`,
		{
			method: 'GET',
		}
	)
	const transaction = await response.json()

	return NextResponse.json(transaction)
}
CopyCopied!
Example response from /minikit/transaction
{
    "transactionId": "0xa5b02107433da9e2a450c433560be1db01963a9146c14eed076cbf2c61837d60",
    "transactionHash": "0xa8388148b630b49a3d5a739eaad9e98b5766235cdb21a5ec8d3f89053d982a71",
    "transactionStatus": "failed",
    "miniappId": "app_staging_5748c49d2e6c68849479e0b321bc5257",
    "updatedAt": "2024-09-09T15:18:25.320Z",
    "network": "worldchain",
    "fromWalletAddress": "0x2321401e6a175a7236498ab66f25cd1db4b17558",
    "toContractAddress": "0x2321401e6a175a7236498ab66f25cd1db4b17558"
}
CopyCopied!
Calling a payable function to send ETH
This functionality is available from minikit-js 1.6.0 onwards.
Send transaction supports sending to payable functions. Make sure you have ETH in your wallet.
For ease of use, we have a simple contract that lets you send ETH by forwarding the value. Forward.sol
// Sending eth via Forward.sol
const sendTransaction = async () => {
    const payload = await MiniKit.commandsAsync.sendTransaction({
      transaction: [
        {
          address: '0x087d5449a126e4e439495fcBc62A853eB3257936', // Forward.sol
          abi: ForwardABI,
          functionName: 'pay',
          args: ['0x377da9cab87c04a1d6f19d8b4be9aef8df26fcdd'], // To Whom
          value: '0x9184E72A000', // Send 0.00001 ETH hex encoded
        },
      ],
    });
}
CopyCopied!PreviousConnect WalletNextSign Message© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 5
SOURCE: https://docs.world.org/mini-apps/commands/pay
CONTENT:
Pay | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPaySetupInitiating the paymentUsing the commandVerifying the paymentSuccess Result on World AppWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsPay
This command is essential for applications that need to facilitate payments directly within the app,
enabling seamless transactions for users. At launch, WLD and USDC.e will be supported.
Example: Enabling an e-commerce platform to allow users to purchase digital goods using cryptocurrencies,
providing a smooth checkout experience.
Payments are easy to use and only have three simple steps.

Creating the transaction
Sending the command
Verifying the payment

Setup
Payments are executed on-chain, so you'll need an Ethereum compatible wallet.
Next, whitelist the address in the Developer Portal.
Whitelisting adds security to your mini app to prevent payments from being sent to an unauthorized addresses. Optionally you can
disable this check in the Developer Portal.

Initiating the payment
For security, it's important you initialize and store your payment operation in the backend.
app/api/initiate-pay/route.tsimport { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const uuid = crypto.randomUUID().replace(/-/g, '')

	// TODO: Store the ID field in your database so you can verify the payment later

	return NextResponse.json({ id: uuid })
}
CopyCopied!
Using the command
Async handlersEvent listenersSending the command & handling the responseWe currently support WLD and USDC payments on Worldchain. Below is the expected input for the Pay command.
Since World App sponsors the gas fee, there is a minimum transfer amount of $0.1 for all tokens.PayCommandInput// Represents tokens you allow the user to pay with and amount for each
export type TokensPayload = {
  symbol: Tokens;
  token_amount: string;
};

export type PayCommandInput = {
  reference: string;
  to: string;
  tokens: TokensPayload[];
  network?: Network; // Optional
  description: string;
};
CopyCopied!For convenience, we offer a public endpoint to query the current price of WLD in various currencies detailed here.app/page.tsximport { MiniKit, tokenToDecimals, Tokens, PayCommandInput } from '@worldcoin/minikit-js'

const sendPayment = async () => {
  const res = await fetch('/api/initiate-payment', {
    method: 'POST',
  })
  const { id } = await res.json()

  const payload: PayCommandInput = {
    reference: id,
    to: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', // Test address
    tokens: [
      {
        symbol: Tokens.WLD,
        token_amount: tokenToDecimals(1, Tokens.WLD).toString(),
      },
      {
        symbol: Tokens.USDCE,
        token_amount: tokenToDecimals(3, Tokens.USDCE).toString(),
      },
    ],
    description: 'Test example payment for minikit',
  }

  if (!MiniKit.isInstalled()) {
    return
  }

  const { finalPayload } = await MiniKit.commandsAsync.pay(payload)

  if (finalPayload.status == 'success') {
    const res = await fetch(`/api/confirm-payment`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(finalPayload),
    })
    const payment = await res.json()
    if (payment.success) {
      // Congrats your payment was successful!
    }
  }
}
CopyCopied!
Verifying the payment
You should always verify the payment in your backend. Users can manipulate information in the frontend, so the
response must be verified in a trusted environment.
Web2 applications can call our Developer Portal API to get the current status of the transaction. Since payments are executed on-chain, it can take up to a few minutes to confirm.
You can choose to optimistically accept the payments once they've landed on-chain, or poll the endpoint to wait until it's successful mined.
Web3 applications can choose to search the on-chain event logs temselves via the TransferReference event emitted on-chain.
Note for reference ID the value on chain will be the keccak256 hash of the reference ID.
TransferReferenceevent TransferReference(
    address sender,
    address indexed recipient,
    uint256 amount,
    address token,
    string indexed referenceId,
    bool indexed success
);
CopyCopied!
In this example, we will show querying via Developer Portal API.
app/confirm-payment/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { MiniAppPaymentSuccessPayload } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppPaymentSuccessPayload
}

export async function POST(req: NextRequest) {
	const { payload } = (await req.json()) as IRequestPayload

	// IMPORTANT: Here we should fetch the reference you created in /initiate-payment to ensure the transaction we are verifying is the same one we initiated
	const reference = getReferenceFromDB()

	// 1. Check that the transaction we received from the mini app is the same one we sent
	if (payload.reference === reference) {
		const response = await fetch(
			`https://developer.worldcoin.org/api/v2/minikit/transaction/${payload.transaction_id}?app_id=${process.env.APP_ID}`,
			{
				method: 'GET',
				headers: {
					Authorization: `Bearer ${process.env.DEV_PORTAL_API_KEY}`,
				},
			}
		)
		const transaction = await response.json()

		// 2. Here we optimistically confirm the transaction.
		// Otherwise, you can poll until the status == mined
		if (transaction.reference == reference && transaction.status != 'failed') {
			return NextResponse.json({ success: true })
		} else {
			return NextResponse.json({ success: false })
		}
	}
}
CopyCopied!
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousVerifyNextWallet Auth© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 6
SOURCE: https://docs.world.org/mini-apps/design/app-guidelines
CONTENT:
Guidelines | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesMiniKit IntegrationMobile FirstScroll Bounce on IOS.' 'App IconLoad timesChance basedLocalisationUsernamesUsing the Address BookDesign PatternsInspirationUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalDesign StandardsGuidelines
These guidelines are meant to help you succeed as a mini app developer. Please follow them to ensure your app is approved.
MiniKit Integration
Integrate MiniKit to supercharge your web app with exclusive features like World ID and Wallet access, making your mini app more engaging and valuable to users.
To get your mini app approved, it’s essential to use the MiniKit SDK commands effectively to enhance the user experience.
We’re looking for meaningful integrations, whether through World ID and Wallet access , or other creative uses that add real value.
Mobile First
Mini apps are inherently accessed via mobile, so your application UI should look and feel like a mobile app.
Key considerations for a mobile-first experience:

Use tab navigation to simplify movement within the app.
Implement snap-to text boxes for easy user input.
Avoid footers, sidebars, and excessive scrolling.
Provide clear and direct navigation without hamburger menus.
Ensure smooth transitions between different screens or sections.
Use consistent background colors for a cohesive visual experience.
Provide clear navigation cues to help users understand where they are and how to proceed.
Ensure all UI elements are responsive and adapt well to different screen sizes.
Use fonts that are optimized for readability on mobile devices.
Include a splash page for sign-in if needed.

Your browser does not support the video tag.❌ Bad Example  Footer and long scrollingYour browser does not support the video tag.✅ Good Example  Bottom tab navigation and anchored buttons
Scroll Bounce on IOS. 
We recommend you avoid scroll bounce error on iOS devices. Try disabling autoscroll & maybe fixed position elements or using 100dvh instead of 100vh.
If you are not using a bottom navigation bar, you can use the following CSS to disable the scroll bounce error:
html,
body {
	width: 100vw;
	height: 100vh;
	overscroll-behavior: none;
	overflow: hidden;
}
CopyCopied!
App Icon
Your app icon should be a square image with a non white background.
Load times
For mini apps, 2-3 seconds max for initial load and under 1 second for subsequent actions should be your target.
However, always test for real-world scenarios and provide visual feedback during loading to maintain user trust.
Chance based
We recommend developers to avoid building chance based games, as these games have a very low likelihood of being approved.
Chance based = prize awarded based on chance, not skill. This means you are using a RNG to determine a winner.
You can still have prizes but they need to be awarded based on skill. Not randomness. So winning a game where I get a prize is skill based.
Localisation
Many of our users are located around the world. Apps that are localised for each region will perform significantly better.
You can recognize the user's locale by using the Accept-Language header
These languages are particularly important given our users:

English
Spanish
Japanese
Korean

Usernames
You should never display the user's wallet address, always use their username.
If you use Sign in with World ID you should not be doing any transactions with the user's wallet address, instead you should be using the username.
Sign in with World ID and Verify offer the same World ID guarantees, but Verify is more reliable.
Using the Address Book
World ID inherently allows anonymity between applications. We generally encourage
developers to use their own Verify Command and verify the proof. However, we also offer a World ID
address book. This contract stores a mapping addressVerifiedUntil you can query to see if a World App
address is World ID Orb verified.
Design Patterns
Here are some design patterns that we recommend you follow:

When a user is authenticated through their wallet, always show their username instead of the wallet address
Use the "Verify" command to confirm important actions or identity verification.
When dealing with wallet addresses, use an address book to link them to recognizable usernames or other identifiers

Inspiration
Looking for inspiration? Check out the approved mini apps to see what successful integrations look like and learn from their best practices.
Seeing how others have effectively used MiniKit can provide you with ideas for creating an engaging and valuable experience for your users.
Join our developer network to connect with fellow developers, share insights, and get support:
World Developers Telegram
If your inspiration is still off, here are some concepts that you can follow to build your mini app. Always keep in mind adding value to users through the minikit commands.

Limited Edition Art Distribution: Build an app that allows artists to distribute limited editions of their work, ensuring that each human can claim only a certain number of pieces.
Sybil-Resistant Airdrop Platform: Build a platform for distributing tokens to verified humans, ensuring that airdrops reach genuine users.
Community Engagement Airdrops: Create an app that rewards users for participating in community activities, verified through proof of personhood.
Bot-Free Social Network: Build a social platform that integrates World ID to limit bot activity, enhancing content quality and user engagement.
Human-AI Interaction Platform: Develop an app where AI agents can interact with verified humans for tasks like customer support or data collection.
Decentralized Credit Marketplace: Build a platform that connects borrowers and lenders, using proof of personhood and zero-knowledge attributes to assess creditworthiness.
Merchant Payment Solutions: Develop a platform for local businesses to accept payments in cryptocurrencies, leveraging the World ecosystem for seamless transactions.
Quick StartApp StoreNextUI Kit© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 7
SOURCE: https://docs.world.org/mini-apps/reference/errors
CONTENT:
Errors | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsVerifyPayWallet AuthTransactionsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceErrors
This page is a reference to error codes returned by MiniKit.
Verify
Below are the error codes you could receive with the Verify command
CodeDescriptionHow to fix?verification_rejectedUser rejected the World ID request in World App.If this was a mistake, trigger the verify command again.max_verifications_reachedThis person has already verified for this particular action the maximum number of times allowed.Nothing to do. User cannot verify for this action again.credential_unavailableThis user does not have the requested credential.The user must verify at the Orb or verify their unique device in World App to receive the credential
required.malformed_requestThe request payload couldn't be decrypted or did not conform to the standard.Ensure MiniKit is configured properly and all parameters are valid.invalid_networkThe application is configured for a different environment than the verifying user's client.Ensure you use the Worldcoin Simulator for Staging applications and
World App for Production applications.inclusion_proof_failedThe sequencer returned an unexpected error when retrieving the inclusion proof.Ask the user to try again. This may be due to a temporary network issue, or a bug with World App or the
Signup Sequencer.inclusion_proof_pendingThe user might have the requested credential, but it is not available on-chain yet. It might be
available for API verification.Ask the user to verify again in approximately one hour.unexpected_responseThere was a problem with the response obtained from the WLD app.Try again, though in most cases these will require contacting us to report the bug.generic_errorAn unhandled exception occurred.Try again, though in most cases these will require contacting us to report the bug.
Pay
Below are the error codes you could receive with the Pay command
CodeDescriptionHow to fix?input_errorThere was a problem with this request. Please try again or contact the app owner.Ensure the request is properly formed and try again.payment_rejectedYou’ve cancelled the payment in World App.If this was a mistake, initiate the payment again.invalid_receiverThe receiver address is invalid. Please contact the app owner.You don't have this address whitelisted inside the Developer Portal.insufficient_balanceYou do not have enough balance to complete this transaction.Add more funds to your wallettransaction_failedThe transaction failed. Please try again.Try the transaction again. Something failed on-chain.generic_errorSomething unexpected went wrong. Please try again.Try again, though in most cases these will require contacting us to report the bug.
Wallet Auth
Below are the error codes you could receive with the walletAuth command
CodeDescriptionHow to fix?malformed_requestProvided parameters in the request are invalid.Ensure the request is properly formed and try again. If the problem persists, contact the app owner.user_rejectedUser rejected the request.If this was a mistake, initiate the request again.generic_errorSomething unexpected went wrong.Try the request again. If the problem persists, contact the app owner.
Transactions
Below are the error codes you could receive with the Transaction command
CodeDescriptionHow to fix?invalid_operationTransaction included an operation that was invalidYour app tried using a disallowed operation. These include approve, setAllowance, setApprovalForAll, or setApprovalForAll.invalid_contractApp must whitelist the contract you're calling in the Developer PortalGo to the Developer Portal and whitelist the contract you're callinguser_rejectedUser declined the transaction modalUser closed the transaction modal.input_errorPayload received does not conform to specified typeEnsure the request is properly formed and try again. Note all args must be string. Payload has max size of 8kb so your ABI should just be for your functionsimulation_failedSimulation provider transaction simulation failed (this can include insufficient balance)Txn simulation failed see the debugUrl returned to understand whytransaction_failedTransaction failed please try again laterTry again later. Could be blob fees too high or network congestiongeneric_errorRequest failed for unknown reasonTry the request again. If the problem persists, contact the app owner.daily_tx_limit_reachedDaily transaction limit reachedMax 100 transactions per day. Wait until the next day.disallowed_operationTransaction included an operation that was disallowedMake sure you are not calling functions on the user's safe, doing approvals, calling safe admin functions, etc.permitted_amount_exceeds_slippagePermitted amount exceeds slippageYou must spend at least 90% of the permitted amountpermitted_amount_not_foundPermitted amount not foundPermitted amount not found in permit2 payload
Other helpful things

If you get a GS026 error, it means the signature is not valid. Most likely there's something switched in your args vs your permit.
Double check each argument usually this is the nonce and timestamp getting mixed up.
PreviousAPI ReferenceNextAddress Book© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 8
SOURCE: https://docs.world.org/mini-apps/commands/sign-message
CONTENT:
Sign Message | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageUsing the commandSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSign Message
Sign message lets you create an EIP-191.
You should verify the signature.
Use Case: This command is useful for applications that need to sign messages for verification purposes,
ensuring that the message was indeed created by the owner of the wallet.
Example: A voting app that requires users to sign a message to prove ownership
of their wallet before allowing them to vote.
Using the command
Async handlersEvent listenersSending the command & handling the responseThe response will include a signature compliant with EIP-191.
You should verify the signature.type MiniAppSignMessageSuccessPayload = {
  status: "success";
  signature: string;
  address: string;
  version: number;
};
CopyCopied!app/page.tsximport { MiniKit, SignMessageInput } from '@worldcoin/minikit-js'

const signAndVerifyMessage = async () => {
  const signMessagePayload: SignMessageInput = {
    message: "Hello world",
  };

  const {finalPayload} = await MiniKit.commandsAsync.signMessage(signMessagePayload);

  if (finalPayload.status === "success") {
    const messageHash = hashSafeMessage(messageToSign);

    const isValid = await (
      await Safe.init({
        provider:
          "https://worldchain-mainnet.g.alchemy.com/v2/your-api-key",
        safeAddress: finalPayload.address,
      })
    ).isValidSignature(messageHash, finalPayload.signature);

    // Checks functionally if the signature is correct
    if (isValid) {
      console.log("Signature is valid");
    }
  }
};
CopyCopied!Your message is verified!PreviousSend TransactionNextSign Typed Data© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 9
SOURCE: https://docs.world.org/mini-apps/sharing/world-chat-qa
CONTENT:
World Chat Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatHelper functionFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)World Chat Quick Action
World Chat is a messaging platform in the World App ecosystem.
Quick Actions let you link to specific chat features.
Url follows the schema below.
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741
CopyCopied!
ParametersNameusernameTypestringRequiredREQUIREDDescriptionThe username of the recipient you want to chat with. You can resolve a username using the user's wallet
address.NamemessageTypestringDescriptionPredefined message text to include in the draft chat.NamepayTypestringDescriptionWhen included, opens a draft chat with the send payment option pre-selected. You can optionally specify
an amount by using pay=amount where amount is the numeric value in USDC.e.NamerequestTypestringDescriptionWhen included, opens a draft chat with the payment request option pre-selected. You can optionally
specify an amount by using request=amount where amount is the numeric value in USDC.e.
Helper function
const WORLD_CHAT_APP_ID = 'app_e293fcd0565f45ca296aa317212d8741'

function getWorldChatDeeplinkUrl({
	username,
	message,
	pay,
	request,
}: {
	username: string
	message?: string
	pay?: string | number
	request?: string | number
}) {
	let path = `/${username}/draft`

	if (message) {
		path += `?message=${message}`
	} else if (pay !== undefined) {
		if (pay === 'true' || pay === true) {
			path += `?pay`
		} else {
			path += `?pay=${pay}` // Pay with amount
		}
	} else if (request !== undefined) {
		if (request === 'true' || request === true) {
			path += `?request`
		} else {
			path += `?request=${request}` // Request with amount
		}
	}

	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${WORLD_CHAT_APP_ID}&path=${encodedPath}`
}

// Create a chat with predefined message
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		message: 'Hello from my mini app!',
	})
)

// Create a chat with send payment option
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		pay: 'true',
	})
)

// Create a chat with send payment option and amount
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		pay: 5.25,
	})
)

// Create a chat with payment request option
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		request: 'true',
	})
)

// Create a chat with payment request option and amount
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		request: 10,
	})
)
CopyCopied!
Example output links
// Message draft
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Fmessage%3DHello

// Payment draft with amount
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Fpay%3D5.25

// Request draft with amount
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Frequest%3D10
CopyCopied!
Appendix
Caveats/Warnings

The username must be a valid World ID username.
Only one quick action type (message, pay, or request) can be used at a time.
If the recipient does not exist, the app will show an appropriate error message.
Only USDC.e & WLD are supported for payments.
Currency amounts should be specified as decimal numbers (e.g., 5.25 for 5.25 USDC.e).
PreviousSage SupportFurther ReadingSecurity© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 10
SOURCE: https://docs.world.org/mini-apps/more/webview-spec
CONTENT:
Webview Specifications | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingWebview Specifications
The widget is opened within the World App via a WebView. This means providers can tailor their solutions by considering the specific features and restrictions of these platforms.
Capabilities:

WebView Engine:

Android: Uses Android's native WebView implementation.
iOS: Uses WKWebView, the recommended web rendering engine on iOS, offering enhanced security and performance.

File System and Camera Access:

Access to the camera and file system (e.g., for file uploads) is possible if the user grants permission.

Cookies and DOM Storage:

Supported on both platforms with explicit activation for Android and default behavior for iOS.

Restrictions:

Geolocation and Other Extra Permissions:

By default, neither platform enables geolocation or additional permissions. Each new type of permission must be discussed and implemented separately if required.

New Windows:

Opening new browser windows is prohibited. All navigation remains within the current WebView instance.

Zooming:

Android: Not restricted by default.
iOS: Disabled.

PreviousTroubleshootingNextReleases© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 11
SOURCE: https://docs.world.org/mini-apps/quick-start/installing
CONTENT:
MiniKit-JS SDK | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitTemplate RepositoryInstalling MiniKitUsageCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartMiniKit-JS SDK
MiniKit-JS is our official SDK for creating mini apps that work with World App. It provides handy functions and types to make development a breeze.
Template Repository
If you want to create a brand new mini app, you can use our template repositories:

React template (featuring a simple backend for verifications),
Vanilla JS (using a CDN) template (featuring a simple backend for verifications),
NextJS template.

Otherwise, continue below with the installation instructions.
Installing MiniKit
MiniKit-JS is the core lib, framework agnostic,
MiniKit-React provides hooks that make it easy to interact with the MiniKit SDK.
minikit-jsminikit-reactnpm install @worldcoin/minikit-js
CopyCopied!
Or use a CDN like jsdelivr, for inline HTML, make sure to fill in the version.
<script>
  import { MiniKit } from "https://cdn.jsdelivr.net/npm/@worldcoin/minikit-js@[version]/+esm"
</script>
CopyCopied!
Usage

Create a MiniKit Provider component that installs the SDK and makes it easy to access MiniKit inside your app

src/minikit-provider.tsx'use client' // Required for Next.js

import { ReactNode, useEffect } from 'react'
import { MiniKit } from '@worldcoin/minikit-js'

export default function MiniKitProvider({ children }: { children: ReactNode }) {
	useEffect(() => {
		// Passing appId in the install is optional 
		// but allows you to access it later via `window.MiniKit.appId`
		MiniKit.install(appId?) 
	}, [])

	return <>{children}</>
}
CopyCopied!

Wrap your root with the MiniKitProvider component.

src/index.tsxexport default async function Root({
	children,
}: Readonly<{
	children: React.ReactNode
}>) {
	return (
		<html lang="en">
			<MiniKitProvider>
				<body className={inter.className}>{children}</body>
			</MiniKitProvider>
		</html>
	)
}
CopyCopied!

Check if MiniKit is installed and ready to use

MiniKit.isInstalled() will only return true if the app is opened and properly initialized inside the World App. This is useful to distinguish between a user opening your app in the browser or in the World App.
// ...
console.log(MiniKit.isInstalled())
CopyCopied!IntroductionWhat are Mini Apps?NextCommands© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 12
SOURCE: https://docs.world.org/mini-apps/reference/address-book
CONTENT:
Address Book | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookConsiderationsImplementationExample UsageReact BindingsUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceAddress Book
The Address Book is a contract that stores verified World ID addresses. You can check if a user's address and associated ENS name (if available) is Orb verified using the getIsUserVerified helper function.
Considerations

Default RPC is https://worldchain-mainnet.g.alchemy.com/public
Contract Address is 0x57b930D551e677CC36e2fA036Ae2fe8FdaE0330D.

Implementation
The helper function connects to the World Chain and checks if a given wallet address is verified by querying the Address Book contract.
Example Usage
import { getIsUserVerified } from "@worldcoin/minikit-js"

const userWalletAddress = "0x000000000000000000000000000000000000dEaD"
const isUserVerified = await getIsUserVerified(userWalletAddress) // optionally you can provide your rpc url as a second argument to the function
CopyCopied!

Returns true if the address is verified
Returns false if the address is not verified
Throws an error if the verification check fails

React Bindings
For React applications, we provide a hook useIsUserVerified that handles the verification check and loading state.PreviousErrorsNextUsernames© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 13
SOURCE: https://docs.world.org/mini-apps/commands/wallet-auth
CONTENT:
Wallet Auth (Sign in with Ethereum) | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthCreating the nonceUsing the commandVerifying the LoginConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsWallet Auth (Sign in with Ethereum)
Wallet Auth is our native support for Sign in With Ethereum.
Wallet Auth is a command that:

Authenticates users through their Ethereum wallet using the SIWE protocol (EIP-4361).
Provides the user's Ethereum address after successful authentication.
Verifies ownership of the wallet address via a signed message.

With this, developers can:

Identify users securely and without centralized credentials.
Implement token-based access controls.
Enable blockchain-related features like transactions tied to the authenticated address.

There's an additional benefit of Wallet Auth - apart from the verified wallet address you get the user's username and profile picture url.
After a successful Wallet Auth, you can access these values from the MiniKit class directly:
const username = MiniKit.user.username
CopyCopied!
Creating the nonce
Since the user can modify the client, it's important to create the nonce in the backend. The nonce must be at least 8 alphanumeric characters in length.
app/api/nonce.tsimport {cookies} from "next/headers"; import {(NextRequest, NextResponse)} from "next/server";

export function GET(req: NextRequest) {
  // Expects only alphanumeric characters
  const nonce = crypto.randomUUID().replace(/-/g, "");

// The nonce should be stored somewhere that is not tamperable by the client
// Optionally you can HMAC the nonce with a secret key stored in your environment
cookies().set("siwe", nonce, { secure: true });
return NextResponse.json({ nonce });
}

CopyCopied!
Using the command
Async handlersEvent listenersSending & handling the command responseBelow is the expected input for walletAuth.interface WalletAuthInput {
	nonce: string
	expirationTime?: Date
	statement?: string
	requestId?: string
	notBefore?: Date
}
CopyCopied!Using the async walletAuth command.app/page.tsximport { MiniKit, WalletAuthInput } from '@worldcoin/minikit-js'
// ...
const signInWithWallet = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}
	const res = await fetch(`/api/nonce`)
	const { nonce } = await res.json()

	const {commandPayload: generateMessageResult, finalPayload} = await MiniKit.commandsAsync.walletAuth({
		nonce: nonce,
		requestId: '0', // Optional
		expirationTime: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
		notBefore: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),
		statement: 'This is my statement and here is a link https://worldcoin.com/apps',
	})
	// ...
CopyCopied!The returned message (in final payload) will include a signature compliant with ERC-191.
You're welcome to use any third party libraries to verify the payloads for SIWE.type MiniAppWalletAuthSuccessPayload = {
	status: 'success'
	message: string
	signature: string
	address: string
	version: number
}
CopyCopied!app/page.tsxconst signInWithWallet = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}

	const res = await fetch(`/api/nonce`)
	const { nonce } = await res.json()

	const { commandPayload: generateMessageResult, finalPayload } = await MiniKit.commandsAsync.walletAuth({
		nonce: nonce,
		requestId: '0', // Optional
		expirationTime: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
		notBefore: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),
		statement: 'This is my statement and here is a link https://worldcoin.com/apps',
	})

	if (finalPayload.status === 'error') {
		return
	} else {
		const response = await fetch('/api/complete-siwe', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				payload: finalPayload,
				nonce,
			}),
		})
	}
}
CopyCopied!You can now additionally access the user's wallet address from the minikit object.const walletAddress = MiniKit.walletAddress
// or
const walletAddress = window.MiniKit?.walletAddress
CopyCopied!
Verifying the Login
Finally, complete the sign in by verifying the response from World App in your backend. Here we check the nonce matches the one we created earlier, and
then verify the signature.
app/api/complete-siwe.tsimport { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'
import { MiniAppWalletAuthSuccessPayload, verifySiweMessage } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppWalletAuthSuccessPayload
	nonce: string
}

export const POST = async (req: NextRequest) => {
	const { payload, nonce } = (await req.json()) as IRequestPayload
	if (nonce != cookies().get('siwe')?.value) {
		return NextResponse.json({
			status: 'error',
			isValid: false,
			message: 'Invalid nonce',
		})
	}
	try {
		const validMessage = await verifySiweMessage(payload, nonce)
		return NextResponse.json({
			status: 'success',
			isValid: validMessage.isValid,
		})
	} catch (error: any) {
		// Handle errors in validation or processing
		return NextResponse.json({
			status: 'error',
			isValid: false,
			message: error.message,
		})
	}
}
CopyCopied!PreviousPayNextConnect Wallet© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 14
SOURCE: https://docs.world.org/mini-apps/sharing/quick-actions
CONTENT:
Quick Actions (Sharing) | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Quick Actions (Sharing)
What Are Quick Actions?
A Quick Action is a universal deeplink defined by a schema that navigates to a specific path inside your app.
It facilitates direct integrations between mini apps, enabling one app (App A) to use a feature or action of another app (App B) seamlessly.
In short, you can create a quick action for your own mini app to share it with other developers or use other mini app quick actions that will be listed in this page.
If a user clicks on your link and has World App installed, it will automatically open the mini app inside of World
App to the specified path. Otherwise, it will direct them to the app store and prompt them to install World App.
Benefits of Quick Actions

Leverage Expertise: Use other mini apps already working specific features.
Resource & Time Optimization: Focus on your apps core functionalities while outsourcing supplementary features.
Community Growth: Integrating another apps functionality opens opportunities for co-marketing.

How to Make a Quick Action

Create a Universal Link Schema: Define a schema with a custom path that aligns with the functionality you want to provide.

Publish it in our docs for all devs to use: Fill this form for our team to test and publish your quick action on this page.

Urls will follow the schema below.
 https://worldcoin.org/mini-app?app_id={app_id}&path={path}
CopyCopied!
Parameters
Nameapp_idTypestringRequiredREQUIREDDescriptionThe app_id corresponding to your mini app.NamepathTypestringDescriptionShould be the url encoded path where you want to link to inside of your mini appTechnical ReferencePayment MethodsNextUNO Swap© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 15
SOURCE: https://docs.world.org/mini-apps/quick-start/commands
CONTENT:
Commands | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartCommands
Commands are defined actions your mini app can perform in World App. Every command is available as either:

a synchronous function that dispatches an event, the result of which has to be listened for,
an async function, that can be awaited, resolves with the result.

CommandDescriptionVerifyVerify an action with World ID.PayInitiate a payment request.Wallet AuthAuthenticate via Sign in with EthereumSend TransactionWrite to smart contractsSign MessageSign personal messages with your walletSign Typed DataSign EIP-712 payloads with your walletShare ContactsShare your contacts in a privacy preserving way with appsNotificationsSend notifications to usersQuick ActionsUse other mini app featureGet PermissionsGet user permissionsSend Haptic FeedbackSend haptic feedback to user's devicePreviousInstalling MiniKitNextResponses© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 16
SOURCE: https://docs.world.org/mini-apps/more/releases
CONTENT:
Minikit Releases | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesWeek of 10th March 2025Developer PortalFurther ReadingMinikit Releases
Week of 10th March 2025
Mobile

[iOS] Notification paths bugs: Fixed
[iOS] Contacts modal bugs: Fixed
[iOS] Added safeTxHash and userOpHash in response from send transaction
[iOS+ Android] Include Mini App ID in Transaction Response Payload
[iOS+ Android]Added Haptic Feedback
[Android] World Chat Bugs Fixed
[iOS+ Android] Mini App rearrange
[iOS+ Android] Spotlight Search Fixed
[iOS+ Android] Mini App Widget

Minikit 1.7.1 is out.

Transaction Improvements.

Support for booleans in send transactions.
Auto formatting of your content now instead of you needing to stringify

Haptics Support.
Get Permissions (now you have a command to get the notification permission status of a user without needing to request first)

Docs

World Chat Quick Actions Added

Pay
Request Payment
Draft Message

Google & Apple Pay Implementation guides
Haptic Feedback implementation guide
PreviousWebview Specifications© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 17
SOURCE: https://docs.world.org/mini-apps/commands/get-permissions
CONTENT:
Get Permissions | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsUsing the commandResponse typeSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsGet Permissions
This command will let you check the status of permissions a user has granted to your mini app.
This command will be available from v1.7.0 of minikit and v2.8.76 of World App.
Using the command
Currently this command only supports notifications.
Async handlersEvent listenersSending the command and handling the responseimport { MiniKit, GetPermissionsPayload, Permission } from '@worldcoin/minikit-js'

// Example function of how to use the command
const getPermissions = useCallback(
    async () => {
        const payload = await MiniKit.commandsAsync.getPermissions();
        // Handle the response
    },
    []
);
CopyCopied!
Response type
Success response payload
type MiniAppGetPermissionsSuccessPayload = {
    status: 'success';
    permissions: Permission[];
    version: number;    // same version that was received from MiniKit
};
CopyCopied!
{
  "permissions": {
    "notifications": false
  },
  "status": "success",
  "timestamp": "2025-03-11T18:21:49.741-07:00",
  "version": 1
}
CopyCopied!
Error response payload
type MiniAppGetPermissionsErrorPayload = {
    status: 'error';
    error_code: GetPermissionsErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

generic_error - Request failed for unknown reason
PreviousSend NotificationsNextSend Haptic Feedback© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 18
SOURCE: https://docs.world.org/mini-apps/sharing/uno-qa
CONTENT:
UNO Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapHelper functionEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)UNO Quick Action
UNO is your simple, secure token wallet.
View your token balances and check prices all in one place. Buy, Sell, Swap, or Send tokens in a fun and simple interface.
Uno now supports a Quick Action to deeplink directly to the swap tab, with a specific swap ready to be executed.
ParametersNametabTypestringRequiredREQUIREDDescriptionCurrently only supports "swap"; this allows deep linking to the swap tab.NamefromTokenTypestringDescriptionToken address for the from token.NameamountTypestringDescriptionBase units amount of the from token.NametoTokenTypestringDescriptionToken address for the to token.NamereferrerAppIdTypestringDescriptionWorld Miniapp App id of the referring World Miniapp. When provided, a “Go Back” deeplink button will
appear in the top left of the header that takes the user back to the referring Miniapp.NamereferrerDeeplinkPathTypestringDescriptionDeeplink path for referring World Miniapp Quick Actions. When provided, this path will be added to the
“Go Back” deeplink button so that the referring Miniapp can execute a Quick Action when the user taps
“Go Back” in Uno.
Helper function
const UNO_APP_ID = 'app_a4f7f3e62c1de0b9490a5260cb390b56'

function getUnoDeeplinkUrl({
	fromToken,
	toToken,
	amount,
	referrerAppId,
	referrerDeeplinkPath,
}: {
	fromToken?: string
	toToken?: string
	amount?: string
	referrerAppId?: string
	referrerDeeplinkPath?: string
}) {
	let path = `?tab=swap`
	if (fromToken) {
		path += `&fromToken=${fromToken}`
		if (amount) {
			path += `&amount=${amount}`
		}
	}
	if (toToken) {
		path += `&toToken=${toToken}`
	}
	if (referrerAppId) {
		path += `&referrerAppId=${referrerAppId}`
	}
	if (referrerDeeplinkPath) {
		path += `&referrerDeeplinkPath=${encodeURIComponent(referrerDeeplinkPath)}`
	}
	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${UNO_APP_ID}&path=${encodedPath}`
}

// create a trade for 1.2345 USDC to WETH
console.log(
	getUnoDeeplinkUrl({
		fromToken: '0x79A02482A880bCE3F13e09Da970dC34db4CD24d1',
		amount: '1234500',
		toToken: '0x4200000000000000000000000000000000000006',
	})
)
CopyCopied!
Example output link
https://worldcoin.org/mini-app?app_id=app_a4f7f3e62c1de0b9490a5260cb390b56&path=%3Ftab%3Dswap%26fromToken%3D0x79A02482A880bCE3F13e09Da970dC34db4CD24d1%26amount%3D1234500%26toToken%3D0x4200000000000000000000000000000000000006
CopyCopied!
Appendix
Terminology

fromToken - token that is being swapped away for another token. Other names for this parameter are “sell token”, or “input token”.
toToken - token that is being swapped into for another token. Other names for this parameter are “buy token”, or “output token”.
referrer - In the cases that the UNO Quick Action link is used from a different Miniapp, the referrer is the Miniapp where that link was used.
Specifying the referrerAppId allows UNO to provide a “Go back” to the Miniapp that provided the link to the UNO Quick Action.

Caveats/Warnings Swap will not work if not taken into consideration.

If the user does not have the fromToken (sell token).
Amount should be in the base units of the fromToken.
PreviousQuick ActionsNextEggs Vault Smash© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 19
SOURCE: https://docs.world.org/mini-apps/more/security
CONTENT:
Security | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingSecurity
MiniKit is purely a communication channel between the client and the app. Your application should never default trust any payloads it receives on the client side.
Verify, Pay, and Wallet Auth should all be verified inside of your backend.Quick Actions (Sharing)World ChatNextApp Store Policy© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 20
SOURCE: https://docs.world.org/mini-apps/commands/sign-typed-data
CONTENT:
Sign Typed Data | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataUsing the commandShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSign Typed Data
Sign Typed Data lets you create an EIP-712 signature.
Use Case: This command is essential for applications that require structured data to be signed.
Example: An insurance platform that requires users to sign typed data to confirm the terms of their insurance policy.
Using the command
Async handlersEvent listenersSending the command & handling the responseimport type { TypedData, TypedDataDomain } from 'abitype'

export type SignTypedDataInput = {
  types: TypedData
  primaryType: string
  message: Record<string, unknown>
  domain?: TypedDataDomain
}
CopyCopied!type MiniAppSignTypedDataSuccessPayload = {
  status: 'success'
  signature: string
  address: string
  version: number
}
CopyCopied!app/page.tsximport { MiniKit, SignTypedDataInput } from '@worldcoin/minikit-js'

  const signAndVerifyTypedData = async () => {
    if (!MiniKit.isInstalled()) {
      return
    }

    const {finalPayload} = await MiniKit.commandsAsync.signTypedData(
      somePayloadforEIP712 as SignTypedDataInput;
    );

    // Verifying the signature. Note permit2 payloads and safe operations are not permitted in this command.
    if (payload.status === 'success') {
      const messageHash = hashSafeMessage(signTypedDataPayload)

      const isValid = await (
        await Safe.init({
          provider: 'https://worldchain-mainnet.g.alchemy.com/v2/your-api-key',
          safeAddress: payload.address,
        })
      ).isValidSignature(messageHash, payload.signature)

      // Checks functionally if the signature is correct
      if (isValid) {
        console.log('Signature is valid')
      }
    }
  };
CopyCopied!PreviousSign MessageNextShare Contacts© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 21
SOURCE: https://docs.world.org/mini-apps/reference/payment-methods
CONTENT:
Integrate Payment Methods | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsEnvironment SetupLimitations and ConsiderationsAdditional ResourcesQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceIntegrate Payment Methods
Integrate Apple Pay and Google Pay into your mini-app

Both Apple Pay and Google Pay run directly in the WebView environment of your mini-app, using their respective
JavaScript APIs.
Environment Setup
First, ensure your mini-app has a secure HTTPS environment, as both Apple Pay and Google Pay require it.
Apple PayGoogle PayFor Apple Pay, you must:Register for an Apple Developer accountConfigure your merchant IDRegister your domain with AppleSet up merchant validation on your serverComplete setup guide on Apple's website
Testing
Test your integration thoroughly using test cards and sandbox environments.
Apple PayGoogle PayDevelopment Environment:Use Apple Pay's sandbox environmentTest with Apple's test cardsTest Cards:You can use any valid card number in the sandboxNo actual charges will be processedTesting Checklist:Verify merchant validation worksTest on both iOS devices and Safari on macOSCheck error handlingVerify payment completion flowsYour browser does not support the video tag.Apple Pay integration demo
Limitations and Considerations

Platform Restrictions: Apple Pay only works on iOS/macOS devices with Safari, while Google Pay is primarily for Android
Device Support: Users must have devices that support these payment methods
WebView Context: Some features might behave differently in the mini-app WebView compared to a standard browser

For Apple Pay merchant validation, your server needs to be accessible via HTTPS and properly configured with Apple's
developer portal.
Additional Resources

Apple Pay Demo and Documentation
Google Pay API Documentation
Apple Pay Human Interface Guidelines
Google Pay Web Integration Guide
PreviousStatus PageQuick Actions (Sharing)Quick Actions© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 22
SOURCE: https://docs.world.org/mini-apps/sharing/sage-qa
CONTENT:
Sage Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportKey FeaturesGetting StartedApp SettingsApp AnalyticsSageSupport ComponentSupport LinkWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Sage Quick Action
Sage is an AI chatbot that lets users ask questions and get answers.
Sage Support enables developers to integrate Sage chats seamlessly into their World Mini Apps. Developers get a white label version of Sage that acts as a support assistant for their Mini App using the context they give it.
Key Features

Seamless Integration: Easily embed Sage chats within any World Mini App.
Custom Context Parameters: Tailor Sage's responses based on Mini App specific data.
Logs and Analytics: Track and understand what types of questions your users are asking.

Getting Started
1. Create a Sage Developer project
Go to the Sage Developer dashboard and sign in. Create a new project.
2. Customizing Sage to fit your app
With a project created, head over to the project's settings, this page is accessible by going into: Apps > Your App > Settings. (Navigation is available through the menu bar on the top right or  the top left breadcrumbs)
In this page you can find parameters to fine tune Sage to best interact with your users in the context of your app, a comprehensive description of these parameters is present below.
3. Integrating Sage Support in your app
The final step to integrating Sage Support into your React application is to install and make use of the SageSupport component.
Add the npm package with the command:
npm install sage-support
CopyCopied!
Once the dependency installed, the simplest way to integrate Sage Support is:
import { SageSupport } from 'sage-support';

<SageSupport projectId={YOUR_APP_ID} />
CopyCopied!
Where YOUR_APP_ID is the App ID (number) you can find in the Sage Developer Dashboard (top right).
More configuration options for the component are available below.
4. Sage Support Link
Generate your app's Support Link using the Support Link wizard and use it as the Support URL under Worldcoin Developer > Mini App > Configuration > App Store > Support > Link.
Analytics
Once you've started using Sage Support in your Mini App, analytics are also available in the Sage Developer Dashboard, allowing you to identify the usage of Sage Support in your app and understand how users are using it. You can find more information about analytics below.
This is all you need to get Sage Support working. If you wish to customize it further, or better understand the various parameters continue reading below.

App Settings
Located at Apps > Your App > Settings, the Settings page allows you to fine tune the Sage Support assistant to meet the needs and context of your Mini App.
App Name
This name only lives in the Sage Developer dashboard universe and serves the purpose of differentiating between multiple Sage Support integrations, it's recommended that this field is set accordingly.
App ID
Uniquely identifies your Sage Developer App and is used to link your SageSupport component to the Sage Developer dashboard. This field is automatically generated and cannot be changed.
Introduction Message
Defines the first message to be sent by the Sage assistant once a new chat is created/open by a user. This field is also capable of encompassing a custom variable (%USER%) which Sage will replace by the user's username.
App Description
Provide a solid description about your app and what it focuses on, this field is processed by Sage as an additional context parameter, and is useful to keep the assistant behavior and subject within the landscape of your Mini App.

App Analytics
Located at Apps > Your App > Analytics, the Analytics page allows you to view statistics and analytic data about the usage of Sage Support within your Mini App.
Messages
See how many messages were sent to Sage Support chats from your Mini App in each of the last 7 days.
Users
See how many users interacted with Sage Support chats from your Mini App in each of the last 7 days.
Keywords
Currently not available.
Next Step
Currently not available.
Logs
See how users chat with Sage Support inside your app, this data is shown anonymously and provides the developer with a more in-depth tool to explore the interactions between users and Sage Support.

SageSupport Component
Installation
To use the Sage Support React component you must first install it using npm (or your package manager of choice).
npm install sage-support
CopyCopied!
Basic Usage
From the get go you can use Sage Support by using the basic implementation, the only mandatory parameter to be passed to the component is the projectId. This ID (App ID) is retrieve from the Settings page in the Sage Developer dashboard.
import { SageSupport } from 'sage-support';

<SageSupport projectId={YOUR_APP_ID} />
CopyCopied!
Props & Personalisation
Other props allow you to customize both the aesthetic and behavior of the Sage Support Chat.
NameprojectIdTypenumberRequiredREQUIREDDescriptionLinks your component to your Sage Developer project, used for analytics and behavior.NamereturnURITypestringDescriptionAllows you to make use of the return button on the top left of the Sage Support chat window. The value to be passed to this prop is a quick action URL.NameclassNameTypestringDescriptionAllows you to pass custom CSS classes to affect the fallback default button.NamechildrenTypeReact.ReactNodeDescriptionAllows you to pass a custom React element to replace the default button.

Support Link
You can also integrate Sage Support directly into your World Mini App by using a Support Link. This allows your users to access Sage's AI-powered support without requiring you to install any additional packages or components.
The Support Link is a quick action URL that opens the Sage Support chat interface directly within the World App. When users click on this link, they'll be able to ask questions and get support related to your Mini App.
This link is particularly useful for developers to use Sage as their Mini App's native Support link, available under Worldcoin Developer > Mini App > Configuration > App Store > Support > Link
Base URL & Parameters
The base URL to access a support chat is:
https://worldcoin.org/mini-app?app_id=app_5dee2f19cd6eef599eb6ab275a0a7523&path=/support-chat
This support link, akin to the SageSupport component, accepts and requires some parameters to be passed, in this case URL Query Parameters, for the Support Chat to work like expected.
NamedevProjectIdTypenumberRequiredREQUIREDDescriptionLinks your Support Link to your Sage Developer project, used for analytics and behavior.NamedevReturnURITypestringDescriptionAllows you to make use of the return button on the top left of the Sage Support chat window by passing a Mini App quick atcion URI/URL. Due to some encoding functionalities and implementation caveats, the value to be passed to this parameter has to be formatted accordingly beforehand:

The URL must be submitted to a UTF-8 encoding.

All ampersand characters (such as the one in &path) have to be replaced with the sequence (amps).

To make this process easier, you can make use of the generator below or inside the Sage Developer Dashboard. Any URIs outside of the worldcoin.org/mini-app space are not allowed.
Support Link Generator
Sage Dev Project IDCustom Return URIGenerated LinkPreviousDNA Send & SwapNextWorld Chat© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 23
SOURCE: https://docs.world.org/mini-apps/commands/connect-wallet
CONTENT:
Connect Wallet | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsConnect Wallet
Wallet auth returns a wallet address upon completion. If you don't want to use SIWE and just want the wallet address,
just use the walletAuth command and skip the verification of the payload.
Go to Wallet Auth Section
Use Case: This command is useful for applications that require user authentication via their Ethereum wallet,
allowing for secure access without traditional credentials.
Example: An app that allows users to manage their assets and trade tokens directly from their wallet without needing to create a separate account.PreviousWallet AuthNextSend Transaction© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 24
SOURCE: https://docs.world.org/mini-apps/commands/share-contacts
CONTENT:
Share Contacts | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsCrafting the payloadUsing the commandResponse typeSuccess Result on World AppSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsShare Contacts
Sharing contacts is a command that allows you to request users to share contacts in their phone in a privacy preserving way.
This command will be available from v1.4.0 of minikit and v2.8.72 of World App.
Crafting the payload
export type ShareContactsInput = {
	isMultiSelectEnabled: boolean
	inviteMessage?: string
}
CopyCopied!

isMultiSelectEnabled is a boolean that determines if the user can select multiple contacts, by default you can only select one contact in the modal.
inviteMessage is an optional custom message that will be displayed to the user when the user invites a non world app user while inside of your mini app.

Using the command
Here is an example of how to use the shareContacts command.
Async handlersEvent listenersSending the command and handling the response// Example function of how to use the command
const shareContacts = useCallback(
    async (isMultiSelectEnabled: boolean = false, inviteMessage?: string) => {
        const shareContactsPayload: ShareContactsPayload = {
            isMultiSelectEnabled,
            inviteMessage,
        };
        const payload = await MiniKit.commandsAsync.shareContacts(shareContactsPayload);
        // Handle the response
    },
    []
);
CopyCopied!
Response type
The response will contain an array of contacts that the user has selected.
Success response payload
type MiniAppShareContactsSuccessPayload = {
    status: 'success';
    contacts: Array<{
        username: string;
        walletAddress: string;
        profilePictureUrl: string | null;
    }>;
    timestamp: string;
    version: number;
};
CopyCopied!
Error response payload
type MiniAppShareContactsErrorPayload = {
    status: 'error';
    error_code: ShareContactsErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

user_rejected - The user rejected the request
generic_error - An unknown error occurred

Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousSign Typed DataNextSend Notifications© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 25
SOURCE: https://docs.world.org/mini-apps/commands/send-notifications
CONTENT:
Send Notifications | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsRequesting permissionResponse typeCalling the notification endpointTestingSuccess Result on World AppGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Notifications
Sending notifications has three parts:

Requesting the permission in the Dev Portal Advanced settings
Requesting permission to send notifications via minikit
Sending the notification

This command will be available from v1.4.0 of minikit and v2.8.72 of World App.
Requesting permission
Here is an example of how to use the requestPermission command.
Note this modal will only allow you to show it once. If you reject it, you will need to direct the user to settings in order to re-enable this.
You can find this out by checking the error_code in the response.
The schema for the settings page is:
worldcoin.org/settings/miniapps
CopyCopied!
Async handlersEvent listenersSending the command and handling the responseimport { MiniKit, RequestPermissionPayload, Permission } from '@worldcoin/minikit-js'

// Example function of how to use the command
const requestPermission = useCallback(
    async () => {
        const requestPermissionPayload: RequestPermissionPayload = {
            permission: Permission.Notifications,
        };
        const payload = await MiniKit.commandsAsync.requestPermission(requestPermissionPayload);
        // Handle the response
    },
    []
);
CopyCopied!
Response type
Success response payload
type MiniAppRequestPermissionSuccessPayload = {
    status: 'success';
    permission: 'notifications';
    timestamp: string;  // ISO-8601
    version: number;    // same version that was received from MiniKit
};
CopyCopied!
Error response payload
type MiniAppRequestPermissionErrorPayload = {
    status: 'error';
    error_code: RequestPermissionErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

user_rejected - User declined permission request
generic_error - Request failed for unknown reason
already_requested - User has already declined turning on notifications once
permission_disabled - User has notification disabled for World App
already_granted - User has already granted this mini app permission
unsupported_permission - Permission is not supported yet

Calling the notification endpoint
You can send notifications to this endpoint: https://developer.worldcoin.org/api/v2/minikit/send-notification.
For detailed information on the endpoint, see the API Reference.
Business rules about this endpoint

We do not allow marketing notifications. These should be purely functional notifications.
We do not allow notifications that are not related to the mini app.
We do not allow notifications that are not related to the user.
The endpoint is limited to 1000 users per call
Messages are limited to 200 characters
Titles are limited to 30 characters

Testing
We currently have a limit of 40 notifications per 4 hours for unverified apps. This is to help you test your notification implementations.
Currently you will need to create a new app if your app is verified as it will default to the verified app's metadata. In addition, you need
to enable notifications for your mini app inside of World App to receive them.
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousShare ContactsNextGet Permissions© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 26
SOURCE: https://docs.world.org/mini-apps/reference/status-page
CONTENT:
Status Page | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PageGet StatusGETPayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceStatus Page
You can check the current status of World services at status.worldcoin.org.
The Networks section is not up to date yet.
For transactions, status is determined by:

Disruption: Transactions taking longer than 45 seconds
Outage: Transactions taking longer than 5 minutes

Get StatusGEThttps://status.worldcoin.org/api/services
This endpoint returns the current status of all World services.Query ParamsNamelogsTypebooleanDescriptionInclude logs=true to get historical status logs for each service.RequestcURLJavaScriptGET/api/servicescurl -X GET "https://status.worldcoin.org/api/services?logs=true"
CopyCopied!

Response
NameservicesTypearrayDescriptionArray of service status objects, each containing:NamenameTypestringDescriptionService name (e.g., "Mini Apps", "World ID Verifications")NameidTypestringDescriptionService identifierNamedescriptionTypestringDescriptionDescription of the serviceNamecategoryIdTypestringDescriptionCategory the service belongs to (e.g., "mini-apps", "world-id", "finance")NamestatusTypestringDescriptionCurrent service status: "ok", "warning", or "error"NamelogsTypearrayDescriptionHistorical status changes, containing:
datetime: Unix timestamp
status: Status at that time
name: Event name
description: Event description
downtime: Duration in seconds (if applicable)
NameuptimeRatioTypeobjectDescriptionUptime percentages for different time periods:
1: Last 24 hours
7: Last 7 days
30: Last 30 days
90: Last 90 days
Response{
    "services": [
        {
            "name": "Crypto Transactions",
            "id": "crypto-transactions",
            "description": "",
            "categoryId": "mini-apps",
            "status": "ok",
            "logs": [
                {
                    "datetime": 1739546233,
                    "status": "ok",
                    "name": "Running again",
                    "description": "Service outage"
                }
            ],
            "uptimeRatio": {
                "1": 99.7,
                "7": 100,
                "30": 100,
                "90": 100
            }
        }
    ],
    "categories": [
        {
            "id": "mini-apps",
            "name": "Mini Apps",
            "status": "ok"
        }
    ],
    "uptimeRatio": {
        "1": 98,
        "7": 98.7,
        "30": 99.6,
        "90": 99.9
    },
    "status": "ok"
}
CopyCopied!PreviousUsernamesNextPayment Methods© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 27
SOURCE: https://docs.world.org/mini-apps/sharing/dna-qa
CONTENT:
DNA Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapHelper FunctionReturnsExample UsageGenerated Deeplink URL:NoteSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)DNA Quick Action
Generate deep links to the DNA app for quick actions like Swap and Send.
DNA now supports a Quick Action to deeplink directly
into the wallet interface, allowing users to perform specific actions like sending tokens or swapping assets with predefined parameters.
ParametersNametabTypestringRequiredREQUIREDDescriptionSupports deep linking to the swap and send tabs.NamefromTokenTypestringDescriptionThe contract address of the token being sent (fromToken).NametoTokenTypestringDescriptionThe contract address of the token being received (toToken). This is used in swap actions.NamerecipientAddress or usernameTypestringDescriptionThe recipient’s wallet address or username for sending tokens.NameamountTypestringDescriptionThe amount of the fromToken to be sent, specified in its base unit .NamesourceAppIdTypestringDescriptionThe application ID of the source app initiating the deeplink.NamesourceDeeplinkPathTypestringDescriptionA deeplink path from the source application, which will be URL-encoded.
Helper Function
const DNA_APP_ID = 'app_8e407cfbae7ae51c19b07faff837aeeb'

function getDNADeeplinkUrl({
	tab,
	fromToken,
	toToken,
	recipientAddress,
	amount,
	sourceAppId,
	sourceDeeplinkPath,
}: {
	tab: 'swap' | 'send'
	fromToken?: string
	toToken?: string
	recipientAddress?: string
	amount?: string
	sourceAppId?: string
	sourceDeeplinkPath?: string
}) {
	let path = `/wallet?tab=${tab}`

	if (fromToken) {
		path += `&fromToken=${fromToken}`
		if (amount) {
			path += `&amount=${amount}`
		}
	}

	if (toToken) {
		path += `&toToken=${toToken}`
	}

	if (recipientAddress) {
		path += `&recipientAddress=${recipientAddress}`
	}

	if (sourceAppId) {
		path += `&sourceAppId=${sourceAppId}`
	}

	if (sourceDeeplinkPath) {
		path += `&sourceDeeplinkPath=${encodeURIComponent(sourceDeeplinkPath)}`
	}

	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${DNA_APP_ID}&path=${encodedPath}`
}
CopyCopied!
Returns
A string representing the complete deeplink URL to the DNA application with the specified parameters.
Example Usage
const deeplinkUrl = getDNADeeplinkUrl({
  fromToken: '0x79A02482A880bCE3F13e09Da970dC34db4CD24d1',
  toToken: '0x4200000000000000000000000000000000000006',
  recipientAddress: '0xRecipientAddressHere',
  amount: ‘1235',
  sourceAppId: 'app_a4f7f3e62c1de0b9490a5260cb390b56',
  sourceDeeplinkPath: ‘/path’,
});
console.log(deeplinkUrl);
CopyCopied!
Generated Deeplink URL:
https://worldcoin.org/mini-app?app_id=app_8e407cfbae7ae51c19b07faff837aeeb&path=%2Fwallet%3Ftab%3Dsend%26fromToken%3D0x79A02482A880bCE3F13e09Da970dC34db4CD24d1%26amount%3D1234500%26toToken%3D0x4200000000000000000000000000000000000006%26recipientAddress%3D0xRecipientAddressHere%26sourceAppId%3Dapp_a4f7f3e62c1de0b9490a5260cb390b56%26sourceDeeplinkPath%3D%252Fsome%252Fpath
CopyCopied!
Note

Ensure that the amount is specified in the unit of the fromToken (e.g., wei for Ethereum-based tokens).
The sourceDeeplinkPath is URL-encoded to ensure it is correctly interpreted when the deeplink is accessed.
The DNA_APP_ID should be defined in your environment to match the application ID assigned to your DNA instance.
If the tab is Send, it is necessary/recommended to provide fromToken, amount, and the recipient’s address or username (toToken is not required).
If the tab is Swap, it is necessary/recommended to provide fromToken, toToken, and amount (in base unit).

This function facilitates the creation of deeplink URLs that can be used to direct users seamlessly into specific actions within the DNA application, enhancing the user experience by pre-filling transaction details.PreviousEarn WLD PoolNextSage Support© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 28
SOURCE: https://docs.world.org/mini-apps/more/troubleshooting
CONTENT:
Troubleshooting | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingTroubleshooting
If you're having trouble with your mini-app, here are some common issues and solutions.
Triggering a command on initialize
Problem: Since we use a client side component to install the minikit provider onto the Window object.
If you try to trigger a command seperately as soon as the page opens via a separate useEffect hook
it can result in a race condition where minikit is not yet installed when you call the command.
Fix: If you wish to call a command on open include the command inside the same useEffect hook you use to install MiniKit.
/components/MiniKitProvider.tsx'use client'

import { useEffect, ReactNode } from 'react'
import { MiniKit } from '@worldcoin/minikit-js'

export const MiniKitProvider = ({ children }: { children: ReactNode }) => {
	useEffect(() => {
		MiniKit.install()

		// Add any commands you wish to trigger on start here to prevent race conditions
		MiniKit.commands.walletAuth({
			// ...
		})
	}, [])

	return <>{children}</>
}
CopyCopied!
Universal Links on iOS
Go to notes long press the link and click open in world app on iOS to reset it.
This will happen if you selected open in browser a long time ago, needs to be resetPreviousGrantsNextWebview Specifications© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 29
SOURCE: https://docs.world.org/mini-apps/sharing/eggs-vault-qa
CONTENT:
Eggs Vault Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Eggs Vault Quick Action
Crack your egg daily to earn reward
Eggs Vault now supports a Quick Action to deeplink directly the smash screen to never miss your daily eggs.
ParametersNamecampaignNameTypestringDescriptionLinks to a specific campaign. If you have campaignName then it will go to campaign detail page.
Url follows the schema below. Navigate there to use this Quick Action.
https://worldcoin.org/mini-app?app_id=app_ee968e983074cb090e6f12cd75b63bb3
CopyCopied!PreviousUNO SwapNextEarn WLD Pool© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 30
SOURCE: https://docs.world.org/mini-apps/design/ui-kit
CONTENT:
UI Kit | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalDesign StandardsUI Kit
The Mini Apps UI Kit is a React-based design system for accelerating the development of mini apps.
It provides pre-built, reusable UI components that follow World's design guidelines, ensuring consistency and high-quality user experience.
Get Started
Install the UI Kit with NPM:
npm install @worldcoin/mini-apps-ui-kit-react
CopyCopied!
Learn more about its usage in the official README.
Explore the full component library and usage examples on the UI Kit Documentation and Demo Storybook.PreviousGuidelinesCommandsVerify© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 31
SOURCE: https://docs.world.org/mini-apps/reference/usernames
CONTENT:
Usernames | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesIntroductionHow to get itStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceUsernames
Introduction
Usernames are ENS-compatible identifiers for every World App user, ensuring consistency and easy recognition.
For example, when displaying transaction history, show the username instead of the wallet address to make it more user-friendly and private.
The usernames service is public, docs can be found here. This will be mostly useful for more advanced use cases.
How to get it
To get the user's username you can either complete Wallet Auth and access the username/profile picture url from MiniKit directly:
const username = MiniKit.user.username
CopyCopied!
Or you can request it manually, using the getUserByAddress method on MiniKit:
const worldIdUser = await MiniKit.getUserByAddress(userAddress)
CopyCopied!
Other ways involve querying the usernames service.PreviousAddress BookNextStatus Page© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 32
SOURCE: https://docs.world.org/mini-apps/sharing/earn-wld-qa
CONTENT:
Earn WLD Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Earn WLD Quick Action
Earn high yields with your WLD token. Put your WLD to work by adding liquidity to the markets and earning large rewards from other traders.
Earn WLD now supports a Quick Action to deeplink directly to their staking screen.
ParametersNameapp_idTypestringRequiredREQUIREDDescriptionUnique ID for the Earn WLD mini app.
Url follows the schema below. Navigate there to use this Quick Action.
http://worldcoin.org/mini-app?app_id=app_b0d01dd8f2bdfbff06c9e123de487eb8
CopyCopied!PreviousEggs Vault SmashNextDNA Send & Swap© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 33
SOURCE: https://docs.world.org/mini-apps/more/grants
CONTENT:
Grants | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsFast Grants ProgramFoundation GrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingGrants
Fast Grants Program
The Fast Grants program offers grants in the range of $1-5k and are available
to US citizens as well. We aim to provide a decision within 48 hours of application. These grants are aimed to help developers build their MVPs.
Apply Here: Fast Grants Program
Foundation Grants
In addition to Fast Grants you can apply for Foundation Grants. These grants are larger and have a formal review process.
The Foundation is dedicating 50M WLD to support novel mini apps.
It is encouraged to first have an MVP of your product before applying for a Foundation Grant.
Receiving a Fast Grant does not disqualify you from applying for a Foundation Grant, in fact it is encouraged to apply for a Fast Grant first.
More Here: Foundation GrantsPreviousPromotionNextTroubleshooting© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 34
SOURCE: https://docs.world.org/mini-apps/commands/send-haptic-feedback
CONTENT:
Send Haptic Feedback | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackAvailable payloadsCreating the payloadUsing the commandTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Haptic Feedback
Send Haptic Feedback is our command that lets you create more immersive experiences, by providing tactile feedback to users.
This command is available from minikit 1.7.1 and World App 2.8.7602 onwards.
Haptic feedback can improve the user experience by:

Enhancing Responsiveness: Immediate tactile feedback makes interactions feel faster and more satisfying.
Improving Accessibility: Haptics can help users with visual impairments by providing an additional layer of feedback.
Increasing Engagement: Users are more likely to enjoy and continue using apps that feel interactive and responsive.

Available payloads
hapticsTypestyledescriptionimpactlightCollision between small UI elements.impactmediumCollision between medium UI elements.impactheavyCollision between big UI elements.impactsoftCollision between flexible UI elements.impactrigidCollision between inflexible UI elements.notificationsuccessIndicates that an action was successful.notificationwarningIndicates that something is not right and user should take notice.notificationerrorIndicates that an action has failed.selectionChanged---Informs the user that a selection has changed, for example a checkbox was clicked
Creating the payload
app/page.tsxexport type SendHapticFeedbackInput = {
	hapticsType: 'impact'
	style: 'light'
}
CopyCopied!
Using the command
There's no response from this command.
app/page.tsximport { MiniKit } from '@worldcoin/minikit-js'

const sendHapticFeedbackCommand = () =>
	MiniKit.commands.sendHapticFeedback({
		hapticsType: 'impact',
		style: 'light',
	})

const ImportantPage = () => {
	const handleClick = () => {
		// ...
		sendHapticFeedbackCommand()
	}
	return <button onClick={handleClick}>Click me</button>
}

export default ImportantPage
CopyCopied!PreviousGet PermissionsTechnical ReferenceAPI Reference© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 35
SOURCE: https://docs.world.org/mini-apps/commands/verify
CONTENT:
Verify | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyUsing the commandVerifying the proofSuccess Result on World AppPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsVerify
The verify command lets you use incognito actions inside of your mini app. Incognito actions are a primitive of World ID and allow you to gate functionality behind a unique human check.
To use incognito actions, first create one in the Developer Portal.
Use Case: This command is crucial for applications that require user verification to access certain features,
ensuring that only verified humans can perform actions. You can set up the incognito action limiting the number of times a user can perform an action.
Example: An game that requires users to verify their identity before playing to have a bot free experience.
Using the command
Async handlersEvent listenersSending the command & handling the responseMiniKit uses a slightly different input payload than IDKit. We do not need to pass in the app_id.export type VerifyCommandInput = {
	action: string
	signal?: string
	verification_level?: VerificationLevel // Default: Orb
}
CopyCopied!type MiniAppVerifyActionSuccessPayload = {
	status: 'success'
	proof: string
	merkle_root: string
	nullifier_hash: string
	verification_level: VerificationLevel
	version: number
}
CopyCopied!app/page.tsximport { MiniKit, VerifyCommandInput, VerificationLevel, ISuccessResult } from '@worldcoin/minikit-js'

const verifyPayload: VerifyCommandInput = {
	action: 'voting-action', // This is your action ID from the Developer Portal
	signal: '0x12312', // Optional additional data
	verification_level: VerificationLevel.Orb, // Orb | Device
}

const handleVerify = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}
	// World App will open a drawer prompting the user to confirm the operation, promise is resolved once user confirms or cancels
	const {finalPayload} = await MiniKit.commandsAsync.verify(verifyPayload)
		if (finalPayload.status === 'error') {
			return console.log('Error payload', finalPayload)
		}

		// Verify the proof in the backend
		const verifyResponse = await fetch('/api/verify', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
			payload: finalPayload as ISuccessResult, // Parses only the fields we need to verify
			action: 'voting-action',
			signal: '0x12312', // Optional
		}),
	})

	// TODO: Handle Success!
	const verifyResponseJson = await verifyResponse.json()
	if (verifyResponseJson.status === 200) {
		console.log('Verification success!')
	}
}
CopyCopied!
Verifying the proof
You should pass the proof to your backend when verifying proofs via the API. Users can manipulate information in the
frontend, so the proof must be verified in a trusted environment.
Successful responses will return a MiniAppVerifyActionSuccessPayload.
type MiniAppVerifyActionSuccessPayload = {
	status: 'success'
	proof: string
	merkle_root: string
	nullifier_hash: string
	verification_level: VerificationLevel
	version: number
}
CopyCopied!
To verify the proof, you will need to make a backend route.
app/api/verify/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { verifyCloudProof, IVerifyResponse, ISuccessResult } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: ISuccessResult
	action: string
	signal: string | undefined
}

export async function POST(req: NextRequest) {
	const { payload, action, signal } = (await req.json()) as IRequestPayload
	const app_id = process.env.APP_ID as `app_${string}`
	const verifyRes = (await verifyCloudProof(payload, app_id, action, signal)) as IVerifyResponse // Wrapper on this

	if (verifyRes.success) {
		// This is where you should perform backend actions if the verification succeeds
		// Such as, setting a user as "verified" in a database
		return NextResponse.json({ verifyRes, status: 200 })
	} else {
		// This is where you should handle errors from the World ID /verify endpoint.
		// Usually these errors are due to a user having already verified.
		return NextResponse.json({ verifyRes, status: 400 })
	}
}
CopyCopied!
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.Design StandardsUI KitNextPay© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 36
SOURCE: https://docs.world.org/mini-apps/more/promotion
CONTENT:
Promotion | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionApp of the WeekGuidelinesMarketingGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingPromotion
The App Store will be a powerful distribution channel for your mini app. To help the ecosystem grow, we will be introducing 3 programs to help you get started.
App of the Week
Each week we will highlight a different mini app that showcases an outstanding usecase and developer effort.
This will be featured on the Worldcoin App Store homepage and in the Worldcoin App Store app. Learn about how we evaluate which apps to feature,
and how you can increase your chances of being selected.
The app of the week will get a prominent content card showcasing their app
Guidelines
To be considered for App of the Week, your app must meet the following criteria.
Marketing
Occasionally we will run marketing campaigns to promote mini apps. Please join our Telegram group @worldcoindevelopers.PreviousApp Store PolicyNextGrants© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 37
SOURCE: https://docs.world.org/mini-apps/quick-start/responses
CONTENT:
Responses | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartResponses
World App will return responses to your mini app based on the command sent. You can define custom logic to handle these responses with MiniKit.
If you choose to use event listeners, we recommend adding them only to the pages where they are triggered.
Another way of handling responses is to use async handlers.
Calling an async handler will call the command and wait for a response from WorldApp
The resolved object contains the WorldApp response (finalPayload) along with an object returned by calling command (commandPayload).
You don't have to worry about cleaning up the listeners, and the command can be simply awaited.
Example Response
Two ways of getting the response:
Event listenersAsync handlersimport { MiniKit, ResponseEvent } from '@worldcoin/minikit-js'

export function ReactComponent() {
	// ...
	useEffect(() => {
		MiniKit.subscribe(ResponseEvent.MiniAppVerifyAction, async payload => {
			if (payload.status === 'error') {
				return console.log('Error payload', payload)
			}

			// Verify the proof in the backend
			const verifyResponse = await fetch('/api/verify', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: {
					//...
				},
			})
		})

		return () => {
			// Clean up on unmount
			MiniKit.unsubscribe(ResponseEvent.MiniAppVerifyAction)
		}
	}, [])
}
CopyCopied!PreviousCommandsNextTesting© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 38
SOURCE: https://docs.world.org/mini-apps/quick-start/testing
CONTENT:
Testing | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartTesting
Testing your mini app
Enter your app id in the text box below and scan the QR code generated with your phone's camera.
Your app id is in the developer portal in the format app_xxxxxxxxxx.

Tips

Ngrok is a great tool for testing locally.
Eruda is helpful showing logs on mobile
PreviousResponsesNextApp Store© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 39
SOURCE: https://docs.world.org/mini-apps/more/policy
CONTENT:
Policy | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicySafetyLegalApp SubmissionApp ReviewTechnical RequirementsUser SupportPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingPolicy
World App seeks to foster a diverse and flourishing ecosystem of applications while at the same time ensuring users stay safe, and privacy is maximized. These applications are displayed to users within World App, but users interact with these applications either within a web browser or as a platform native application. World App has sole discretion of determining how apps are presented to users within its platform.
These guidelines dictate the rules for apps which seek to be displayed to users from within World App. In the following sections you will find our latest guidelines arranged into the following sections:

Safety

Legal

App Submission

App Review

Technical Requirements

User Support

This document is subject to change, and as it changes applications may need to change with it.
Safety
The following content is not permitted for apps:

Objectionable Content:

Defamatory, discriminatory, or mean-spirited content, including references or commentary about religion, race, sexual orientation, gender, national/ethnic origin, or other targeted groups
Realistic portrayals of people or animals being killed, maimed, tortured, or abused, or content that encourages violence.
Depictions that encourage illegal or reckless use of weapons and dangerous objects, or facilitate the purchase of firearms or ammunition.
Overtly sexual or pornographic material, defined as “explicit descriptions or displays of sexual organs or activities intended to stimulate erotic rather than aesthetic or emotional feelings.”
Inflammatory religious commentary or inaccurate or misleading quotations of religious texts.
False information and features, including inaccurate device data or trick/joke functionality, such as fake location trackers.
Harmful concepts which capitalize or seek to profit on recent or current events, such as violent conflicts, terrorist attacks, and epidemics.
Impersonating TFH or Worldcoin.

Physical Harm

If your app behaves in a way that risks physical harm, we may reject it.
Apps that encourage consumption of tobacco and vape products, illegal drugs, or excessive amounts of alcohol are not permitted.

Legal
Apps must comply with all legal requirements to be listed within World App. This includes the following:

Privacy:

Consent: All apps that collect and store data from the user must request access and gain approval from the user before doing so
Data Minimization: Apps should only request access to data that is relevant to how the app functions

Regulatory Compliance: The application itself is responsible for maintaining regulatory compliance in all jurisdictions where it selects to be shown to users. Although the burden of compliance rests on the submitted application, if TFH determines that an application is non-compliant with jurisdiction(s) it has a right to take down the application and ask for it to be re-submitted in jurisdictions where it is compliant

App Submission
Applications must be submitted for review on the developer platform. Before submission, please ensure the following:

Test your app for bugs
Ensure that your app contains a live integration with a Worldcoin SDK, either IDkit or MiniKit
Ensure that all app information in your dev portal submission is complete and accurate
Ensure your contact information is updated so the review team can contact you
Ensure your app can be accessed by the review team for testing
Check whether your app follows safety and legal guidelines

Ensure your app does not violate any of these design guidelines
, otherwise your app will be rejected.
App Review
The review team has sole discretion of approving applications for the app store.
Apps will be reviewed as quickly as possible, though if the app is complex or difficult to test it may take some time. You will receive an email if the review status of your app changes, and you can view updates in the developer portal as well.
Tools for Humanity will approve all submitted apps if it deems the following are true:

The data submitted in the form is complete and accurate
The app is complete and contains all necessary copy and functionality to fulfil it’s purpose outlined in the submission
The app is a final version, and is not a demo, trial or beta version
The app contains a live integration with IDkit or MiniKit that functioned properly when tested
The app abides by the safety and legal guidelines

The review team will provide a rationale for any rejections, to which the developer can re-submit after remediating any concerns. If the application continuously fails review for the same reason, it may take longer for subsequent reviews to occur.
Additionally, World App provides users the ability to report apps. If an app is in violation of the safety and legal guidelines or the review team deems the app should be removed for other reasons, the team has the sole discretion to remove an app from the platform. If an app is removed from the platform or an investigation is in progress, the development team will be alerted.
Technical Requirements

On Android and iOS, the World App Mini App should support operation under poor internet connections and handle temporary disconnections properly.
The World App Mini App must be reliable, with no infinite loading during non-standard user actions.
The World App Mini App must comply with the rules of both the Android and iOS app stores.
The World App Mini App must not contain features that are unavailable on certain platforms.
User progress must synchronize seamlessly between different platform versions.

User Support

Developers must provide user support and ensure accessible means of communication for resolving any issues that arise.
PreviousSecurityNextPromotion© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 40
SOURCE: https://docs.world.org/mini-apps/quick-start/installing
CONTENT:
MiniKit-JS SDK | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitTemplate RepositoryInstalling MiniKitUsageCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartMiniKit-JS SDK
MiniKit-JS is our official SDK for creating mini apps that work with World App. It provides handy functions and types to make development a breeze.
Template Repository
If you want to create a brand new mini app, you can use our template repositories:

React template (featuring a simple backend for verifications),
Vanilla JS (using a CDN) template (featuring a simple backend for verifications),
NextJS template.

Otherwise, continue below with the installation instructions.
Installing MiniKit
MiniKit-JS is the core lib, framework agnostic,
MiniKit-React provides hooks that make it easy to interact with the MiniKit SDK.
minikit-jsminikit-reactnpm install @worldcoin/minikit-js
CopyCopied!
Or use a CDN like jsdelivr, for inline HTML, make sure to fill in the version.
<script>
  import { MiniKit } from "https://cdn.jsdelivr.net/npm/@worldcoin/minikit-js@[version]/+esm"
</script>
CopyCopied!
Usage

Create a MiniKit Provider component that installs the SDK and makes it easy to access MiniKit inside your app

src/minikit-provider.tsx'use client' // Required for Next.js

import { ReactNode, useEffect } from 'react'
import { MiniKit } from '@worldcoin/minikit-js'

export default function MiniKitProvider({ children }: { children: ReactNode }) {
	useEffect(() => {
		// Passing appId in the install is optional 
		// but allows you to access it later via `window.MiniKit.appId`
		MiniKit.install(appId?) 
	}, [])

	return <>{children}</>
}
CopyCopied!

Wrap your root with the MiniKitProvider component.

src/index.tsxexport default async function Root({
	children,
}: Readonly<{
	children: React.ReactNode
}>) {
	return (
		<html lang="en">
			<MiniKitProvider>
				<body className={inter.className}>{children}</body>
			</MiniKitProvider>
		</html>
	)
}
CopyCopied!

Check if MiniKit is installed and ready to use

MiniKit.isInstalled() will only return true if the app is opened and properly initialized inside the World App. This is useful to distinguish between a user opening your app in the browser or in the World App.
// ...
console.log(MiniKit.isInstalled())
CopyCopied!IntroductionWhat are Mini Apps?NextCommands© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 41
SOURCE: https://docs.world.org/mini-apps/quick-start/commands
CONTENT:
Commands | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartCommands
Commands are defined actions your mini app can perform in World App. Every command is available as either:

a synchronous function that dispatches an event, the result of which has to be listened for,
an async function, that can be awaited, resolves with the result.

CommandDescriptionVerifyVerify an action with World ID.PayInitiate a payment request.Wallet AuthAuthenticate via Sign in with EthereumSend TransactionWrite to smart contractsSign MessageSign personal messages with your walletSign Typed DataSign EIP-712 payloads with your walletShare ContactsShare your contacts in a privacy preserving way with appsNotificationsSend notifications to usersQuick ActionsUse other mini app featureGet PermissionsGet user permissionsSend Haptic FeedbackSend haptic feedback to user's devicePreviousInstalling MiniKitNextResponses© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 42
SOURCE: https://docs.world.org/mini-apps/quick-start/responses
CONTENT:
Responses | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartResponses
World App will return responses to your mini app based on the command sent. You can define custom logic to handle these responses with MiniKit.
If you choose to use event listeners, we recommend adding them only to the pages where they are triggered.
Another way of handling responses is to use async handlers.
Calling an async handler will call the command and wait for a response from WorldApp
The resolved object contains the WorldApp response (finalPayload) along with an object returned by calling command (commandPayload).
You don't have to worry about cleaning up the listeners, and the command can be simply awaited.
Example Response
Two ways of getting the response:
Event listenersAsync handlersimport { MiniKit, ResponseEvent } from '@worldcoin/minikit-js'

export function ReactComponent() {
	// ...
	useEffect(() => {
		MiniKit.subscribe(ResponseEvent.MiniAppVerifyAction, async payload => {
			if (payload.status === 'error') {
				return console.log('Error payload', payload)
			}

			// Verify the proof in the backend
			const verifyResponse = await fetch('/api/verify', {
				method: 'POST',
				headers: {
					'Content-Type': 'application/json',
				},
				body: {
					//...
				},
			})
		})

		return () => {
			// Clean up on unmount
			MiniKit.unsubscribe(ResponseEvent.MiniAppVerifyAction)
		}
	}, [])
}
CopyCopied!PreviousCommandsNextTesting© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 43
SOURCE: https://docs.world.org/mini-apps/quick-start/testing
CONTENT:
Testing | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartTesting
Testing your mini app
Enter your app id in the text box below and scan the QR code generated with your phone's camera.
Your app id is in the developer portal in the format app_xxxxxxxxxx.

Tips

Ngrok is a great tool for testing locally.
Eruda is helpful showing logs on mobile
PreviousResponsesNextApp Store© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 44
SOURCE: https://docs.world.org/mini-apps/quick-start/app-store
CONTENT:
App Store | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick StartApp Store
To ensure a consistent user experience, apps will be rejected unless they follow our guidelines.
Once your mini app is ready to be published, you can submit it for review inside of the Developer Portal.
Once approved, your mini app will be available to all World App users to discover in the app store.

If your app was rejected please reach out to @MateoSauton on Telegram for more information.PreviousTestingDesign StandardsGuidelines© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 45
SOURCE: https://docs.world.org/mini-apps/design/app-guidelines
CONTENT:
Guidelines | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesMiniKit IntegrationMobile FirstScroll Bounce on IOS.' 'App IconLoad timesChance basedLocalisationUsernamesUsing the Address BookDesign PatternsInspirationUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalDesign StandardsGuidelines
These guidelines are meant to help you succeed as a mini app developer. Please follow them to ensure your app is approved.
MiniKit Integration
Integrate MiniKit to supercharge your web app with exclusive features like World ID and Wallet access, making your mini app more engaging and valuable to users.
To get your mini app approved, it’s essential to use the MiniKit SDK commands effectively to enhance the user experience.
We’re looking for meaningful integrations, whether through World ID and Wallet access , or other creative uses that add real value.
Mobile First
Mini apps are inherently accessed via mobile, so your application UI should look and feel like a mobile app.
Key considerations for a mobile-first experience:

Use tab navigation to simplify movement within the app.
Implement snap-to text boxes for easy user input.
Avoid footers, sidebars, and excessive scrolling.
Provide clear and direct navigation without hamburger menus.
Ensure smooth transitions between different screens or sections.
Use consistent background colors for a cohesive visual experience.
Provide clear navigation cues to help users understand where they are and how to proceed.
Ensure all UI elements are responsive and adapt well to different screen sizes.
Use fonts that are optimized for readability on mobile devices.
Include a splash page for sign-in if needed.

Your browser does not support the video tag.❌ Bad Example  Footer and long scrollingYour browser does not support the video tag.✅ Good Example  Bottom tab navigation and anchored buttons
Scroll Bounce on IOS. 
We recommend you avoid scroll bounce error on iOS devices. Try disabling autoscroll & maybe fixed position elements or using 100dvh instead of 100vh.
If you are not using a bottom navigation bar, you can use the following CSS to disable the scroll bounce error:
html,
body {
	width: 100vw;
	height: 100vh;
	overscroll-behavior: none;
	overflow: hidden;
}
CopyCopied!
App Icon
Your app icon should be a square image with a non white background.
Load times
For mini apps, 2-3 seconds max for initial load and under 1 second for subsequent actions should be your target.
However, always test for real-world scenarios and provide visual feedback during loading to maintain user trust.
Chance based
We recommend developers to avoid building chance based games, as these games have a very low likelihood of being approved.
Chance based = prize awarded based on chance, not skill. This means you are using a RNG to determine a winner.
You can still have prizes but they need to be awarded based on skill. Not randomness. So winning a game where I get a prize is skill based.
Localisation
Many of our users are located around the world. Apps that are localised for each region will perform significantly better.
You can recognize the user's locale by using the Accept-Language header
These languages are particularly important given our users:

English
Spanish
Japanese
Korean

Usernames
You should never display the user's wallet address, always use their username.
If you use Sign in with World ID you should not be doing any transactions with the user's wallet address, instead you should be using the username.
Sign in with World ID and Verify offer the same World ID guarantees, but Verify is more reliable.
Using the Address Book
World ID inherently allows anonymity between applications. We generally encourage
developers to use their own Verify Command and verify the proof. However, we also offer a World ID
address book. This contract stores a mapping addressVerifiedUntil you can query to see if a World App
address is World ID Orb verified.
Design Patterns
Here are some design patterns that we recommend you follow:

When a user is authenticated through their wallet, always show their username instead of the wallet address
Use the "Verify" command to confirm important actions or identity verification.
When dealing with wallet addresses, use an address book to link them to recognizable usernames or other identifiers

Inspiration
Looking for inspiration? Check out the approved mini apps to see what successful integrations look like and learn from their best practices.
Seeing how others have effectively used MiniKit can provide you with ideas for creating an engaging and valuable experience for your users.
Join our developer network to connect with fellow developers, share insights, and get support:
World Developers Telegram
If your inspiration is still off, here are some concepts that you can follow to build your mini app. Always keep in mind adding value to users through the minikit commands.

Limited Edition Art Distribution: Build an app that allows artists to distribute limited editions of their work, ensuring that each human can claim only a certain number of pieces.
Sybil-Resistant Airdrop Platform: Build a platform for distributing tokens to verified humans, ensuring that airdrops reach genuine users.
Community Engagement Airdrops: Create an app that rewards users for participating in community activities, verified through proof of personhood.
Bot-Free Social Network: Build a social platform that integrates World ID to limit bot activity, enhancing content quality and user engagement.
Human-AI Interaction Platform: Develop an app where AI agents can interact with verified humans for tasks like customer support or data collection.
Decentralized Credit Marketplace: Build a platform that connects borrowers and lenders, using proof of personhood and zero-knowledge attributes to assess creditworthiness.
Merchant Payment Solutions: Develop a platform for local businesses to accept payments in cryptocurrencies, leveraging the World ecosystem for seamless transactions.
Quick StartApp StoreNextUI Kit© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 46
SOURCE: https://docs.world.org/mini-apps/design/ui-kit
CONTENT:
UI Kit | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalDesign StandardsUI Kit
The Mini Apps UI Kit is a React-based design system for accelerating the development of mini apps.
It provides pre-built, reusable UI components that follow World's design guidelines, ensuring consistency and high-quality user experience.
Get Started
Install the UI Kit with NPM:
npm install @worldcoin/mini-apps-ui-kit-react
CopyCopied!
Learn more about its usage in the official README.
Explore the full component library and usage examples on the UI Kit Documentation and Demo Storybook.PreviousGuidelinesCommandsVerify© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 47
SOURCE: https://docs.world.org/mini-apps/commands/verify
CONTENT:
Verify | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyUsing the commandVerifying the proofSuccess Result on World AppPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsVerify
The verify command lets you use incognito actions inside of your mini app. Incognito actions are a primitive of World ID and allow you to gate functionality behind a unique human check.
To use incognito actions, first create one in the Developer Portal.
Use Case: This command is crucial for applications that require user verification to access certain features,
ensuring that only verified humans can perform actions. You can set up the incognito action limiting the number of times a user can perform an action.
Example: An game that requires users to verify their identity before playing to have a bot free experience.
Using the command
Async handlersEvent listenersSending the command & handling the responseMiniKit uses a slightly different input payload than IDKit. We do not need to pass in the app_id.export type VerifyCommandInput = {
	action: string
	signal?: string
	verification_level?: VerificationLevel // Default: Orb
}
CopyCopied!type MiniAppVerifyActionSuccessPayload = {
	status: 'success'
	proof: string
	merkle_root: string
	nullifier_hash: string
	verification_level: VerificationLevel
	version: number
}
CopyCopied!app/page.tsximport { MiniKit, VerifyCommandInput, VerificationLevel, ISuccessResult } from '@worldcoin/minikit-js'

const verifyPayload: VerifyCommandInput = {
	action: 'voting-action', // This is your action ID from the Developer Portal
	signal: '0x12312', // Optional additional data
	verification_level: VerificationLevel.Orb, // Orb | Device
}

const handleVerify = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}
	// World App will open a drawer prompting the user to confirm the operation, promise is resolved once user confirms or cancels
	const {finalPayload} = await MiniKit.commandsAsync.verify(verifyPayload)
		if (finalPayload.status === 'error') {
			return console.log('Error payload', finalPayload)
		}

		// Verify the proof in the backend
		const verifyResponse = await fetch('/api/verify', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
			payload: finalPayload as ISuccessResult, // Parses only the fields we need to verify
			action: 'voting-action',
			signal: '0x12312', // Optional
		}),
	})

	// TODO: Handle Success!
	const verifyResponseJson = await verifyResponse.json()
	if (verifyResponseJson.status === 200) {
		console.log('Verification success!')
	}
}
CopyCopied!
Verifying the proof
You should pass the proof to your backend when verifying proofs via the API. Users can manipulate information in the
frontend, so the proof must be verified in a trusted environment.
Successful responses will return a MiniAppVerifyActionSuccessPayload.
type MiniAppVerifyActionSuccessPayload = {
	status: 'success'
	proof: string
	merkle_root: string
	nullifier_hash: string
	verification_level: VerificationLevel
	version: number
}
CopyCopied!
To verify the proof, you will need to make a backend route.
app/api/verify/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { verifyCloudProof, IVerifyResponse, ISuccessResult } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: ISuccessResult
	action: string
	signal: string | undefined
}

export async function POST(req: NextRequest) {
	const { payload, action, signal } = (await req.json()) as IRequestPayload
	const app_id = process.env.APP_ID as `app_${string}`
	const verifyRes = (await verifyCloudProof(payload, app_id, action, signal)) as IVerifyResponse // Wrapper on this

	if (verifyRes.success) {
		// This is where you should perform backend actions if the verification succeeds
		// Such as, setting a user as "verified" in a database
		return NextResponse.json({ verifyRes, status: 200 })
	} else {
		// This is where you should handle errors from the World ID /verify endpoint.
		// Usually these errors are due to a user having already verified.
		return NextResponse.json({ verifyRes, status: 400 })
	}
}
CopyCopied!
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.Design StandardsUI KitNextPay© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 48
SOURCE: https://docs.world.org/mini-apps/commands/pay
CONTENT:
Pay | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPaySetupInitiating the paymentUsing the commandVerifying the paymentSuccess Result on World AppWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsPay
This command is essential for applications that need to facilitate payments directly within the app,
enabling seamless transactions for users. At launch, WLD and USDC.e will be supported.
Example: Enabling an e-commerce platform to allow users to purchase digital goods using cryptocurrencies,
providing a smooth checkout experience.
Payments are easy to use and only have three simple steps.

Creating the transaction
Sending the command
Verifying the payment

Setup
Payments are executed on-chain, so you'll need an Ethereum compatible wallet.
Next, whitelist the address in the Developer Portal.
Whitelisting adds security to your mini app to prevent payments from being sent to an unauthorized addresses. Optionally you can
disable this check in the Developer Portal.

Initiating the payment
For security, it's important you initialize and store your payment operation in the backend.
app/api/initiate-pay/route.tsimport { NextRequest, NextResponse } from 'next/server'

export async function POST(req: NextRequest) {
	const uuid = crypto.randomUUID().replace(/-/g, '')

	// TODO: Store the ID field in your database so you can verify the payment later

	return NextResponse.json({ id: uuid })
}
CopyCopied!
Using the command
Async handlersEvent listenersSending the command & handling the responseWe currently support WLD and USDC payments on Worldchain. Below is the expected input for the Pay command.
Since World App sponsors the gas fee, there is a minimum transfer amount of $0.1 for all tokens.PayCommandInput// Represents tokens you allow the user to pay with and amount for each
export type TokensPayload = {
  symbol: Tokens;
  token_amount: string;
};

export type PayCommandInput = {
  reference: string;
  to: string;
  tokens: TokensPayload[];
  network?: Network; // Optional
  description: string;
};
CopyCopied!For convenience, we offer a public endpoint to query the current price of WLD in various currencies detailed here.app/page.tsximport { MiniKit, tokenToDecimals, Tokens, PayCommandInput } from '@worldcoin/minikit-js'

const sendPayment = async () => {
  const res = await fetch('/api/initiate-payment', {
    method: 'POST',
  })
  const { id } = await res.json()

  const payload: PayCommandInput = {
    reference: id,
    to: '0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045', // Test address
    tokens: [
      {
        symbol: Tokens.WLD,
        token_amount: tokenToDecimals(1, Tokens.WLD).toString(),
      },
      {
        symbol: Tokens.USDCE,
        token_amount: tokenToDecimals(3, Tokens.USDCE).toString(),
      },
    ],
    description: 'Test example payment for minikit',
  }

  if (!MiniKit.isInstalled()) {
    return
  }

  const { finalPayload } = await MiniKit.commandsAsync.pay(payload)

  if (finalPayload.status == 'success') {
    const res = await fetch(`/api/confirm-payment`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify(finalPayload),
    })
    const payment = await res.json()
    if (payment.success) {
      // Congrats your payment was successful!
    }
  }
}
CopyCopied!
Verifying the payment
You should always verify the payment in your backend. Users can manipulate information in the frontend, so the
response must be verified in a trusted environment.
Web2 applications can call our Developer Portal API to get the current status of the transaction. Since payments are executed on-chain, it can take up to a few minutes to confirm.
You can choose to optimistically accept the payments once they've landed on-chain, or poll the endpoint to wait until it's successful mined.
Web3 applications can choose to search the on-chain event logs temselves via the TransferReference event emitted on-chain.
Note for reference ID the value on chain will be the keccak256 hash of the reference ID.
TransferReferenceevent TransferReference(
    address sender,
    address indexed recipient,
    uint256 amount,
    address token,
    string indexed referenceId,
    bool indexed success
);
CopyCopied!
In this example, we will show querying via Developer Portal API.
app/confirm-payment/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { MiniAppPaymentSuccessPayload } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppPaymentSuccessPayload
}

export async function POST(req: NextRequest) {
	const { payload } = (await req.json()) as IRequestPayload

	// IMPORTANT: Here we should fetch the reference you created in /initiate-payment to ensure the transaction we are verifying is the same one we initiated
	const reference = getReferenceFromDB()

	// 1. Check that the transaction we received from the mini app is the same one we sent
	if (payload.reference === reference) {
		const response = await fetch(
			`https://developer.worldcoin.org/api/v2/minikit/transaction/${payload.transaction_id}?app_id=${process.env.APP_ID}`,
			{
				method: 'GET',
				headers: {
					Authorization: `Bearer ${process.env.DEV_PORTAL_API_KEY}`,
				},
			}
		)
		const transaction = await response.json()

		// 2. Here we optimistically confirm the transaction.
		// Otherwise, you can poll until the status == mined
		if (transaction.reference == reference && transaction.status != 'failed') {
			return NextResponse.json({ success: true })
		} else {
			return NextResponse.json({ success: false })
		}
	}
}
CopyCopied!
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousVerifyNextWallet Auth© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 49
SOURCE: https://docs.world.org/mini-apps/commands/wallet-auth
CONTENT:
Wallet Auth (Sign in with Ethereum) | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthCreating the nonceUsing the commandVerifying the LoginConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsWallet Auth (Sign in with Ethereum)
Wallet Auth is our native support for Sign in With Ethereum.
Wallet Auth is a command that:

Authenticates users through their Ethereum wallet using the SIWE protocol (EIP-4361).
Provides the user's Ethereum address after successful authentication.
Verifies ownership of the wallet address via a signed message.

With this, developers can:

Identify users securely and without centralized credentials.
Implement token-based access controls.
Enable blockchain-related features like transactions tied to the authenticated address.

There's an additional benefit of Wallet Auth - apart from the verified wallet address you get the user's username and profile picture url.
After a successful Wallet Auth, you can access these values from the MiniKit class directly:
const username = MiniKit.user.username
CopyCopied!
Creating the nonce
Since the user can modify the client, it's important to create the nonce in the backend. The nonce must be at least 8 alphanumeric characters in length.
app/api/nonce.tsimport {cookies} from "next/headers"; import {(NextRequest, NextResponse)} from "next/server";

export function GET(req: NextRequest) {
  // Expects only alphanumeric characters
  const nonce = crypto.randomUUID().replace(/-/g, "");

// The nonce should be stored somewhere that is not tamperable by the client
// Optionally you can HMAC the nonce with a secret key stored in your environment
cookies().set("siwe", nonce, { secure: true });
return NextResponse.json({ nonce });
}

CopyCopied!
Using the command
Async handlersEvent listenersSending & handling the command responseBelow is the expected input for walletAuth.interface WalletAuthInput {
	nonce: string
	expirationTime?: Date
	statement?: string
	requestId?: string
	notBefore?: Date
}
CopyCopied!Using the async walletAuth command.app/page.tsximport { MiniKit, WalletAuthInput } from '@worldcoin/minikit-js'
// ...
const signInWithWallet = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}
	const res = await fetch(`/api/nonce`)
	const { nonce } = await res.json()

	const {commandPayload: generateMessageResult, finalPayload} = await MiniKit.commandsAsync.walletAuth({
		nonce: nonce,
		requestId: '0', // Optional
		expirationTime: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
		notBefore: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),
		statement: 'This is my statement and here is a link https://worldcoin.com/apps',
	})
	// ...
CopyCopied!The returned message (in final payload) will include a signature compliant with ERC-191.
You're welcome to use any third party libraries to verify the payloads for SIWE.type MiniAppWalletAuthSuccessPayload = {
	status: 'success'
	message: string
	signature: string
	address: string
	version: number
}
CopyCopied!app/page.tsxconst signInWithWallet = async () => {
	if (!MiniKit.isInstalled()) {
		return
	}

	const res = await fetch(`/api/nonce`)
	const { nonce } = await res.json()

	const { commandPayload: generateMessageResult, finalPayload } = await MiniKit.commandsAsync.walletAuth({
		nonce: nonce,
		requestId: '0', // Optional
		expirationTime: new Date(new Date().getTime() + 7 * 24 * 60 * 60 * 1000),
		notBefore: new Date(new Date().getTime() - 24 * 60 * 60 * 1000),
		statement: 'This is my statement and here is a link https://worldcoin.com/apps',
	})

	if (finalPayload.status === 'error') {
		return
	} else {
		const response = await fetch('/api/complete-siwe', {
			method: 'POST',
			headers: {
				'Content-Type': 'application/json',
			},
			body: JSON.stringify({
				payload: finalPayload,
				nonce,
			}),
		})
	}
}
CopyCopied!You can now additionally access the user's wallet address from the minikit object.const walletAddress = MiniKit.walletAddress
// or
const walletAddress = window.MiniKit?.walletAddress
CopyCopied!
Verifying the Login
Finally, complete the sign in by verifying the response from World App in your backend. Here we check the nonce matches the one we created earlier, and
then verify the signature.
app/api/complete-siwe.tsimport { cookies } from 'next/headers'
import { NextRequest, NextResponse } from 'next/server'
import { MiniAppWalletAuthSuccessPayload, verifySiweMessage } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppWalletAuthSuccessPayload
	nonce: string
}

export const POST = async (req: NextRequest) => {
	const { payload, nonce } = (await req.json()) as IRequestPayload
	if (nonce != cookies().get('siwe')?.value) {
		return NextResponse.json({
			status: 'error',
			isValid: false,
			message: 'Invalid nonce',
		})
	}
	try {
		const validMessage = await verifySiweMessage(payload, nonce)
		return NextResponse.json({
			status: 'success',
			isValid: validMessage.isValid,
		})
	} catch (error: any) {
		// Handle errors in validation or processing
		return NextResponse.json({
			status: 'error',
			isValid: false,
			message: error.message,
		})
	}
}
CopyCopied!PreviousPayNextConnect Wallet© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 50
SOURCE: https://docs.world.org/mini-apps/commands/connect-wallet
CONTENT:
Connect Wallet | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsConnect Wallet
Wallet auth returns a wallet address upon completion. If you don't want to use SIWE and just want the wallet address,
just use the walletAuth command and skip the verification of the payload.
Go to Wallet Auth Section
Use Case: This command is useful for applications that require user authentication via their Ethereum wallet,
allowing for secure access without traditional credentials.
Example: An app that allows users to manage their assets and trade tokens directly from their wallet without needing to create a separate account.PreviousWallet AuthNextSend Transaction© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 51
SOURCE: https://docs.world.org/mini-apps/commands/send-transaction
CONTENT:
Send Transaction | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionCrafting the payloadUsing the commandAlternative: Verifying the transactionCalling a payable function to send ETHSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Transaction
Send transaction is our command that lets you write to arbitrary smart contracts.
One important policy restriction we enforce is that we do not allow approvals. In order to use funds
you must use the Signature Transfer function of permit2.
Crafting the payload
Send transaction will automatically create the permit2 signatures for you.
Make sure you specify the contracts and tokens you are interacting with in the Developer Portal
(configuration/advanced) otherwise we will block the transaction.
export type SendTransactionInput = {
	transaction: Transaction[]
	permit2?: Permit2[] // Optional
}

export type Permit2 = {
	permitted: {
		token: string
		amount: string | unknown
	}
	spender: string
	nonce: string | unknown
	deadline: string | unknown
}

export type Transaction = {
	address: string // Contract address
	abi: Abi | readonly unknown[] // Only include the abi for the function you're calling
	functionName: ContractFunctionName<Abi | readonly unknown[], 'payable' | 'nonpayable'>
  value?: string // Hex string representation of the value to send with the function call
	args: ContractFunctionArgs<
		// Wrap all your arguments in strings to avoid overflow errors
		Abi | readonly unknown[],
		'payable' | 'nonpayable',
		ContractFunctionName<Abi | readonly unknown[], 'payable' | 'nonpayable'>
	>
}
CopyCopied!
Using the command
In this example we will use two nested transactions. If your function requires a permit2 signature use PERMIT2_SIGNATURE_PLACEHOLDER_{n} with
the index of the permit2 object in the transaction array.
Additionally if you introduce a new ERC20 token we will automatically approve the permit2 contract to spend the tokens.
It is strongly recommended to execute using only one transaction.

Note this function only accepts stringified values.
Async handlersEvent listenersABISending the transaction & receiving the responseapp/page.tsx// Make sure this is only the function you're calling 
// Otherwise you will get an error
import DEXABI from '../../abi/DEX.json'
import { MiniKit } from '@worldcoin/minikit-js'

// ...
const sendTransaction = async () => {
  if (!MiniKit.isInstalled()) {
    return;
  }

  const deadline = Math.floor((Date.now() + 30 * 60 * 1000) / 1000).toString()

  // Transfers can also be at most 1 hour in the future.
  const permitTransfer = {
    permitted: {
      token: testTokens.worldchain.USDCE,
      amount: '10000',
    },
    nonce: Date.now().toString(),
    deadline,
  }

  const permitTransferArgsForm = [
    [permitTransfer.permitted.token, permitTransfer.permitted.amount],
    permitTransfer.nonce,
    permitTransfer.deadline,
  ]

  const transferDetails = {
    to: '0x126f7998Eb44Dd2d097A8AB2eBcb28dEA1646AC8',
    requestedAmount: '10000',
  }

  const transferDetailsArgsForm = [transferDetails.to, transferDetails.requestedAmount]

  const {commandPayload, finalPayload} = await MiniKit.commandsAsync.sendTransaction({
    transaction: [
      {
        address: '0x34afd47fbdcc37344d1eb6a2ed53b253d4392a2f',
        abi: DEXABI,
        functionName: 'signatureTransfer',
        args: [permitTransferArgsForm, transferDetailsArgsForm, 'PERMIT2_SIGNATURE_PLACEHOLDER_0'],
      },
    ],
    permit2: [
      {
        ...permitTransfer,
        spender: '0x34afd47fbdcc37344d1eb6a2ed53b253d4392a2f',
      },
    ],
  })
}
CopyCopied!Learn more about your errors see errorsCheck transaction statusThe transaction will be first simulated and checked for errors. If there are no errors the user will be prompted to sign the transaction. To make it easier we let you install hooks built on top of Viem.This requires installing the @worldcoin/minikit-react package.Usagepnpm i @worldcoin/minikit-react
CopyCopied!In this flow we will use the hook useWaitForTransactionReceipt to check the status of the transaction.app/page.tsximport { useWaitForTransactionReceipt } from '@worldcoin/minikit-react'

const [transactionId, setTransactionId] = useState<string>('')

const client = createPublicClient({
  chain: worldchain,
  transport: http('https://worldchain-mainnet.g.alchemy.com/public'),
})

const { isLoading: isConfirming, isSuccess: isConfirmed } = useWaitForTransactionReceipt({
  client: client,
  appConfig: {
    app_id: '<app_id>',
  },
  transactionId: transactionId,
})

const sendTransaction = async () => {
  if (!MiniKit.isInstalled()) {
    return;
  }
  // ...
  const {commandPayload, finalPayload} = await MiniKit.commandsAsync.sendTransaction({
    // ...
  })

  if (payload.status === 'error') {
    console.error('Error sending transaction', payload)
  } else {
    setTransactionId(payload.transaction_id)
  }
}
CopyCopied!
Alternative: Verifying the transaction
If you don't want to use our hook you can choose to query for the hash yourself using this endpoint. Make sure to specify type=transaction in the query string.
Transactions are sent via our relayer currently and so we provide you an internal id rather than a hash in the original response above.
app/confirm-transaction/route.tsimport { NextRequest, NextResponse } from 'next/server'
import { MiniAppSendTransactionSuccessPayload } from '@worldcoin/minikit-js'

interface IRequestPayload {
	payload: MiniAppSendTransactionSuccessPayload
}

export async function POST(req: NextRequest) {
	const { payload } = (await req.json()) as IRequestPayload

	const response = await fetch(
		`https://developer.worldcoin.org/api/v2/minikit/transaction/${payload.transaction_id}?app_id=${process.env.APP_ID}&type=transaction`,
		{
			method: 'GET',
		}
	)
	const transaction = await response.json()

	return NextResponse.json(transaction)
}
CopyCopied!
Example response from /minikit/transaction
{
    "transactionId": "0xa5b02107433da9e2a450c433560be1db01963a9146c14eed076cbf2c61837d60",
    "transactionHash": "0xa8388148b630b49a3d5a739eaad9e98b5766235cdb21a5ec8d3f89053d982a71",
    "transactionStatus": "failed",
    "miniappId": "app_staging_5748c49d2e6c68849479e0b321bc5257",
    "updatedAt": "2024-09-09T15:18:25.320Z",
    "network": "worldchain",
    "fromWalletAddress": "0x2321401e6a175a7236498ab66f25cd1db4b17558",
    "toContractAddress": "0x2321401e6a175a7236498ab66f25cd1db4b17558"
}
CopyCopied!
Calling a payable function to send ETH
This functionality is available from minikit-js 1.6.0 onwards.
Send transaction supports sending to payable functions. Make sure you have ETH in your wallet.
For ease of use, we have a simple contract that lets you send ETH by forwarding the value. Forward.sol
// Sending eth via Forward.sol
const sendTransaction = async () => {
    const payload = await MiniKit.commandsAsync.sendTransaction({
      transaction: [
        {
          address: '0x087d5449a126e4e439495fcBc62A853eB3257936', // Forward.sol
          abi: ForwardABI,
          functionName: 'pay',
          args: ['0x377da9cab87c04a1d6f19d8b4be9aef8df26fcdd'], // To Whom
          value: '0x9184E72A000', // Send 0.00001 ETH hex encoded
        },
      ],
    });
}
CopyCopied!PreviousConnect WalletNextSign Message© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 52
SOURCE: https://docs.world.org/mini-apps/commands/sign-message
CONTENT:
Sign Message | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageUsing the commandSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSign Message
Sign message lets you create an EIP-191.
You should verify the signature.
Use Case: This command is useful for applications that need to sign messages for verification purposes,
ensuring that the message was indeed created by the owner of the wallet.
Example: A voting app that requires users to sign a message to prove ownership
of their wallet before allowing them to vote.
Using the command
Async handlersEvent listenersSending the command & handling the responseThe response will include a signature compliant with EIP-191.
You should verify the signature.type MiniAppSignMessageSuccessPayload = {
  status: "success";
  signature: string;
  address: string;
  version: number;
};
CopyCopied!app/page.tsximport { MiniKit, SignMessageInput } from '@worldcoin/minikit-js'

const signAndVerifyMessage = async () => {
  const signMessagePayload: SignMessageInput = {
    message: "Hello world",
  };

  const {finalPayload} = await MiniKit.commandsAsync.signMessage(signMessagePayload);

  if (finalPayload.status === "success") {
    const messageHash = hashSafeMessage(messageToSign);

    const isValid = await (
      await Safe.init({
        provider:
          "https://worldchain-mainnet.g.alchemy.com/v2/your-api-key",
        safeAddress: finalPayload.address,
      })
    ).isValidSignature(messageHash, finalPayload.signature);

    // Checks functionally if the signature is correct
    if (isValid) {
      console.log("Signature is valid");
    }
  }
};
CopyCopied!Your message is verified!PreviousSend TransactionNextSign Typed Data© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 53
SOURCE: https://docs.world.org/mini-apps/commands/sign-typed-data
CONTENT:
Sign Typed Data | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataUsing the commandShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSign Typed Data
Sign Typed Data lets you create an EIP-712 signature.
Use Case: This command is essential for applications that require structured data to be signed.
Example: An insurance platform that requires users to sign typed data to confirm the terms of their insurance policy.
Using the command
Async handlersEvent listenersSending the command & handling the responseimport type { TypedData, TypedDataDomain } from 'abitype'

export type SignTypedDataInput = {
  types: TypedData
  primaryType: string
  message: Record<string, unknown>
  domain?: TypedDataDomain
}
CopyCopied!type MiniAppSignTypedDataSuccessPayload = {
  status: 'success'
  signature: string
  address: string
  version: number
}
CopyCopied!app/page.tsximport { MiniKit, SignTypedDataInput } from '@worldcoin/minikit-js'

  const signAndVerifyTypedData = async () => {
    if (!MiniKit.isInstalled()) {
      return
    }

    const {finalPayload} = await MiniKit.commandsAsync.signTypedData(
      somePayloadforEIP712 as SignTypedDataInput;
    );

    // Verifying the signature. Note permit2 payloads and safe operations are not permitted in this command.
    if (payload.status === 'success') {
      const messageHash = hashSafeMessage(signTypedDataPayload)

      const isValid = await (
        await Safe.init({
          provider: 'https://worldchain-mainnet.g.alchemy.com/v2/your-api-key',
          safeAddress: payload.address,
        })
      ).isValidSignature(messageHash, payload.signature)

      // Checks functionally if the signature is correct
      if (isValid) {
        console.log('Signature is valid')
      }
    }
  };
CopyCopied!PreviousSign MessageNextShare Contacts© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 54
SOURCE: https://docs.world.org/mini-apps/commands/share-contacts
CONTENT:
Share Contacts | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsCrafting the payloadUsing the commandResponse typeSuccess Result on World AppSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsShare Contacts
Sharing contacts is a command that allows you to request users to share contacts in their phone in a privacy preserving way.
This command will be available from v1.4.0 of minikit and v2.8.72 of World App.
Crafting the payload
export type ShareContactsInput = {
	isMultiSelectEnabled: boolean
	inviteMessage?: string
}
CopyCopied!

isMultiSelectEnabled is a boolean that determines if the user can select multiple contacts, by default you can only select one contact in the modal.
inviteMessage is an optional custom message that will be displayed to the user when the user invites a non world app user while inside of your mini app.

Using the command
Here is an example of how to use the shareContacts command.
Async handlersEvent listenersSending the command and handling the response// Example function of how to use the command
const shareContacts = useCallback(
    async (isMultiSelectEnabled: boolean = false, inviteMessage?: string) => {
        const shareContactsPayload: ShareContactsPayload = {
            isMultiSelectEnabled,
            inviteMessage,
        };
        const payload = await MiniKit.commandsAsync.shareContacts(shareContactsPayload);
        // Handle the response
    },
    []
);
CopyCopied!
Response type
The response will contain an array of contacts that the user has selected.
Success response payload
type MiniAppShareContactsSuccessPayload = {
    status: 'success';
    contacts: Array<{
        username: string;
        walletAddress: string;
        profilePictureUrl: string | null;
    }>;
    timestamp: string;
    version: number;
};
CopyCopied!
Error response payload
type MiniAppShareContactsErrorPayload = {
    status: 'error';
    error_code: ShareContactsErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

user_rejected - The user rejected the request
generic_error - An unknown error occurred

Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousSign Typed DataNextSend Notifications© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 55
SOURCE: https://docs.world.org/mini-apps/commands/send-notifications
CONTENT:
Send Notifications | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsRequesting permissionResponse typeCalling the notification endpointTestingSuccess Result on World AppGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Notifications
Sending notifications has three parts:

Requesting the permission in the Dev Portal Advanced settings
Requesting permission to send notifications via minikit
Sending the notification

This command will be available from v1.4.0 of minikit and v2.8.72 of World App.
Requesting permission
Here is an example of how to use the requestPermission command.
Note this modal will only allow you to show it once. If you reject it, you will need to direct the user to settings in order to re-enable this.
You can find this out by checking the error_code in the response.
The schema for the settings page is:
worldcoin.org/settings/miniapps
CopyCopied!
Async handlersEvent listenersSending the command and handling the responseimport { MiniKit, RequestPermissionPayload, Permission } from '@worldcoin/minikit-js'

// Example function of how to use the command
const requestPermission = useCallback(
    async () => {
        const requestPermissionPayload: RequestPermissionPayload = {
            permission: Permission.Notifications,
        };
        const payload = await MiniKit.commandsAsync.requestPermission(requestPermissionPayload);
        // Handle the response
    },
    []
);
CopyCopied!
Response type
Success response payload
type MiniAppRequestPermissionSuccessPayload = {
    status: 'success';
    permission: 'notifications';
    timestamp: string;  // ISO-8601
    version: number;    // same version that was received from MiniKit
};
CopyCopied!
Error response payload
type MiniAppRequestPermissionErrorPayload = {
    status: 'error';
    error_code: RequestPermissionErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

user_rejected - User declined permission request
generic_error - Request failed for unknown reason
already_requested - User has already declined turning on notifications once
permission_disabled - User has notification disabled for World App
already_granted - User has already granted this mini app permission
unsupported_permission - Permission is not supported yet

Calling the notification endpoint
You can send notifications to this endpoint: https://developer.worldcoin.org/api/v2/minikit/send-notification.
For detailed information on the endpoint, see the API Reference.
Business rules about this endpoint

We do not allow marketing notifications. These should be purely functional notifications.
We do not allow notifications that are not related to the mini app.
We do not allow notifications that are not related to the user.
The endpoint is limited to 1000 users per call
Messages are limited to 200 characters
Titles are limited to 30 characters

Testing
We currently have a limit of 40 notifications per 4 hours for unverified apps. This is to help you test your notification implementations.
Currently you will need to create a new app if your app is verified as it will default to the verified app's metadata. In addition, you need
to enable notifications for your mini app inside of World App to receive them.
Success Result on World App
If implemented correctly, the user will see the following drawer on World App.
Your browser does not support the video tag.PreviousShare ContactsNextGet Permissions© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 56
SOURCE: https://docs.world.org/mini-apps/commands/get-permissions
CONTENT:
Get Permissions | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsUsing the commandResponse typeSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsGet Permissions
This command will let you check the status of permissions a user has granted to your mini app.
This command will be available from v1.7.0 of minikit and v2.8.76 of World App.
Using the command
Currently this command only supports notifications.
Async handlersEvent listenersSending the command and handling the responseimport { MiniKit, GetPermissionsPayload, Permission } from '@worldcoin/minikit-js'

// Example function of how to use the command
const getPermissions = useCallback(
    async () => {
        const payload = await MiniKit.commandsAsync.getPermissions();
        // Handle the response
    },
    []
);
CopyCopied!
Response type
Success response payload
type MiniAppGetPermissionsSuccessPayload = {
    status: 'success';
    permissions: Permission[];
    version: number;    // same version that was received from MiniKit
};
CopyCopied!
{
  "permissions": {
    "notifications": false
  },
  "status": "success",
  "timestamp": "2025-03-11T18:21:49.741-07:00",
  "version": 1
}
CopyCopied!
Error response payload
type MiniAppGetPermissionsErrorPayload = {
    status: 'error';
    error_code: GetPermissionsErrorCodes;
    version: number;
}
CopyCopied!
The possible error codes are:

generic_error - Request failed for unknown reason
PreviousSend NotificationsNextSend Haptic Feedback© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 57
SOURCE: https://docs.world.org/mini-apps/commands/send-haptic-feedback
CONTENT:
Send Haptic Feedback | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackAvailable payloadsCreating the payloadUsing the commandTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalCommandsSend Haptic Feedback
Send Haptic Feedback is our command that lets you create more immersive experiences, by providing tactile feedback to users.
This command is available from minikit 1.7.1 and World App 2.8.7602 onwards.
Haptic feedback can improve the user experience by:

Enhancing Responsiveness: Immediate tactile feedback makes interactions feel faster and more satisfying.
Improving Accessibility: Haptics can help users with visual impairments by providing an additional layer of feedback.
Increasing Engagement: Users are more likely to enjoy and continue using apps that feel interactive and responsive.

Available payloads
hapticsTypestyledescriptionimpactlightCollision between small UI elements.impactmediumCollision between medium UI elements.impactheavyCollision between big UI elements.impactsoftCollision between flexible UI elements.impactrigidCollision between inflexible UI elements.notificationsuccessIndicates that an action was successful.notificationwarningIndicates that something is not right and user should take notice.notificationerrorIndicates that an action has failed.selectionChanged---Informs the user that a selection has changed, for example a checkbox was clicked
Creating the payload
app/page.tsxexport type SendHapticFeedbackInput = {
	hapticsType: 'impact'
	style: 'light'
}
CopyCopied!
Using the command
There's no response from this command.
app/page.tsximport { MiniKit } from '@worldcoin/minikit-js'

const sendHapticFeedbackCommand = () =>
	MiniKit.commands.sendHapticFeedback({
		hapticsType: 'impact',
		style: 'light',
	})

const ImportantPage = () => {
	const handleClick = () => {
		// ...
		sendHapticFeedbackCommand()
	}
	return <button onClick={handleClick}>Click me</button>
}

export default ImportantPage
CopyCopied!PreviousGet PermissionsTechnical ReferenceAPI Reference© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 58
SOURCE: https://docs.world.org/mini-apps/reference/api
CONTENT:
API Reference | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceSend NotificationPOSTGet TransactionGETGet PricesGETErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceAPI Reference
Send NotificationPOSThttps://developer.worldcoin.org/api/v2/minikit/send-notification
This endpoint lets you send notifications to users of your mini app and requires an api_key.
Body ParamsNamewallet_addressesTypestring[]RequiredREQUIREDDescriptionThe wallet_addresses is an array of wallet addresses to send the notification to. Users must have opted in to notifications for your app. Max 1000 users per call.NametitleTypestringRequiredREQUIREDDescriptionThe title is the title of the notification. It should be 30 characters or less.NamemessageTypestringRequiredREQUIREDDescriptionThe message is the message of the notification. It should be 200 characters or less.Namemini_app_pathTypestringRequiredREQUIREDDescriptionThe mini_app_path is the url encoded path of the mini app where your notification should link to when the user clicks on it.  Should be of the format worldapp://mini-app?app_id=[app_id]&path=[path] (path is optional).Nameapp_idTypestringRequiredREQUIREDDescriptionThe app_id is the identifier of the app initiating the transaction.Request HeadersNameAuthorizationTypestringRequiredREQUIREDDescriptionThe Authorization header should be the api_key for your app from the Developer Portal. Make sure to
prefix it with Bearer {api_key}.RequestcURLJavaScriptPOSThttps://developer.worldcoin.org/api/v2/minikit/send-notificationcurl -X POST "https://developer.worldcoin.org/api/v2/minikit/send-notification" \
    -H "Authorization: Bearer {api_key}" \
    -H "Content-Type: application/json" \
    -d '{"app_id": "app_id", "wallet_addresses": ["0x123", "0x456"], "title": "title", "message": "message", "mini_app_path": "mini_app_path"}'
CopyCopied!

Response
NamesuccessTypebooleanDescriptionIndicates if the API request was successful.NamestatusTypenumberDescriptionThe HTTP status code of the response.NameresultTypearrayDescriptionAn array of notification delivery results for each wallet address, where each item contains:
walletAddress (string): The wallet address that the notification was attempted to be sent to
sent (boolean): Whether the notification was successfully sent to this wallet address
reason (string, optional): If the notification failed to send, this field contains the reason
Response{
    "success": true,
    "status": 200,
    "result": [
        {
            "walletAddress": "0x377da9cab87c04a1d6f19d8b4be9aef8df26fcdd",
            "sent": true
        },
        {
            "walletAddress": "0x444da9cab87c04a1d6f19d8b4be9aef8df26fcdd",
            "sent": false,
            "reason": "User has notification disabled for World App"
        }
    ]
}
CopyCopied!

Get TransactionGEThttps://developer.worldcoin.org/api/v2/minikit/transaction/{transaction_id}?app_id=&type=
This endpoint lets you query your apps transactions for their current status. You will only be able to
query for transactions of apps where you possess the api_key.Query ParamsNameapp_idTypestringRequiredREQUIREDDescriptionThe app_id corresponding to the transaction that is being queried.NametypeTypestringRequiredREQUIREDDescriptionThe type is either payment (pay) or transaction (sendTransaction) depending on the command you used.Request HeadersNameAuthorizationTypestringRequiredREQUIREDDescriptionThe Authorization header should be the api_key for your app from the Developer Portal. Make sure to
prefix it with Bearer {api_key}.RequestcURLJavaScriptGET/api/v2/minikit/transaction/{transaction_id}curl -X GET "/api/v2/minikit/transaction/{transaction_id}" \
    -H "Authorization: Bearer {api_key}"
CopyCopied!

Response
NamereferenceTypestringDescriptionThe reference is your specified unique identifier for the transaction.Nametransaction_hashTypestringDescriptionThe transaction_hash is the hash of the transaction on the blockchain.Nametransaction_statusTypestringDescriptionThe current transaction_status, can be either 'pending', 'mined', or 'failed'.NamefromTypestringDescriptionThe from is the address of the sender.NamechainTypestringDescriptionThe chain is the name of the blockchain network.NametimestampTypestringDescriptionThe timestamp is the time when the transaction was created, in ISO 8601 format.Nametoken_amountTypestringDescriptionThe token_amount is the amount of tokens transferred, in BigInt with 6 decimals.NametokenTypestringDescriptionThe token is the type of token transferred.NametoTypestringDescriptionThe to is the address of the receiver.Nameapp_idTypestringDescriptionThe app_id is the identifier of the app initiating the transaction.ResponsePaymentTransactionGET/api/v2/minikit/transaction/{transaction_id}{
    "reference": "1fa38f30-8ee1-4e4b-9988-0517a774f96c",
    "transaction_hash": "0xfb25cb74b13d51deeb1a91460619c3d86a7637d40dd29831aa38dd6cbb05e880",
    "transaction_status": "pending | mined | failed",
    "from": "0x0c892815f0B058E69987920A23FBb33c834289cf",
    "chain": "worldchain",
    "timestamp": "2024-01-01T00:00:00.000Z", // ISO 8601
    "token_amount": "100000000", // amount in BigInt with 6 decimals
    "token": "USDCE",
    "to": "0xd8dA6BF26964aF9D7eEd9e03E53415D37aA96045",
    "app_id": "app_9a73963d73efdf2e7d9472593dc9dffd"
}
CopyCopied!

Get PricesGEThttps://app-backend.worldcoin.dev/public/v1/miniapps/prices?cryptoCurrencies=WLD,USDCE&fiatCurrencies=
This endpoint lets you query the latest prices of the Worldcoin token in various fiat currencies.
We offer this as a service to make it easier to use WLD as a currency.Query ParamsNamefiatCurrenciesTypestringRequiredREQUIREDDescriptionThe fiatCurrencies is a comma-separated list of fiat currencies following ISO4217 currency code.
eg. USD,EUR,JPY,ARSNamecryptoCurrenciesTypestringRequiredREQUIREDDescriptionThe cryptoCurrencies is a comma-separated list of currencies we support.
eg. USDCE,WLDRequestcURLJavaScriptGET/public/v1/miniapps/prices?...curl -X GET "https://app-backend.worldcoin.dev/public/v1/prices?cryptoCurrencies=WLD&fiatCurrencies=USD"
CopyCopied!

Response (abridged)
Detailed are a just a few values in the return that could be confusing. See the response object in the bottom right column for the full list of fields
NamepricesTypestringDescriptionThe prices is an object where each key is the respective currency codeNameamountTypestringDescriptionThe amount represents the non converted value for the price of 1 WLD for a given currencyNamedecimalsTypestringDescriptionThe current decimals, should be used to calculate the converted price. ie an amount of 1000000 with 6 decimals would mean a price of $1.00
via, 1000000 * 10^-6ResponseGET/public/v1/miniapps/prices?...{
    "result": {
        "prices": {
            "WLD": {
                "USD": {
                    "asset": "USD",
                    "amount": "1510763",
                    "decimals": 6,
                    "symbol": "USD"
                },
            },
            "USDCE": {
                "USD": {
                    "asset": "USD",
                    "amount": "1000058",
                    "decimals": 6,
                    "symbol": "USD"
                },
            }
        }
    }
}
CopyCopied!CommandsSend Haptic FeedbackNextErrors© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 59
SOURCE: https://docs.world.org/mini-apps/reference/errors
CONTENT:
Errors | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsVerifyPayWallet AuthTransactionsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceErrors
This page is a reference to error codes returned by MiniKit.
Verify
Below are the error codes you could receive with the Verify command
CodeDescriptionHow to fix?verification_rejectedUser rejected the World ID request in World App.If this was a mistake, trigger the verify command again.max_verifications_reachedThis person has already verified for this particular action the maximum number of times allowed.Nothing to do. User cannot verify for this action again.credential_unavailableThis user does not have the requested credential.The user must verify at the Orb or verify their unique device in World App to receive the credential
required.malformed_requestThe request payload couldn't be decrypted or did not conform to the standard.Ensure MiniKit is configured properly and all parameters are valid.invalid_networkThe application is configured for a different environment than the verifying user's client.Ensure you use the Worldcoin Simulator for Staging applications and
World App for Production applications.inclusion_proof_failedThe sequencer returned an unexpected error when retrieving the inclusion proof.Ask the user to try again. This may be due to a temporary network issue, or a bug with World App or the
Signup Sequencer.inclusion_proof_pendingThe user might have the requested credential, but it is not available on-chain yet. It might be
available for API verification.Ask the user to verify again in approximately one hour.unexpected_responseThere was a problem with the response obtained from the WLD app.Try again, though in most cases these will require contacting us to report the bug.generic_errorAn unhandled exception occurred.Try again, though in most cases these will require contacting us to report the bug.
Pay
Below are the error codes you could receive with the Pay command
CodeDescriptionHow to fix?input_errorThere was a problem with this request. Please try again or contact the app owner.Ensure the request is properly formed and try again.payment_rejectedYou’ve cancelled the payment in World App.If this was a mistake, initiate the payment again.invalid_receiverThe receiver address is invalid. Please contact the app owner.You don't have this address whitelisted inside the Developer Portal.insufficient_balanceYou do not have enough balance to complete this transaction.Add more funds to your wallettransaction_failedThe transaction failed. Please try again.Try the transaction again. Something failed on-chain.generic_errorSomething unexpected went wrong. Please try again.Try again, though in most cases these will require contacting us to report the bug.
Wallet Auth
Below are the error codes you could receive with the walletAuth command
CodeDescriptionHow to fix?malformed_requestProvided parameters in the request are invalid.Ensure the request is properly formed and try again. If the problem persists, contact the app owner.user_rejectedUser rejected the request.If this was a mistake, initiate the request again.generic_errorSomething unexpected went wrong.Try the request again. If the problem persists, contact the app owner.
Transactions
Below are the error codes you could receive with the Transaction command
CodeDescriptionHow to fix?invalid_operationTransaction included an operation that was invalidYour app tried using a disallowed operation. These include approve, setAllowance, setApprovalForAll, or setApprovalForAll.invalid_contractApp must whitelist the contract you're calling in the Developer PortalGo to the Developer Portal and whitelist the contract you're callinguser_rejectedUser declined the transaction modalUser closed the transaction modal.input_errorPayload received does not conform to specified typeEnsure the request is properly formed and try again. Note all args must be string. Payload has max size of 8kb so your ABI should just be for your functionsimulation_failedSimulation provider transaction simulation failed (this can include insufficient balance)Txn simulation failed see the debugUrl returned to understand whytransaction_failedTransaction failed please try again laterTry again later. Could be blob fees too high or network congestiongeneric_errorRequest failed for unknown reasonTry the request again. If the problem persists, contact the app owner.daily_tx_limit_reachedDaily transaction limit reachedMax 100 transactions per day. Wait until the next day.disallowed_operationTransaction included an operation that was disallowedMake sure you are not calling functions on the user's safe, doing approvals, calling safe admin functions, etc.permitted_amount_exceeds_slippagePermitted amount exceeds slippageYou must spend at least 90% of the permitted amountpermitted_amount_not_foundPermitted amount not foundPermitted amount not found in permit2 payload
Other helpful things

If you get a GS026 error, it means the signature is not valid. Most likely there's something switched in your args vs your permit.
Double check each argument usually this is the nonce and timestamp getting mixed up.
PreviousAPI ReferenceNextAddress Book© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 60
SOURCE: https://docs.world.org/mini-apps/reference/address-book
CONTENT:
Address Book | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookConsiderationsImplementationExample UsageReact BindingsUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceAddress Book
The Address Book is a contract that stores verified World ID addresses. You can check if a user's address and associated ENS name (if available) is Orb verified using the getIsUserVerified helper function.
Considerations

Default RPC is https://worldchain-mainnet.g.alchemy.com/public
Contract Address is 0x57b930D551e677CC36e2fA036Ae2fe8FdaE0330D.

Implementation
The helper function connects to the World Chain and checks if a given wallet address is verified by querying the Address Book contract.
Example Usage
import { getIsUserVerified } from "@worldcoin/minikit-js"

const userWalletAddress = "0x000000000000000000000000000000000000dEaD"
const isUserVerified = await getIsUserVerified(userWalletAddress) // optionally you can provide your rpc url as a second argument to the function
CopyCopied!

Returns true if the address is verified
Returns false if the address is not verified
Throws an error if the verification check fails

React Bindings
For React applications, we provide a hook useIsUserVerified that handles the verification check and loading state.PreviousErrorsNextUsernames© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 61
SOURCE: https://docs.world.org/mini-apps/reference/usernames
CONTENT:
Usernames | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesIntroductionHow to get itStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceUsernames
Introduction
Usernames are ENS-compatible identifiers for every World App user, ensuring consistency and easy recognition.
For example, when displaying transaction history, show the username instead of the wallet address to make it more user-friendly and private.
The usernames service is public, docs can be found here. This will be mostly useful for more advanced use cases.
How to get it
To get the user's username you can either complete Wallet Auth and access the username/profile picture url from MiniKit directly:
const username = MiniKit.user.username
CopyCopied!
Or you can request it manually, using the getUserByAddress method on MiniKit:
const worldIdUser = await MiniKit.getUserByAddress(userAddress)
CopyCopied!
Other ways involve querying the usernames service.PreviousAddress BookNextStatus Page© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 62
SOURCE: https://docs.world.org/mini-apps/reference/status-page
CONTENT:
Status Page | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PageGet StatusGETPayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceStatus Page
You can check the current status of World services at status.worldcoin.org.
The Networks section is not up to date yet.
For transactions, status is determined by:

Disruption: Transactions taking longer than 45 seconds
Outage: Transactions taking longer than 5 minutes

Get StatusGEThttps://status.worldcoin.org/api/services
This endpoint returns the current status of all World services.Query ParamsNamelogsTypebooleanDescriptionInclude logs=true to get historical status logs for each service.RequestcURLJavaScriptGET/api/servicescurl -X GET "https://status.worldcoin.org/api/services?logs=true"
CopyCopied!

Response
NameservicesTypearrayDescriptionArray of service status objects, each containing:NamenameTypestringDescriptionService name (e.g., "Mini Apps", "World ID Verifications")NameidTypestringDescriptionService identifierNamedescriptionTypestringDescriptionDescription of the serviceNamecategoryIdTypestringDescriptionCategory the service belongs to (e.g., "mini-apps", "world-id", "finance")NamestatusTypestringDescriptionCurrent service status: "ok", "warning", or "error"NamelogsTypearrayDescriptionHistorical status changes, containing:
datetime: Unix timestamp
status: Status at that time
name: Event name
description: Event description
downtime: Duration in seconds (if applicable)
NameuptimeRatioTypeobjectDescriptionUptime percentages for different time periods:
1: Last 24 hours
7: Last 7 days
30: Last 30 days
90: Last 90 days
Response{
    "services": [
        {
            "name": "Crypto Transactions",
            "id": "crypto-transactions",
            "description": "",
            "categoryId": "mini-apps",
            "status": "ok",
            "logs": [
                {
                    "datetime": 1739546233,
                    "status": "ok",
                    "name": "Running again",
                    "description": "Service outage"
                }
            ],
            "uptimeRatio": {
                "1": 99.7,
                "7": 100,
                "30": 100,
                "90": 100
            }
        }
    ],
    "categories": [
        {
            "id": "mini-apps",
            "name": "Mini Apps",
            "status": "ok"
        }
    ],
    "uptimeRatio": {
        "1": 98,
        "7": 98.7,
        "30": 99.6,
        "90": 99.9
    },
    "status": "ok"
}
CopyCopied!PreviousUsernamesNextPayment Methods© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 63
SOURCE: https://docs.world.org/mini-apps/reference/payment-methods
CONTENT:
Integrate Payment Methods | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsEnvironment SetupLimitations and ConsiderationsAdditional ResourcesQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalTechnical ReferenceIntegrate Payment Methods
Integrate Apple Pay and Google Pay into your mini-app

Both Apple Pay and Google Pay run directly in the WebView environment of your mini-app, using their respective
JavaScript APIs.
Environment Setup
First, ensure your mini-app has a secure HTTPS environment, as both Apple Pay and Google Pay require it.
Apple PayGoogle PayFor Apple Pay, you must:Register for an Apple Developer accountConfigure your merchant IDRegister your domain with AppleSet up merchant validation on your serverComplete setup guide on Apple's website
Testing
Test your integration thoroughly using test cards and sandbox environments.
Apple PayGoogle PayDevelopment Environment:Use Apple Pay's sandbox environmentTest with Apple's test cardsTest Cards:You can use any valid card number in the sandboxNo actual charges will be processedTesting Checklist:Verify merchant validation worksTest on both iOS devices and Safari on macOSCheck error handlingVerify payment completion flowsYour browser does not support the video tag.Apple Pay integration demo
Limitations and Considerations

Platform Restrictions: Apple Pay only works on iOS/macOS devices with Safari, while Google Pay is primarily for Android
Device Support: Users must have devices that support these payment methods
WebView Context: Some features might behave differently in the mini-app WebView compared to a standard browser

For Apple Pay merchant validation, your server needs to be accessible via HTTPS and properly configured with Apple's
developer portal.
Additional Resources

Apple Pay Demo and Documentation
Google Pay API Documentation
Apple Pay Human Interface Guidelines
Google Pay Web Integration Guide
PreviousStatus PageQuick Actions (Sharing)Quick Actions© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 64
SOURCE: https://docs.world.org/mini-apps/sharing/quick-actions
CONTENT:
Quick Actions (Sharing) | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Quick Actions (Sharing)
What Are Quick Actions?
A Quick Action is a universal deeplink defined by a schema that navigates to a specific path inside your app.
It facilitates direct integrations between mini apps, enabling one app (App A) to use a feature or action of another app (App B) seamlessly.
In short, you can create a quick action for your own mini app to share it with other developers or use other mini app quick actions that will be listed in this page.
If a user clicks on your link and has World App installed, it will automatically open the mini app inside of World
App to the specified path. Otherwise, it will direct them to the app store and prompt them to install World App.
Benefits of Quick Actions

Leverage Expertise: Use other mini apps already working specific features.
Resource & Time Optimization: Focus on your apps core functionalities while outsourcing supplementary features.
Community Growth: Integrating another apps functionality opens opportunities for co-marketing.

How to Make a Quick Action

Create a Universal Link Schema: Define a schema with a custom path that aligns with the functionality you want to provide.

Publish it in our docs for all devs to use: Fill this form for our team to test and publish your quick action on this page.

Urls will follow the schema below.
 https://worldcoin.org/mini-app?app_id={app_id}&path={path}
CopyCopied!
Parameters
Nameapp_idTypestringRequiredREQUIREDDescriptionThe app_id corresponding to your mini app.NamepathTypestringDescriptionShould be the url encoded path where you want to link to inside of your mini appTechnical ReferencePayment MethodsNextUNO Swap© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 65
SOURCE: https://docs.world.org/mini-apps/sharing/uno-qa
CONTENT:
UNO Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapHelper functionEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)UNO Quick Action
UNO is your simple, secure token wallet.
View your token balances and check prices all in one place. Buy, Sell, Swap, or Send tokens in a fun and simple interface.
Uno now supports a Quick Action to deeplink directly to the swap tab, with a specific swap ready to be executed.
ParametersNametabTypestringRequiredREQUIREDDescriptionCurrently only supports "swap"; this allows deep linking to the swap tab.NamefromTokenTypestringDescriptionToken address for the from token.NameamountTypestringDescriptionBase units amount of the from token.NametoTokenTypestringDescriptionToken address for the to token.NamereferrerAppIdTypestringDescriptionWorld Miniapp App id of the referring World Miniapp. When provided, a “Go Back” deeplink button will
appear in the top left of the header that takes the user back to the referring Miniapp.NamereferrerDeeplinkPathTypestringDescriptionDeeplink path for referring World Miniapp Quick Actions. When provided, this path will be added to the
“Go Back” deeplink button so that the referring Miniapp can execute a Quick Action when the user taps
“Go Back” in Uno.
Helper function
const UNO_APP_ID = 'app_a4f7f3e62c1de0b9490a5260cb390b56'

function getUnoDeeplinkUrl({
	fromToken,
	toToken,
	amount,
	referrerAppId,
	referrerDeeplinkPath,
}: {
	fromToken?: string
	toToken?: string
	amount?: string
	referrerAppId?: string
	referrerDeeplinkPath?: string
}) {
	let path = `?tab=swap`
	if (fromToken) {
		path += `&fromToken=${fromToken}`
		if (amount) {
			path += `&amount=${amount}`
		}
	}
	if (toToken) {
		path += `&toToken=${toToken}`
	}
	if (referrerAppId) {
		path += `&referrerAppId=${referrerAppId}`
	}
	if (referrerDeeplinkPath) {
		path += `&referrerDeeplinkPath=${encodeURIComponent(referrerDeeplinkPath)}`
	}
	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${UNO_APP_ID}&path=${encodedPath}`
}

// create a trade for 1.2345 USDC to WETH
console.log(
	getUnoDeeplinkUrl({
		fromToken: '0x79A02482A880bCE3F13e09Da970dC34db4CD24d1',
		amount: '1234500',
		toToken: '0x4200000000000000000000000000000000000006',
	})
)
CopyCopied!
Example output link
https://worldcoin.org/mini-app?app_id=app_a4f7f3e62c1de0b9490a5260cb390b56&path=%3Ftab%3Dswap%26fromToken%3D0x79A02482A880bCE3F13e09Da970dC34db4CD24d1%26amount%3D1234500%26toToken%3D0x4200000000000000000000000000000000000006
CopyCopied!
Appendix
Terminology

fromToken - token that is being swapped away for another token. Other names for this parameter are “sell token”, or “input token”.
toToken - token that is being swapped into for another token. Other names for this parameter are “buy token”, or “output token”.
referrer - In the cases that the UNO Quick Action link is used from a different Miniapp, the referrer is the Miniapp where that link was used.
Specifying the referrerAppId allows UNO to provide a “Go back” to the Miniapp that provided the link to the UNO Quick Action.

Caveats/Warnings Swap will not work if not taken into consideration.

If the user does not have the fromToken (sell token).
Amount should be in the base units of the fromToken.
PreviousQuick ActionsNextEggs Vault Smash© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 66
SOURCE: https://docs.world.org/mini-apps/sharing/eggs-vault-qa
CONTENT:
Eggs Vault Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Eggs Vault Quick Action
Crack your egg daily to earn reward
Eggs Vault now supports a Quick Action to deeplink directly the smash screen to never miss your daily eggs.
ParametersNamecampaignNameTypestringDescriptionLinks to a specific campaign. If you have campaignName then it will go to campaign detail page.
Url follows the schema below. Navigate there to use this Quick Action.
https://worldcoin.org/mini-app?app_id=app_ee968e983074cb090e6f12cd75b63bb3
CopyCopied!PreviousUNO SwapNextEarn WLD Pool© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 67
SOURCE: https://docs.world.org/mini-apps/sharing/earn-wld-qa
CONTENT:
Earn WLD Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Earn WLD Quick Action
Earn high yields with your WLD token. Put your WLD to work by adding liquidity to the markets and earning large rewards from other traders.
Earn WLD now supports a Quick Action to deeplink directly to their staking screen.
ParametersNameapp_idTypestringRequiredREQUIREDDescriptionUnique ID for the Earn WLD mini app.
Url follows the schema below. Navigate there to use this Quick Action.
http://worldcoin.org/mini-app?app_id=app_b0d01dd8f2bdfbff06c9e123de487eb8
CopyCopied!PreviousEggs Vault SmashNextDNA Send & Swap© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 68
SOURCE: https://docs.world.org/mini-apps/sharing/dna-qa
CONTENT:
DNA Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapHelper FunctionReturnsExample UsageGenerated Deeplink URL:NoteSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)DNA Quick Action
Generate deep links to the DNA app for quick actions like Swap and Send.
DNA now supports a Quick Action to deeplink directly
into the wallet interface, allowing users to perform specific actions like sending tokens or swapping assets with predefined parameters.
ParametersNametabTypestringRequiredREQUIREDDescriptionSupports deep linking to the swap and send tabs.NamefromTokenTypestringDescriptionThe contract address of the token being sent (fromToken).NametoTokenTypestringDescriptionThe contract address of the token being received (toToken). This is used in swap actions.NamerecipientAddress or usernameTypestringDescriptionThe recipient’s wallet address or username for sending tokens.NameamountTypestringDescriptionThe amount of the fromToken to be sent, specified in its base unit .NamesourceAppIdTypestringDescriptionThe application ID of the source app initiating the deeplink.NamesourceDeeplinkPathTypestringDescriptionA deeplink path from the source application, which will be URL-encoded.
Helper Function
const DNA_APP_ID = 'app_8e407cfbae7ae51c19b07faff837aeeb'

function getDNADeeplinkUrl({
	tab,
	fromToken,
	toToken,
	recipientAddress,
	amount,
	sourceAppId,
	sourceDeeplinkPath,
}: {
	tab: 'swap' | 'send'
	fromToken?: string
	toToken?: string
	recipientAddress?: string
	amount?: string
	sourceAppId?: string
	sourceDeeplinkPath?: string
}) {
	let path = `/wallet?tab=${tab}`

	if (fromToken) {
		path += `&fromToken=${fromToken}`
		if (amount) {
			path += `&amount=${amount}`
		}
	}

	if (toToken) {
		path += `&toToken=${toToken}`
	}

	if (recipientAddress) {
		path += `&recipientAddress=${recipientAddress}`
	}

	if (sourceAppId) {
		path += `&sourceAppId=${sourceAppId}`
	}

	if (sourceDeeplinkPath) {
		path += `&sourceDeeplinkPath=${encodeURIComponent(sourceDeeplinkPath)}`
	}

	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${DNA_APP_ID}&path=${encodedPath}`
}
CopyCopied!
Returns
A string representing the complete deeplink URL to the DNA application with the specified parameters.
Example Usage
const deeplinkUrl = getDNADeeplinkUrl({
  fromToken: '0x79A02482A880bCE3F13e09Da970dC34db4CD24d1',
  toToken: '0x4200000000000000000000000000000000000006',
  recipientAddress: '0xRecipientAddressHere',
  amount: ‘1235',
  sourceAppId: 'app_a4f7f3e62c1de0b9490a5260cb390b56',
  sourceDeeplinkPath: ‘/path’,
});
console.log(deeplinkUrl);
CopyCopied!
Generated Deeplink URL:
https://worldcoin.org/mini-app?app_id=app_8e407cfbae7ae51c19b07faff837aeeb&path=%2Fwallet%3Ftab%3Dsend%26fromToken%3D0x79A02482A880bCE3F13e09Da970dC34db4CD24d1%26amount%3D1234500%26toToken%3D0x4200000000000000000000000000000000000006%26recipientAddress%3D0xRecipientAddressHere%26sourceAppId%3Dapp_a4f7f3e62c1de0b9490a5260cb390b56%26sourceDeeplinkPath%3D%252Fsome%252Fpath
CopyCopied!
Note

Ensure that the amount is specified in the unit of the fromToken (e.g., wei for Ethereum-based tokens).
The sourceDeeplinkPath is URL-encoded to ensure it is correctly interpreted when the deeplink is accessed.
The DNA_APP_ID should be defined in your environment to match the application ID assigned to your DNA instance.
If the tab is Send, it is necessary/recommended to provide fromToken, amount, and the recipient’s address or username (toToken is not required).
If the tab is Swap, it is necessary/recommended to provide fromToken, toToken, and amount (in base unit).

This function facilitates the creation of deeplink URLs that can be used to direct users seamlessly into specific actions within the DNA application, enhancing the user experience by pre-filling transaction details.PreviousEarn WLD PoolNextSage Support© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 69
SOURCE: https://docs.world.org/mini-apps/sharing/sage-qa
CONTENT:
Sage Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportKey FeaturesGetting StartedApp SettingsApp AnalyticsSageSupport ComponentSupport LinkWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)Sage Quick Action
Sage is an AI chatbot that lets users ask questions and get answers.
Sage Support enables developers to integrate Sage chats seamlessly into their World Mini Apps. Developers get a white label version of Sage that acts as a support assistant for their Mini App using the context they give it.
Key Features

Seamless Integration: Easily embed Sage chats within any World Mini App.
Custom Context Parameters: Tailor Sage's responses based on Mini App specific data.
Logs and Analytics: Track and understand what types of questions your users are asking.

Getting Started
1. Create a Sage Developer project
Go to the Sage Developer dashboard and sign in. Create a new project.
2. Customizing Sage to fit your app
With a project created, head over to the project's settings, this page is accessible by going into: Apps > Your App > Settings. (Navigation is available through the menu bar on the top right or  the top left breadcrumbs)
In this page you can find parameters to fine tune Sage to best interact with your users in the context of your app, a comprehensive description of these parameters is present below.
3. Integrating Sage Support in your app
The final step to integrating Sage Support into your React application is to install and make use of the SageSupport component.
Add the npm package with the command:
npm install sage-support
CopyCopied!
Once the dependency installed, the simplest way to integrate Sage Support is:
import { SageSupport } from 'sage-support';

<SageSupport projectId={YOUR_APP_ID} />
CopyCopied!
Where YOUR_APP_ID is the App ID (number) you can find in the Sage Developer Dashboard (top right).
More configuration options for the component are available below.
4. Sage Support Link
Generate your app's Support Link using the Support Link wizard and use it as the Support URL under Worldcoin Developer > Mini App > Configuration > App Store > Support > Link.
Analytics
Once you've started using Sage Support in your Mini App, analytics are also available in the Sage Developer Dashboard, allowing you to identify the usage of Sage Support in your app and understand how users are using it. You can find more information about analytics below.
This is all you need to get Sage Support working. If you wish to customize it further, or better understand the various parameters continue reading below.

App Settings
Located at Apps > Your App > Settings, the Settings page allows you to fine tune the Sage Support assistant to meet the needs and context of your Mini App.
App Name
This name only lives in the Sage Developer dashboard universe and serves the purpose of differentiating between multiple Sage Support integrations, it's recommended that this field is set accordingly.
App ID
Uniquely identifies your Sage Developer App and is used to link your SageSupport component to the Sage Developer dashboard. This field is automatically generated and cannot be changed.
Introduction Message
Defines the first message to be sent by the Sage assistant once a new chat is created/open by a user. This field is also capable of encompassing a custom variable (%USER%) which Sage will replace by the user's username.
App Description
Provide a solid description about your app and what it focuses on, this field is processed by Sage as an additional context parameter, and is useful to keep the assistant behavior and subject within the landscape of your Mini App.

App Analytics
Located at Apps > Your App > Analytics, the Analytics page allows you to view statistics and analytic data about the usage of Sage Support within your Mini App.
Messages
See how many messages were sent to Sage Support chats from your Mini App in each of the last 7 days.
Users
See how many users interacted with Sage Support chats from your Mini App in each of the last 7 days.
Keywords
Currently not available.
Next Step
Currently not available.
Logs
See how users chat with Sage Support inside your app, this data is shown anonymously and provides the developer with a more in-depth tool to explore the interactions between users and Sage Support.

SageSupport Component
Installation
To use the Sage Support React component you must first install it using npm (or your package manager of choice).
npm install sage-support
CopyCopied!
Basic Usage
From the get go you can use Sage Support by using the basic implementation, the only mandatory parameter to be passed to the component is the projectId. This ID (App ID) is retrieve from the Settings page in the Sage Developer dashboard.
import { SageSupport } from 'sage-support';

<SageSupport projectId={YOUR_APP_ID} />
CopyCopied!
Props & Personalisation
Other props allow you to customize both the aesthetic and behavior of the Sage Support Chat.
NameprojectIdTypenumberRequiredREQUIREDDescriptionLinks your component to your Sage Developer project, used for analytics and behavior.NamereturnURITypestringDescriptionAllows you to make use of the return button on the top left of the Sage Support chat window. The value to be passed to this prop is a quick action URL.NameclassNameTypestringDescriptionAllows you to pass custom CSS classes to affect the fallback default button.NamechildrenTypeReact.ReactNodeDescriptionAllows you to pass a custom React element to replace the default button.

Support Link
You can also integrate Sage Support directly into your World Mini App by using a Support Link. This allows your users to access Sage's AI-powered support without requiring you to install any additional packages or components.
The Support Link is a quick action URL that opens the Sage Support chat interface directly within the World App. When users click on this link, they'll be able to ask questions and get support related to your Mini App.
This link is particularly useful for developers to use Sage as their Mini App's native Support link, available under Worldcoin Developer > Mini App > Configuration > App Store > Support > Link
Base URL & Parameters
The base URL to access a support chat is:
https://worldcoin.org/mini-app?app_id=app_5dee2f19cd6eef599eb6ab275a0a7523&path=/support-chat
This support link, akin to the SageSupport component, accepts and requires some parameters to be passed, in this case URL Query Parameters, for the Support Chat to work like expected.
NamedevProjectIdTypenumberRequiredREQUIREDDescriptionLinks your Support Link to your Sage Developer project, used for analytics and behavior.NamedevReturnURITypestringDescriptionAllows you to make use of the return button on the top left of the Sage Support chat window by passing a Mini App quick atcion URI/URL. Due to some encoding functionalities and implementation caveats, the value to be passed to this parameter has to be formatted accordingly beforehand:

The URL must be submitted to a UTF-8 encoding.

All ampersand characters (such as the one in &path) have to be replaced with the sequence (amps).

To make this process easier, you can make use of the generator below or inside the Sage Developer Dashboard. Any URIs outside of the worldcoin.org/mini-app space are not allowed.
Support Link Generator
Sage Dev Project IDCustom Return URIGenerated LinkPreviousDNA Send & SwapNextWorld Chat© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 70
SOURCE: https://docs.world.org/mini-apps/sharing/world-chat-qa
CONTENT:
World Chat Quick Action | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatHelper functionFurther ReadingSecurityApp Store PolicyPromotionGrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalQuick Actions (Sharing)World Chat Quick Action
World Chat is a messaging platform in the World App ecosystem.
Quick Actions let you link to specific chat features.
Url follows the schema below.
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741
CopyCopied!
ParametersNameusernameTypestringRequiredREQUIREDDescriptionThe username of the recipient you want to chat with. You can resolve a username using the user's wallet
address.NamemessageTypestringDescriptionPredefined message text to include in the draft chat.NamepayTypestringDescriptionWhen included, opens a draft chat with the send payment option pre-selected. You can optionally specify
an amount by using pay=amount where amount is the numeric value in USDC.e.NamerequestTypestringDescriptionWhen included, opens a draft chat with the payment request option pre-selected. You can optionally
specify an amount by using request=amount where amount is the numeric value in USDC.e.
Helper function
const WORLD_CHAT_APP_ID = 'app_e293fcd0565f45ca296aa317212d8741'

function getWorldChatDeeplinkUrl({
	username,
	message,
	pay,
	request,
}: {
	username: string
	message?: string
	pay?: string | number
	request?: string | number
}) {
	let path = `/${username}/draft`

	if (message) {
		path += `?message=${message}`
	} else if (pay !== undefined) {
		if (pay === 'true' || pay === true) {
			path += `?pay`
		} else {
			path += `?pay=${pay}` // Pay with amount
		}
	} else if (request !== undefined) {
		if (request === 'true' || request === true) {
			path += `?request`
		} else {
			path += `?request=${request}` // Request with amount
		}
	}

	const encodedPath = encodeURIComponent(path)
	return `https://worldcoin.org/mini-app?app_id=${WORLD_CHAT_APP_ID}&path=${encodedPath}`
}

// Create a chat with predefined message
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		message: 'Hello from my mini app!',
	})
)

// Create a chat with send payment option
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		pay: 'true',
	})
)

// Create a chat with send payment option and amount
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		pay: 5.25,
	})
)

// Create a chat with payment request option
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		request: 'true',
	})
)

// Create a chat with payment request option and amount
console.log(
	getWorldChatDeeplinkUrl({
		username: 'johndoe',
		request: 10,
	})
)
CopyCopied!
Example output links
// Message draft
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Fmessage%3DHello

// Payment draft with amount
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Fpay%3D5.25

// Request draft with amount
https://worldcoin.org/mini-app?app_id=app_e293fcd0565f45ca296aa317212d8741&path=%2Fjohndoe%2Fdraft%3Frequest%3D10
CopyCopied!
Appendix
Caveats/Warnings

The username must be a valid World ID username.
Only one quick action type (message, pay, or request) can be used at a time.
If the recipient does not exist, the app will show an appropriate error message.
Only USDC.e & WLD are supported for payments.
Currency amounts should be specified as decimal numbers (e.g., 5.25 for 5.25 USDC.e).
PreviousSage SupportFurther ReadingSecurity© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

DOCUMENT 71
SOURCE: https://docs.world.org/mini-apps/more/grants
CONTENT:
Grants | World DocsFind something...KExplore AppsDeveloper PortalHomeMini AppsWorld IDWorld ChainIntroductionWhat are Mini Apps?Quick StartInstalling MiniKitCommandsResponsesTestingApp StoreDesign StandardsGuidelinesUI KitCommandsVerifyPayWallet AuthConnect WalletSend TransactionSign MessageSign Typed DataShare ContactsSend NotificationsGet PermissionsSend Haptic FeedbackTechnical ReferenceAPI ReferenceErrorsAddress BookUsernamesStatus PagePayment MethodsQuick Actions (Sharing)Quick ActionsUNO SwapEggs Vault SmashEarn WLD PoolDNA Send & SwapSage SupportWorld ChatFurther ReadingSecurityApp Store PolicyPromotionGrantsFast Grants ProgramFoundation GrantsTroubleshootingWebview SpecificationsReleasesDeveloper PortalFurther ReadingGrants
Fast Grants Program
The Fast Grants program offers grants in the range of $1-5k and are available
to US citizens as well. We aim to provide a decision within 48 hours of application. These grants are aimed to help developers build their MVPs.
Apply Here: Fast Grants Program
Foundation Grants
In addition to Fast Grants you can apply for Foundation Grants. These grants are larger and have a formal review process.
The Foundation is dedicating 50M WLD to support novel mini apps.
It is encouraged to first have an MVP of your product before applying for a Foundation Grant.
Receiving a Fast Grant does not disqualify you from applying for a Foundation Grant, in fact it is encouraged to apply for a Fast Grant first.
More Here: Foundation GrantsPreviousPromotionNextTroubleshooting© 2025 World FoundationFollow us on TwitterFollow us on GitHubJoin our Discord server

================================================================================

